openapi: 3.0.1
info:
  title: User API for Mobile Money Portal
  description: This describes the User Middleware API which would be called from Portal UI
  version: "1.0"
servers:
  - url: "https:/sandbox.mobilemoneyapi.io/portal/users/v1"
    description: User API v1
paths:
  /register:
    post:
      summary: "Creates a developer account for portal"
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'

      responses:
        "201":
          description: "Created response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
  /{username}:
    get:
      summary: "Get User By Id"
      operationId: getUserById
      parameters:
      - name: username
        in: path
        description: "the username"
        required: true
        schema:
          type: string

      responses:
        "200":
          description: "User Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Bad Request. i.e. when there is no bank account number in the request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
      security:
        - bearerAuth: []
    put:
      summary: "Update User By Id"
      operationId: updateUserById
      parameters:
      - name: username
        in: path
        description: "the username"
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'

      responses:
        "200":
          description: "User Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Bad Request. i.e. when there is no bank account number in the request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
      security:
        - bearerAuth: []
    delete:
      summary: "Delete User By Id"
      operationId: deleteUserById
      parameters:
      - name: username
        in: path
        description: "the username"
        required: true
        schema:
          type: string

      responses:
        "200":
          description: "User Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Bad Request. i.e. when there is no bank account number in the request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
      security:
        - bearerAuth: []
  /{username}/reset-password:
    put:
      summary: "Update Password Request"
      operationId: resetPassword
      parameters:
      - name: username
        in: path
        description: "the username"
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
      security:
        - bearerAuth: []
  /login:
    post:
      summary: "User Login Request"
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      responses:
        "201":
          description: "Login response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
  /forgot-password:
    post:
      summary: "Forgot Password Request"
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'

      responses:
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
  /logout:
    post:
      summary: "User Logout Request"
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'

      responses:
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorBasic"
      security:
        - bearerAuth: []



components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:


    # Wrapper request object for Bank Account creation
    UserRequest:
      title: The wrapper request object for User Account
      type: object
      required:
       - username
       - email
       - firstName
       - lastName
      properties:
        username:
          type: string
          description: Unique username.
        email:
          type: string
          description: Email id of the user
        firstName:
          type: string
        lastName:
          type: string
    UserUpdateRequest:
      title: The wrapper request object for User Account
      type: object
      required:
       - username
       - password
       - email
       - firstName
       - lastName
      properties:
        username:
          type: string
          description: Unique username.
        email:
          type: string
          description: Email id of the user
        password:
          type: string
          description: Password id of the user. Will be ignored if empty.
        firstName:
          type: string
        lastName:
          type: string

    LoginRequest:
      title: The wrapper request object for User Login
      type: object
      required:
       - userId
       - password

      properties:
        userId:
          type: string
          description: Username or Email Id
        password:
          type: string
          description: Password
    LoginResponse:
      title: The wrapper response object for User Login
      type: object
      properties:
        access_token:
          type: string
          description: JWT Token. To be used in further API calls.
        token_type:
          type: string
          description: Allowed Value - Bearer
        expires_in:
          type: string
          description: Expiry of the Token
    ForgotPasswordRequest:
      title: The wrapper request object for Forgot Password
      type: object
      required:
       - userId
      properties:
        userId:
          type: string
          description: Username or Email Id
    UpdatePasswordRequest:
      title: The wrapper request object for Update Password
      type: object
      required:
       - newPassword
      properties:
        newPassword:
          type: string
          description: New password of the user

    # wrapper object of 201 Create
    UserResponse:
      title: "User Response"
      description: "This wraps the User response"
      type: object
      properties:
        username:
          type: string
          description: Unique username of uer.
        email:
          type: string
          description: Email id of the user
        firstName:
          type: string
        lastName:
          type: string

    # wrapper abstract object of error
    ErrorBasic:
      title: Generic error
      description: Primary error object with minimum properties
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
    LogoutRequest:
      title: The wrapper request object for User Login
      type: object
      required:
       - userId

      properties:
        userId:
          type: string
          description: Username or Email Id





