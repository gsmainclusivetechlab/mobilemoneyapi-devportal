(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var i,r,s=n[0],c=n[1],d=n[2],u=0,h=[];u<s.length;u++)r=s[u],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&h.push(a[r][0]),a[r]=0;for(i in c)Object.prototype.hasOwnProperty.call(c,i)&&(e[i]=c[i]);for(l&&l(n);h.length;)h.shift()();return o.push.apply(o,d||[]),t()}function t(){for(var e,n=0;n<o.length;n++){for(var t=o[n],i=!0,s=1;s<t.length;s++){var c=t[s];0!==a[c]&&(i=!1)}i&&(o.splice(n--,1),e=r(r.s=t[0]))}return e}var i={},a={5:0},o=[];function r(n){if(i[n])return i[n].exports;var t=i[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.e=function(e){var n=[],t=a[e];if(0!==t)if(t)n.push(t[2]);else{var i=new Promise((function(n,i){t=a[e]=[n,i]}));n.push(t[2]=i);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,r.nc&&s.setAttribute("nonce",r.nc),s.src=function(e){return r.p+"assets/js/"+({}[e]||e)+"."+{1:"6d86599e",2:"4a52cfdc",3:"f9aa4019",4:"31c0d910",6:"9b77c7ad",7:"6217fd62",8:"ae676f4b",9:"1bb30b79",10:"971f1ab6",11:"72f2bc71",12:"bda725ec",13:"08f3019b",14:"ab1fe017",15:"3fd5effd",16:"90cfb42d",17:"240c8734",18:"36089cda",19:"1a8a0d01",20:"66f5dd05",21:"3411442f",22:"d18508e0",23:"b86c457d",24:"12550796",25:"c0371697",26:"758d6bec",27:"a13c3aa6",28:"c8be4e3f",29:"e70dff8f",30:"763814b3",31:"03c4c813",32:"a538ba6f",33:"50c6b974",34:"dc6e1bb8",35:"8dc5f8ac",36:"89df3530",37:"e5920f08",38:"f35c8970",39:"94217612",40:"2a4ad01f",41:"a11aaa44",42:"50f64075",43:"e185a952",44:"5219deae",45:"05cbc673",46:"89b1afa5",47:"c3d35c1b",48:"4084497c",49:"2a0caf27",50:"aca252e0",51:"47b0556e",52:"75e4842d",53:"17d6e412",54:"ca6aeff8",55:"c1da1dbd",56:"b0bd59da",57:"258d0d4a",58:"8275033b",59:"59c626fe",60:"1570aa2e",61:"ef9bd0a5",62:"faff6f54",63:"6e91d6d1",64:"93f0bc4e",65:"bb4c45bd",66:"d130c590",67:"64d028fa",68:"0ead708b",69:"e6d20d48",70:"542d0e13",71:"13575bf8",72:"c3997e92",73:"d6f37e61",74:"1be23233",75:"b941240c",76:"9b28931f",77:"21d463d4",78:"0ca601e8",79:"5a695aa2",80:"0daaa9b1",81:"7f8cb7df",82:"9026b0d1",83:"0366fd8f",84:"0551840c",85:"f70d25fe",86:"6c76ab34",87:"584a61e1",88:"c646fe47",89:"311c0525",90:"589ffde9",91:"9218b5be",92:"45a2b968",93:"79c7100c",94:"471ce7ee",95:"7d281b41",96:"a4d56ae7",97:"11c93674",98:"b1e6b9dc",99:"654a80d8",100:"4a628a89",101:"330d7551",102:"f70a68db",103:"5fef3d09",104:"4cad4169",105:"fd7110c3",106:"ec38062e",107:"edb30909",108:"75b023af",109:"4911a8ea",110:"d00c6c87",111:"86763f99",112:"fbf4c30c",113:"d291f774",114:"10437a20",115:"c15baec8",116:"94658fc0",117:"3972b1a8",118:"32d30ea1",119:"6fabf1f3",120:"1a610fb6",121:"a6567081",122:"511d21bf",123:"cf35b936",124:"a3e18a3e",125:"d81e74b6",126:"ef1e65b6",127:"e3bdb662",128:"eb3bb6f4",129:"64b5cde7",130:"08471946",131:"bdcfb293",132:"2151faa9",133:"ecfc9b31",134:"ac850b69",135:"af301177",136:"f3ff56ac",137:"bbc5a335",138:"672a0b39",139:"dfbb7f05",140:"15ee2658",141:"a856e7c1",142:"2e097887",143:"19f9f189",144:"bf648274",145:"988dc9ad",146:"4af03d93",147:"7091b7fa",148:"c957645b",149:"e27ac4f8",150:"66366963",151:"7296e277",152:"6e9a41b2",153:"05dd966a",154:"281bb3fc",155:"2d718621",156:"9967c5af",157:"81cb4c98",158:"17f47704",159:"877aee3c"}[e]+".js"}(e);var c=new Error;o=function(n){s.onerror=s.onload=null,clearTimeout(d);var t=a[e];if(0!==t){if(t){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;c.message="Loading chunk "+e+" failed.\n("+i+": "+o+")",c.name="ChunkLoadError",c.type=i,c.request=o,t[1](c)}a[e]=void 0}};var d=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(n)},r.m=e,r.c=i,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)r.d(t,i,function(n){return e[n]}.bind(null,i));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/",r.oe=function(e){throw console.error(e),e};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=n,s=s.slice();for(var d=0;d<s.length;d++)n(s[d]);var l=c;o.push([231,0]),t()}([function(e,n,t){"use strict";t.r(n);var i={components:{Footer:t(203).a},computed:{layout:function(){return this.$page.path?this.$frontmatter.layout?this.$frontmatter.layout:"Layout":"NotFound"}}},a=t(20),o=Object(a.a)(i,(function(){var e=this.$createElement,n=this._self._c||e;return n("div",{attrs:{id:"global-layout"}},[n(this.layout,{tag:"component"}),this._v(" "),n("Footer")],1)}),[],!1,null,null,null);n.default=o.exports},function(e,n,t){"use strict";t.r(n);
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
var i=Object.freeze({});function a(e){return null==e}function o(e){return null!=e}function r(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return null!==e&&"object"==typeof e}var d=Object.prototype.toString;function l(e){return"[object Object]"===d.call(e)}function u(e){return"[object RegExp]"===d.call(e)}function h(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function p(e){return o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function f(e){return null==e?"":Array.isArray(e)||l(e)&&e.toString===d?JSON.stringify(e,null,2):String(e)}function m(e){var n=parseFloat(e);return isNaN(n)?e:n}function b(e,n){for(var t=Object.create(null),i=e.split(","),a=0;a<i.length;a++)t[i[a]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function g(e,n){if(e.length){var t=e.indexOf(n);if(t>-1)return e.splice(t,1)}}var v=Object.prototype.hasOwnProperty;function w(e,n){return v.call(e,n)}function P(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var T=/-(\w)/g,A=P((function(e){return e.replace(T,(function(e,n){return n?n.toUpperCase():""}))})),I=P((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),q=/\B([A-Z])/g,S=P((function(e){return e.replace(q,"-$1").toLowerCase()}));var k=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var i=arguments.length;return i?i>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function M(e,n){n=n||0;for(var t=e.length-n,i=new Array(t);t--;)i[t]=e[t+n];return i}function C(e,n){for(var t in n)e[t]=n[t];return e}function O(e){for(var n={},t=0;t<e.length;t++)e[t]&&C(n,e[t]);return n}function j(e,n,t){}var x=function(e,n,t){return!1},R=function(e){return e};function D(e,n){if(e===n)return!0;var t=c(e),i=c(n);if(!t||!i)return!t&&!i&&String(e)===String(n);try{var a=Array.isArray(e),o=Array.isArray(n);if(a&&o)return e.length===n.length&&e.every((function(e,t){return D(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(a||o)return!1;var r=Object.keys(e),s=Object.keys(n);return r.length===s.length&&r.every((function(t){return D(e[t],n[t])}))}catch(e){return!1}}function E(e,n){for(var t=0;t<e.length;t++)if(D(e[t],n))return t;return-1}function F(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}var N=["component","directive","filter"],B=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:x,isReservedAttr:x,isUnknownElement:x,getTagNamespace:j,parsePlatformTagName:R,mustUseProp:x,async:!0,_lifecycleHooks:B},L=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function z(e,n,t,i){Object.defineProperty(e,n,{value:t,enumerable:!!i,writable:!0,configurable:!0})}var H=new RegExp("[^"+L.source+".$_\\d]");var _,G="__proto__"in{},V="undefined"!=typeof window,$="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=$&&WXEnvironment.platform.toLowerCase(),X=V&&window.navigator.userAgent.toLowerCase(),J=X&&/msie|trident/.test(X),Y=X&&X.indexOf("msie 9.0")>0,Q=X&&X.indexOf("edge/")>0,W=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),Z=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),ee={}.watch,ne=!1;if(V)try{var te={};Object.defineProperty(te,"passive",{get:function(){ne=!0}}),window.addEventListener("test-passive",null,te)}catch(e){}var ie=function(){return void 0===_&&(_=!V&&!$&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),_},ae=V&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function oe(e){return"function"==typeof e&&/native code/.test(e.toString())}var re,se="undefined"!=typeof Symbol&&oe(Symbol)&&"undefined"!=typeof Reflect&&oe(Reflect.ownKeys);re="undefined"!=typeof Set&&oe(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=j,de=0,le=function(){this.id=de++,this.subs=[]};le.prototype.addSub=function(e){this.subs.push(e)},le.prototype.removeSub=function(e){g(this.subs,e)},le.prototype.depend=function(){le.target&&le.target.addDep(this)},le.prototype.notify=function(){var e=this.subs.slice();for(var n=0,t=e.length;n<t;n++)e[n].update()},le.target=null;var ue=[];function he(e){ue.push(e),le.target=e}function pe(){ue.pop(),le.target=ue[ue.length-1]}var fe=function(e,n,t,i,a,o,r,s){this.tag=e,this.data=n,this.children=t,this.text=i,this.elm=a,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},me={child:{configurable:!0}};me.child.get=function(){return this.componentInstance},Object.defineProperties(fe.prototype,me);var be=function(e){void 0===e&&(e="");var n=new fe;return n.text=e,n.isComment=!0,n};function ye(e){return new fe(void 0,void 0,void 0,String(e))}function ge(e){var n=new fe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ve=Array.prototype,we=Object.create(ve);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=ve[e];z(we,e,(function(){for(var t=[],i=arguments.length;i--;)t[i]=arguments[i];var a,o=n.apply(this,t),r=this.__ob__;switch(e){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&r.observeArray(a),r.dep.notify(),o}))}));var Pe=Object.getOwnPropertyNames(we),Te=!0;function Ae(e){Te=e}var Ie=function(e){this.value=e,this.dep=new le,this.vmCount=0,z(e,"__ob__",this),Array.isArray(e)?(G?function(e,n){e.__proto__=n}(e,we):function(e,n,t){for(var i=0,a=t.length;i<a;i++){var o=t[i];z(e,o,n[o])}}(e,we,Pe),this.observeArray(e)):this.walk(e)};function qe(e,n){var t;if(c(e)&&!(e instanceof fe))return w(e,"__ob__")&&e.__ob__ instanceof Ie?t=e.__ob__:Te&&!ie()&&(Array.isArray(e)||l(e))&&Object.isExtensible(e)&&!e._isVue&&(t=new Ie(e)),n&&t&&t.vmCount++,t}function Se(e,n,t,i,a){var o=new le,r=Object.getOwnPropertyDescriptor(e,n);if(!r||!1!==r.configurable){var s=r&&r.get,c=r&&r.set;s&&!c||2!==arguments.length||(t=e[n]);var d=!a&&qe(t);Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=s?s.call(e):t;return le.target&&(o.depend(),d&&(d.dep.depend(),Array.isArray(n)&&Ce(n))),n},set:function(n){var i=s?s.call(e):t;n===i||n!=n&&i!=i||s&&!c||(c?c.call(e,n):t=n,d=!a&&qe(n),o.notify())}})}}function ke(e,n,t){if(Array.isArray(e)&&h(n))return e.length=Math.max(e.length,n),e.splice(n,1,t),t;if(n in e&&!(n in Object.prototype))return e[n]=t,t;var i=e.__ob__;return e._isVue||i&&i.vmCount?t:i?(Se(i.value,n,t),i.dep.notify(),t):(e[n]=t,t)}function Me(e,n){if(Array.isArray(e)&&h(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||w(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ce(e){for(var n=void 0,t=0,i=e.length;t<i;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&Ce(n)}Ie.prototype.walk=function(e){for(var n=Object.keys(e),t=0;t<n.length;t++)Se(e,n[t])},Ie.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)qe(e[n])};var Oe=U.optionMergeStrategies;function je(e,n){if(!n)return e;for(var t,i,a,o=se?Reflect.ownKeys(n):Object.keys(n),r=0;r<o.length;r++)"__ob__"!==(t=o[r])&&(i=e[t],a=n[t],w(e,t)?i!==a&&l(i)&&l(a)&&je(i,a):ke(e,t,a));return e}function xe(e,n,t){return t?function(){var i="function"==typeof n?n.call(t,t):n,a="function"==typeof e?e.call(t,t):e;return i?je(i,a):a}:n?e?function(){return je("function"==typeof n?n.call(this,this):n,"function"==typeof e?e.call(this,this):e)}:n:e}function Re(e,n){var t=n?e?e.concat(n):Array.isArray(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function De(e,n,t,i){var a=Object.create(e||null);return n?C(a,n):a}Oe.data=function(e,n,t){return t?xe(e,n,t):n&&"function"!=typeof n?e:xe(e,n)},B.forEach((function(e){Oe[e]=Re})),N.forEach((function(e){Oe[e+"s"]=De})),Oe.watch=function(e,n,t,i){if(e===ee&&(e=void 0),n===ee&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var a={};for(var o in C(a,e),n){var r=a[o],s=n[o];r&&!Array.isArray(r)&&(r=[r]),a[o]=r?r.concat(s):Array.isArray(s)?s:[s]}return a},Oe.props=Oe.methods=Oe.inject=Oe.computed=function(e,n,t,i){if(!e)return n;var a=Object.create(null);return C(a,e),n&&C(a,n),a},Oe.provide=xe;var Ee=function(e,n){return void 0===n?e:n};function Fe(e,n,t){if("function"==typeof n&&(n=n.options),function(e,n){var t=e.props;if(t){var i,a,o={};if(Array.isArray(t))for(i=t.length;i--;)"string"==typeof(a=t[i])&&(o[A(a)]={type:null});else if(l(t))for(var r in t)a=t[r],o[A(r)]=l(a)?a:{type:a};else 0;e.props=o}}(n),function(e,n){var t=e.inject;if(t){var i=e.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)i[t[a]]={from:t[a]};else if(l(t))for(var o in t){var r=t[o];i[o]=l(r)?C({from:o},r):{from:r}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var i=n[t];"function"==typeof i&&(n[t]={bind:i,update:i})}}(n),!n._base&&(n.extends&&(e=Fe(e,n.extends,t)),n.mixins))for(var i=0,a=n.mixins.length;i<a;i++)e=Fe(e,n.mixins[i],t);var o,r={};for(o in e)s(o);for(o in n)w(e,o)||s(o);function s(i){var a=Oe[i]||Ee;r[i]=a(e[i],n[i],t,i)}return r}function Ne(e,n,t,i){if("string"==typeof t){var a=e[n];if(w(a,t))return a[t];var o=A(t);if(w(a,o))return a[o];var r=I(o);return w(a,r)?a[r]:a[t]||a[o]||a[r]}}function Be(e,n,t,i){var a=n[e],o=!w(t,e),r=t[e],s=ze(Boolean,a.type);if(s>-1)if(o&&!w(a,"default"))r=!1;else if(""===r||r===S(e)){var c=ze(String,a.type);(c<0||s<c)&&(r=!0)}if(void 0===r){r=function(e,n,t){if(!w(n,"default"))return;var i=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return"function"==typeof i&&"Function"!==Ue(n.type)?i.call(e):i}(i,a,e);var d=Te;Ae(!0),qe(r),Ae(d)}return r}function Ue(e){var n=e&&e.toString().match(/^\s*function (\w+)/);return n?n[1]:""}function Le(e,n){return Ue(e)===Ue(n)}function ze(e,n){if(!Array.isArray(n))return Le(n,e)?0:-1;for(var t=0,i=n.length;t<i;t++)if(Le(n[t],e))return t;return-1}function He(e,n,t){he();try{if(n)for(var i=n;i=i.$parent;){var a=i.$options.errorCaptured;if(a)for(var o=0;o<a.length;o++)try{if(!1===a[o].call(i,e,n,t))return}catch(e){Ge(e,i,"errorCaptured hook")}}Ge(e,n,t)}finally{pe()}}function _e(e,n,t,i,a){var o;try{(o=t?e.apply(n,t):e.call(n))&&!o._isVue&&p(o)&&!o._handled&&(o.catch((function(e){return He(e,i,a+" (Promise/async)")})),o._handled=!0)}catch(e){He(e,i,a)}return o}function Ge(e,n,t){if(U.errorHandler)try{return U.errorHandler.call(null,e,n,t)}catch(n){n!==e&&Ve(n,null,"config.errorHandler")}Ve(e,n,t)}function Ve(e,n,t){if(!V&&!$||"undefined"==typeof console)throw e;console.error(e)}var $e,Ke=!1,Xe=[],Je=!1;function Ye(){Je=!1;var e=Xe.slice(0);Xe.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&oe(Promise)){var Qe=Promise.resolve();$e=function(){Qe.then(Ye),W&&setTimeout(j)},Ke=!0}else if(J||"undefined"==typeof MutationObserver||!oe(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())$e="undefined"!=typeof setImmediate&&oe(setImmediate)?function(){setImmediate(Ye)}:function(){setTimeout(Ye,0)};else{var We=1,Ze=new MutationObserver(Ye),en=document.createTextNode(String(We));Ze.observe(en,{characterData:!0}),$e=function(){We=(We+1)%2,en.data=String(We)},Ke=!0}function nn(e,n){var t;if(Xe.push((function(){if(e)try{e.call(n)}catch(e){He(e,n,"nextTick")}else t&&t(n)})),Je||(Je=!0,$e()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}var tn=new re;function an(e){!function e(n,t){var i,a,o=Array.isArray(n);if(!o&&!c(n)||Object.isFrozen(n)||n instanceof fe)return;if(n.__ob__){var r=n.__ob__.dep.id;if(t.has(r))return;t.add(r)}if(o)for(i=n.length;i--;)e(n[i],t);else for(a=Object.keys(n),i=a.length;i--;)e(n[a[i]],t)}(e,tn),tn.clear()}var on=P((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),i="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=i?e.slice(1):e,once:t,capture:i,passive:n}}));function rn(e,n){function t(){var e=arguments,i=t.fns;if(!Array.isArray(i))return _e(i,null,arguments,n,"v-on handler");for(var a=i.slice(),o=0;o<a.length;o++)_e(a[o],null,e,n,"v-on handler")}return t.fns=e,t}function sn(e,n,t,i,o,s){var c,d,l,u;for(c in e)d=e[c],l=n[c],u=on(c),a(d)||(a(l)?(a(d.fns)&&(d=e[c]=rn(d,s)),r(u.once)&&(d=e[c]=o(u.name,d,u.capture)),t(u.name,d,u.capture,u.passive,u.params)):d!==l&&(l.fns=d,e[c]=l));for(c in n)a(e[c])&&i((u=on(c)).name,n[c],u.capture)}function cn(e,n,t){var i;e instanceof fe&&(e=e.data.hook||(e.data.hook={}));var s=e[n];function c(){t.apply(this,arguments),g(i.fns,c)}a(s)?i=rn([c]):o(s.fns)&&r(s.merged)?(i=s).fns.push(c):i=rn([s,c]),i.merged=!0,e[n]=i}function dn(e,n,t,i,a){if(o(n)){if(w(n,t))return e[t]=n[t],a||delete n[t],!0;if(w(n,i))return e[t]=n[i],a||delete n[i],!0}return!1}function ln(e){return s(e)?[ye(e)]:Array.isArray(e)?function e(n,t){var i,c,d,l,u=[];for(i=0;i<n.length;i++)a(c=n[i])||"boolean"==typeof c||(d=u.length-1,l=u[d],Array.isArray(c)?c.length>0&&(un((c=e(c,(t||"")+"_"+i))[0])&&un(l)&&(u[d]=ye(l.text+c[0].text),c.shift()),u.push.apply(u,c)):s(c)?un(l)?u[d]=ye(l.text+c):""!==c&&u.push(ye(c)):un(c)&&un(l)?u[d]=ye(l.text+c.text):(r(n._isVList)&&o(c.tag)&&a(c.key)&&o(t)&&(c.key="__vlist"+t+"_"+i+"__"),u.push(c)));return u}(e):void 0}function un(e){return o(e)&&o(e.text)&&!1===e.isComment}function hn(e,n){if(e){for(var t=Object.create(null),i=se?Reflect.ownKeys(e):Object.keys(e),a=0;a<i.length;a++){var o=i[a];if("__ob__"!==o){for(var r=e[o].from,s=n;s;){if(s._provided&&w(s._provided,r)){t[o]=s._provided[r];break}s=s.$parent}if(!s)if("default"in e[o]){var c=e[o].default;t[o]="function"==typeof c?c.call(n):c}else 0}}return t}}function pn(e,n){if(!e||!e.length)return{};for(var t={},i=0,a=e.length;i<a;i++){var o=e[i],r=o.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,o.context!==n&&o.fnContext!==n||!r||null==r.slot)(t.default||(t.default=[])).push(o);else{var s=r.slot,c=t[s]||(t[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var d in t)t[d].every(fn)&&delete t[d];return t}function fn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function mn(e,n,t){var a,o=Object.keys(n).length>0,r=e?!!e.$stable:!o,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(r&&t&&t!==i&&s===t.$key&&!o&&!t.$hasNormal)return t;for(var c in a={},e)e[c]&&"$"!==c[0]&&(a[c]=bn(n,c,e[c]))}else a={};for(var d in n)d in a||(a[d]=yn(n,d));return e&&Object.isExtensible(e)&&(e._normalized=a),z(a,"$stable",r),z(a,"$key",s),z(a,"$hasNormal",o),a}function bn(e,n,t){var i=function(){var e=arguments.length?t.apply(null,arguments):t({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:ln(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return t.proxy&&Object.defineProperty(e,n,{get:i,enumerable:!0,configurable:!0}),i}function yn(e,n){return function(){return e[n]}}function gn(e,n){var t,i,a,r,s;if(Array.isArray(e)||"string"==typeof e)for(t=new Array(e.length),i=0,a=e.length;i<a;i++)t[i]=n(e[i],i);else if("number"==typeof e)for(t=new Array(e),i=0;i<e;i++)t[i]=n(i+1,i);else if(c(e))if(se&&e[Symbol.iterator]){t=[];for(var d=e[Symbol.iterator](),l=d.next();!l.done;)t.push(n(l.value,t.length)),l=d.next()}else for(r=Object.keys(e),t=new Array(r.length),i=0,a=r.length;i<a;i++)s=r[i],t[i]=n(e[s],s,i);return o(t)||(t=[]),t._isVList=!0,t}function vn(e,n,t,i){var a,o=this.$scopedSlots[e];o?(t=t||{},i&&(t=C(C({},i),t)),a=o(t)||n):a=this.$slots[e]||n;var r=t&&t.slot;return r?this.$createElement("template",{slot:r},a):a}function wn(e){return Ne(this.$options,"filters",e)||R}function Pn(e,n){return Array.isArray(e)?-1===e.indexOf(n):e!==n}function Tn(e,n,t,i,a){var o=U.keyCodes[n]||t;return a&&i&&!U.keyCodes[n]?Pn(a,i):o?Pn(o,e):i?S(i)!==n:void 0}function An(e,n,t,i,a){if(t)if(c(t)){var o;Array.isArray(t)&&(t=O(t));var r=function(r){if("class"===r||"style"===r||y(r))o=e;else{var s=e.attrs&&e.attrs.type;o=i||U.mustUseProp(n,s,r)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=A(r),d=S(r);c in o||d in o||(o[r]=t[r],a&&((e.on||(e.on={}))["update:"+r]=function(e){t[r]=e}))};for(var s in t)r(s)}else;return e}function In(e,n){var t=this._staticTrees||(this._staticTrees=[]),i=t[e];return i&&!n||Sn(i=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),i}function qn(e,n,t){return Sn(e,"__once__"+n+(t?"_"+t:""),!0),e}function Sn(e,n,t){if(Array.isArray(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&kn(e[i],n+"_"+i,t);else kn(e,n,t)}function kn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function Mn(e,n){if(n)if(l(n)){var t=e.on=e.on?C({},e.on):{};for(var i in n){var a=t[i],o=n[i];t[i]=a?[].concat(a,o):o}}else;return e}function Cn(e,n,t,i){n=n||{$stable:!t};for(var a=0;a<e.length;a++){var o=e[a];Array.isArray(o)?Cn(o,n,t):o&&(o.proxy&&(o.fn.proxy=!0),n[o.key]=o.fn)}return i&&(n.$key=i),n}function On(e,n){for(var t=0;t<n.length;t+=2){var i=n[t];"string"==typeof i&&i&&(e[n[t]]=n[t+1])}return e}function jn(e,n){return"string"==typeof e?n+e:e}function xn(e){e._o=qn,e._n=m,e._s=f,e._l=gn,e._t=vn,e._q=D,e._i=E,e._m=In,e._f=wn,e._k=Tn,e._b=An,e._v=ye,e._e=be,e._u=Cn,e._g=Mn,e._d=On,e._p=jn}function Rn(e,n,t,a,o){var s,c=this,d=o.options;w(a,"_uid")?(s=Object.create(a))._original=a:(s=a,a=a._original);var l=r(d._compiled),u=!l;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||i,this.injections=hn(d.inject,a),this.slots=function(){return c.$slots||mn(e.scopedSlots,c.$slots=pn(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return mn(e.scopedSlots,this.slots())}}),l&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=mn(e.scopedSlots,this.$slots)),d._scopeId?this._c=function(e,n,t,i){var o=Ln(s,e,n,t,i,u);return o&&!Array.isArray(o)&&(o.fnScopeId=d._scopeId,o.fnContext=a),o}:this._c=function(e,n,t,i){return Ln(s,e,n,t,i,u)}}function Dn(e,n,t,i,a){var o=ge(e);return o.fnContext=t,o.fnOptions=i,n.slot&&((o.data||(o.data={})).slot=n.slot),o}function En(e,n){for(var t in n)e[A(t)]=n[t]}xn(Rn.prototype);var Fn={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;Fn.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},i=e.data.inlineTemplate;o(i)&&(t.render=i.render,t.staticRenderFns=i.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Yn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,a,o){0;var r=a.data.scopedSlots,s=e.$scopedSlots,c=!!(r&&!r.$stable||s!==i&&!s.$stable||r&&e.$scopedSlots.$key!==r.$key),d=!!(o||e.$options._renderChildren||c);e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a);if(e.$options._renderChildren=o,e.$attrs=a.data.attrs||i,e.$listeners=t||i,n&&e.$options.props){Ae(!1);for(var l=e._props,u=e.$options._propKeys||[],h=0;h<u.length;h++){var p=u[h],f=e.$options.props;l[p]=Be(p,f,n,e)}Ae(!0),e.$options.propsData=n}t=t||i;var m=e.$options._parentListeners;e.$options._parentListeners=t,Jn(e,t,m),d&&(e.$slots=pn(o,a.context),e.$forceUpdate());0}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,i=e.componentInstance;i._isMounted||(i._isMounted=!0,et(i,"mounted")),e.data.keepAlive&&(t._isMounted?((n=i)._inactive=!1,tt.push(n)):Zn(i,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(t&&(n._directInactive=!0,Wn(n)))return;if(!n._inactive){n._inactive=!0;for(var i=0;i<n.$children.length;i++)e(n.$children[i]);et(n,"deactivated")}}(n,!0):n.$destroy())}},Nn=Object.keys(Fn);function Bn(e,n,t,s,d){if(!a(e)){var l=t.$options._base;if(c(e)&&(e=l.extend(e)),"function"==typeof e){var u;if(a(e.cid)&&void 0===(e=function(e,n){if(r(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var t=Hn;t&&o(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t);if(r(e.loading)&&o(e.loadingComp))return e.loadingComp;if(t&&!o(e.owners)){var i=e.owners=[t],s=!0,d=null,l=null;t.$on("hook:destroyed",(function(){return g(i,t)}));var u=function(e){for(var n=0,t=i.length;n<t;n++)i[n].$forceUpdate();e&&(i.length=0,null!==d&&(clearTimeout(d),d=null),null!==l&&(clearTimeout(l),l=null))},h=F((function(t){e.resolved=_n(t,n),s?i.length=0:u(!0)})),f=F((function(n){o(e.errorComp)&&(e.error=!0,u(!0))})),m=e(h,f);return c(m)&&(p(m)?a(e.resolved)&&m.then(h,f):p(m.component)&&(m.component.then(h,f),o(m.error)&&(e.errorComp=_n(m.error,n)),o(m.loading)&&(e.loadingComp=_n(m.loading,n),0===m.delay?e.loading=!0:d=setTimeout((function(){d=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,u(!1))}),m.delay||200)),o(m.timeout)&&(l=setTimeout((function(){l=null,a(e.resolved)&&f(null)}),m.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(u=e,l)))return function(e,n,t,i,a){var o=be();return o.asyncFactory=e,o.asyncMeta={data:n,context:t,children:i,tag:a},o}(u,n,t,s,d);n=n||{},Tt(e),o(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var a=n.on||(n.on={}),r=a[i],s=n.model.callback;o(r)?(Array.isArray(r)?-1===r.indexOf(s):r!==s)&&(a[i]=[s].concat(r)):a[i]=s}(e.options,n);var h=function(e,n,t){var i=n.options.props;if(!a(i)){var r={},s=e.attrs,c=e.props;if(o(s)||o(c))for(var d in i){var l=S(d);dn(r,c,d,l,!0)||dn(r,s,d,l,!1)}return r}}(n,e);if(r(e.options.functional))return function(e,n,t,a,r){var s=e.options,c={},d=s.props;if(o(d))for(var l in d)c[l]=Be(l,d,n||i);else o(t.attrs)&&En(c,t.attrs),o(t.props)&&En(c,t.props);var u=new Rn(t,c,r,a,e),h=s.render.call(null,u._c,u);if(h instanceof fe)return Dn(h,t,u.parent,s,u);if(Array.isArray(h)){for(var p=ln(h)||[],f=new Array(p.length),m=0;m<p.length;m++)f[m]=Dn(p[m],t,u.parent,s,u);return f}}(e,h,n,t,s);var f=n.on;if(n.on=n.nativeOn,r(e.options.abstract)){var m=n.slot;n={},m&&(n.slot=m)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<Nn.length;t++){var i=Nn[t],a=n[i],o=Fn[i];a===o||a&&a._merged||(n[i]=a?Un(o,a):o)}}(n);var b=e.options.name||d;return new fe("vue-component-"+e.cid+(b?"-"+b:""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:h,listeners:f,tag:d,children:s},u)}}}function Un(e,n){var t=function(t,i){e(t,i),n(t,i)};return t._merged=!0,t}function Ln(e,n,t,i,d,l){return(Array.isArray(t)||s(t))&&(d=i,i=t,t=void 0),r(l)&&(d=2),function(e,n,t,i,s){if(o(t)&&o(t.__ob__))return be();o(t)&&o(t.is)&&(n=t.is);if(!n)return be();0;Array.isArray(i)&&"function"==typeof i[0]&&((t=t||{}).scopedSlots={default:i[0]},i.length=0);2===s?i=ln(i):1===s&&(i=function(e){for(var n=0;n<e.length;n++)if(Array.isArray(e[n]))return Array.prototype.concat.apply([],e);return e}(i));var d,l;if("string"==typeof n){var u;l=e.$vnode&&e.$vnode.ns||U.getTagNamespace(n),d=U.isReservedTag(n)?new fe(U.parsePlatformTagName(n),t,i,void 0,void 0,e):t&&t.pre||!o(u=Ne(e.$options,"components",n))?new fe(n,t,i,void 0,void 0,e):Bn(u,t,e,i,n)}else d=Bn(n,t,e,i);return Array.isArray(d)?d:o(d)?(o(l)&&function e(n,t,i){n.ns=t,"foreignObject"===n.tag&&(t=void 0,i=!0);if(o(n.children))for(var s=0,c=n.children.length;s<c;s++){var d=n.children[s];o(d.tag)&&(a(d.ns)||r(i)&&"svg"!==d.tag)&&e(d,t,i)}}(d,l),o(t)&&function(e){c(e.style)&&an(e.style);c(e.class)&&an(e.class)}(t),d):be()}(e,n,t,i,d)}var zn,Hn=null;function _n(e,n){return(e.__esModule||se&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?n.extend(e):e}function Gn(e){return e.isComment&&e.asyncFactory}function Vn(e){if(Array.isArray(e))for(var n=0;n<e.length;n++){var t=e[n];if(o(t)&&(o(t.componentOptions)||Gn(t)))return t}}function $n(e,n){zn.$on(e,n)}function Kn(e,n){zn.$off(e,n)}function Xn(e,n){var t=zn;return function i(){var a=n.apply(null,arguments);null!==a&&t.$off(e,i)}}function Jn(e,n,t){zn=e,sn(n,t||{},$n,Kn,Xn,e),zn=void 0}var Yn=null;function Qn(e){var n=Yn;return Yn=e,function(){Yn=n}}function Wn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zn(e,n){if(n){if(e._directInactive=!1,Wn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Zn(e.$children[t]);et(e,"activated")}}function et(e,n){he();var t=e.$options[n],i=n+" hook";if(t)for(var a=0,o=t.length;a<o;a++)_e(t[a],e,null,e,i);e._hasHookEvent&&e.$emit("hook:"+n),pe()}var nt=[],tt=[],it={},at=!1,ot=!1,rt=0;var st=0,ct=Date.now;if(V&&!J){var dt=window.performance;dt&&"function"==typeof dt.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return dt.now()})}function lt(){var e,n;for(st=ct(),ot=!0,nt.sort((function(e,n){return e.id-n.id})),rt=0;rt<nt.length;rt++)(e=nt[rt]).before&&e.before(),n=e.id,it[n]=null,e.run();var t=tt.slice(),i=nt.slice();rt=nt.length=tt.length=0,it={},at=ot=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Zn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],i=t.vm;i._watcher===t&&i._isMounted&&!i._isDestroyed&&et(i,"updated")}}(i),ae&&U.devtools&&ae.emit("flush")}var ut=0,ht=function(e,n,t,i,a){this.vm=e,a&&(e._watcher=this),e._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ut,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new re,this.newDepIds=new re,this.expression="","function"==typeof n?this.getter=n:(this.getter=function(e){if(!H.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=j)),this.value=this.lazy?void 0:this.get()};ht.prototype.get=function(){var e;he(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;He(e,n,'getter for watcher "'+this.expression+'"')}finally{this.deep&&an(e),pe(),this.cleanupDeps()}return e},ht.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},ht.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},ht.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var n=e.id;if(null==it[n]){if(it[n]=!0,ot){for(var t=nt.length-1;t>rt&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);at||(at=!0,nn(lt))}}(this)},ht.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var n=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,n)}catch(e){He(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,n)}}},ht.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ht.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},ht.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var pt={enumerable:!0,configurable:!0,get:j,set:j};function ft(e,n,t){pt.get=function(){return this[n][t]},pt.set=function(e){this[n][t]=e},Object.defineProperty(e,t,pt)}function mt(e){e._watchers=[];var n=e.$options;n.props&&function(e,n){var t=e.$options.propsData||{},i=e._props={},a=e.$options._propKeys=[];e.$parent&&Ae(!1);var o=function(o){a.push(o);var r=Be(o,n,t,e);Se(i,o,r),o in e||ft(e,"_props",o)};for(var r in n)o(r);Ae(!0)}(e,n.props),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?j:k(n[t],e)}(e,n.methods),n.data?function(e){var n=e.$options.data;l(n=e._data="function"==typeof n?function(e,n){he();try{return e.call(n,n)}catch(e){return He(e,n,"data()"),{}}finally{pe()}}(n,e):n||{})||(n={});var t=Object.keys(n),i=e.$options.props,a=(e.$options.methods,t.length);for(;a--;){var o=t[a];0,i&&w(i,o)||(r=void 0,36!==(r=(o+"").charCodeAt(0))&&95!==r&&ft(e,"_data",o))}var r;qe(n,!0)}(e):qe(e._data={},!0),n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),i=ie();for(var a in n){var o=n[a],r="function"==typeof o?o:o.get;0,i||(t[a]=new ht(e,r||j,j,bt)),a in e||yt(e,a,o)}}(e,n.computed),n.watch&&n.watch!==ee&&function(e,n){for(var t in n){var i=n[t];if(Array.isArray(i))for(var a=0;a<i.length;a++)wt(e,t,i[a]);else wt(e,t,i)}}(e,n.watch)}var bt={lazy:!0};function yt(e,n,t){var i=!ie();"function"==typeof t?(pt.get=i?gt(n):vt(t),pt.set=j):(pt.get=t.get?i&&!1!==t.cache?gt(n):vt(t.get):j,pt.set=t.set||j),Object.defineProperty(e,n,pt)}function gt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),le.target&&n.depend(),n.value}}function vt(e){return function(){return e.call(this,this)}}function wt(e,n,t,i){return l(t)&&(i=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,i)}var Pt=0;function Tt(e){var n=e.options;if(e.super){var t=Tt(e.super);if(t!==e.superOptions){e.superOptions=t;var i=function(e){var n,t=e.options,i=e.sealedOptions;for(var a in t)t[a]!==i[a]&&(n||(n={}),n[a]=t[a]);return n}(e);i&&C(e.extendOptions,i),(n=e.options=Fe(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function At(e){this._init(e)}function It(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,i=t.cid,a=e._Ctor||(e._Ctor={});if(a[i])return a[i];var o=e.name||t.options.name;var r=function(e){this._init(e)};return(r.prototype=Object.create(t.prototype)).constructor=r,r.cid=n++,r.options=Fe(t.options,e),r.super=t,r.options.props&&function(e){var n=e.options.props;for(var t in n)ft(e.prototype,"_props",t)}(r),r.options.computed&&function(e){var n=e.options.computed;for(var t in n)yt(e.prototype,t,n[t])}(r),r.extend=t.extend,r.mixin=t.mixin,r.use=t.use,N.forEach((function(e){r[e]=t[e]})),o&&(r.options.components[o]=r),r.superOptions=t.options,r.extendOptions=e,r.sealedOptions=C({},r.options),a[i]=r,r}}function qt(e){return e&&(e.Ctor.options.name||e.tag)}function St(e,n){return Array.isArray(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!u(e)&&e.test(n)}function kt(e,n){var t=e.cache,i=e.keys,a=e._vnode;for(var o in t){var r=t[o];if(r){var s=qt(r.componentOptions);s&&!n(s)&&Mt(t,o,i,a)}}}function Mt(e,n,t,i){var a=e[n];!a||i&&a.tag===i.tag||a.componentInstance.$destroy(),e[n]=null,g(t,n)}!function(e){e.prototype._init=function(e){var n=this;n._uid=Pt++,n._isVue=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),i=n._parentVnode;t.parent=n.parent,t._parentVnode=i;var a=i.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Fe(Tt(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Jn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,a=t&&t.context;e.$slots=pn(n._renderChildren,a),e.$scopedSlots=i,e._c=function(n,t,i,a){return Ln(e,n,t,i,a,!1)},e.$createElement=function(n,t,i,a){return Ln(e,n,t,i,a,!0)};var o=t&&t.data;Se(e,"$attrs",o&&o.attrs||i,null,!0),Se(e,"$listeners",n._parentListeners||i,null,!0)}(n),et(n,"beforeCreate"),function(e){var n=hn(e.$options.inject,e);n&&(Ae(!1),Object.keys(n).forEach((function(t){Se(e,t,n[t])})),Ae(!0))}(n),mt(n),function(e){var n=e.$options.provide;n&&(e._provided="function"==typeof n?n.call(e):n)}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(At),function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=ke,e.prototype.$delete=Me,e.prototype.$watch=function(e,n,t){if(l(n))return wt(this,e,n,t);(t=t||{}).user=!0;var i=new ht(this,e,n,t);if(t.immediate)try{n.call(this,i.value)}catch(e){He(e,this,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}(At),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var i=this;if(Array.isArray(e))for(var a=0,o=e.length;a<o;a++)i.$on(e[a],t);else(i._events[e]||(i._events[e]=[])).push(t),n.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,n){var t=this;function i(){t.$off(e,i),n.apply(t,arguments)}return i.fn=n,t.$on(e,i),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(e)){for(var i=0,a=e.length;i<a;i++)t.$off(e[i],n);return t}var o,r=t._events[e];if(!r)return t;if(!n)return t._events[e]=null,t;for(var s=r.length;s--;)if((o=r[s])===n||o.fn===n){r.splice(s,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?M(t):t;for(var i=M(arguments,1),a='event handler for "'+e+'"',o=0,r=t.length;o<r;o++)_e(t[o],n,i,n,a)}return n}}(At),function(e){e.prototype._update=function(e,n){var t=this,i=t.$el,a=t._vnode,o=Qn(t);t._vnode=e,t.$el=a?t.__patch__(a,e):t.__patch__(t.$el,e,n,!1),o(),i&&(i.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||g(n.$children,e),e._watcher&&e._watcher.teardown();for(var t=e._watchers.length;t--;)e._watchers[t].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(At),function(e){xn(e.prototype),e.prototype.$nextTick=function(e){return nn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,i=t.render,a=t._parentVnode;a&&(n.$scopedSlots=mn(a.data.scopedSlots,n.$slots,n.$scopedSlots)),n.$vnode=a;try{Hn=n,e=i.call(n._renderProxy,n.$createElement)}catch(t){He(t,n,"render"),e=n._vnode}finally{Hn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof fe||(e=be()),e.parent=a,e}}(At);var Ct=[String,RegExp,Array],Ot={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ct,exclude:Ct,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Mt(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(n){kt(e,(function(e){return St(n,e)}))})),this.$watch("exclude",(function(n){kt(e,(function(e){return!St(n,e)}))}))},render:function(){var e=this.$slots.default,n=Vn(e),t=n&&n.componentOptions;if(t){var i=qt(t),a=this.include,o=this.exclude;if(a&&(!i||!St(a,i))||o&&i&&St(o,i))return n;var r=this.cache,s=this.keys,c=null==n.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):n.key;r[c]?(n.componentInstance=r[c].componentInstance,g(s,c),s.push(c)):(r[c]=n,s.push(c),this.max&&s.length>parseInt(this.max)&&Mt(r,s[0],s,this._vnode)),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return U}};Object.defineProperty(e,"config",n),e.util={warn:ce,extend:C,mergeOptions:Fe,defineReactive:Se},e.set=ke,e.delete=Me,e.nextTick=nn,e.observable=function(e){return qe(e),e},e.options=Object.create(null),N.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,C(e.options.components,Ot),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=M(arguments,1);return t.unshift(this),"function"==typeof e.install?e.install.apply(e,t):"function"==typeof e&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fe(this.options,e),this}}(e),It(e),function(e){N.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&l(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&"function"==typeof t&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(At),Object.defineProperty(At.prototype,"$isServer",{get:ie}),Object.defineProperty(At.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(At,"FunctionalRenderContext",{value:Rn}),At.version="2.6.12";var jt=b("style,class"),xt=b("input,textarea,option,select,progress"),Rt=b("contenteditable,draggable,spellcheck"),Dt=b("events,caret,typing,plaintext-only"),Et=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Ft="http://www.w3.org/1999/xlink",Nt=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Bt=function(e){return Nt(e)?e.slice(6,e.length):""},Ut=function(e){return null==e||!1===e};function Lt(e){for(var n=e.data,t=e,i=e;o(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(n=zt(i.data,n));for(;o(t=t.parent);)t&&t.data&&(n=zt(n,t.data));return function(e,n){if(o(e)||o(n))return Ht(e,_t(n));return""}(n.staticClass,n.class)}function zt(e,n){return{staticClass:Ht(e.staticClass,n.staticClass),class:o(e.class)?[e.class,n.class]:n.class}}function Ht(e,n){return e?n?e+" "+n:e:n||""}function _t(e){return Array.isArray(e)?function(e){for(var n,t="",i=0,a=e.length;i<a;i++)o(n=_t(e[i]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):c(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var Gt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Vt=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),$t=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Kt=function(e){return Vt(e)||$t(e)};var Xt=Object.create(null);var Jt=b("text,number,password,search,email,tel,url");var Yt=Object.freeze({createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(Gt[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),Qt={create:function(e,n){Wt(n)},update:function(e,n){e.data.ref!==n.data.ref&&(Wt(e,!0),Wt(n))},destroy:function(e){Wt(e,!0)}};function Wt(e,n){var t=e.data.ref;if(o(t)){var i=e.context,a=e.componentInstance||e.elm,r=i.$refs;n?Array.isArray(r[t])?g(r[t],a):r[t]===a&&(r[t]=void 0):e.data.refInFor?Array.isArray(r[t])?r[t].indexOf(a)<0&&r[t].push(a):r[t]=[a]:r[t]=a}}var Zt=new fe("",{},[]),ei=["create","activate","update","remove","destroy"];function ni(e,n){return e.key===n.key&&(e.tag===n.tag&&e.isComment===n.isComment&&o(e.data)===o(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,i=o(t=e.data)&&o(t=t.attrs)&&t.type,a=o(t=n.data)&&o(t=t.attrs)&&t.type;return i===a||Jt(i)&&Jt(a)}(e,n)||r(e.isAsyncPlaceholder)&&e.asyncFactory===n.asyncFactory&&a(n.asyncFactory.error))}function ti(e,n,t){var i,a,r={};for(i=n;i<=t;++i)o(a=e[i].key)&&(r[a]=i);return r}var ii={create:ai,update:ai,destroy:function(e){ai(e,Zt)}};function ai(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,i,a,o=e===Zt,r=n===Zt,s=ri(e.data.directives,e.context),c=ri(n.data.directives,n.context),d=[],l=[];for(t in c)i=s[t],a=c[t],i?(a.oldValue=i.value,a.oldArg=i.arg,ci(a,"update",n,e),a.def&&a.def.componentUpdated&&l.push(a)):(ci(a,"bind",n,e),a.def&&a.def.inserted&&d.push(a));if(d.length){var u=function(){for(var t=0;t<d.length;t++)ci(d[t],"inserted",n,e)};o?cn(n,"insert",u):u()}l.length&&cn(n,"postpatch",(function(){for(var t=0;t<l.length;t++)ci(l[t],"componentUpdated",n,e)}));if(!o)for(t in s)c[t]||ci(s[t],"unbind",e,e,r)}(e,n)}var oi=Object.create(null);function ri(e,n){var t,i,a=Object.create(null);if(!e)return a;for(t=0;t<e.length;t++)(i=e[t]).modifiers||(i.modifiers=oi),a[si(i)]=i,i.def=Ne(n.$options,"directives",i.name);return a}function si(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function ci(e,n,t,i,a){var o=e.def&&e.def[n];if(o)try{o(t.elm,e,t,i,a)}catch(i){He(i,t.context,"directive "+e.name+" "+n+" hook")}}var di=[Qt,ii];function li(e,n){var t=n.componentOptions;if(!(o(t)&&!1===t.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(n.data.attrs))){var i,r,s=n.elm,c=e.data.attrs||{},d=n.data.attrs||{};for(i in o(d.__ob__)&&(d=n.data.attrs=C({},d)),d)r=d[i],c[i]!==r&&ui(s,i,r);for(i in(J||Q)&&d.value!==c.value&&ui(s,"value",d.value),c)a(d[i])&&(Nt(i)?s.removeAttributeNS(Ft,Bt(i)):Rt(i)||s.removeAttribute(i))}}function ui(e,n,t){e.tagName.indexOf("-")>-1?hi(e,n,t):Et(n)?Ut(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):Rt(n)?e.setAttribute(n,function(e,n){return Ut(n)||"false"===n?"false":"contenteditable"===e&&Dt(n)?n:"true"}(n,t)):Nt(n)?Ut(t)?e.removeAttributeNS(Ft,Bt(n)):e.setAttributeNS(Ft,n,t):hi(e,n,t)}function hi(e,n,t){if(Ut(t))e.removeAttribute(n);else{if(J&&!Y&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var i=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",i)};e.addEventListener("input",i),e.__ieph=!0}e.setAttribute(n,t)}}var pi={create:li,update:li};function fi(e,n){var t=n.elm,i=n.data,r=e.data;if(!(a(i.staticClass)&&a(i.class)&&(a(r)||a(r.staticClass)&&a(r.class)))){var s=Lt(n),c=t._transitionClasses;o(c)&&(s=Ht(s,_t(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var mi,bi={create:fi,update:fi};function yi(e,n,t){var i=mi;return function a(){var o=n.apply(null,arguments);null!==o&&wi(e,a,t,i)}}var gi=Ke&&!(Z&&Number(Z[1])<=53);function vi(e,n,t,i){if(gi){var a=st,o=n;n=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=a||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}mi.addEventListener(e,n,ne?{capture:t,passive:i}:t)}function wi(e,n,t,i){(i||mi).removeEventListener(e,n._wrapper||n,t)}function Pi(e,n){if(!a(e.data.on)||!a(n.data.on)){var t=n.data.on||{},i=e.data.on||{};mi=n.elm,function(e){if(o(e.__r)){var n=J?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}o(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),sn(t,i,vi,wi,yi,n.context),mi=void 0}}var Ti,Ai={create:Pi,update:Pi};function Ii(e,n){if(!a(e.data.domProps)||!a(n.data.domProps)){var t,i,r=n.elm,s=e.data.domProps||{},c=n.data.domProps||{};for(t in o(c.__ob__)&&(c=n.data.domProps=C({},c)),s)t in c||(r[t]="");for(t in c){if(i=c[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),i===s[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=i;var d=a(i)?"":String(i);qi(r,d)&&(r.value=d)}else if("innerHTML"===t&&$t(r.tagName)&&a(r.innerHTML)){(Ti=Ti||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var l=Ti.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;l.firstChild;)r.appendChild(l.firstChild)}else if(i!==s[t])try{r[t]=i}catch(e){}}}}function qi(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,i=e._vModifiers;if(o(i)){if(i.number)return m(t)!==m(n);if(i.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var Si={create:Ii,update:Ii},ki=P((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var i=e.split(t);i.length>1&&(n[i[0].trim()]=i[1].trim())}})),n}));function Mi(e){var n=Ci(e.style);return e.staticStyle?C(e.staticStyle,n):n}function Ci(e){return Array.isArray(e)?O(e):"string"==typeof e?ki(e):e}var Oi,ji=/^--/,xi=/\s*!important$/,Ri=function(e,n,t){if(ji.test(n))e.style.setProperty(n,t);else if(xi.test(t))e.style.setProperty(S(n),t.replace(xi,""),"important");else{var i=Ei(n);if(Array.isArray(t))for(var a=0,o=t.length;a<o;a++)e.style[i]=t[a];else e.style[i]=t}},Di=["Webkit","Moz","ms"],Ei=P((function(e){if(Oi=Oi||document.createElement("div").style,"filter"!==(e=A(e))&&e in Oi)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<Di.length;t++){var i=Di[t]+n;if(i in Oi)return i}}));function Fi(e,n){var t=n.data,i=e.data;if(!(a(t.staticStyle)&&a(t.style)&&a(i.staticStyle)&&a(i.style))){var r,s,c=n.elm,d=i.staticStyle,l=i.normalizedStyle||i.style||{},u=d||l,h=Ci(n.data.style)||{};n.data.normalizedStyle=o(h.__ob__)?C({},h):h;var p=function(e,n){var t,i={};if(n)for(var a=e;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Mi(a.data))&&C(i,t);(t=Mi(e.data))&&C(i,t);for(var o=e;o=o.parent;)o.data&&(t=Mi(o.data))&&C(i,t);return i}(n,!0);for(s in u)a(p[s])&&Ri(c,s,"");for(s in p)(r=p[s])!==u[s]&&Ri(c,s,null==r?"":r)}}var Ni={create:Fi,update:Fi},Bi=/\s+/;function Ui(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(Bi).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" "+(e.getAttribute("class")||"")+" ";t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function Li(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(Bi).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" "+(e.getAttribute("class")||"")+" ",i=" "+n+" ";t.indexOf(i)>=0;)t=t.replace(i," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function zi(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&C(n,Hi(e.name||"v")),C(n,e),n}return"string"==typeof e?Hi(e):void 0}}var Hi=P((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),_i=V&&!Y,Gi="transition",Vi="transitionend",$i="animation",Ki="animationend";_i&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Gi="WebkitTransition",Vi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&($i="WebkitAnimation",Ki="webkitAnimationEnd"));var Xi=V?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Ji(e){Xi((function(){Xi(e)}))}function Yi(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),Ui(e,n))}function Qi(e,n){e._transitionClasses&&g(e._transitionClasses,n),Li(e,n)}function Wi(e,n,t){var i=ea(e,n),a=i.type,o=i.timeout,r=i.propCount;if(!a)return t();var s="transition"===a?Vi:Ki,c=0,d=function(){e.removeEventListener(s,l),t()},l=function(n){n.target===e&&++c>=r&&d()};setTimeout((function(){c<r&&d()}),o+1),e.addEventListener(s,l)}var Zi=/\b(transform|all)(,|$)/;function ea(e,n){var t,i=window.getComputedStyle(e),a=(i[Gi+"Delay"]||"").split(", "),o=(i[Gi+"Duration"]||"").split(", "),r=na(a,o),s=(i[$i+"Delay"]||"").split(", "),c=(i[$i+"Duration"]||"").split(", "),d=na(s,c),l=0,u=0;return"transition"===n?r>0&&(t="transition",l=r,u=o.length):"animation"===n?d>0&&(t="animation",l=d,u=c.length):u=(t=(l=Math.max(r,d))>0?r>d?"transition":"animation":null)?"transition"===t?o.length:c.length:0,{type:t,timeout:l,propCount:u,hasTransform:"transition"===t&&Zi.test(i[Gi+"Property"])}}function na(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return ta(n)+ta(e[t])})))}function ta(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function ia(e,n){var t=e.elm;o(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var i=zi(e.data.transition);if(!a(i)&&!o(t._enterCb)&&1===t.nodeType){for(var r=i.css,s=i.type,d=i.enterClass,l=i.enterToClass,u=i.enterActiveClass,h=i.appearClass,p=i.appearToClass,f=i.appearActiveClass,b=i.beforeEnter,y=i.enter,g=i.afterEnter,v=i.enterCancelled,w=i.beforeAppear,P=i.appear,T=i.afterAppear,A=i.appearCancelled,I=i.duration,q=Yn,S=Yn.$vnode;S&&S.parent;)q=S.context,S=S.parent;var k=!q._isMounted||!e.isRootInsert;if(!k||P||""===P){var M=k&&h?h:d,C=k&&f?f:u,O=k&&p?p:l,j=k&&w||b,x=k&&"function"==typeof P?P:y,R=k&&T||g,D=k&&A||v,E=m(c(I)?I.enter:I);0;var N=!1!==r&&!Y,B=ra(x),U=t._enterCb=F((function(){N&&(Qi(t,O),Qi(t,C)),U.cancelled?(N&&Qi(t,M),D&&D(t)):R&&R(t),t._enterCb=null}));e.data.show||cn(e,"insert",(function(){var n=t.parentNode,i=n&&n._pending&&n._pending[e.key];i&&i.tag===e.tag&&i.elm._leaveCb&&i.elm._leaveCb(),x&&x(t,U)})),j&&j(t),N&&(Yi(t,M),Yi(t,C),Ji((function(){Qi(t,M),U.cancelled||(Yi(t,O),B||(oa(E)?setTimeout(U,E):Wi(t,s,U)))}))),e.data.show&&(n&&n(),x&&x(t,U)),N||B||U()}}}function aa(e,n){var t=e.elm;o(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var i=zi(e.data.transition);if(a(i)||1!==t.nodeType)return n();if(!o(t._leaveCb)){var r=i.css,s=i.type,d=i.leaveClass,l=i.leaveToClass,u=i.leaveActiveClass,h=i.beforeLeave,p=i.leave,f=i.afterLeave,b=i.leaveCancelled,y=i.delayLeave,g=i.duration,v=!1!==r&&!Y,w=ra(p),P=m(c(g)?g.leave:g);0;var T=t._leaveCb=F((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),v&&(Qi(t,l),Qi(t,u)),T.cancelled?(v&&Qi(t,d),b&&b(t)):(n(),f&&f(t)),t._leaveCb=null}));y?y(A):A()}function A(){T.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),h&&h(t),v&&(Yi(t,d),Yi(t,u),Ji((function(){Qi(t,d),T.cancelled||(Yi(t,l),w||(oa(P)?setTimeout(T,P):Wi(t,s,T)))}))),p&&p(t,T),v||w||T())}}function oa(e){return"number"==typeof e&&!isNaN(e)}function ra(e){if(a(e))return!1;var n=e.fns;return o(n)?ra(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function sa(e,n){!0!==n.data.show&&ia(n)}var ca=function(e){var n,t,i={},c=e.modules,d=e.nodeOps;for(n=0;n<ei.length;++n)for(i[ei[n]]=[],t=0;t<c.length;++t)o(c[t][ei[n]])&&i[ei[n]].push(c[t][ei[n]]);function l(e){var n=d.parentNode(e);o(n)&&d.removeChild(n,e)}function u(e,n,t,a,s,c,l){if(o(e.elm)&&o(c)&&(e=c[l]=ge(e)),e.isRootInsert=!s,!function(e,n,t,a){var s=e.data;if(o(s)){var c=o(e.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(e,!1),o(e.componentInstance))return h(e,n),p(t,e.elm,a),r(c)&&function(e,n,t,a){var r,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(r=s.data)&&o(r=r.transition)){for(r=0;r<i.activate.length;++r)i.activate[r](Zt,s);n.push(s);break}p(t,e.elm,a)}(e,n,t,a),!0}}(e,n,t,a)){var u=e.data,m=e.children,b=e.tag;o(b)?(e.elm=e.ns?d.createElementNS(e.ns,b):d.createElement(b,e),g(e),f(e,m,n),o(u)&&y(e,n),p(t,e.elm,a)):r(e.isComment)?(e.elm=d.createComment(e.text),p(t,e.elm,a)):(e.elm=d.createTextNode(e.text),p(t,e.elm,a))}}function h(e,n){o(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,m(e)?(y(e,n),g(e)):(Wt(e),n.push(e))}function p(e,n,t){o(e)&&(o(t)?d.parentNode(t)===e&&d.insertBefore(e,n,t):d.appendChild(e,n))}function f(e,n,t){if(Array.isArray(n)){0;for(var i=0;i<n.length;++i)u(n[i],t,e.elm,null,!0,n,i)}else s(e.text)&&d.appendChild(e.elm,d.createTextNode(String(e.text)))}function m(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function y(e,t){for(var a=0;a<i.create.length;++a)i.create[a](Zt,e);o(n=e.data.hook)&&(o(n.create)&&n.create(Zt,e),o(n.insert)&&t.push(e))}function g(e){var n;if(o(n=e.fnScopeId))d.setStyleScope(e.elm,n);else for(var t=e;t;)o(n=t.context)&&o(n=n.$options._scopeId)&&d.setStyleScope(e.elm,n),t=t.parent;o(n=Yn)&&n!==e.context&&n!==e.fnContext&&o(n=n.$options._scopeId)&&d.setStyleScope(e.elm,n)}function v(e,n,t,i,a,o){for(;i<=a;++i)u(t[i],o,e,n,!1,t,i)}function w(e){var n,t,a=e.data;if(o(a))for(o(n=a.hook)&&o(n=n.destroy)&&n(e),n=0;n<i.destroy.length;++n)i.destroy[n](e);if(o(n=e.children))for(t=0;t<e.children.length;++t)w(e.children[t])}function P(e,n,t){for(;n<=t;++n){var i=e[n];o(i)&&(o(i.tag)?(T(i),w(i)):l(i.elm))}}function T(e,n){if(o(n)||o(e.data)){var t,a=i.remove.length+1;for(o(n)?n.listeners+=a:n=function(e,n){function t(){0==--t.listeners&&l(e)}return t.listeners=n,t}(e.elm,a),o(t=e.componentInstance)&&o(t=t._vnode)&&o(t.data)&&T(t,n),t=0;t<i.remove.length;++t)i.remove[t](e,n);o(t=e.data.hook)&&o(t=t.remove)?t(e,n):n()}else l(e.elm)}function A(e,n,t,i){for(var a=t;a<i;a++){var r=n[a];if(o(r)&&ni(e,r))return a}}function I(e,n,t,s,c,l){if(e!==n){o(n.elm)&&o(s)&&(n=s[c]=ge(n));var h=n.elm=e.elm;if(r(e.isAsyncPlaceholder))o(n.asyncFactory.resolved)?k(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(r(n.isStatic)&&r(e.isStatic)&&n.key===e.key&&(r(n.isCloned)||r(n.isOnce)))n.componentInstance=e.componentInstance;else{var p,f=n.data;o(f)&&o(p=f.hook)&&o(p=p.prepatch)&&p(e,n);var b=e.children,y=n.children;if(o(f)&&m(n)){for(p=0;p<i.update.length;++p)i.update[p](e,n);o(p=f.hook)&&o(p=p.update)&&p(e,n)}a(n.text)?o(b)&&o(y)?b!==y&&function(e,n,t,i,r){var s,c,l,h=0,p=0,f=n.length-1,m=n[0],b=n[f],y=t.length-1,g=t[0],w=t[y],T=!r;for(0;h<=f&&p<=y;)a(m)?m=n[++h]:a(b)?b=n[--f]:ni(m,g)?(I(m,g,i,t,p),m=n[++h],g=t[++p]):ni(b,w)?(I(b,w,i,t,y),b=n[--f],w=t[--y]):ni(m,w)?(I(m,w,i,t,y),T&&d.insertBefore(e,m.elm,d.nextSibling(b.elm)),m=n[++h],w=t[--y]):ni(b,g)?(I(b,g,i,t,p),T&&d.insertBefore(e,b.elm,m.elm),b=n[--f],g=t[++p]):(a(s)&&(s=ti(n,h,f)),a(c=o(g.key)?s[g.key]:A(g,n,h,f))?u(g,i,e,m.elm,!1,t,p):ni(l=n[c],g)?(I(l,g,i,t,p),n[c]=void 0,T&&d.insertBefore(e,l.elm,m.elm)):u(g,i,e,m.elm,!1,t,p),g=t[++p]);h>f?v(e,a(t[y+1])?null:t[y+1].elm,t,p,y,i):p>y&&P(n,h,f)}(h,b,y,t,l):o(y)?(o(e.text)&&d.setTextContent(h,""),v(h,null,y,0,y.length-1,t)):o(b)?P(b,0,b.length-1):o(e.text)&&d.setTextContent(h,""):e.text!==n.text&&d.setTextContent(h,n.text),o(f)&&o(p=f.hook)&&o(p=p.postpatch)&&p(e,n)}}}function q(e,n,t){if(r(t)&&o(e.parent))e.parent.data.pendingInsert=n;else for(var i=0;i<n.length;++i)n[i].data.hook.insert(n[i])}var S=b("attrs,class,staticClass,staticStyle,key");function k(e,n,t,i){var a,s=n.tag,c=n.data,d=n.children;if(i=i||c&&c.pre,n.elm=e,r(n.isComment)&&o(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(o(c)&&(o(a=c.hook)&&o(a=a.init)&&a(n,!0),o(a=n.componentInstance)))return h(n,t),!0;if(o(s)){if(o(d))if(e.hasChildNodes())if(o(a=c)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==e.innerHTML)return!1}else{for(var l=!0,u=e.firstChild,p=0;p<d.length;p++){if(!u||!k(u,d[p],t,i)){l=!1;break}u=u.nextSibling}if(!l||u)return!1}else f(n,d,t);if(o(c)){var m=!1;for(var b in c)if(!S(b)){m=!0,y(n,t);break}!m&&c.class&&an(c.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,s){if(!a(n)){var c,l=!1,h=[];if(a(e))l=!0,u(n,h);else{var p=o(e.nodeType);if(!p&&ni(e,n))I(e,n,h,null,null,s);else{if(p){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),r(t)&&k(e,n,h))return q(n,h,!0),e;c=e,e=new fe(d.tagName(c).toLowerCase(),{},[],void 0,c)}var f=e.elm,b=d.parentNode(f);if(u(n,h,f._leaveCb?null:b,d.nextSibling(f)),o(n.parent))for(var y=n.parent,g=m(n);y;){for(var v=0;v<i.destroy.length;++v)i.destroy[v](y);if(y.elm=n.elm,g){for(var T=0;T<i.create.length;++T)i.create[T](Zt,y);var A=y.data.hook.insert;if(A.merged)for(var S=1;S<A.fns.length;S++)A.fns[S]()}else Wt(y);y=y.parent}o(b)?P([e],0,0):o(e.tag)&&w(e)}}return q(n,h,l),n.elm}o(e)&&w(e)}}({nodeOps:Yt,modules:[pi,bi,Ai,Si,Ni,V?{create:sa,activate:sa,remove:function(e,n){!0!==e.data.show?aa(e,n):n()}}:{}].concat(di)});Y&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ba(e,"input")}));var da={inserted:function(e,n,t,i){"select"===t.tag?(i.elm&&!i.elm._vOptions?cn(t,"postpatch",(function(){da.componentUpdated(e,n,t)})):la(e,n,t.context),e._vOptions=[].map.call(e.options,pa)):("textarea"===t.tag||Jt(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",fa),e.addEventListener("compositionend",ma),e.addEventListener("change",ma),Y&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){la(e,n,t.context);var i=e._vOptions,a=e._vOptions=[].map.call(e.options,pa);if(a.some((function(e,n){return!D(e,i[n])})))(e.multiple?n.value.some((function(e){return ha(e,a)})):n.value!==n.oldValue&&ha(n.value,a))&&ba(e,"change")}}};function la(e,n,t){ua(e,n,t),(J||Q)&&setTimeout((function(){ua(e,n,t)}),0)}function ua(e,n,t){var i=n.value,a=e.multiple;if(!a||Array.isArray(i)){for(var o,r,s=0,c=e.options.length;s<c;s++)if(r=e.options[s],a)o=E(i,pa(r))>-1,r.selected!==o&&(r.selected=o);else if(D(pa(r),i))return void(e.selectedIndex!==s&&(e.selectedIndex=s));a||(e.selectedIndex=-1)}}function ha(e,n){return n.every((function(n){return!D(n,e)}))}function pa(e){return"_value"in e?e._value:e.value}function fa(e){e.target.composing=!0}function ma(e){e.target.composing&&(e.target.composing=!1,ba(e.target,"input"))}function ba(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function ya(e){return!e.componentInstance||e.data&&e.data.transition?e:ya(e.componentInstance._vnode)}var ga={model:da,show:{bind:function(e,n,t){var i=n.value,a=(t=ya(t)).data&&t.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;i&&a?(t.data.show=!0,ia(t,(function(){e.style.display=o}))):e.style.display=i?o:"none"},update:function(e,n,t){var i=n.value;!i!=!n.oldValue&&((t=ya(t)).data&&t.data.transition?(t.data.show=!0,i?ia(t,(function(){e.style.display=e.__vOriginalDisplay})):aa(t,(function(){e.style.display="none"}))):e.style.display=i?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,i,a){a||(e.style.display=e.__vOriginalDisplay)}}},va={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wa(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?wa(Vn(n.children)):e}function Pa(e){var n={},t=e.$options;for(var i in t.propsData)n[i]=e[i];var a=t._parentListeners;for(var o in a)n[A(o)]=a[o];return n}function Ta(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Aa=function(e){return e.tag||Gn(e)},Ia=function(e){return"show"===e.name},qa={name:"transition",props:va,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Aa)).length){0;var i=this.mode;0;var a=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return a;var o=wa(a);if(!o)return a;if(this._leaving)return Ta(e,a);var r="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?r+"comment":r+o.tag:s(o.key)?0===String(o.key).indexOf(r)?o.key:r+o.key:o.key;var c=(o.data||(o.data={})).transition=Pa(this),d=this._vnode,l=wa(d);if(o.data.directives&&o.data.directives.some(Ia)&&(o.data.show=!0),l&&l.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(o,l)&&!Gn(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var u=l.data.transition=C({},c);if("out-in"===i)return this._leaving=!0,cn(u,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),Ta(e,a);if("in-out"===i){if(Gn(o))return d;var h,p=function(){h()};cn(c,"afterEnter",p),cn(c,"enterCancelled",p),cn(u,"delayLeave",(function(e){h=e}))}}return a}}},Sa=C({tag:String,moveClass:String},va);function ka(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Ma(e){e.data.newPos=e.elm.getBoundingClientRect()}function Ca(e){var n=e.data.pos,t=e.data.newPos,i=n.left-t.left,a=n.top-t.top;if(i||a){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+i+"px,"+a+"px)",o.transitionDuration="0s"}}delete Sa.mode;var Oa={Transition:qa,TransitionGroup:{props:Sa,beforeMount:function(){var e=this,n=this._update;this._update=function(t,i){var a=Qn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,a(),n.call(e,t,i)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),i=this.prevChildren=this.children,a=this.$slots.default||[],o=this.children=[],r=Pa(this),s=0;s<a.length;s++){var c=a[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))o.push(c),t[c.key]=c,(c.data||(c.data={})).transition=r;else;}if(i){for(var d=[],l=[],u=0;u<i.length;u++){var h=i[u];h.data.transition=r,h.data.pos=h.elm.getBoundingClientRect(),t[h.key]?d.push(h):l.push(h)}this.kept=e(n,null,d),this.removed=l}return e(n,null,o)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(ka),e.forEach(Ma),e.forEach(Ca),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,i=t.style;Yi(t,n),i.transform=i.WebkitTransform=i.transitionDuration="",t.addEventListener(Vi,t._moveCb=function e(i){i&&i.target!==t||i&&!/transform$/.test(i.propertyName)||(t.removeEventListener(Vi,e),t._moveCb=null,Qi(t,n))})}})))},methods:{hasMove:function(e,n){if(!_i)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Li(t,e)})),Ui(t,n),t.style.display="none",this.$el.appendChild(t);var i=ea(t);return this.$el.removeChild(t),this._hasMove=i.hasTransform}}}};At.config.mustUseProp=function(e,n,t){return"value"===t&&xt(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},At.config.isReservedTag=Kt,At.config.isReservedAttr=jt,At.config.getTagNamespace=function(e){return $t(e)?"svg":"math"===e?"math":void 0},At.config.isUnknownElement=function(e){if(!V)return!0;if(Kt(e))return!1;if(e=e.toLowerCase(),null!=Xt[e])return Xt[e];var n=document.createElement(e);return e.indexOf("-")>-1?Xt[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:Xt[e]=/HTMLUnknownElement/.test(n.toString())},C(At.options.directives,ga),C(At.options.components,Oa),At.prototype.__patch__=V?ca:j,At.prototype.$mount=function(e,n){return function(e,n,t){var i;return e.$el=n,e.$options.render||(e.$options.render=be),et(e,"beforeMount"),i=function(){e._update(e._render(),t)},new ht(e,i,j,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1,null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&V?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},V&&setTimeout((function(){U.devtools&&ae&&ae.emit("init",At)}),0),n.default=At},function(e,n,t){"use strict";t.d(n,"e",(function(){return i})),t.d(n,"i",(function(){return r})),t.d(n,"n",(function(){return s})),t.d(n,"w",(function(){return c})),t.d(n,"v",(function(){return d})),t.d(n,"q",(function(){return l})),t.d(n,"j",(function(){return u})),t.d(n,"o",(function(){return h})),t.d(n,"k",(function(){return p})),t.d(n,"h",(function(){return f})),t.d(n,"r",(function(){return m})),t.d(n,"p",(function(){return b})),t.d(n,"s",(function(){return y})),t.d(n,"u",(function(){return g})),t.d(n,"c",(function(){return v})),t.d(n,"f",(function(){return w})),t.d(n,"d",(function(){return P})),t.d(n,"l",(function(){return T})),t.d(n,"a",(function(){return A})),t.d(n,"b",(function(){return I})),t.d(n,"g",(function(){return q})),t.d(n,"t",(function(){return S})),t.d(n,"m",(function(){return k}));t(22),t(30);var i="https://ius2ab8yjf.execute-api.eu-west-2.amazonaws.com/portal",a="/users/v1/{endpoint}",o="/admin/v1/{endpoint}",r="id_token",s="refresh_token",c="x_user_token",d="userName",l=86400,u=a.replace("{endpoint}","login"),h=a.replace("{endpoint}","register"),p=a.replace("{endpoint}","logout"),f=a.replace("{endpoint}","forgot-password"),m=a.replace("{endpoint}","{userName}/reset-password"),b=a.replace("{endpoint}","reset-password-confirmation"),y=a.replace("{endpoint}","refresh-token"),g=a.replace("{endpoint}","{userName}"),v="/developers/v1/{endpoint}".replace("{endpoint}","apps?userName={userName}"),w="/developers/v1/{endpoint}".replace("{endpoint}","apps"),P="/developers/v1/{endpoint}".replace("{endpoint}","{userName}/apps/{appId}"),T="/usage-plans/v1/{endpoint}".replace("{endpoint}","plans"),A=o.replace("{endpoint}","profile"),I=o.replace("{endpoint}","developers"),q=o.replace("{endpoint}","{userName}"),S=o.replace("{endpoint}","role/{userName}"),k="/usage-plans/v1/{endpoint}".replace("{endpoint}","plans/publish")},function(e,n,t){var i=t(9),a=t(40).f,o=t(28),r=t(26),s=t(102),c=t(145),d=t(92);e.exports=function(e,n){var t,l,u,h,p,f=e.target,m=e.global,b=e.stat;if(t=m?i:b?i[f]||s(f,{}):(i[f]||{}).prototype)for(l in n){if(h=n[l],u=e.noTargetGet?(p=a(t,l))&&p.value:t[l],!d(m?l:f+(b?".":"#")+l,e.forced)&&void 0!==u){if(typeof h==typeof u)continue;c(h,u)}(e.sham||u&&u.sham)&&o(h,"sham",!0),r(t,l,h,e)}}},function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));t(95),t(34),t(36),t(343),t(37),t(38),t(157),t(344),t(122);var i=t(88);function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){Object(i.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}},function(e,n,t){"use strict";var i=t(17),a=t(88),o=t(4),r=t(35),s=t(7),c=t(10),d=(t(51),t(37),t(38),t(223),t(12),t(48),t(22),t(30),t(123)),l=t.n(d),u=t(2),h=t(6),p=function(){function e(){Object(s.a)(this,e)}var n;return Object(c.a)(e,null,[{key:"updateRefreshToken",value:(n=Object(i.a)(regeneratorRuntime.mark((function e(){var n=this;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){var i=h.a.getValue(u.n);h.a.removeValues(u.i,u.w),m.removeTokens(),n.updateTokens(i).then((function(n){var t=n.data,i=t.AccessToken,a=t.ExpiresIn,o=t.IdToken,r=t.refreshToken;return h.a.setValueWithExpires(u.i,o,a),h.a.setValueWithExpires(u.w,i,a),h.a.setValueWithExpires(u.n,r,a),m.setTokens(),e()})).catch((function(e){return h.a.removeValues(u.n,u.v),t(e)}))})));case 1:case"end":return e.stop()}}),e)}))),function(){return n.apply(this,arguments)})},{key:"updateTokens",value:function(e){return m.post(u.s,null,{headers:Object(o.a)(Object(o.a)({},m.getHeaders()),{},{refresh_token:e})})}}]),e}(),f=function(){function e(){Object(s.a)(this,e),this.headers={Accept:"application/json","X-Requested-With":"XMLHttpRequest"},this.setTokens(),this.requestWait=!1,this.requestsQueue=[]}var n,t,d,f;return Object(c.a)(e,[{key:"getHeaders",value:function(){return this.headers}},{key:"onAccessTokenFetched",value:function(){var e=h.a.getValues([u.i],[u.w]),n=Object(r.a)(e,2),t=n[0],i=n[1];this.requestsQueue.forEach((function(e){return e(t,i)})),this.requestsQueue.splice(0,this.requestsQueue.length)}},{key:"setTokens",value:function(){var e=h.a.getValues(u.w,u.i),n=Object(r.a)(e,2),t=n[0],i=n[1];t&&i&&(this.headers=Object(o.a)(Object(o.a)({},this.headers),{},{Authorization:"Bearer ".concat(i),x_user_token:t}),this.initClient())}},{key:"removeTokens",value:function(){delete this.headers.Authorization,delete this.headers.x_user_token}},{key:"addSubscriber",value:function(e){this.requestsQueue.push(e)}},{key:"initClient",value:function(){var e=this;return this.client=l.a.create({baseURL:u.e,headers:Object(o.a)({},this.getHeaders())}),this.client.interceptors.response.use((function(e){var n,t;return e.data.error?Promise.reject(null===(n=e.data)||void 0===n||null===(t=n.errorDescription)||void 0===t?void 0:t.name):e}),(function(n){if(401===n.response.status&&h.a.getValue(u.n)){var t=n.config,i=Object(o.a)({},t);return e.requestWait||(e.requestWait=!0,p.updateRefreshToken(i).then((function(){e.onAccessTokenFetched(),e.requestWait=!1})).catch((function(e){return window.location.replace("/login/"),Promise.reject(e)}))),new Promise((function(n){e.addSubscriber((function(e,t){i.headers=Object(o.a)(Object(o.a)({},i.headers),Object(a.a)({Authorization:"Bearer "+e},u.w,t)),n(l()(i))}))}))}return 401===n.response.status?window.location.replace("/login/"):Promise.reject(n)})),this.client}},{key:"request",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.initClient(),this.client.request(e)}},{key:"get",value:(f=Object(i.a)(regeneratorRuntime.mark((function e(n,t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request(Object(o.a)({method:"GET",url:n},t)));case 1:case"end":return e.stop()}}),e,this)}))),function(e,n){return f.apply(this,arguments)})},{key:"post",value:(d=Object(i.a)(regeneratorRuntime.mark((function e(n,t,i){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request(Object(o.a)({method:"POST",url:n,data:t},i)));case 1:case"end":return e.stop()}}),e,this)}))),function(e,n,t){return d.apply(this,arguments)})},{key:"put",value:(t=Object(i.a)(regeneratorRuntime.mark((function e(n,t,i){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request(Object(o.a)({method:"PUT",url:n,data:t},i)));case 1:case"end":return e.stop()}}),e,this)}))),function(e,n,i){return t.apply(this,arguments)})},{key:"delete",value:(n=Object(i.a)(regeneratorRuntime.mark((function e(n,t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.request(Object(o.a)({method:"DELETE",url:n},t)));case 1:case"end":return e.stop()}}),e,this)}))),function(e,t){return n.apply(this,arguments)})}],[{key:"create",value:function(){return e.instance||(e.instance=new e),e.instance}}]),e}(),m=n.a=f.create()},function(e,n,t){"use strict";t(29),t(37),t(38);var i=t(69),a=t.n(i),o=t(2);n.a={getValue:function(e){return a.a.get(e)},getValues:function(){for(var e=this,n=arguments.length,t=new Array(n),i=0;i<n;i++)t[i]=arguments[i];return t.map((function(n){return e.getValue(n)}))},setValue:function(e,n){a.a.set(e,n)},setValueWithExpires:function(e,n,t){a.a.set(e,n,{expires:t/o.q})},removeValues:function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];n.forEach((function(e){a.a.remove(e)}))}}},function(e,n,t){"use strict";function i(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}t.d(n,"a",(function(){return i}))},function(e,n){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n){var t=function(e){return e&&e.Math==Math&&e};e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));t(122);function i(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,n,t){return n&&i(e.prototype,n),t&&i(e,t),e}},function(e,n,t){var i=t(9),a=t(74),o=t(18),r=t(75),s=t(104),c=t(142),d=a("wks"),l=i.Symbol,u=c?l:l&&l.withoutSetter||r;e.exports=function(e){return o(d,e)&&(s||"string"==typeof d[e])||(s&&o(l,e)?d[e]=l[e]:d[e]=u("Symbol."+e)),d[e]}},function(e,n,t){var i=t(111),a=t(26),o=t(242);i||a(Object.prototype,"toString",o,{unsafe:!0})},function(e,n){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,n,t){var i=t(8);e.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n,t){var i=t(13);e.exports=function(e){if(!i(e))throw TypeError(String(e)+" is not an object");return e}},function(e,n,t){var i=t(14),a=t(140),o=t(15),r=t(72),s=Object.defineProperty;n.f=i?s:function(e,n,t){if(o(e),n=r(n,!0),o(t),a)try{return s(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));t(12);function i(e,n,t,i,a,o,r){try{var s=e[o](r),c=s.value}catch(e){return void t(e)}s.done?n(c):Promise.resolve(c).then(i,a)}function a(e){return function(){var n=this,t=arguments;return new Promise((function(a,o){var r=e.apply(n,t);function s(e){i(r,a,o,s,c,"next",e)}function c(e){i(r,a,o,s,c,"throw",e)}s(void 0)}))}}},function(e,n,t){var i=t(23),a={}.hasOwnProperty;e.exports=Object.hasOwn||function(e,n){return a.call(i(e),n)}},function(e,n,t){"use strict";var i=t(191),a=Object.prototype.toString;function o(e){return"[object Array]"===a.call(e)}function r(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function c(e){if("[object Object]"!==a.call(e))return!1;var n=Object.getPrototypeOf(e);return null===n||n===Object.prototype}function d(e){return"[object Function]"===a.call(e)}function l(e,n){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var t=0,i=e.length;t<i;t++)n.call(null,e[t],t,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.call(null,e[a],a,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:function(e){return null!==e&&!r(e)&&null!==e.constructor&&!r(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:c,isUndefined:r,isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:d,isStream:function(e){return s(e)&&d(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var n={};function t(t,i){c(n[i])&&c(t)?n[i]=e(n[i],t):c(t)?n[i]=e({},t):o(t)?n[i]=t.slice():n[i]=t}for(var i=0,a=arguments.length;i<a;i++)l(arguments[i],t);return n},extend:function(e,n,t){return l(n,(function(n,a){e[a]=t&&"function"==typeof n?i(n,t):n})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,n,t){"use strict";function i(e,n,t,i,a,o,r,s){var c,d="function"==typeof e?e.options:e;if(n&&(d.render=n,d.staticRenderFns=t,d._compiled=!0),i&&(d.functional=!0),o&&(d._scopeId="data-v-"+o),r?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},d._ssrRegister=c):a&&(c=s?function(){a.call(this,(d.functional?this.parent:this).$root.$options.shadowRoot)}:a),c)if(d.functional){d._injectStyles=c;var l=d.render;d.render=function(e,n){return c.call(n),l(e,n)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,c):[c]}return{exports:e,options:d}}t.d(n,"a",(function(){return i}))},function(e,n,t){"use strict";var i=t(135).charAt,a=t(46),o=t(127),r=a.set,s=a.getterFor("String Iterator");o(String,"String",(function(e){r(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,n=s(this),t=n.string,a=n.index;return a>=t.length?{value:void 0,done:!0}:(e=i(t,a),n.index+=e.length,{value:e,done:!1})}))},function(e,n,t){"use strict";var i=t(3),a=t(100);i({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(e,n,t){var i=t(39);e.exports=function(e){return Object(i(e))}},function(e,n,t){var i=t(9),a=t(156),o=t(131),r=t(28),s=t(11),c=s("iterator"),d=s("toStringTag"),l=o.values;for(var u in a){var h=i[u],p=h&&h.prototype;if(p){if(p[c]!==l)try{r(p,c,l)}catch(e){p[c]=l}if(p[d]||r(p,d,u),a[u])for(var f in o)if(p[f]!==o[f])try{r(p,f,o[f])}catch(e){p[f]=o[f]}}}},function(e,n,t){var i=t(59),a=t(39);e.exports=function(e){return i(a(e))}},function(e,n,t){var i=t(9),a=t(28),o=t(18),r=t(102),s=t(108),c=t(46),d=c.get,l=c.enforce,u=String(String).split("String");(e.exports=function(e,n,t,s){var c,d=!!s&&!!s.unsafe,h=!!s&&!!s.enumerable,p=!!s&&!!s.noTargetGet;"function"==typeof t&&("string"!=typeof n||o(t,"name")||a(t,"name",n),(c=l(t)).source||(c.source=u.join("string"==typeof n?n:""))),e!==i?(d?!p&&e[n]&&(h=!0):delete e[n],h?e[n]=t:a(e,n,t)):h?e[n]=t:r(n,t)})(Function.prototype,"toString",(function(){return"function"==typeof this&&d(this).source||s(this)}))},function(e,n,t){var i=t(55),a=Math.min;e.exports=function(e){return e>0?a(i(e),9007199254740991):0}},function(e,n,t){var i=t(14),a=t(16),o=t(56);e.exports=i?function(e,n,t){return a.f(e,n,o(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){"use strict";var i=t(3),a=t(45).map;i({target:"Array",proto:!0,forced:!t(65)("map")},{map:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var i=t(217),a=t(15),o=t(27),r=t(55),s=t(39),c=t(221),d=t(248),l=t(218),u=Math.max,h=Math.min;i("replace",2,(function(e,n,t,i){var p=i.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,f=i.REPLACE_KEEPS_$0,m=p?"$":"$0";return[function(t,i){var a=s(this),o=null==t?void 0:t[e];return void 0!==o?o.call(t,a,i):n.call(String(a),t,i)},function(e,i){if(!p&&f||"string"==typeof i&&-1===i.indexOf(m)){var s=t(n,e,this,i);if(s.done)return s.value}var b=a(e),y=String(this),g="function"==typeof i;g||(i=String(i));var v=b.global;if(v){var w=b.unicode;b.lastIndex=0}for(var P=[];;){var T=l(b,y);if(null===T)break;if(P.push(T),!v)break;""===String(T[0])&&(b.lastIndex=c(y,o(b.lastIndex),w))}for(var A,I="",q=0,S=0;S<P.length;S++){T=P[S];for(var k=String(T[0]),M=u(h(r(T.index),y.length),0),C=[],O=1;O<T.length;O++)C.push(void 0===(A=T[O])?A:String(A));var j=T.groups;if(g){var x=[k].concat(C,M,y);void 0!==j&&x.push(j);var R=String(i.apply(void 0,x))}else R=d(k,y,M,C,j,i);M>=q&&(I+=y.slice(q,M)+R,q=M+k.length)}return I+y.slice(q)}]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var i=t(168),a="object"==typeof self&&self&&self.Object===Object&&self,o=i||a||Function("return this")();e.exports=o},function(e,n,t){var i=t(141),a=t(9),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,n){return arguments.length<2?o(i[e])||o(a[e]):i[e]&&i[e][n]||a[e]&&a[e][n]}},function(e,n,t){"use strict";var i=t(3),a=t(9),o=t(33),r=t(42),s=t(14),c=t(104),d=t(142),l=t(8),u=t(18),h=t(57),p=t(13),f=t(15),m=t(23),b=t(25),y=t(72),g=t(56),v=t(53),w=t(61),P=t(73),T=t(246),A=t(109),I=t(40),q=t(16),S=t(78),k=t(28),M=t(26),C=t(74),O=t(77),j=t(62),x=t(75),R=t(11),D=t(163),E=t(164),F=t(70),N=t(46),B=t(45).forEach,U=O("hidden"),L=R("toPrimitive"),z=N.set,H=N.getterFor("Symbol"),_=Object.prototype,G=a.Symbol,V=o("JSON","stringify"),$=I.f,K=q.f,X=T.f,J=S.f,Y=C("symbols"),Q=C("op-symbols"),W=C("string-to-symbol-registry"),Z=C("symbol-to-string-registry"),ee=C("wks"),ne=a.QObject,te=!ne||!ne.prototype||!ne.prototype.findChild,ie=s&&l((function(){return 7!=v(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(e,n,t){var i=$(_,n);i&&delete _[n],K(e,n,t),i&&e!==_&&K(_,n,i)}:K,ae=function(e,n){var t=Y[e]=v(G.prototype);return z(t,{type:"Symbol",tag:e,description:n}),s||(t.description=n),t},oe=d?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof G},re=function(e,n,t){e===_&&re(Q,n,t),f(e);var i=y(n,!0);return f(t),u(Y,i)?(t.enumerable?(u(e,U)&&e[U][i]&&(e[U][i]=!1),t=v(t,{enumerable:g(0,!1)})):(u(e,U)||K(e,U,g(1,{})),e[U][i]=!0),ie(e,i,t)):K(e,i,t)},se=function(e,n){f(e);var t=b(n),i=w(t).concat(ue(t));return B(i,(function(n){s&&!ce.call(t,n)||re(e,n,t[n])})),e},ce=function(e){var n=y(e,!0),t=J.call(this,n);return!(this===_&&u(Y,n)&&!u(Q,n))&&(!(t||!u(this,n)||!u(Y,n)||u(this,U)&&this[U][n])||t)},de=function(e,n){var t=b(e),i=y(n,!0);if(t!==_||!u(Y,i)||u(Q,i)){var a=$(t,i);return!a||!u(Y,i)||u(t,U)&&t[U][i]||(a.enumerable=!0),a}},le=function(e){var n=X(b(e)),t=[];return B(n,(function(e){u(Y,e)||u(j,e)||t.push(e)})),t},ue=function(e){var n=e===_,t=X(n?Q:b(e)),i=[];return B(t,(function(e){!u(Y,e)||n&&!u(_,e)||i.push(Y[e])})),i};(c||(M((G=function(){if(this instanceof G)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,n=x(e),t=function(e){this===_&&t.call(Q,e),u(this,U)&&u(this[U],n)&&(this[U][n]=!1),ie(this,n,g(1,e))};return s&&te&&ie(_,n,{configurable:!0,set:t}),ae(n,e)}).prototype,"toString",(function(){return H(this).tag})),M(G,"withoutSetter",(function(e){return ae(x(e),e)})),S.f=ce,q.f=re,I.f=de,P.f=T.f=le,A.f=ue,D.f=function(e){return ae(R(e),e)},s&&(K(G.prototype,"description",{configurable:!0,get:function(){return H(this).description}}),r||M(_,"propertyIsEnumerable",ce,{unsafe:!0}))),i({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:G}),B(w(ee),(function(e){E(e)})),i({target:"Symbol",stat:!0,forced:!c},{for:function(e){var n=String(e);if(u(W,n))return W[n];var t=G(n);return W[n]=t,Z[t]=n,t},keyFor:function(e){if(!oe(e))throw TypeError(e+" is not a symbol");if(u(Z,e))return Z[e]},useSetter:function(){te=!0},useSimple:function(){te=!1}}),i({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(e,n){return void 0===n?v(e):se(v(e),n)},defineProperty:re,defineProperties:se,getOwnPropertyDescriptor:de}),i({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:le,getOwnPropertySymbols:ue}),i({target:"Object",stat:!0,forced:l((function(){A.f(1)}))},{getOwnPropertySymbols:function(e){return A.f(m(e))}}),V)&&i({target:"JSON",stat:!0,forced:!c||l((function(){var e=G();return"[null]"!=V([e])||"{}"!=V({a:e})||"{}"!=V(Object(e))}))},{stringify:function(e,n,t){for(var i,a=[e],o=1;arguments.length>o;)a.push(arguments[o++]);if(i=n,(p(n)||void 0!==e)&&!oe(e))return h(n)||(n=function(e,n){if("function"==typeof i&&(n=i.call(this,e,n)),!oe(n))return n}),a[1]=n,V.apply(null,a)}});G.prototype[L]||k(G.prototype,L,G.prototype.valueOf),F(G,"Symbol"),j[U]=!0},function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));t(96);t(34),t(43),t(12),t(66),t(21),t(24);var i=t(50);function a(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var i,a,o=[],r=!0,s=!1;try{for(t=t.call(e);!(r=(i=t.next()).done)&&(o.push(i.value),!n||o.length!==n);r=!0);}catch(e){s=!0,a=e}finally{try{r||null==t.return||t.return()}finally{if(s)throw a}}return o}}(e,n)||Object(i.a)(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,n,t){"use strict";var i=t(3),a=t(45).filter;i({target:"Array",proto:!0,forced:!t(65)("filter")},{filter:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var i=t(3),a=t(161);i({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(e,n,t){var i=t(9),a=t(156),o=t(161),r=t(28);for(var s in a){var c=i[s],d=c&&c.prototype;if(d&&d.forEach!==o)try{r(d,"forEach",o)}catch(e){d.forEach=o}}},function(e,n){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,n,t){var i=t(14),a=t(78),o=t(56),r=t(25),s=t(72),c=t(18),d=t(140),l=Object.getOwnPropertyDescriptor;n.f=i?l:function(e,n){if(e=r(e),n=s(n,!0),d)try{return l(e,n)}catch(e){}if(c(e,n))return o(!a.f.call(e,n),e[n])}},function(e,n){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,n){e.exports=!1},function(e,n,t){"use strict";var i=t(3),a=t(14),o=t(9),r=t(18),s=t(13),c=t(16).f,d=t(145),l=o.Symbol;if(a&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var u={},h=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),n=this instanceof h?new l(e):void 0===e?l():l(e);return""===e&&(u[n]=!0),n};d(h,l);var p=h.prototype=l.prototype;p.constructor=h;var f=p.toString,m="Symbol(test)"==String(l("test")),b=/^Symbol\((.*)\)[^)]+$/;c(p,"description",{configurable:!0,get:function(){var e=s(this)?this.valueOf():this,n=f.call(e);if(r(u,e))return"";var t=m?n.slice(7,-1):n.replace(b,"$1");return""===t?void 0:t}}),i({global:!0,forced:!0},{Symbol:h})}},function(e,n,t){var i=t(267),a=t(270);e.exports=function(e,n){var t=a(e,n);return i(t)?t:void 0}},function(e,n,t){var i=t(71),a=t(59),o=t(23),r=t(27),s=t(99),c=[].push,d=function(e){var n=1==e,t=2==e,d=3==e,l=4==e,u=6==e,h=7==e,p=5==e||u;return function(f,m,b,y){for(var g,v,w=o(f),P=a(w),T=i(m,b,3),A=r(P.length),I=0,q=y||s,S=n?q(f,A):t||h?q(f,0):void 0;A>I;I++)if((p||I in P)&&(v=T(g=P[I],I,w),e))if(n)S[I]=v;else if(v)switch(e){case 3:return!0;case 5:return g;case 6:return I;case 2:c.call(S,g)}else switch(e){case 4:return!1;case 7:c.call(S,g)}return u?-1:d||l?l:S}};e.exports={forEach:d(0),map:d(1),filter:d(2),some:d(3),every:d(4),find:d(5),findIndex:d(6),filterOut:d(7)}},function(e,n,t){var i,a,o,r=t(232),s=t(9),c=t(13),d=t(28),l=t(18),u=t(101),h=t(77),p=t(62),f=s.WeakMap;if(r||u.state){var m=u.state||(u.state=new f),b=m.get,y=m.has,g=m.set;i=function(e,n){if(y.call(m,e))throw new TypeError("Object already initialized");return n.facade=e,g.call(m,e,n),n},a=function(e){return b.call(m,e)||{}},o=function(e){return y.call(m,e)}}else{var v=h("state");p[v]=!0,i=function(e,n){if(l(e,v))throw new TypeError("Object already initialized");return n.facade=e,d(e,v,n),n},a=function(e){return l(e,v)?e[v]:{}},o=function(e){return l(e,v)}}e.exports={set:i,get:a,has:o,enforce:function(e){return o(e)?a(e):i(e,{})},getterFor:function(e){return function(n){var t;if(!c(n)||(t=a(n)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}}}},function(e,n){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},function(e,n,t){var i=t(14),a=t(16).f,o=Function.prototype,r=o.toString,s=/^\s*function ([^ (]*)/;i&&!("name"in o)&&a(o,"name",{configurable:!0,get:function(){try{return r.call(this).match(s)[1]}catch(e){return""}}})},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));t(91),t(12),t(48),t(165),t(21);var i=t(68);function a(e,n){if(e){if("string"==typeof e)return Object(i.a)(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(i.a)(e,n):void 0}}},function(e,n,t){var i=function(e){"use strict";var n=Object.prototype,t=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",o=i.asyncIterator||"@@asyncIterator",r=i.toStringTag||"@@toStringTag";function s(e,n,t){return Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{s({},"")}catch(e){s=function(e,n,t){return e[n]=t}}function c(e,n,t,i){var a=n&&n.prototype instanceof u?n:u,o=Object.create(a.prototype),r=new A(i||[]);return o._invoke=function(e,n,t){var i="suspendedStart";return function(a,o){if("executing"===i)throw new Error("Generator is already running");if("completed"===i){if("throw"===a)throw o;return q()}for(t.method=a,t.arg=o;;){var r=t.delegate;if(r){var s=w(r,t);if(s){if(s===l)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===i)throw i="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);i="executing";var c=d(e,n,t);if("normal"===c.type){if(i=t.done?"completed":"suspendedYield",c.arg===l)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(i="completed",t.method="throw",t.arg=c.arg)}}}(e,t,r),o}function d(e,n,t){try{return{type:"normal",arg:e.call(n,t)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var l={};function u(){}function h(){}function p(){}var f={};f[a]=function(){return this};var m=Object.getPrototypeOf,b=m&&m(m(I([])));b&&b!==n&&t.call(b,a)&&(f=b);var y=p.prototype=u.prototype=Object.create(f);function g(e){["next","throw","return"].forEach((function(n){s(e,n,(function(e){return this._invoke(n,e)}))}))}function v(e,n){var i;this._invoke=function(a,o){function r(){return new n((function(i,r){!function i(a,o,r,s){var c=d(e[a],e,o);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==typeof u&&t.call(u,"__await")?n.resolve(u.__await).then((function(e){i("next",e,r,s)}),(function(e){i("throw",e,r,s)})):n.resolve(u).then((function(e){l.value=e,r(l)}),(function(e){return i("throw",e,r,s)}))}s(c.arg)}(a,o,i,r)}))}return i=i?i.then(r,r):r()}}function w(e,n){var t=e.iterator[n.method];if(void 0===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=void 0,w(e,n),"throw"===n.method))return l;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var i=d(t,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,l;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,l):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,l)}function P(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function T(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function I(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,o=function n(){for(;++i<e.length;)if(t.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:q}}function q(){return{value:void 0,done:!0}}return h.prototype=y.constructor=p,p.constructor=h,h.displayName=s(p,r,"GeneratorFunction"),e.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===h||"GeneratorFunction"===(n.displayName||n.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,s(e,r,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},g(v.prototype),v.prototype[o]=function(){return this},e.AsyncIterator=v,e.async=function(n,t,i,a,o){void 0===o&&(o=Promise);var r=new v(c(n,t,i,a),o);return e.isGeneratorFunction(t)?r:r.next().then((function(e){return e.done?e.value:r.next()}))},g(y),s(y,r,"Generator"),y[a]=function(){return this},y.toString=function(){return"[object Generator]"},e.keys=function(e){var n=[];for(var t in e)n.push(t);return n.reverse(),function t(){for(;n.length;){var i=n.pop();if(i in e)return t.value=i,t.done=!1,t}return t.done=!0,t}},e.values=I,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&t.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(t,i){return r.type="throw",r.arg=e,n.next=t,i&&(n.method="next",n.arg=void 0),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],r=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var s=t.call(o,"catchLoc"),c=t.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(e,n){for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var r=o?o.completion:{};return r.type=e,r.arg=n,o?(this.method="next",this.next=o.finallyLoc,l):this.complete(r)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),l},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),T(t),l}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===e){var i=t.completion;if("throw"===i.type){var a=i.arg;T(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,t){return this.delegate={iterator:I(e),resultName:n,nextLoc:t},"next"===this.method&&(this.arg=void 0),l}},e}(e.exports);try{regeneratorRuntime=i}catch(e){Function("r","regeneratorRuntime = r")(i)}},function(e,n,t){"use strict";t.d(n,"a",(function(){return o}));t(96);var i=t(68);t(34),t(43),t(12),t(66),t(21),t(24),t(165);var a=t(50);function o(e){return function(e){if(Array.isArray(e))return Object(i.a)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Object(a.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(e,n,t){var i,a=t(15),o=t(132),r=t(107),s=t(62),c=t(144),d=t(103),l=t(77),u=l("IE_PROTO"),h=function(){},p=function(e){return"<script>"+e+"<\/script>"},f=function(){try{i=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,n;f=i?function(e){e.write(p("")),e.close();var n=e.parentWindow.Object;return e=null,n}(i):((n=d("iframe")).style.display="none",c.appendChild(n),n.src=String("javascript:"),(e=n.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var t=r.length;t--;)delete f.prototype[r[t]];return f()};s[u]=!0,e.exports=Object.create||function(e,n){var t;return null!==e?(h.prototype=a(e),t=new h,h.prototype=null,t[u]=e):t=f(),void 0===n?t:o(t,n)}},function(e,n,t){"use strict";var i=t(8);e.exports=function(e,n){var t=[][e];return!!t&&i((function(){t.call(null,n||function(){throw 1},1)}))}},function(e,n){var t=Math.ceil,i=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?i:t)(e)}},function(e,n){e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){var i=t(47);e.exports=Array.isArray||function(e){return"Array"==i(e)}},function(e,n,t){var i=t(67),a=t(252),o=t(253),r=i?i.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":r&&r in Object(e)?a(e):o(e)}},function(e,n,t){var i=t(8),a=t(47),o="".split;e.exports=i((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?o.call(e,""):Object(e)}:Object},function(e,n,t){var i,a,o=t(9),r=t(76),s=o.process,c=s&&s.versions,d=c&&c.v8;d?a=(i=d.split("."))[0]<4?1:i[0]+i[1]:r&&(!(i=r.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=r.match(/Chrome\/(\d+)/))&&(a=i[1]),e.exports=a&&+a},function(e,n,t){var i=t(143),a=t(107);e.exports=Object.keys||function(e){return i(e,a)}},function(e,n){e.exports={}},function(e,n){e.exports={}},function(e,n,t){"use strict";var i=t(72),a=t(16),o=t(56);e.exports=function(e,n,t){var r=i(n);r in e?a.f(e,r,o(0,t)):e[r]=t}},function(e,n,t){var i=t(8),a=t(11),o=t(60),r=a("species");e.exports=function(e){return o>=51||!i((function(){var n=[];return(n.constructor={})[r]=function(){return{foo:1}},1!==n[e](Boolean).foo}))}},function(e,n,t){t(164)("iterator")},function(e,n,t){var i=t(32).Symbol;e.exports=i},function(e,n,t){"use strict";function i(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,i=new Array(n);t<n;t++)i[t]=e[t];return i}t.d(n,"a",(function(){return i}))},function(e,n,t){e.exports=function(){"use strict";function e(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)e[i]=t[i]}return e}return function n(t,i){function a(n,a,o){if("undefined"!=typeof document){"number"==typeof(o=e({},i,o)).expires&&(o.expires=new Date(Date.now()+864e5*o.expires)),o.expires&&(o.expires=o.expires.toUTCString()),n=encodeURIComponent(n).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var r="";for(var s in o)o[s]&&(r+="; "+s,!0!==o[s]&&(r+="="+o[s].split(";")[0]));return document.cookie=n+"="+t.write(a,n)+r}}return Object.create({set:a,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],i={},a=0;a<n.length;a++){var o=n[a].split("="),r=o.slice(1).join("=");try{var s=decodeURIComponent(o[0]);if(i[s]=t.read(r,s),e===s)break}catch(e){}}return e?i[e]:i}},remove:function(n,t){a(n,"",e({},t,{expires:-1}))},withAttributes:function(t){return n(this.converter,e({},this.attributes,t))},withConverter:function(t){return n(e({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(i)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"})}()},function(e,n,t){var i=t(16).f,a=t(18),o=t(11)("toStringTag");e.exports=function(e,n,t){e&&!a(e=t?e:e.prototype,o)&&i(e,o,{configurable:!0,value:n})}},function(e,n,t){var i=t(41);e.exports=function(e,n,t){if(i(e),void 0===n)return e;switch(t){case 0:return function(){return e.call(n)};case 1:return function(t){return e.call(n,t)};case 2:return function(t,i){return e.call(n,t,i)};case 3:return function(t,i,a){return e.call(n,t,i,a)}}return function(){return e.apply(n,arguments)}}},function(e,n,t){var i=t(13);e.exports=function(e,n){if(!i(e))return e;var t,a;if(n&&"function"==typeof(t=e.toString)&&!i(a=t.call(e)))return a;if("function"==typeof(t=e.valueOf)&&!i(a=t.call(e)))return a;if(!n&&"function"==typeof(t=e.toString)&&!i(a=t.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,n,t){var i=t(143),a=t(107).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return i(e,a)}},function(e,n,t){var i=t(42),a=t(101);(e.exports=function(e,n){return a[e]||(a[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.13.1",mode:i?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(e,n){var t=0,i=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+i).toString(36)}},function(e,n,t){var i=t(33);e.exports=i("navigator","userAgent")||""},function(e,n,t){var i=t(74),a=t(75),o=i("keys");e.exports=function(e){return o[e]||(o[e]=a(e))}},function(e,n,t){"use strict";var i={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,o=a&&!i.call({1:2},1);n.f=o?function(e){var n=a(this,e);return!!n&&n.enumerable}:i},function(e,n,t){var i=t(15),a=t(233);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),n=t instanceof Array}catch(e){}return function(t,o){return i(t),a(o),n?e.call(t,o):t.__proto__=o,t}}():void 0)},function(e,n,t){var i=t(47),a=t(9);e.exports="process"==i(a.process)},function(e,n,t){var i=t(257),a=t(258),o=t(259),r=t(260),s=t(261);function c(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}c.prototype.clear=i,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=r,c.prototype.set=s,e.exports=c},function(e,n,t){var i=t(170);e.exports=function(e,n){for(var t=e.length;t--;)if(i(e[t][0],n))return t;return-1}},function(e,n,t){var i=t(44)(Object,"create");e.exports=i},function(e,n,t){var i=t(279);e.exports=function(e,n){var t=e.__data__;return i(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var i=t(120);e.exports=function(e){if("string"==typeof e||i(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n,t){"use strict";var i=t(19),a=t(364),o=t(193),r={"Content-Type":"application/x-www-form-urlencoded"};function s(e,n){!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])&&(e["Content-Type"]=n)}var c,d={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=t(194)),c),transformRequest:[function(e,n){return a(n,"Accept"),a(n,"Content-Type"),i.isFormData(e)||i.isArrayBuffer(e)||i.isBuffer(e)||i.isStream(e)||i.isFile(e)||i.isBlob(e)?e:i.isArrayBufferView(e)?e.buffer:i.isURLSearchParams(e)?(s(n,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):i.isObject(e)||n&&"application/json"===n["Content-Type"]?(s(n,"application/json"),function(e,n,t){if(i.isString(e))try{return(n||JSON.parse)(e),i.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(t||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var n=this.transitional||d.transitional,t=n&&n.silentJSONParsing,a=n&&n.forcedJSONParsing,r=!t&&"json"===this.responseType;if(r||a&&i.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw o(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(e){d.headers[e]={}})),i.forEach(["post","put","patch"],(function(e){d.headers[e]=i.merge(r)})),e.exports=d},function(e,n,t){"use strict";function i(e){this.message=e}i.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},i.prototype.__CANCEL__=!0,e.exports=i},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));t(122);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}},function(e,n,t){var i,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(i=function(){var e,n,t={version:"0.2.0"},i=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(e,n,t){return e<n?n:e>t?t:e}function o(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(i[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=a(e,i.minimum,1),t.status=1===e?null:e;var c=t.render(!n),d=c.querySelector(i.barSelector),l=i.speed,u=i.easing;return c.offsetWidth,r((function(n){""===i.positionUsing&&(i.positionUsing=t.getPositioningCSS()),s(d,function(e,n,t){var a;return(a="translate3d"===i.positionUsing?{transform:"translate3d("+o(e)+"%,0,0)"}:"translate"===i.positionUsing?{transform:"translate("+o(e)+"%,0)"}:{"margin-left":o(e)+"%"}).transition="all "+n+"ms "+t,a}(e,l,u)),1===e?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+l+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),l)}),l)):setTimeout(n,l)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),i.trickleSpeed)};return i.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*a(Math.random()*n,.1,.95)),n=a(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*i.trickleRate)},e=0,n=0,t.promise=function(i){return i&&"resolved"!==i.state()?(0===n&&t.start(),e++,n++,i.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");d(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=i.template;var a,r=n.querySelector(i.barSelector),c=e?"-100":o(t.status||0),l=document.querySelector(i.parent);return s(r,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),i.showSpinner||(a=n.querySelector(i.spinnerSelector))&&h(a),l!=document.body&&d(l,"nprogress-custom-parent"),l.appendChild(n),n},t.remove=function(){l(document.documentElement,"nprogress-busy"),l(document.querySelector(i.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&h(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var r=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),s=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var i,a=e.length,o=n.charAt(0).toUpperCase()+n.slice(1);a--;)if((i=e[a]+o)in t)return i;return n}(t))}function i(e,n,i){n=t(n),e.style[n]=i}return function(e,n){var t,a,o=arguments;if(2==o.length)for(t in n)void 0!==(a=n[t])&&n.hasOwnProperty(t)&&i(e,t,a);else i(e,o[1],o[2])}}();function c(e,n){return("string"==typeof e?e:u(e)).indexOf(" "+n+" ")>=0}function d(e,n){var t=u(e),i=t+n;c(t,n)||(e.className=i.substring(1))}function l(e,n){var t,i=u(e);c(e,n)&&(t=i.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function h(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?i.call(n,t,n,e):i)||(e.exports=a)},function(e,n,t){"use strict";t.d(n,"b",(function(){return T})),t.d(n,"c",(function(){return w}));var i=("undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).__VUE_DEVTOOLS_GLOBAL_HOOK__;function a(e,n){if(void 0===n&&(n=[]),null===e||"object"!=typeof e)return e;var t,i=(t=function(n){return n.original===e},n.filter(t)[0]);if(i)return i.copy;var o=Array.isArray(e)?[]:{};return n.push({original:e,copy:o}),Object.keys(e).forEach((function(t){o[t]=a(e[t],n)})),o}function o(e,n){Object.keys(e).forEach((function(t){return n(e[t],t)}))}function r(e){return null!==e&&"object"==typeof e}var s=function(e,n){this.runtime=n,this._children=Object.create(null),this._rawModule=e;var t=e.state;this.state=("function"==typeof t?t():t)||{}},c={namespaced:{configurable:!0}};c.namespaced.get=function(){return!!this._rawModule.namespaced},s.prototype.addChild=function(e,n){this._children[e]=n},s.prototype.removeChild=function(e){delete this._children[e]},s.prototype.getChild=function(e){return this._children[e]},s.prototype.hasChild=function(e){return e in this._children},s.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},s.prototype.forEachChild=function(e){o(this._children,e)},s.prototype.forEachGetter=function(e){this._rawModule.getters&&o(this._rawModule.getters,e)},s.prototype.forEachAction=function(e){this._rawModule.actions&&o(this._rawModule.actions,e)},s.prototype.forEachMutation=function(e){this._rawModule.mutations&&o(this._rawModule.mutations,e)},Object.defineProperties(s.prototype,c);var d=function(e){this.register([],e,!1)};d.prototype.get=function(e){return e.reduce((function(e,n){return e.getChild(n)}),this.root)},d.prototype.getNamespace=function(e){var n=this.root;return e.reduce((function(e,t){return e+((n=n.getChild(t)).namespaced?t+"/":"")}),"")},d.prototype.update=function(e){!function e(n,t,i){0;if(t.update(i),i.modules)for(var a in i.modules){if(!t.getChild(a))return void 0;e(n.concat(a),t.getChild(a),i.modules[a])}}([],this.root,e)},d.prototype.register=function(e,n,t){var i=this;void 0===t&&(t=!0);var a=new s(n,t);0===e.length?this.root=a:this.get(e.slice(0,-1)).addChild(e[e.length-1],a);n.modules&&o(n.modules,(function(n,a){i.register(e.concat(a),n,t)}))},d.prototype.unregister=function(e){var n=this.get(e.slice(0,-1)),t=e[e.length-1],i=n.getChild(t);i&&i.runtime&&n.removeChild(t)},d.prototype.isRegistered=function(e){var n=this.get(e.slice(0,-1)),t=e[e.length-1];return!!n&&n.hasChild(t)};var l;var u=function(e){var n=this;void 0===e&&(e={}),!l&&"undefined"!=typeof window&&window.Vue&&v(window.Vue);var t=e.plugins;void 0===t&&(t=[]);var a=e.strict;void 0===a&&(a=!1),this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new d(e),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._watcherVM=new l,this._makeLocalGettersCache=Object.create(null);var o=this,r=this.dispatch,s=this.commit;this.dispatch=function(e,n){return r.call(o,e,n)},this.commit=function(e,n,t){return s.call(o,e,n,t)},this.strict=a;var c=this._modules.root.state;b(this,c,[],this._modules.root),m(this,c),t.forEach((function(e){return e(n)})),(void 0!==e.devtools?e.devtools:l.config.devtools)&&function(e){i&&(e._devtoolHook=i,i.emit("vuex:init",e),i.on("vuex:travel-to-state",(function(n){e.replaceState(n)})),e.subscribe((function(e,n){i.emit("vuex:mutation",e,n)}),{prepend:!0}),e.subscribeAction((function(e,n){i.emit("vuex:action",e,n)}),{prepend:!0}))}(this)},h={state:{configurable:!0}};function p(e,n,t){return n.indexOf(e)<0&&(t&&t.prepend?n.unshift(e):n.push(e)),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}function f(e,n){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var t=e.state;b(e,t,[],e._modules.root,!0),m(e,t,n)}function m(e,n,t){var i=e._vm;e.getters={},e._makeLocalGettersCache=Object.create(null);var a=e._wrappedGetters,r={};o(a,(function(n,t){r[t]=function(e,n){return function(){return e(n)}}(n,e),Object.defineProperty(e.getters,t,{get:function(){return e._vm[t]},enumerable:!0})}));var s=l.config.silent;l.config.silent=!0,e._vm=new l({data:{$$state:n},computed:r}),l.config.silent=s,e.strict&&function(e){e._vm.$watch((function(){return this._data.$$state}),(function(){0}),{deep:!0,sync:!0})}(e),i&&(t&&e._withCommit((function(){i._data.$$state=null})),l.nextTick((function(){return i.$destroy()})))}function b(e,n,t,i,a){var o=!t.length,r=e._modules.getNamespace(t);if(i.namespaced&&(e._modulesNamespaceMap[r],e._modulesNamespaceMap[r]=i),!o&&!a){var s=y(n,t.slice(0,-1)),c=t[t.length-1];e._withCommit((function(){l.set(s,c,i.state)}))}var d=i.context=function(e,n,t){var i=""===n,a={dispatch:i?e.dispatch:function(t,i,a){var o=g(t,i,a),r=o.payload,s=o.options,c=o.type;return s&&s.root||(c=n+c),e.dispatch(c,r)},commit:i?e.commit:function(t,i,a){var o=g(t,i,a),r=o.payload,s=o.options,c=o.type;s&&s.root||(c=n+c),e.commit(c,r,s)}};return Object.defineProperties(a,{getters:{get:i?function(){return e.getters}:function(){return function(e,n){if(!e._makeLocalGettersCache[n]){var t={},i=n.length;Object.keys(e.getters).forEach((function(a){if(a.slice(0,i)===n){var o=a.slice(i);Object.defineProperty(t,o,{get:function(){return e.getters[a]},enumerable:!0})}})),e._makeLocalGettersCache[n]=t}return e._makeLocalGettersCache[n]}(e,n)}},state:{get:function(){return y(e.state,t)}}}),a}(e,r,t);i.forEachMutation((function(n,t){!function(e,n,t,i){(e._mutations[n]||(e._mutations[n]=[])).push((function(n){t.call(e,i.state,n)}))}(e,r+t,n,d)})),i.forEachAction((function(n,t){var i=n.root?t:r+t,a=n.handler||n;!function(e,n,t,i){(e._actions[n]||(e._actions[n]=[])).push((function(n){var a,o=t.call(e,{dispatch:i.dispatch,commit:i.commit,getters:i.getters,state:i.state,rootGetters:e.getters,rootState:e.state},n);return(a=o)&&"function"==typeof a.then||(o=Promise.resolve(o)),e._devtoolHook?o.catch((function(n){throw e._devtoolHook.emit("vuex:error",n),n})):o}))}(e,i,a,d)})),i.forEachGetter((function(n,t){!function(e,n,t,i){if(e._wrappedGetters[n])return void 0;e._wrappedGetters[n]=function(e){return t(i.state,i.getters,e.state,e.getters)}}(e,r+t,n,d)})),i.forEachChild((function(i,o){b(e,n,t.concat(o),i,a)}))}function y(e,n){return n.reduce((function(e,n){return e[n]}),e)}function g(e,n,t){return r(e)&&e.type&&(t=n,n=e,e=e.type),{type:e,payload:n,options:t}}function v(e){l&&e===l||
/*!
 * vuex v3.6.2
 * (c) 2021 Evan You
 * @license MIT
 */
function(e){if(Number(e.version.split(".")[0])>=2)e.mixin({beforeCreate:t});else{var n=e.prototype._init;e.prototype._init=function(e){void 0===e&&(e={}),e.init=e.init?[t].concat(e.init):t,n.call(this,e)}}function t(){var e=this.$options;e.store?this.$store="function"==typeof e.store?e.store():e.store:e.parent&&e.parent.$store&&(this.$store=e.parent.$store)}}(l=e)}h.state.get=function(){return this._vm._data.$$state},h.state.set=function(e){0},u.prototype.commit=function(e,n,t){var i=this,a=g(e,n,t),o=a.type,r=a.payload,s=(a.options,{type:o,payload:r}),c=this._mutations[o];c&&(this._withCommit((function(){c.forEach((function(e){e(r)}))})),this._subscribers.slice().forEach((function(e){return e(s,i.state)})))},u.prototype.dispatch=function(e,n){var t=this,i=g(e,n),a=i.type,o=i.payload,r={type:a,payload:o},s=this._actions[a];if(s){try{this._actionSubscribers.slice().filter((function(e){return e.before})).forEach((function(e){return e.before(r,t.state)}))}catch(e){0}var c=s.length>1?Promise.all(s.map((function(e){return e(o)}))):s[0](o);return new Promise((function(e,n){c.then((function(n){try{t._actionSubscribers.filter((function(e){return e.after})).forEach((function(e){return e.after(r,t.state)}))}catch(e){0}e(n)}),(function(e){try{t._actionSubscribers.filter((function(e){return e.error})).forEach((function(n){return n.error(r,t.state,e)}))}catch(e){0}n(e)}))}))}},u.prototype.subscribe=function(e,n){return p(e,this._subscribers,n)},u.prototype.subscribeAction=function(e,n){return p("function"==typeof e?{before:e}:e,this._actionSubscribers,n)},u.prototype.watch=function(e,n,t){var i=this;return this._watcherVM.$watch((function(){return e(i.state,i.getters)}),n,t)},u.prototype.replaceState=function(e){var n=this;this._withCommit((function(){n._vm._data.$$state=e}))},u.prototype.registerModule=function(e,n,t){void 0===t&&(t={}),"string"==typeof e&&(e=[e]),this._modules.register(e,n),b(this,this.state,e,this._modules.get(e),t.preserveState),m(this,this.state)},u.prototype.unregisterModule=function(e){var n=this;"string"==typeof e&&(e=[e]),this._modules.unregister(e),this._withCommit((function(){var t=y(n.state,e.slice(0,-1));l.delete(t,e[e.length-1])})),f(this)},u.prototype.hasModule=function(e){return"string"==typeof e&&(e=[e]),this._modules.isRegistered(e)},u.prototype.hotUpdate=function(e){this._modules.update(e),f(this,!0)},u.prototype._withCommit=function(e){var n=this._committing;this._committing=!0,e(),this._committing=n},Object.defineProperties(u.prototype,h);var w=q((function(e,n){var t={};return I(n).forEach((function(n){var i=n.key,a=n.val;t[i]=function(){var n=this.$store.state,t=this.$store.getters;if(e){var i=S(this.$store,"mapState",e);if(!i)return;n=i.context.state,t=i.context.getters}return"function"==typeof a?a.call(this,n,t):n[a]},t[i].vuex=!0})),t})),P=q((function(e,n){var t={};return I(n).forEach((function(n){var i=n.key,a=n.val;t[i]=function(){for(var n=[],t=arguments.length;t--;)n[t]=arguments[t];var i=this.$store.commit;if(e){var o=S(this.$store,"mapMutations",e);if(!o)return;i=o.context.commit}return"function"==typeof a?a.apply(this,[i].concat(n)):i.apply(this.$store,[a].concat(n))}})),t})),T=q((function(e,n){var t={};return I(n).forEach((function(n){var i=n.key,a=n.val;a=e+a,t[i]=function(){if(!e||S(this.$store,"mapGetters",e))return this.$store.getters[a]},t[i].vuex=!0})),t})),A=q((function(e,n){var t={};return I(n).forEach((function(n){var i=n.key,a=n.val;t[i]=function(){for(var n=[],t=arguments.length;t--;)n[t]=arguments[t];var i=this.$store.dispatch;if(e){var o=S(this.$store,"mapActions",e);if(!o)return;i=o.context.dispatch}return"function"==typeof a?a.apply(this,[i].concat(n)):i.apply(this.$store,[a].concat(n))}})),t}));function I(e){return function(e){return Array.isArray(e)||r(e)}(e)?Array.isArray(e)?e.map((function(e){return{key:e,val:e}})):Object.keys(e).map((function(n){return{key:n,val:e[n]}})):[]}function q(e){return function(n,t){return"string"!=typeof n?(t=n,n=""):"/"!==n.charAt(n.length-1)&&(n+="/"),e(n,t)}}function S(e,n,t){return e._modulesNamespaceMap[t]}function k(e,n,t){var i=t?e.groupCollapsed:e.group;try{i.call(e,n)}catch(t){e.log(n)}}function M(e){try{e.groupEnd()}catch(n){e.log("—— log end ——")}}function C(){var e=new Date;return" @ "+O(e.getHours(),2)+":"+O(e.getMinutes(),2)+":"+O(e.getSeconds(),2)+"."+O(e.getMilliseconds(),3)}function O(e,n){return t="0",i=n-e.toString().length,new Array(i+1).join(t)+e;var t,i}var j={Store:u,install:v,version:"3.6.2",mapState:w,mapMutations:P,mapGetters:T,mapActions:A,createNamespacedHelpers:function(e){return{mapState:w.bind(null,e),mapGetters:T.bind(null,e),mapMutations:P.bind(null,e),mapActions:A.bind(null,e)}},createLogger:function(e){void 0===e&&(e={});var n=e.collapsed;void 0===n&&(n=!0);var t=e.filter;void 0===t&&(t=function(e,n,t){return!0});var i=e.transformer;void 0===i&&(i=function(e){return e});var o=e.mutationTransformer;void 0===o&&(o=function(e){return e});var r=e.actionFilter;void 0===r&&(r=function(e,n){return!0});var s=e.actionTransformer;void 0===s&&(s=function(e){return e});var c=e.logMutations;void 0===c&&(c=!0);var d=e.logActions;void 0===d&&(d=!0);var l=e.logger;return void 0===l&&(l=console),function(e){var u=a(e.state);void 0!==l&&(c&&e.subscribe((function(e,r){var s=a(r);if(t(e,u,s)){var c=C(),d=o(e),h="mutation "+e.type+c;k(l,h,n),l.log("%c prev state","color: #9E9E9E; font-weight: bold",i(u)),l.log("%c mutation","color: #03A9F4; font-weight: bold",d),l.log("%c next state","color: #4CAF50; font-weight: bold",i(s)),M(l)}u=s})),d&&e.subscribeAction((function(e,t){if(r(e,t)){var i=C(),a=s(e),o="action "+e.type+i;k(l,o,n),l.log("%c action","color: #03A9F4; font-weight: bold",a),M(l)}})))}}};n.a=j},function(e,n,t){"use strict";var i=t(3),a=t(13),o=t(57),r=t(106),s=t(27),c=t(25),d=t(64),l=t(11),u=t(65)("slice"),h=l("species"),p=[].slice,f=Math.max;i({target:"Array",proto:!0,forced:!u},{slice:function(e,n){var t,i,l,u=c(this),m=s(u.length),b=r(e,m),y=r(void 0===n?m:n,m);if(o(u)&&("function"!=typeof(t=u.constructor)||t!==Array&&!o(t.prototype)?a(t)&&null===(t=t[h])&&(t=void 0):t=void 0,t===Array||void 0===t))return p.call(u,b,y);for(i=new(void 0===t?Array:t)(f(y-b,0)),l=0;b<y;b++,l++)b in u&&d(i,l,u[b]);return i.length=l,i}})},function(e,n,t){var i=t(8),a=/#|\.prototype\./,o=function(e,n){var t=s[r(e)];return t==d||t!=c&&("function"==typeof n?i(n):!!n)},r=o.normalize=function(e){return String(e).replace(a,".").toLowerCase()},s=o.data={},c=o.NATIVE="N",d=o.POLYFILL="P";e.exports=o},function(e,n,t){"use strict";var i=t(3),a=t(8),o=t(57),r=t(13),s=t(23),c=t(27),d=t(64),l=t(99),u=t(65),h=t(11),p=t(60),f=h("isConcatSpreadable"),m=p>=51||!a((function(){var e=[];return e[f]=!1,e.concat()[0]!==e})),b=u("concat"),y=function(e){if(!r(e))return!1;var n=e[f];return void 0!==n?!!n:o(e)};i({target:"Array",proto:!0,forced:!m||!b},{concat:function(e){var n,t,i,a,o,r=s(this),u=l(r,0),h=0;for(n=-1,i=arguments.length;n<i;n++)if(y(o=-1===n?r:arguments[n])){if(h+(a=c(o.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(t=0;t<a;t++,h++)t in o&&d(u,h,o[t])}else{if(h>=9007199254740991)throw TypeError("Maximum allowed index exceeded");d(u,h++,o)}return u.length=h,u}})},function(e,n,t){var i=t(11),a=t(53),o=t(16),r=i("unscopables"),s=Array.prototype;null==s[r]&&o.f(s,r,{configurable:!0,value:a(null)}),e.exports=function(e){s[r][e]=!0}},function(e,n,t){var i=t(3),a=t(23),o=t(61);i({target:"Object",stat:!0,forced:t(8)((function(){o(1)}))},{keys:function(e){return o(a(e))}})},function(e,n,t){t(3)({target:"Array",stat:!0},{isArray:t(57)})},function(e,n,t){"use strict";var i=t(3),a=t(45).find,o=t(94),r=!0;"find"in[]&&Array(1).find((function(){r=!1})),i({target:"Array",proto:!0,forced:r},{find:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),o("find")},function(e,n,t){"use strict";t.d(n,"a",(function(){return s}));var i=t(7),a=t(10),o=(t(22),t(30),t(5)),r=t(2),s=function(){function e(){Object(i.a)(this,e)}return Object(a.a)(e,null,[{key:"signUp",value:function(e){return o.a.post(r.o,e)}},{key:"signIn",value:function(e){return o.a.post(r.j,e)}},{key:"setNewPassword",value:function(e,n){return o.a.put(r.r.replace("{userName}",e),n)}},{key:"forgotPassword",value:function(e){return o.a.post(r.h,e)}},{key:"forgotPasswordConfirmation",value:function(e){return o.a.post(r.p,e)}},{key:"logOut",value:function(e){return o.a.post(r.k,e)}}]),e}()},function(e,n,t){var i=t(13),a=t(57),o=t(11)("species");e.exports=function(e,n){var t;return a(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!a(t.prototype)?i(t)&&null===(t=t[o])&&(t=void 0):t=void 0),new(void 0===t?Array:t)(0===n?0:n)}},function(e,n,t){"use strict";var i,a,o=t(112),r=t(137),s=t(74),c=RegExp.prototype.exec,d=s("native-string-replace",String.prototype.replace),l=c,u=(i=/a/,a=/b*/g,c.call(i,"a"),c.call(a,"a"),0!==i.lastIndex||0!==a.lastIndex),h=r.UNSUPPORTED_Y||r.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(u||p||h)&&(l=function(e){var n,t,i,a,r=this,s=h&&r.sticky,l=o.call(r),f=r.source,m=0,b=e;return s&&(-1===(l=l.replace("y","")).indexOf("g")&&(l+="g"),b=String(e).slice(r.lastIndex),r.lastIndex>0&&(!r.multiline||r.multiline&&"\n"!==e[r.lastIndex-1])&&(f="(?: "+f+")",b=" "+b,m++),t=new RegExp("^(?:"+f+")",l)),p&&(t=new RegExp("^"+f+"$(?!\\s)",l)),u&&(n=r.lastIndex),i=c.call(s?t:r,b),s?i?(i.input=i.input.slice(m),i[0]=i[0].slice(m),i.index=r.lastIndex,r.lastIndex+=i[0].length):r.lastIndex=0:u&&i&&(r.lastIndex=r.global?i.index+i[0].length:n),p&&i&&i.length>1&&d.call(i[0],t,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(i[a]=void 0)})),i}),e.exports=l},function(e,n,t){var i=t(9),a=t(102),o=i["__core-js_shared__"]||a("__core-js_shared__",{});e.exports=o},function(e,n,t){var i=t(9),a=t(28);e.exports=function(e,n){try{a(i,e,n)}catch(t){i[e]=n}return n}},function(e,n,t){var i=t(9),a=t(13),o=i.document,r=a(o)&&a(o.createElement);e.exports=function(e){return r?o.createElement(e):{}}},function(e,n,t){var i=t(60),a=t(8);e.exports=!!Object.getOwnPropertySymbols&&!a((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},function(e,n,t){var i=t(25),a=t(27),o=t(106),r=function(e){return function(n,t,r){var s,c=i(n),d=a(c.length),l=o(r,d);if(e&&t!=t){for(;d>l;)if((s=c[l++])!=s)return!0}else for(;d>l;l++)if((e||l in c)&&c[l]===t)return e||l||0;return!e&&-1}};e.exports={includes:r(!0),indexOf:r(!1)}},function(e,n,t){var i=t(55),a=Math.max,o=Math.min;e.exports=function(e,n){var t=i(e);return t<0?a(t+n,0):o(t,n)}},function(e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){var i=t(101),a=Function.toString;"function"!=typeof i.inspectSource&&(i.inspectSource=function(e){return a.call(e)}),e.exports=i.inspectSource},function(e,n){n.f=Object.getOwnPropertySymbols},function(e,n,t){var i=t(18),a=t(23),o=t(77),r=t(148),s=o("IE_PROTO"),c=Object.prototype;e.exports=r?Object.getPrototypeOf:function(e){return e=a(e),i(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?c:null}},function(e,n,t){var i={};i[t(11)("toStringTag")]="z",e.exports="[object z]"===String(i)},function(e,n,t){"use strict";var i=t(15);e.exports=function(){var e=i(this),n="";return e.global&&(n+="g"),e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),e.dotAll&&(n+="s"),e.unicode&&(n+="u"),e.sticky&&(n+="y"),n}},function(e,n,t){var i=t(251),a=t(49),o=Object.prototype,r=o.hasOwnProperty,s=o.propertyIsEnumerable,c=i(function(){return arguments}())?i:function(e){return a(e)&&r.call(e,"callee")&&!s.call(e,"callee")};e.exports=c},function(e,n,t){var i=t(44)(t(32),"Map");e.exports=i},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var i=t(271),a=t(278),o=t(280),r=t(281),s=t(282);function c(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}c.prototype.clear=i,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=r,c.prototype.set=s,e.exports=c},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var i=t(31),a=t(120),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=function(e,n){if(i(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!a(e))||(r.test(e)||!o.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var i=t(58),a=t(49);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==i(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){var i=t(3),a=t(14);i({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperty:t(16).f})},function(e,n,t){e.exports=t(359)},function(e,n,t){var i=t(3),a=t(9),o=t(76),r=[].slice,s=function(e){return function(n,t){var i=arguments.length>2,a=i?r.call(arguments,2):void 0;return e(i?function(){("function"==typeof n?n:Function(n)).apply(this,a)}:n,t)}};i({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(a.setTimeout),setInterval:s(a.setInterval)})},function(e,n,t){"use strict";var i=t(3),a=t(45).some;i({target:"Array",proto:!0,forced:!t(54)("some")},{some:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var i=t(3),a=t(105).indexOf,o=t(54),r=[].indexOf,s=!!r&&1/[1].indexOf(1,-0)<0,c=o("indexOf");i({target:"Array",proto:!0,forced:s||!c},{indexOf:function(e){return s?r.apply(this,arguments)||0:a(this,e,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var i=t(3),a=t(224),o=t(110),r=t(79),s=t(70),c=t(28),d=t(26),l=t(11),u=t(42),h=t(63),p=t(147),f=p.IteratorPrototype,m=p.BUGGY_SAFARI_ITERATORS,b=l("iterator"),y=function(){return this};e.exports=function(e,n,t,l,p,g,v){a(t,n,l);var w,P,T,A=function(e){if(e===p&&M)return M;if(!m&&e in S)return S[e];switch(e){case"keys":case"values":case"entries":return function(){return new t(this,e)}}return function(){return new t(this)}},I=n+" Iterator",q=!1,S=e.prototype,k=S[b]||S["@@iterator"]||p&&S[p],M=!m&&k||A(p),C="Array"==n&&S.entries||k;if(C&&(w=o(C.call(new e)),f!==Object.prototype&&w.next&&(u||o(w)===f||(r?r(w,f):"function"!=typeof w[b]&&c(w,b,y)),s(w,I,!0,!0),u&&(h[I]=y))),"values"==p&&k&&"values"!==k.name&&(q=!0,M=function(){return k.call(this)}),u&&!v||S[b]===M||c(S,b,M),h[n]=M,p)if(P={values:A("values"),keys:g?M:A("keys"),entries:A("entries")},v)for(T in P)(m||q||!(T in S))&&d(S,T,P[T]);else i({target:n,proto:!0,forced:m||q},P);return P}},function(e,n,t){"use strict";var i=t(33),a=t(16),o=t(11),r=t(14),s=o("species");e.exports=function(e){var n=i(e),t=a.f;r&&n&&!n[s]&&t(n,s,{configurable:!0,get:function(){return this}})}},function(e,n,t){var i=t(133),a=t(63),o=t(11)("iterator");e.exports=function(e){if(null!=e)return e[o]||e["@@iterator"]||a[i(e)]}},function(e,n,t){var i=t(11)("iterator"),a=!1;try{var o=0,r={next:function(){return{done:!!o++}},return:function(){a=!0}};r[i]=function(){return this},Array.from(r,(function(){throw 2}))}catch(e){}e.exports=function(e,n){if(!n&&!a)return!1;var t=!1;try{var o={};o[i]=function(){return{next:function(){return{done:t=!0}}}},e(o)}catch(e){}return t}},function(e,n,t){"use strict";var i=t(25),a=t(94),o=t(63),r=t(46),s=t(127),c=r.set,d=r.getterFor("Array Iterator");e.exports=s(Array,"Array",(function(e,n){c(this,{type:"Array Iterator",target:i(e),index:0,kind:n})}),(function(){var e=d(this),n=e.target,t=e.kind,i=e.index++;return!n||i>=n.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:i,done:!1}:"values"==t?{value:n[i],done:!1}:{value:[i,n[i]],done:!1}}),"values"),o.Arguments=o.Array,a("keys"),a("values"),a("entries")},function(e,n,t){var i=t(14),a=t(16),o=t(15),r=t(61);e.exports=i?Object.defineProperties:function(e,n){o(e);for(var t,i=r(n),s=i.length,c=0;s>c;)a.f(e,t=i[c++],n[t]);return e}},function(e,n,t){var i=t(111),a=t(47),o=t(11)("toStringTag"),r="Arguments"==a(function(){return arguments}());e.exports=i?a:function(e){var n,t,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=Object(e),o))?t:r?a(n):"Object"==(i=a(n))&&"function"==typeof n.callee?"Arguments":i}},function(e,n,t){var i=t(15),a=t(41),o=t(11)("species");e.exports=function(e,n){var t,r=i(e).constructor;return void 0===r||null==(t=i(r)[o])?n:a(t)}},function(e,n,t){var i=t(55),a=t(39),o=function(e){return function(n,t){var o,r,s=String(a(n)),c=i(t),d=s.length;return c<0||c>=d?e?"":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===d||(r=s.charCodeAt(c+1))<56320||r>57343?e?s.charAt(c):o:e?s.slice(c,c+2):r-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)}},function(e,n,t){var i=t(13),a=t(47),o=t(11)("match");e.exports=function(e){var n;return i(e)&&(void 0!==(n=e[o])?!!n:"RegExp"==a(e))}},function(e,n,t){"use strict";var i=t(8);function a(e,n){return RegExp(e,n)}n.UNSUPPORTED_Y=i((function(){var e=a("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),n.BROKEN_CARET=i((function(){var e=a("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(e,n,t){var i=t(14),a=t(8),o=t(103);e.exports=!i&&!a((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){var i=t(9);e.exports=i},function(e,n,t){var i=t(104);e.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){var i=t(18),a=t(25),o=t(105).indexOf,r=t(62);e.exports=function(e,n){var t,s=a(e),c=0,d=[];for(t in s)!i(r,t)&&i(s,t)&&d.push(t);for(;n.length>c;)i(s,t=n[c++])&&(~o(d,t)||d.push(t));return d}},function(e,n,t){var i=t(33);e.exports=i("document","documentElement")},function(e,n,t){var i=t(18),a=t(146),o=t(40),r=t(16);e.exports=function(e,n){for(var t=a(n),s=r.f,c=o.f,d=0;d<t.length;d++){var l=t[d];i(e,l)||s(e,l,c(n,l))}}},function(e,n,t){var i=t(33),a=t(73),o=t(109),r=t(15);e.exports=i("Reflect","ownKeys")||function(e){var n=a.f(r(e)),t=o.f;return t?n.concat(t(e)):n}},function(e,n,t){"use strict";var i,a,o,r=t(8),s=t(110),c=t(28),d=t(18),l=t(11),u=t(42),h=l("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(a=s(s(o)))!==Object.prototype&&(i=a):p=!0);var f=null==i||r((function(){var e={};return i[h].call(e)!==e}));f&&(i={}),u&&!f||d(i,h)||c(i,h,(function(){return this})),e.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:p}},function(e,n,t){var i=t(8);e.exports=!i((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,n,t){var i=t(9);e.exports=i.Promise},function(e,n,t){var i=t(11),a=t(63),o=i("iterator"),r=Array.prototype;e.exports=function(e){return void 0!==e&&(a.Array===e||r[o]===e)}},function(e,n,t){var i=t(15);e.exports=function(e){var n=e.return;if(void 0!==n)return i(n.call(e)).value}},function(e,n,t){var i,a,o,r=t(9),s=t(8),c=t(71),d=t(144),l=t(103),u=t(153),h=t(80),p=r.location,f=r.setImmediate,m=r.clearImmediate,b=r.process,y=r.MessageChannel,g=r.Dispatch,v=0,w={},P=function(e){if(w.hasOwnProperty(e)){var n=w[e];delete w[e],n()}},T=function(e){return function(){P(e)}},A=function(e){P(e.data)},I=function(e){r.postMessage(e+"",p.protocol+"//"+p.host)};f&&m||(f=function(e){for(var n=[],t=1;arguments.length>t;)n.push(arguments[t++]);return w[++v]=function(){("function"==typeof e?e:Function(e)).apply(void 0,n)},i(v),v},m=function(e){delete w[e]},h?i=function(e){b.nextTick(T(e))}:g&&g.now?i=function(e){g.now(T(e))}:y&&!u?(o=(a=new y).port2,a.port1.onmessage=A,i=c(o.postMessage,o,1)):r.addEventListener&&"function"==typeof postMessage&&!r.importScripts&&p&&"file:"!==p.protocol&&!s(I)?(i=I,r.addEventListener("message",A,!1)):i="onreadystatechange"in l("script")?function(e){d.appendChild(l("script")).onreadystatechange=function(){d.removeChild(this),P(e)}}:function(e){setTimeout(T(e),0)}),e.exports={set:f,clear:m}},function(e,n,t){var i=t(76);e.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(i)},function(e,n,t){var i=t(15),a=t(13),o=t(155);e.exports=function(e,n){if(i(e),a(n)&&n.constructor===e)return n;var t=o.f(e);return(0,t.resolve)(n),t.promise}},function(e,n,t){"use strict";var i=t(41),a=function(e){var n,t;this.promise=new e((function(e,i){if(void 0!==n||void 0!==t)throw TypeError("Bad Promise constructor");n=e,t=i})),this.resolve=i(n),this.reject=i(t)};e.exports.f=function(e){return new a(e)}},function(e,n){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,n,t){var i=t(3),a=t(14),o=t(146),r=t(25),s=t(40),c=t(64);i({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(e){for(var n,t,i=r(e),a=s.f,d=o(i),l={},u=0;d.length>u;)void 0!==(t=a(i,n=d[u++]))&&c(l,n,t);return l}})},function(e,n,t){var i=t(3),a=t(8),o=t(23),r=t(110),s=t(148);i({target:"Object",stat:!0,forced:a((function(){r(1)})),sham:!s},{getPrototypeOf:function(e){return r(o(e))}})},function(e,n,t){var i=t(136);e.exports=function(e){if(i(e))throw TypeError("The method doesn't accept regular expressions");return e}},function(e,n,t){var i=t(11)("match");e.exports=function(e){var n=/./;try{"/./"[e](n)}catch(t){try{return n[i]=!1,"/./"[e](n)}catch(e){}}return!1}},function(e,n,t){"use strict";var i=t(45).forEach,a=t(54)("forEach");e.exports=a?[].forEach:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}},function(e,n,t){var i=t(8);e.exports=!i((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,n,t){var i=t(11);n.f=i},function(e,n,t){var i=t(141),a=t(18),o=t(163),r=t(16).f;e.exports=function(e){var n=i.Symbol||(i.Symbol={});a(n,e)||r(n,e,{value:o.f(e)})}},function(e,n,t){var i=t(3),a=t(227);i({target:"Array",stat:!0,forced:!t(130)((function(e){Array.from(e)}))},{from:a})},function(e,n,t){t(3)({target:"Object",stat:!0,sham:!t(14)},{create:t(53)})},function(e,n){e.exports=function(e,n){for(var t=-1,i=n.length,a=e.length;++t<i;)e[a+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var i=t(81),a=t(262),o=t(263),r=t(264),s=t(265),c=t(266);function d(e){var n=this.__data__=new i(e);this.size=n.size}d.prototype.clear=a,d.prototype.delete=o,d.prototype.get=r,d.prototype.has=s,d.prototype.set=c,e.exports=d},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var i=t(58),a=t(115);e.exports=function(e){if(!a(e))return!1;var n=i(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var i=t(283),a=t(49);e.exports=function e(n,t,o,r,s){return n===t||(null==n||null==t||!a(n)&&!a(t)?n!=n&&t!=t:i(n,t,o,r,e,s))}},function(e,n,t){var i=t(175),a=t(286),o=t(176);e.exports=function(e,n,t,r,s,c){var d=1&t,l=e.length,u=n.length;if(l!=u&&!(d&&u>l))return!1;var h=c.get(e),p=c.get(n);if(h&&p)return h==n&&p==e;var f=-1,m=!0,b=2&t?new i:void 0;for(c.set(e,n),c.set(n,e);++f<l;){var y=e[f],g=n[f];if(r)var v=d?r(g,y,f,n,e,c):r(y,g,f,e,n,c);if(void 0!==v){if(v)continue;m=!1;break}if(b){if(!a(n,(function(e,n){if(!o(b,n)&&(y===e||s(y,e,t,r,c)))return b.push(n)}))){m=!1;break}}else if(y!==g&&!s(y,g,t,r,c)){m=!1;break}}return c.delete(e),c.delete(n),m}},function(e,n,t){var i=t(116),a=t(284),o=t(285);function r(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new i;++n<t;)this.add(e[n])}r.prototype.add=r.prototype.push=a,r.prototype.has=o,e.exports=r},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var i=t(296),a=t(302),o=t(181);e.exports=function(e){return o(e)?i(e):a(e)}},function(e,n,t){(function(e){var i=t(32),a=t(298),o=n&&!n.nodeType&&n,r=o&&"object"==typeof e&&e&&!e.nodeType&&e,s=r&&r.exports===o?i.Buffer:void 0,c=(s?s.isBuffer:void 0)||a;e.exports=c}).call(this,t(138)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var i=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==i||"symbol"!=i&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var i=t(299),a=t(300),o=t(301),r=o&&o.isTypedArray,s=r?a(r):i;e.exports=s},function(e,n,t){var i=t(171),a=t(118);e.exports=function(e){return null!=e&&a(e.length)&&!i(e)}},function(e,n,t){var i=t(44)(t(32),"Set");e.exports=i},function(e,n,t){var i=t(115);e.exports=function(e){return e==e&&!i(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var i=t(186),a=t(85);e.exports=function(e,n){for(var t=0,o=(n=i(n,e)).length;null!=e&&t<o;)e=e[a(n[t++])];return t&&t==o?e:void 0}},function(e,n,t){var i=t(31),a=t(119),o=t(313),r=t(316);e.exports=function(e,n){return i(e)?e:a(e,n)?[e]:o(r(e))}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";e.exports=function(e,n){return function(){for(var t=new Array(arguments.length),i=0;i<t.length;i++)t[i]=arguments[i];return e.apply(n,t)}}},function(e,n,t){"use strict";var i=t(19);function a(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,n,t){if(!n)return e;var o;if(t)o=t(n);else if(i.isURLSearchParams(n))o=n.toString();else{var r=[];i.forEach(n,(function(e,n){null!=e&&(i.isArray(e)?n+="[]":e=[e],i.forEach(e,(function(e){i.isDate(e)?e=e.toISOString():i.isObject(e)&&(e=JSON.stringify(e)),r.push(a(n)+"="+a(e))})))})),o=r.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,n,t){"use strict";e.exports=function(e,n,t,i,a){return e.config=n,t&&(e.code=t),e.request=i,e.response=a,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}},e}},function(e,n,t){"use strict";var i=t(19),a=t(365),o=t(366),r=t(192),s=t(367),c=t(370),d=t(371),l=t(195),u=t(86),h=t(87);e.exports=function(e){return new Promise((function(n,t){var p,f=e.data,m=e.headers,b=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(p),e.signal&&e.signal.removeEventListener("abort",p)}i.isFormData(f)&&delete m["Content-Type"];var g=new XMLHttpRequest;if(e.auth){var v=e.auth.username||"",w=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(v+":"+w)}var P=s(e.baseURL,e.url);function T(){if(g){var i="getAllResponseHeaders"in g?c(g.getAllResponseHeaders()):null,o={data:b&&"text"!==b&&"json"!==b?g.response:g.responseText,status:g.status,statusText:g.statusText,headers:i,config:e,request:g};a((function(e){n(e),y()}),(function(e){t(e),y()}),o),g=null}}if(g.open(e.method.toUpperCase(),r(P,e.params,e.paramsSerializer),!0),g.timeout=e.timeout,"onloadend"in g?g.onloadend=T:g.onreadystatechange=function(){g&&4===g.readyState&&(0!==g.status||g.responseURL&&0===g.responseURL.indexOf("file:"))&&setTimeout(T)},g.onabort=function(){g&&(t(l("Request aborted",e,"ECONNABORTED",g)),g=null)},g.onerror=function(){t(l("Network Error",e,null,g)),g=null},g.ontimeout=function(){var n=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",i=e.transitional||u.transitional;e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),t(l(n,e,i.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",g)),g=null},i.isStandardBrowserEnv()){var A=(e.withCredentials||d(P))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;A&&(m[e.xsrfHeaderName]=A)}"setRequestHeader"in g&&i.forEach(m,(function(e,n){void 0===f&&"content-type"===n.toLowerCase()?delete m[n]:g.setRequestHeader(n,e)})),i.isUndefined(e.withCredentials)||(g.withCredentials=!!e.withCredentials),b&&"json"!==b&&(g.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&g.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&g.upload&&g.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(p=function(e){g&&(t(!e||e&&e.type?new h("canceled"):e),g.abort(),g=null)},e.cancelToken&&e.cancelToken.subscribe(p),e.signal&&(e.signal.aborted?p():e.signal.addEventListener("abort",p))),f||(f=null),g.send(f)}))}},function(e,n,t){"use strict";var i=t(193);e.exports=function(e,n,t,a,o){var r=new Error(e);return i(r,n,t,a,o)}},function(e,n,t){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,n,t){"use strict";var i=t(19);e.exports=function(e,n){n=n||{};var t={};function a(e,n){return i.isPlainObject(e)&&i.isPlainObject(n)?i.merge(e,n):i.isPlainObject(n)?i.merge({},n):i.isArray(n)?n.slice():n}function o(t){return i.isUndefined(n[t])?i.isUndefined(e[t])?void 0:a(void 0,e[t]):a(e[t],n[t])}function r(e){if(!i.isUndefined(n[e]))return a(void 0,n[e])}function s(t){return i.isUndefined(n[t])?i.isUndefined(e[t])?void 0:a(void 0,e[t]):a(void 0,n[t])}function c(t){return t in n?a(e[t],n[t]):t in e?a(void 0,e[t]):void 0}var d={url:r,method:r,data:r,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:c};return i.forEach(Object.keys(e).concat(Object.keys(n)),(function(e){var n=d[e]||o,a=n(e);i.isUndefined(a)&&n!==c||(t[e]=a)})),t}},function(e,n){e.exports={version:"0.24.0"}},function(e,n,t){t(3)({target:"Object",stat:!0},{setPrototypeOf:t(79)})},function(e,n,t){var i=t(3),a=t(33),o=t(41),r=t(15),s=t(13),c=t(53),d=t(379),l=t(8),u=a("Reflect","construct"),h=l((function(){function e(){}return!(u((function(){}),[],e)instanceof e)})),p=!l((function(){u((function(){}))})),f=h||p;i({target:"Reflect",stat:!0,forced:f,sham:f},{construct:function(e,n){o(e),r(n);var t=arguments.length<3?e:o(arguments[2]);if(p&&!h)return u(e,n,t);if(e==t){switch(n.length){case 0:return new e;case 1:return new e(n[0]);case 2:return new e(n[0],n[1]);case 3:return new e(n[0],n[1],n[2]);case 4:return new e(n[0],n[1],n[2],n[3])}var i=[null];return i.push.apply(i,n),new(d.apply(e,i))}var a=t.prototype,l=c(s(a)?a:Object.prototype),f=Function.apply.call(e,l,n);return s(f)?f:l}})},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";var i={name:"Footer"},a=(t(348),t(20)),o=Object(a.a)(i,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("footer",{staticClass:"footer main-footer"},[t("div",{staticClass:"main-footer__content-holder"},[t("ul",{staticClass:"nav-links can-hide"},e._l(e.$site.themeConfig.footer,(function(n){return t("li",{staticClass:"nav-item"},[n.target?t("a",{staticClass:"nav-link",attrs:{href:n.link,target:"_blank"}},[e._v("\n          "+e._s(n.text)+"\n        ")]):t("router-link",{staticClass:"nav-link",attrs:{to:n.link}},[e._v(e._s(n.text)+"\n        ")])],1)})),0),e._v(" "),t("div",{staticClass:"copyright"},[e._v(" Copyright © 2021 GSMA. GSM and the GSM Logo are registered and owned by the GSMA.")])])])}),[],!1,null,null,null);n.a=o.exports},function(e,n,t){var i=t(249),a=t(254),o=t(325),r=t(333),s=t(342),c=t(228),d=o((function(e){var n=c(e);return s(n)&&(n=void 0),r(i(e,1,s,!0),a(n,2))}));e.exports=d},function(e,n,t){!function(){"use strict";e.exports={polyfill:function(){var e=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var t,i=e.HTMLElement||e.Element,a={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:i.prototype.scroll||s,scrollIntoView:i.prototype.scrollIntoView},o=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,r=(t=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(t)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?f.call(e,n.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):a.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?a.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):f.call(e,n.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},i.prototype.scroll=i.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var e=arguments[0].left,n=arguments[0].top;f.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");a.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},i.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):a.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},i.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var t=h(this),i=t.getBoundingClientRect(),o=this.getBoundingClientRect();t!==n.body?(f.call(this,t,t.scrollLeft+o.left-i.left,t.scrollTop+o.top-i.top),"fixed"!==e.getComputedStyle(t).position&&e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})):e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})}else a.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function s(e,n){this.scrollLeft=e,this.scrollTop=n}function c(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(e,n){return"Y"===n?e.clientHeight+r<e.scrollHeight:"X"===n?e.clientWidth+r<e.scrollWidth:void 0}function l(n,t){var i=e.getComputedStyle(n,null)["overflow"+t];return"auto"===i||"scroll"===i}function u(e){var n=d(e,"Y")&&l(e,"Y"),t=d(e,"X")&&l(e,"X");return n||t}function h(e){for(;e!==n.body&&!1===u(e);)e=e.parentNode||e.host;return e}function p(n){var t,i,a,r,s=(o()-n.startTime)/468;r=s=s>1?1:s,t=.5*(1-Math.cos(Math.PI*r)),i=n.startX+(n.x-n.startX)*t,a=n.startY+(n.y-n.startY)*t,n.method.call(n.scrollable,i,a),i===n.x&&a===n.y||e.requestAnimationFrame(p.bind(e,n))}function f(t,i,r){var c,d,l,u,h=o();t===n.body?(c=e,d=e.scrollX||e.pageXOffset,l=e.scrollY||e.pageYOffset,u=a.scroll):(c=t,d=t.scrollLeft,l=t.scrollTop,u=s),p({scrollable:c,method:u,startTime:h,startX:d,startY:l,x:i,y:r})}}}}()},function(e,n,t){"undefined"!=typeof self&&self,e.exports=function(e){var n={};function t(i){if(n[i])return n[i].exports;var a=n[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(i,a,function(n){return e[n]}.bind(null,a));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/",t(t.s=8)}([function(e,n,t){var i=t(4),a=t(5),o=t(6);e.exports=function(e){return i(e)||a(e)||o()}},function(e,n){function t(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=t=function(e){return typeof e}:e.exports=t=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(n)}e.exports=t},function(e,n,t){},function(e,n){e.exports=function(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}},function(e,n){e.exports=function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}},function(e,n){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,n){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,n,t){"use strict";var i=t(2);t.n(i).a},function(e,n,t){"use strict";t.r(n);var i=t(0),a=t.n(i),o=t(1),r=t.n(o),s=t(3),c=t.n(s),d={props:{autoscroll:{type:Boolean,default:!0}},watch:{typeAheadPointer:function(){this.autoscroll&&this.maybeAdjustScroll()},open:function(e){var n=this;this.autoscroll&&e&&this.$nextTick((function(){return n.maybeAdjustScroll()}))}},methods:{maybeAdjustScroll:function(){var e,n=(null===(e=this.$refs.dropdownMenu)||void 0===e?void 0:e.children[this.typeAheadPointer])||!1;if(n){var t=this.getDropdownViewport(),i=n.getBoundingClientRect(),a=i.top,o=i.bottom,r=i.height;if(a<t.top)return this.$refs.dropdownMenu.scrollTop=n.offsetTop;if(o>t.bottom)return this.$refs.dropdownMenu.scrollTop=n.offsetTop-(t.height-r)}},getDropdownViewport:function(){return this.$refs.dropdownMenu?this.$refs.dropdownMenu.getBoundingClientRect():{height:0,top:0,bottom:0}}}},l={data:function(){return{typeAheadPointer:-1}},watch:{filteredOptions:function(){for(var e=0;e<this.filteredOptions.length;e++)if(this.selectable(this.filteredOptions[e])){this.typeAheadPointer=e;break}}},methods:{typeAheadUp:function(){for(var e=this.typeAheadPointer-1;e>=0;e--)if(this.selectable(this.filteredOptions[e])){this.typeAheadPointer=e;break}},typeAheadDown:function(){for(var e=this.typeAheadPointer+1;e<this.filteredOptions.length;e++)if(this.selectable(this.filteredOptions[e])){this.typeAheadPointer=e;break}},typeAheadSelect:function(){var e=this.filteredOptions[this.typeAheadPointer];e&&this.select(e)}}},u={props:{loading:{type:Boolean,default:!1}},data:function(){return{mutableLoading:!1}},watch:{search:function(){this.$emit("search",this.search,this.toggleLoading)},loading:function(e){this.mutableLoading=e}},methods:{toggleLoading:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return this.mutableLoading=null==e?!this.mutableLoading:e}}};function h(e,n,t,i,a,o,r,s){var c,d="function"==typeof e?e.options:e;if(n&&(d.render=n,d.staticRenderFns=t,d._compiled=!0),i&&(d.functional=!0),o&&(d._scopeId="data-v-"+o),r?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},d._ssrRegister=c):a&&(c=s?function(){a.call(this,this.$root.$options.shadowRoot)}:a),c)if(d.functional){d._injectStyles=c;var l=d.render;d.render=function(e,n){return c.call(n),l(e,n)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,c):[c]}return{exports:e,options:d}}var p={Deselect:h({},(function(){var e=this.$createElement,n=this._self._c||e;return n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"10",height:"10"}},[n("path",{attrs:{d:"M6.895455 5l2.842897-2.842898c.348864-.348863.348864-.914488 0-1.263636L9.106534.261648c-.348864-.348864-.914489-.348864-1.263636 0L5 3.104545 2.157102.261648c-.348863-.348864-.914488-.348864-1.263636 0L.261648.893466c-.348864.348864-.348864.914489 0 1.263636L3.104545 5 .261648 7.842898c-.348864.348863-.348864.914488 0 1.263636l.631818.631818c.348864.348864.914773.348864 1.263636 0L5 6.895455l2.842898 2.842897c.348863.348864.914772.348864 1.263636 0l.631818-.631818c.348864-.348864.348864-.914489 0-1.263636L6.895455 5z"}})])}),[],!1,null,null,null).exports,OpenIndicator:h({},(function(){var e=this.$createElement,n=this._self._c||e;return n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"10"}},[n("path",{attrs:{d:"M9.211364 7.59931l4.48338-4.867229c.407008-.441854.407008-1.158247 0-1.60046l-.73712-.80023c-.407008-.441854-1.066904-.441854-1.474243 0L7 5.198617 2.51662.33139c-.407008-.441853-1.066904-.441853-1.474243 0l-.737121.80023c-.407008.441854-.407008 1.158248 0 1.600461l4.48338 4.867228L7 10l2.211364-2.40069z"}})])}),[],!1,null,null,null).exports},f={inserted:function(e,n,t){var i=t.context;if(i.appendToBody){var a=i.$refs.toggle.getBoundingClientRect(),o=a.height,r=a.top,s=a.left,c=a.width,d=window.scrollX||window.pageXOffset,l=window.scrollY||window.pageYOffset;e.unbindPosition=i.calculatePosition(e,i,{width:c+"px",left:d+s+"px",top:l+r+o+"px"}),document.body.appendChild(e)}},unbind:function(e,n,t){t.context.appendToBody&&(e.unbindPosition&&"function"==typeof e.unbindPosition&&e.unbindPosition(),e.parentNode&&e.parentNode.removeChild(e))}},m=0;function b(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function y(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?b(Object(t),!0).forEach((function(n){c()(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var g={components:y({},p),directives:{appendToBody:f},mixins:[d,l,u],props:{value:{},components:{type:Object,default:function(){return{}}},options:{type:Array,default:function(){return[]}},disabled:{type:Boolean,default:!1},clearable:{type:Boolean,default:!0},deselectFromDropdown:{type:Boolean,default:!1},searchable:{type:Boolean,default:!0},multiple:{type:Boolean,default:!1},placeholder:{type:String,default:""},transition:{type:String,default:"vs__fade"},clearSearchOnSelect:{type:Boolean,default:!0},closeOnSelect:{type:Boolean,default:!0},label:{type:String,default:"label"},autocomplete:{type:String,default:"off"},reduce:{type:Function,default:function(e){return e}},selectable:{type:Function,default:function(e){return!0}},getOptionLabel:{type:Function,default:function(e){return"object"===r()(e)?e.hasOwnProperty(this.label)?e[this.label]:console.warn('[vue-select warn]: Label key "option.'.concat(this.label,'" does not')+" exist in options object ".concat(JSON.stringify(e),".\n")+"https://vue-select.org/api/props.html#getoptionlabel"):e}},getOptionKey:{type:Function,default:function(e){if("object"!==r()(e))return e;try{return e.hasOwnProperty("id")?e.id:function(e){var n={};return Object.keys(e).sort().forEach((function(t){n[t]=e[t]})),JSON.stringify(n)}(e)}catch(n){return console.warn("[vue-select warn]: Could not stringify this option to generate unique key. Please provide'getOptionKey' prop to return a unique key for each option.\nhttps://vue-select.org/api/props.html#getoptionkey",e,n)}}},onTab:{type:Function,default:function(){this.selectOnTab&&!this.isComposing&&this.typeAheadSelect()}},taggable:{type:Boolean,default:!1},tabindex:{type:Number,default:null},pushTags:{type:Boolean,default:!1},filterable:{type:Boolean,default:!0},filterBy:{type:Function,default:function(e,n,t){return(n||"").toLocaleLowerCase().indexOf(t.toLocaleLowerCase())>-1}},filter:{type:Function,default:function(e,n){var t=this;return e.filter((function(e){var i=t.getOptionLabel(e);return"number"==typeof i&&(i=i.toString()),t.filterBy(e,i,n)}))}},createOption:{type:Function,default:function(e){return"object"===r()(this.optionList[0])?c()({},this.label,e):e}},resetOnOptionsChange:{default:!1,validator:function(e){return["function","boolean"].includes(r()(e))}},clearSearchOnBlur:{type:Function,default:function(e){var n=e.clearSearchOnSelect,t=e.multiple;return n&&!t}},noDrop:{type:Boolean,default:!1},inputId:{type:String},dir:{type:String,default:"auto"},selectOnTab:{type:Boolean,default:!1},selectOnKeyCodes:{type:Array,default:function(){return[13]}},searchInputQuerySelector:{type:String,default:"[type=search]"},mapKeydown:{type:Function,default:function(e,n){return e}},appendToBody:{type:Boolean,default:!1},calculatePosition:{type:Function,default:function(e,n,t){var i=t.width,a=t.top,o=t.left;e.style.top=a,e.style.left=o,e.style.width=i}},dropdownShouldOpen:{type:Function,default:function(e){var n=e.noDrop,t=e.open,i=e.mutableLoading;return!n&&t&&!i}},uid:{type:[String,Number],default:function(){return++m}}},data:function(){return{search:"",open:!1,isComposing:!1,pushedTags:[],_value:[]}},computed:{isTrackingValues:function(){return void 0===this.value||this.$options.propsData.hasOwnProperty("reduce")},selectedValue:function(){var e=this.value;return this.isTrackingValues&&(e=this.$data._value),e?[].concat(e):[]},optionList:function(){return this.options.concat(this.pushTags?this.pushedTags:[])},searchEl:function(){return this.$scopedSlots.search?this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector):this.$refs.search},scope:function(){var e=this,n={search:this.search,loading:this.loading,searching:this.searching,filteredOptions:this.filteredOptions};return{search:{attributes:y({disabled:this.disabled,placeholder:this.searchPlaceholder,tabindex:this.tabindex,readonly:!this.searchable,id:this.inputId,"aria-autocomplete":"list","aria-labelledby":"vs".concat(this.uid,"__combobox"),"aria-controls":"vs".concat(this.uid,"__listbox"),ref:"search",type:"search",autocomplete:this.autocomplete,value:this.search},this.dropdownOpen&&this.filteredOptions[this.typeAheadPointer]?{"aria-activedescendant":"vs".concat(this.uid,"__option-").concat(this.typeAheadPointer)}:{}),events:{compositionstart:function(){return e.isComposing=!0},compositionend:function(){return e.isComposing=!1},keydown:this.onSearchKeyDown,blur:this.onSearchBlur,focus:this.onSearchFocus,input:function(n){return e.search=n.target.value}}},spinner:{loading:this.mutableLoading},noOptions:{search:this.search,loading:this.mutableLoading,searching:this.searching},openIndicator:{attributes:{ref:"openIndicator",role:"presentation",class:"vs__open-indicator"}},listHeader:n,listFooter:n,header:y({},n,{deselect:this.deselect}),footer:y({},n,{deselect:this.deselect})}},childComponents:function(){return y({},p,{},this.components)},stateClasses:function(){return{"vs--open":this.dropdownOpen,"vs--single":!this.multiple,"vs--multiple":this.multiple,"vs--searching":this.searching&&!this.noDrop,"vs--searchable":this.searchable&&!this.noDrop,"vs--unsearchable":!this.searchable,"vs--loading":this.mutableLoading,"vs--disabled":this.disabled}},searching:function(){return!!this.search},dropdownOpen:function(){return this.dropdownShouldOpen(this)},searchPlaceholder:function(){return this.isValueEmpty&&this.placeholder?this.placeholder:void 0},filteredOptions:function(){var e=[].concat(this.optionList);if(!this.filterable&&!this.taggable)return e;var n=this.search.length?this.filter(e,this.search,this):e;if(this.taggable&&this.search.length){var t=this.createOption(this.search);this.optionExists(t)||n.unshift(t)}return n},isValueEmpty:function(){return 0===this.selectedValue.length},showClearButton:function(){return!this.multiple&&this.clearable&&!this.open&&!this.isValueEmpty}},watch:{options:function(e,n){var t=this;!this.taggable&&("function"==typeof t.resetOnOptionsChange?t.resetOnOptionsChange(e,n,t.selectedValue):t.resetOnOptionsChange)&&this.clearSelection(),this.value&&this.isTrackingValues&&this.setInternalValueFromOptions(this.value)},value:{immediate:!0,handler:function(e){this.isTrackingValues&&this.setInternalValueFromOptions(e)}},multiple:function(){this.clearSelection()},open:function(e){this.$emit(e?"open":"close")}},created:function(){this.mutableLoading=this.loading,this.$on("option:created",this.pushTag)},methods:{setInternalValueFromOptions:function(e){var n=this;Array.isArray(e)?this.$data._value=e.map((function(e){return n.findOptionFromReducedValue(e)})):this.$data._value=this.findOptionFromReducedValue(e)},select:function(e){this.$emit("option:selecting",e),this.isOptionSelected(e)?this.deselectFromDropdown&&(this.clearable||this.multiple&&this.selectedValue.length>1)&&this.deselect(e):(this.taggable&&!this.optionExists(e)&&this.$emit("option:created",e),this.multiple&&(e=this.selectedValue.concat(e)),this.updateValue(e),this.$emit("option:selected",e)),this.onAfterSelect(e)},deselect:function(e){var n=this;this.$emit("option:deselecting",e),this.updateValue(this.selectedValue.filter((function(t){return!n.optionComparator(t,e)}))),this.$emit("option:deselected",e)},clearSelection:function(){this.updateValue(this.multiple?[]:null)},onAfterSelect:function(e){this.closeOnSelect&&(this.open=!this.open,this.searchEl.blur()),this.clearSearchOnSelect&&(this.search="")},updateValue:function(e){var n=this;void 0===this.value&&(this.$data._value=e),null!==e&&(e=Array.isArray(e)?e.map((function(e){return n.reduce(e)})):this.reduce(e)),this.$emit("input",e)},toggleDropdown:function(e){var n=e.target!==this.searchEl;n&&e.preventDefault();var t=[].concat(a()(this.$refs.deselectButtons||[]),a()([this.$refs.clearButton]||!1));void 0===this.searchEl||t.filter(Boolean).some((function(n){return n.contains(e.target)||n===e.target}))?e.preventDefault():this.open&&n?this.searchEl.blur():this.disabled||(this.open=!0,this.searchEl.focus())},isOptionSelected:function(e){var n=this;return this.selectedValue.some((function(t){return n.optionComparator(t,e)}))},isOptionDeselectable:function(e){return this.isOptionSelected(e)&&this.deselectFromDropdown},optionComparator:function(e,n){return this.getOptionKey(e)===this.getOptionKey(n)},findOptionFromReducedValue:function(e){var n=this,t=[].concat(a()(this.options),a()(this.pushedTags)).filter((function(t){return JSON.stringify(n.reduce(t))===JSON.stringify(e)}));return 1===t.length?t[0]:t.find((function(e){return n.optionComparator(e,n.$data._value)}))||e},closeSearchOptions:function(){this.open=!1,this.$emit("search:blur")},maybeDeleteValue:function(){if(!this.searchEl.value.length&&this.selectedValue&&this.selectedValue.length&&this.clearable){var e=null;this.multiple&&(e=a()(this.selectedValue.slice(0,this.selectedValue.length-1))),this.updateValue(e)}},optionExists:function(e){var n=this;return this.optionList.some((function(t){return n.optionComparator(t,e)}))},normalizeOptionForSlot:function(e){return"object"===r()(e)?e:c()({},this.label,e)},pushTag:function(e){this.pushedTags.push(e)},onEscape:function(){this.search.length?this.search="":this.searchEl.blur()},onSearchBlur:function(){if(!this.mousedown||this.searching){var e=this.clearSearchOnSelect,n=this.multiple;return this.clearSearchOnBlur({clearSearchOnSelect:e,multiple:n})&&(this.search=""),void this.closeSearchOptions()}this.mousedown=!1,0!==this.search.length||0!==this.options.length||this.closeSearchOptions()},onSearchFocus:function(){this.open=!0,this.$emit("search:focus")},onMousedown:function(){this.mousedown=!0},onMouseUp:function(){this.mousedown=!1},onSearchKeyDown:function(e){var n=this,t=function(e){return e.preventDefault(),!n.isComposing&&n.typeAheadSelect()},i={8:function(e){return n.maybeDeleteValue()},9:function(e){return n.onTab()},27:function(e){return n.onEscape()},38:function(e){return e.preventDefault(),n.typeAheadUp()},40:function(e){return e.preventDefault(),n.typeAheadDown()}};this.selectOnKeyCodes.forEach((function(e){return i[e]=t}));var a=this.mapKeydown(i,this);if("function"==typeof a[e.keyCode])return a[e.keyCode](e)}}},v=(t(7),h(g,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"v-select",class:e.stateClasses,attrs:{dir:e.dir}},[e._t("header",null,null,e.scope.header),e._v(" "),t("div",{ref:"toggle",staticClass:"vs__dropdown-toggle",attrs:{id:"vs"+e.uid+"__combobox",role:"combobox","aria-expanded":e.dropdownOpen.toString(),"aria-owns":"vs"+e.uid+"__listbox","aria-label":"Search for option"},on:{mousedown:function(n){return e.toggleDropdown(n)}}},[t("div",{ref:"selectedOptions",staticClass:"vs__selected-options"},[e._l(e.selectedValue,(function(n){return e._t("selected-option-container",[t("span",{key:e.getOptionKey(n),staticClass:"vs__selected"},[e._t("selected-option",[e._v("\n            "+e._s(e.getOptionLabel(n))+"\n          ")],null,e.normalizeOptionForSlot(n)),e._v(" "),e.multiple?t("button",{ref:"deselectButtons",refInFor:!0,staticClass:"vs__deselect",attrs:{disabled:e.disabled,type:"button",title:"Deselect "+e.getOptionLabel(n),"aria-label":"Deselect "+e.getOptionLabel(n)},on:{click:function(t){return e.deselect(n)}}},[t(e.childComponents.Deselect,{tag:"component"})],1):e._e()],2)],{option:e.normalizeOptionForSlot(n),deselect:e.deselect,multiple:e.multiple,disabled:e.disabled})})),e._v(" "),e._t("search",[t("input",e._g(e._b({staticClass:"vs__search"},"input",e.scope.search.attributes,!1),e.scope.search.events))],null,e.scope.search)],2),e._v(" "),t("div",{ref:"actions",staticClass:"vs__actions"},[t("button",{directives:[{name:"show",rawName:"v-show",value:e.showClearButton,expression:"showClearButton"}],ref:"clearButton",staticClass:"vs__clear",attrs:{disabled:e.disabled,type:"button",title:"Clear Selected","aria-label":"Clear Selected"},on:{click:e.clearSelection}},[t(e.childComponents.Deselect,{tag:"component"})],1),e._v(" "),e._t("open-indicator",[e.noDrop?e._e():t(e.childComponents.OpenIndicator,e._b({tag:"component"},"component",e.scope.openIndicator.attributes,!1))],null,e.scope.openIndicator),e._v(" "),e._t("spinner",[t("div",{directives:[{name:"show",rawName:"v-show",value:e.mutableLoading,expression:"mutableLoading"}],staticClass:"vs__spinner"},[e._v("Loading...")])],null,e.scope.spinner)],2)]),e._v(" "),t("transition",{attrs:{name:e.transition}},[e.dropdownOpen?t("ul",{directives:[{name:"append-to-body",rawName:"v-append-to-body"}],key:"vs"+e.uid+"__listbox",ref:"dropdownMenu",staticClass:"vs__dropdown-menu",attrs:{id:"vs"+e.uid+"__listbox",role:"listbox",tabindex:"-1"},on:{mousedown:function(n){return n.preventDefault(),e.onMousedown(n)},mouseup:e.onMouseUp}},[e._t("list-header",null,null,e.scope.listHeader),e._v(" "),e._l(e.filteredOptions,(function(n,i){return t("li",{key:e.getOptionKey(n),staticClass:"vs__dropdown-option",class:{"vs__dropdown-option--deselect":e.isOptionDeselectable(n)&&i===e.typeAheadPointer,"vs__dropdown-option--selected":e.isOptionSelected(n),"vs__dropdown-option--highlight":i===e.typeAheadPointer,"vs__dropdown-option--disabled":!e.selectable(n)},attrs:{id:"vs"+e.uid+"__option-"+i,role:"option","aria-selected":i===e.typeAheadPointer||null},on:{mouseover:function(t){e.selectable(n)&&(e.typeAheadPointer=i)},click:function(t){t.preventDefault(),t.stopPropagation(),e.selectable(n)&&e.select(n)}}},[e._t("option",[e._v("\n          "+e._s(e.getOptionLabel(n))+"\n        ")],null,e.normalizeOptionForSlot(n))],2)})),e._v(" "),0===e.filteredOptions.length?t("li",{staticClass:"vs__no-options"},[e._t("no-options",[e._v("Sorry, no matching options.")],null,e.scope.noOptions)],2):e._e(),e._v(" "),e._t("list-footer",null,null,e.scope.listFooter)],2):t("ul",{staticStyle:{display:"none",visibility:"hidden"},attrs:{id:"vs"+e.uid+"__listbox",role:"listbox"}})]),e._v(" "),e._t("footer",null,null,e.scope.footer)],2)}),[],!1,null,null,null).exports),w={ajax:u,pointer:l,pointerScroll:d};t.d(n,"VueSelect",(function(){return v})),t.d(n,"mixins",(function(){return w})),n.default=v}])},function(e,n,t){function i(n){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=i=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=i=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),i(n)}t(34),t(43),t(12),t(66),t(21),t(24),e.exports=i,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,n,t){"use strict";t.r(n);t(34),t(43),t(12),t(66),t(21),t(24),t(96);var i=t(50);function a(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Object(i.a)(e))||n&&e&&"number"==typeof e.length){t&&(e=t);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return s=e.done,e},e:function(e){c=!0,r=e},f:function(){try{s||null==t.return||t.return()}finally{if(c)throw r}}}}t(29),t(36),t(37),t(38);var o={name:"CodeGroup",props:{title:{type:String,default:""}},data:function(){return{codeTabs:[],afterInitComponent:!1,scrollHeight:130,isVisibleContent:!0,isNonCollapse:!1}},computed:{isButtonShow:function(){return this.scrollHeight>=220},activeCodeBlock:function(){return this.$store.state.codePanel.activeCodeBlock}},watch:{"provideObject.activeMethodIndex":function(e){this.activateCodeTab(e),0!==this.provideObject.activeCodeTabIndex||this.title||this.afterInitComponent&&this.checkScrollHeight()},"provideObject.heightOfCodeGroup":function(e){this.setMinHeight(e)},"provideObject.activeCodeTabIndex":function(e,n){n&&this.checkScrollHeight()},"provideObject.activeLanguage":function(e,n){n&&this.checkScrollHeight()},activeCodeBlock:function(e){e===this.$parent.$parent._uid||this.isNonCollapse||this.isButtonClick(!1)}},inject:{provideObject:{default:function(){return{activeLanguage:"",activeMethodIndex:-1,activeCodeTabIndex:-1,heightOfCodeGroup:130}}}},mounted:function(){var e=this;this.loadTabs(),this.$nextTick((function(){e.afterInitComponent=!0,e.checkScrollHeight()}))},methods:{setMinHeight:function(e){var n,t=this.$el.querySelectorAll('.theme-code-block > div[class^="language-"] > pre[class^="language-"]'),i=this.$el.querySelectorAll(".theme-code-block.theme-code-block__active > .language-json > pre.language-json"),o=a(t);try{for(o.s();!(n=o.n()).done;){var r=n.value;r.style.minHeight="".concat(130===e?e+23:e,"px")}}catch(e){o.e(e)}finally{o.f()}var s,c=a(i);try{for(c.s();!(s=c.n()).done;){s.value.style.minHeight="".concat(e,"px")}}catch(e){c.e(e)}finally{c.f()}},isButtonClick:function(e){this.isVisibleContent=void 0!==e?e:!this.isVisibleContent,this.isVisibleContent?(this.$el.querySelector('.theme-code-block.theme-code-block__active > div[class^="language-"] > pre[class^="language-"]').style.maxHeight="".concat(this.scrollHeight,"px"),this.$store.commit("codePanel/setActiveCodeBlock",this.$parent.$parent._uid)):this.$el.querySelector('.theme-code-block.theme-code-block__active > div[class^="language-"] > pre[class^="language-"]')&&(this.$el.querySelector('.theme-code-block.theme-code-block__active > div[class^="language-"] > pre[class^="language-"]').style.maxHeight="130px")},changeCodeTab:function(e){this.$parent&&this.$parent.$parent&&(this.$parent.$parent.$emit("set-method-index",e),this.activateCodeTab(e))},loadTabs:function(){var e=this;this.codeTabs=(this.$slots.default||[]).filter((function(e){return Boolean(e.componentOptions)})).map((function(n,t){return""===n.componentOptions.propsData.active&&e.changeCodeTab(t),{title:n.componentOptions.propsData.title,elm:n.elm}})),-1===this.provideObject.activeMethodIndex&&this.codeTabs.length>0&&this.changeCodeTab(0),this.activateCodeTab(0)},activateCodeTab:function(e){this.codeTabs.forEach((function(e){e.elm&&e.elm.classList.remove("theme-code-block__active")})),this.codeTabs[e].elm&&this.codeTabs[e].elm.classList.add("theme-code-block__active")},checkScrollHeight:function(){var e,n;this.scrollHeight=null===(e=this.$el.querySelector('.theme-code-block.theme-code-block__active > div[class^="language-"] > pre[class^="language-"]'))||void 0===e?void 0:e.scrollHeight;var t=null===(n=this.$el.querySelector('.theme-code-block.theme-code-block__active > div[class^="language-"] > pre[class^="language-"]'))||void 0===n?void 0:n.scrollWidth;this.scrollHeight+=31,t>=350&&(this.scrollHeight+=8),this.scrollHeight>=220?(this.isButtonClick(!1),this.isNonCollapse=!1,this.$parent.$parent.$emit("set-code-height",130)):(this.isNonCollapse=!0,this.$parent.$parent.$emit("set-code-height",this.scrollHeight))}}},r=(t(358),t(20)),s=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ClientOnly",[t("div",{staticClass:"theme-code-group",class:{"theme-code-group__hidden":!(e.title&&e.provideObject.activeLanguage===e.title||!e.title)},style:{padding:e.isButtonShow?"8px 0 0":"8px 0"}},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},e._l(e.codeTabs,(function(n,i){return t("li",{key:""+n.title+i,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":i===e.provideObject.activeMethodIndex},on:{click:function(n){return e.changeCodeTab(i)}}},[e._v("\n            "+e._s(n.title)+"\n          ")])])})),0)]),e._v(" "),e._t("default"),e._v(" "),e.isButtonShow?t("div",{staticClass:"code-arrow",on:{click:function(n){return e.isButtonClick()}}},[e._v("\n      "+e._s(e.isVisibleContent?"Show less":"Show more")+"\n    ")]):e._e(),e._v(" "),e.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[e._v("// Make sure to add code blocks to your code group")]):e._e()],2)])}),[],!1,null,"33268d78",null);n.default=s.exports},function(e,n,t){"use strict";t.r(n);t(29);var i={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}},inject:{provideObject:{default:function(){return{activeLanguage:"",activeMethodIndex:-1,activeCodeTabIndex:-1,heightOfCodeGroup:200}}}},mounted:function(){this.$parent&&this.$parent.loadTabs&&this.$parent.loadTabs(),"Code"===this.title&&this.$parent.$emit("get-code-languages",this.$children.map((function(e){return e.title})))}},a=(t(357),t(20)),o=Object(a.a)(i,(function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"81fc0f6c",null);n.default=o.exports},function(e,n,t){"use strict";var i=t(3),a=t(105).includes,o=t(94);i({target:"Array",proto:!0},{includes:function(e){return a(this,e,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(e,n,t){"use strict";var i=t(3),a=t(159),o=t(39);i({target:"String",proto:!0,forced:!t(160)("includes")},{includes:function(e){return!!~String(o(this)).indexOf(a(e),arguments.length>1?arguments[1]:void 0)}})},function(e,n){e.exports=function(e,n,t){if(!(e instanceof n))throw TypeError("Incorrect "+(t?t+" ":"")+"invocation");return e}},function(e,n,t){var i=t(13),a=t(79);e.exports=function(e,n,t){var o,r;return a&&"function"==typeof(o=n.constructor)&&o!==t&&i(r=o.prototype)&&r!==t.prototype&&a(e,r),e}},function(e,n,t){"use strict";var i=t(26),a=t(15),o=t(8),r=t(112),s=RegExp.prototype,c=s.toString,d=o((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),l="toString"!=c.name;(d||l)&&i(RegExp.prototype,"toString",(function(){var e=a(this),n=String(e.source),t=e.flags;return"/"+n+"/"+String(void 0===t&&e instanceof RegExp&&!("flags"in s)?r.call(e):t)}),{unsafe:!0})},function(e,n,t){var i=t(15),a=t(150),o=t(27),r=t(71),s=t(129),c=t(151),d=function(e,n){this.stopped=e,this.result=n};e.exports=function(e,n,t){var l,u,h,p,f,m,b,y=t&&t.that,g=!(!t||!t.AS_ENTRIES),v=!(!t||!t.IS_ITERATOR),w=!(!t||!t.INTERRUPTED),P=r(n,y,1+g+w),T=function(e){return l&&c(l),new d(!0,e)},A=function(e){return g?(i(e),w?P(e[0],e[1],T):P(e[0],e[1])):w?P(e,T):P(e)};if(v)l=e;else{if("function"!=typeof(u=s(e)))throw TypeError("Target is not iterable");if(a(u)){for(h=0,p=o(e.length);p>h;h++)if((f=A(e[h]))&&f instanceof d)return f;return new d(!1)}l=u.call(e)}for(m=l.next;!(b=m.call(l)).done;){try{f=A(b.value)}catch(e){throw c(l),e}if("object"==typeof f&&f&&f instanceof d)return f}return new d(!1)}},function(e,n,t){var i=t(62),a=t(13),o=t(18),r=t(16).f,s=t(75),c=t(162),d=s("meta"),l=0,u=Object.isExtensible||function(){return!0},h=function(e){r(e,d,{value:{objectID:"O"+ ++l,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,n){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,d)){if(!u(e))return"F";if(!n)return"E";h(e)}return e[d].objectID},getWeakData:function(e,n){if(!o(e,d)){if(!u(e))return!0;if(!n)return!1;h(e)}return e[d].weakData},onFreeze:function(e){return c&&p.REQUIRED&&u(e)&&!o(e,d)&&h(e),e}};i[d]=!0},function(e,n,t){"use strict";t(22);var i=t(26),a=t(100),o=t(8),r=t(11),s=t(28),c=r("species"),d=RegExp.prototype,l=!o((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),u="$0"==="a".replace(/./,"$0"),h=r("replace"),p=!!/./[h]&&""===/./[h]("a","$0"),f=!o((function(){var e=/(?:)/,n=e.exec;e.exec=function(){return n.apply(this,arguments)};var t="ab".split(e);return 2!==t.length||"a"!==t[0]||"b"!==t[1]}));e.exports=function(e,n,t,h){var m=r(e),b=!o((function(){var n={};return n[m]=function(){return 7},7!=""[e](n)})),y=b&&!o((function(){var n=!1,t=/a/;return"split"===e&&((t={}).constructor={},t.constructor[c]=function(){return t},t.flags="",t[m]=/./[m]),t.exec=function(){return n=!0,null},t[m](""),!n}));if(!b||!y||"replace"===e&&(!l||!u||p)||"split"===e&&!f){var g=/./[m],v=t(m,""[e],(function(e,n,t,i,o){var r=n.exec;return r===a||r===d.exec?b&&!o?{done:!0,value:g.call(n,t,i)}:{done:!0,value:e.call(t,n,i)}:{done:!1}}),{REPLACE_KEEPS_$0:u,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),w=v[0],P=v[1];i(String.prototype,e,w),i(d,m,2==n?function(e,n){return P.call(e,this,n)}:function(e){return P.call(e,this)})}h&&s(d[m],"sham",!0)}},function(e,n,t){var i=t(47),a=t(100);e.exports=function(e,n){var t=e.exec;if("function"==typeof t){var o=t.call(e,n);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==i(e))throw TypeError("RegExp#exec called on incompatible receiver");return a.call(e,n)}},function(e,n,t){var i=t(39),a="["+t(139)+"]",o=RegExp("^"+a+a+"*"),r=RegExp(a+a+"*$"),s=function(e){return function(n){var t=String(i(n));return 1&e&&(t=t.replace(o,"")),2&e&&(t=t.replace(r,"")),t}};e.exports={start:s(1),end:s(2),trim:s(3)}},function(e,n,t){var i=t(26);e.exports=function(e,n,t){for(var a in n)i(e,a,n[a],t);return e}},function(e,n,t){"use strict";var i=t(135).charAt;e.exports=function(e,n,t){return n+(t?i(e,n).length:1)}},function(e,n,t){"use strict";var i=t(3),a=t(59),o=t(25),r=t(54),s=[].join,c=a!=Object,d=r("join",",");i({target:"Array",proto:!0,forced:c||!d},{join:function(e){return s.call(o(this),void 0===e?",":e)}})},function(e,n,t){"use strict";var i=t(3),a=t(106),o=t(55),r=t(27),s=t(23),c=t(99),d=t(64),l=t(65)("splice"),u=Math.max,h=Math.min;i({target:"Array",proto:!0,forced:!l},{splice:function(e,n){var t,i,l,p,f,m,b=s(this),y=r(b.length),g=a(e,y),v=arguments.length;if(0===v?t=i=0:1===v?(t=0,i=y-g):(t=v-2,i=h(u(o(n),0),y-g)),y+t-i>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(l=c(b,i),p=0;p<i;p++)(f=g+p)in b&&d(l,p,b[f]);if(l.length=i,t<i){for(p=g;p<y-i;p++)m=p+t,(f=p+i)in b?b[m]=b[f]:delete b[m];for(p=y;p>y-i+t;p--)delete b[p-1]}else if(t>i)for(p=y-i;p>g;p--)m=p+t-1,(f=p+i-1)in b?b[m]=b[f]:delete b[m];for(p=0;p<t;p++)b[p+g]=arguments[p+2];return b.length=y-i+t,l}})},function(e,n,t){"use strict";var i=t(147).IteratorPrototype,a=t(53),o=t(56),r=t(70),s=t(63),c=function(){return this};e.exports=function(e,n,t){var d=n+" Iterator";return e.prototype=a(i,{next:o(1,t)}),r(e,d,!1,!0),s[d]=c,e}},function(e,n,t){"use strict";var i=t(14),a=t(8),o=t(61),r=t(109),s=t(78),c=t(23),d=t(59),l=Object.assign,u=Object.defineProperty;e.exports=!l||a((function(){if(i&&1!==l({b:1},l(u({},"a",{enumerable:!0,get:function(){u(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},n={},t=Symbol();return e[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),7!=l({},e)[t]||"abcdefghijklmnopqrst"!=o(l({},n)).join("")}))?function(e,n){for(var t=c(e),a=arguments.length,l=1,u=r.f,h=s.f;a>l;)for(var p,f=d(arguments[l++]),m=u?o(f).concat(u(f)):o(f),b=m.length,y=0;b>y;)p=m[y++],i&&!h.call(f,p)||(t[p]=f[p]);return t}:l},function(e,n,t){"use strict";var i,a=t(3),o=t(40).f,r=t(27),s=t(159),c=t(39),d=t(160),l=t(42),u="".startsWith,h=Math.min,p=d("startsWith");a({target:"String",proto:!0,forced:!!(l||p||(i=o(String.prototype,"startsWith"),!i||i.writable))&&!p},{startsWith:function(e){var n=String(c(this));s(e);var t=r(h(arguments.length>1?arguments[1]:void 0,n.length)),i=String(e);return u?u.call(n,i,t):n.slice(t,t+i.length)===i}})},function(e,n,t){"use strict";var i=t(71),a=t(23),o=t(247),r=t(150),s=t(27),c=t(64),d=t(129);e.exports=function(e){var n,t,l,u,h,p,f=a(e),m="function"==typeof this?this:Array,b=arguments.length,y=b>1?arguments[1]:void 0,g=void 0!==y,v=d(f),w=0;if(g&&(y=i(y,b>2?arguments[2]:void 0,2)),null==v||m==Array&&r(v))for(t=new m(n=s(f.length));n>w;w++)p=g?y(f[w],w):f[w],c(t,w,p);else for(h=(u=v.call(f)).next,t=new m;!(l=h.call(u)).done;w++)p=g?o(u,y,[l.value,w],!0):l.value,c(t,w,p);return t.length=w,t}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){var i=t(3),a=t(345);i({global:!0,forced:parseInt!=a},{parseInt:a})},function(e,n,t){var i=t(14),a=t(9),o=t(92),r=t(213),s=t(16).f,c=t(73).f,d=t(136),l=t(112),u=t(137),h=t(26),p=t(8),f=t(46).enforce,m=t(128),b=t(11)("match"),y=a.RegExp,g=y.prototype,v=/a/g,w=/a/g,P=new y(v)!==v,T=u.UNSUPPORTED_Y;if(i&&o("RegExp",!P||T||p((function(){return w[b]=!1,y(v)!=v||y(w)==w||"/a/i"!=y(v,"i")})))){for(var A=function(e,n){var t,i=this instanceof A,a=d(e),o=void 0===n;if(!i&&a&&e.constructor===A&&o)return e;P?a&&!o&&(e=e.source):e instanceof A&&(o&&(n=l.call(e)),e=e.source),T&&(t=!!n&&n.indexOf("y")>-1)&&(n=n.replace(/y/g,""));var s=r(P?new y(e,n):y(e,n),i?this:g,A);T&&t&&(f(s).sticky=!0);return s},I=function(e){e in A||s(A,e,{configurable:!0,get:function(){return y[e]},set:function(n){y[e]=n}})},q=c(y),S=0;q.length>S;)I(q[S++]);g.constructor=A,A.prototype=g,h(a,"RegExp",A)}m("RegExp")},function(e,n,t){e.exports=t(382)},function(e,n,t){var i=t(9),a=t(108),o=i.WeakMap;e.exports="function"==typeof o&&/native code/.test(a(o))},function(e,n,t){var i=t(13);e.exports=function(e){if(!i(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,n,t){"use strict";var i,a,o,r,s=t(3),c=t(42),d=t(9),l=t(33),u=t(149),h=t(26),p=t(220),f=t(79),m=t(70),b=t(128),y=t(13),g=t(41),v=t(212),w=t(108),P=t(215),T=t(130),A=t(134),I=t(152).set,q=t(235),S=t(154),k=t(237),M=t(155),C=t(238),O=t(46),j=t(92),x=t(11),R=t(239),D=t(80),E=t(60),F=x("species"),N="Promise",B=O.get,U=O.set,L=O.getterFor(N),z=u&&u.prototype,H=u,_=z,G=d.TypeError,V=d.document,$=d.process,K=M.f,X=K,J=!!(V&&V.createEvent&&d.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,Q=!1,W=j(N,(function(){var e=w(H)!==String(H);if(!e&&66===E)return!0;if(c&&!_.finally)return!0;if(E>=51&&/native code/.test(H))return!1;var n=new H((function(e){e(1)})),t=function(e){e((function(){}),(function(){}))};return(n.constructor={})[F]=t,!(Q=n.then((function(){}))instanceof t)||!e&&R&&!Y})),Z=W||!T((function(e){H.all(e).catch((function(){}))})),ee=function(e){var n;return!(!y(e)||"function"!=typeof(n=e.then))&&n},ne=function(e,n){if(!e.notified){e.notified=!0;var t=e.reactions;q((function(){for(var i=e.value,a=1==e.state,o=0;t.length>o;){var r,s,c,d=t[o++],l=a?d.ok:d.fail,u=d.resolve,h=d.reject,p=d.domain;try{l?(a||(2===e.rejection&&oe(e),e.rejection=1),!0===l?r=i:(p&&p.enter(),r=l(i),p&&(p.exit(),c=!0)),r===d.promise?h(G("Promise-chain cycle")):(s=ee(r))?s.call(r,u,h):u(r)):h(i)}catch(e){p&&!c&&p.exit(),h(e)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&ie(e)}))}},te=function(e,n,t){var i,a;J?((i=V.createEvent("Event")).promise=n,i.reason=t,i.initEvent(e,!1,!0),d.dispatchEvent(i)):i={promise:n,reason:t},!Y&&(a=d["on"+e])?a(i):"unhandledrejection"===e&&k("Unhandled promise rejection",t)},ie=function(e){I.call(d,(function(){var n,t=e.facade,i=e.value;if(ae(e)&&(n=C((function(){D?$.emit("unhandledRejection",i,t):te("unhandledrejection",t,i)})),e.rejection=D||ae(e)?2:1,n.error))throw n.value}))},ae=function(e){return 1!==e.rejection&&!e.parent},oe=function(e){I.call(d,(function(){var n=e.facade;D?$.emit("rejectionHandled",n):te("rejectionhandled",n,e.value)}))},re=function(e,n,t){return function(i){e(n,i,t)}},se=function(e,n,t){e.done||(e.done=!0,t&&(e=t),e.value=n,e.state=2,ne(e,!0))},ce=function(e,n,t){if(!e.done){e.done=!0,t&&(e=t);try{if(e.facade===n)throw G("Promise can't be resolved itself");var i=ee(n);i?q((function(){var t={done:!1};try{i.call(n,re(ce,t,e),re(se,t,e))}catch(n){se(t,n,e)}})):(e.value=n,e.state=1,ne(e,!1))}catch(n){se({done:!1},n,e)}}};if(W&&(_=(H=function(e){v(this,H,N),g(e),i.call(this);var n=B(this);try{e(re(ce,n),re(se,n))}catch(e){se(n,e)}}).prototype,(i=function(e){U(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(_,{then:function(e,n){var t=L(this),i=K(A(this,H));return i.ok="function"!=typeof e||e,i.fail="function"==typeof n&&n,i.domain=D?$.domain:void 0,t.parent=!0,t.reactions.push(i),0!=t.state&&ne(t,!1),i.promise},catch:function(e){return this.then(void 0,e)}}),a=function(){var e=new i,n=B(e);this.promise=e,this.resolve=re(ce,n),this.reject=re(se,n)},M.f=K=function(e){return e===H||e===o?new a(e):X(e)},!c&&"function"==typeof u&&z!==Object.prototype)){r=z.then,Q||(h(z,"then",(function(e,n){var t=this;return new H((function(e,n){r.call(t,e,n)})).then(e,n)}),{unsafe:!0}),h(z,"catch",_.catch,{unsafe:!0}));try{delete z.constructor}catch(e){}f&&f(z,_)}s({global:!0,wrap:!0,forced:W},{Promise:H}),m(H,N,!1,!0),b(N),o=l(N),s({target:N,stat:!0,forced:W},{reject:function(e){var n=K(this);return n.reject.call(void 0,e),n.promise}}),s({target:N,stat:!0,forced:c||W},{resolve:function(e){return S(c&&this===o?H:this,e)}}),s({target:N,stat:!0,forced:Z},{all:function(e){var n=this,t=K(n),i=t.resolve,a=t.reject,o=C((function(){var t=g(n.resolve),o=[],r=0,s=1;P(e,(function(e){var c=r++,d=!1;o.push(void 0),s++,t.call(n,e).then((function(e){d||(d=!0,o[c]=e,--s||i(o))}),a)})),--s||i(o)}));return o.error&&a(o.value),t.promise},race:function(e){var n=this,t=K(n),i=t.reject,a=C((function(){var a=g(n.resolve);P(e,(function(e){a.call(n,e).then(t.resolve,i)}))}));return a.error&&i(a.value),t.promise}})},function(e,n,t){var i,a,o,r,s,c,d,l,u=t(9),h=t(40).f,p=t(152).set,f=t(153),m=t(236),b=t(80),y=u.MutationObserver||u.WebKitMutationObserver,g=u.document,v=u.process,w=u.Promise,P=h(u,"queueMicrotask"),T=P&&P.value;T||(i=function(){var e,n;for(b&&(e=v.domain)&&e.exit();a;){n=a.fn,a=a.next;try{n()}catch(e){throw a?r():o=void 0,e}}o=void 0,e&&e.enter()},f||b||m||!y||!g?w&&w.resolve?((d=w.resolve(void 0)).constructor=w,l=d.then,r=function(){l.call(d,i)}):r=b?function(){v.nextTick(i)}:function(){p.call(u,i)}:(s=!0,c=g.createTextNode(""),new y(i).observe(c,{characterData:!0}),r=function(){c.data=s=!s})),e.exports=T||function(e){var n={fn:e,next:void 0};o&&(o.next=n),a||(a=n,r()),o=n}},function(e,n,t){var i=t(76);e.exports=/web0s(?!.*chrome)/i.test(i)},function(e,n,t){var i=t(9);e.exports=function(e,n){var t=i.console;t&&t.error&&(1===arguments.length?t.error(e):t.error(e,n))}},function(e,n){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,n){e.exports="object"==typeof window},function(e,n,t){var i=t(3),a=t(225);i({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(e,n,t){"use strict";var i=t(3),a=t(42),o=t(149),r=t(8),s=t(33),c=t(134),d=t(154),l=t(26);if(i({target:"Promise",proto:!0,real:!0,forced:!!o&&r((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var n=c(this,s("Promise")),t="function"==typeof e;return this.then(t?function(t){return d(n,e()).then((function(){return t}))}:e,t?function(t){return d(n,e()).then((function(){throw t}))}:e)}}),!a&&"function"==typeof o){var u=s("Promise").prototype.finally;o.prototype.finally!==u&&l(o.prototype,"finally",u,{unsafe:!0})}},function(e,n,t){"use strict";var i=t(111),a=t(133);e.exports=i?{}.toString:function(){return"[object "+a(this)+"]"}},function(e,n,t){"use strict";var i=t(3),a=t(244).left,o=t(54),r=t(60),s=t(80);i({target:"Array",proto:!0,forced:!o("reduce")||!s&&r>79&&r<83},{reduce:function(e){return a(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(e,n,t){var i=t(41),a=t(23),o=t(59),r=t(27),s=function(e){return function(n,t,s,c){i(t);var d=a(n),l=o(d),u=r(d.length),h=e?u-1:0,p=e?-1:1;if(s<2)for(;;){if(h in l){c=l[h],h+=p;break}if(h+=p,e?h<0:u<=h)throw TypeError("Reduce of empty array with no initial value")}for(;e?h>=0:u>h;h+=p)h in l&&(c=t(c,l[h],h,d));return c}};e.exports={left:s(!1),right:s(!0)}},function(e,n,t){var i=t(3),a=t(162),o=t(8),r=t(13),s=t(216).onFreeze,c=Object.freeze;i({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!a},{freeze:function(e){return c&&r(e)?c(s(e)):e}})},function(e,n,t){var i=t(25),a=t(73).f,o={}.toString,r="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return r&&"[object Window]"==o.call(e)?function(e){try{return a(e)}catch(e){return r.slice()}}(e):a(i(e))}},function(e,n,t){var i=t(15),a=t(151);e.exports=function(e,n,t,o){try{return o?n(i(t)[0],t[1]):n(t)}catch(n){throw a(e),n}}},function(e,n,t){var i=t(23),a=Math.floor,o="".replace,r=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,s=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,n,t,c,d,l){var u=t+e.length,h=c.length,p=s;return void 0!==d&&(d=i(d),p=r),o.call(l,p,(function(i,o){var r;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return n.slice(0,t);case"'":return n.slice(u);case"<":r=d[o.slice(1,-1)];break;default:var s=+o;if(0===s)return i;if(s>h){var l=a(s/10);return 0===l?i:l<=h?void 0===c[l-1]?o.charAt(1):c[l-1]+o.charAt(1):i}r=c[s-1]}return void 0===r?"":r}))}},function(e,n,t){var i=t(167),a=t(250);e.exports=function e(n,t,o,r,s){var c=-1,d=n.length;for(o||(o=a),s||(s=[]);++c<d;){var l=n[c];t>0&&o(l)?t>1?e(l,t-1,o,r,s):i(s,l):r||(s[s.length]=l)}return s}},function(e,n,t){var i=t(67),a=t(113),o=t(31),r=i?i.isConcatSpreadable:void 0;e.exports=function(e){return o(e)||a(e)||!!(r&&e&&e[r])}},function(e,n,t){var i=t(58),a=t(49);e.exports=function(e){return a(e)&&"[object Arguments]"==i(e)}},function(e,n,t){var i=t(67),a=Object.prototype,o=a.hasOwnProperty,r=a.toString,s=i?i.toStringTag:void 0;e.exports=function(e){var n=o.call(e,s),t=e[s];try{e[s]=void 0;var i=!0}catch(e){}var a=r.call(e);return i&&(n?e[s]=t:delete e[s]),a}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var i=t(255),a=t(311),o=t(121),r=t(31),s=t(322);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?r(e)?a(e[0],e[1]):i(e):s(e)}},function(e,n,t){var i=t(256),a=t(310),o=t(184);e.exports=function(e){var n=a(e);return 1==n.length&&n[0][2]?o(n[0][0],n[0][1]):function(t){return t===e||i(t,e,n)}}},function(e,n,t){var i=t(169),a=t(173);e.exports=function(e,n,t,o){var r=t.length,s=r,c=!o;if(null==e)return!s;for(e=Object(e);r--;){var d=t[r];if(c&&d[2]?d[1]!==e[d[0]]:!(d[0]in e))return!1}for(;++r<s;){var l=(d=t[r])[0],u=e[l],h=d[1];if(c&&d[2]){if(void 0===u&&!(l in e))return!1}else{var p=new i;if(o)var f=o(u,h,l,e,n,p);if(!(void 0===f?a(h,u,3,o,p):f))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var i=t(82),a=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=i(n,e);return!(t<0)&&(t==n.length-1?n.pop():a.call(n,t,1),--this.size,!0)}},function(e,n,t){var i=t(82);e.exports=function(e){var n=this.__data__,t=i(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var i=t(82);e.exports=function(e){return i(this.__data__,e)>-1}},function(e,n,t){var i=t(82);e.exports=function(e,n){var t=this.__data__,a=i(t,e);return a<0?(++this.size,t.push([e,n])):t[a][1]=n,this}},function(e,n,t){var i=t(81);e.exports=function(){this.__data__=new i,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var i=t(81),a=t(114),o=t(116);e.exports=function(e,n){var t=this.__data__;if(t instanceof i){var r=t.__data__;if(!a||r.length<199)return r.push([e,n]),this.size=++t.size,this;t=this.__data__=new o(r)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var i=t(171),a=t(268),o=t(115),r=t(172),s=/^\[object .+?Constructor\]$/,c=Function.prototype,d=Object.prototype,l=c.toString,u=d.hasOwnProperty,h=RegExp("^"+l.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||a(e))&&(i(e)?h:s).test(r(e))}},function(e,n,t){var i,a=t(269),o=(i=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"";e.exports=function(e){return!!o&&o in e}},function(e,n,t){var i=t(32)["__core-js_shared__"];e.exports=i},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var i=t(272),a=t(81),o=t(114);e.exports=function(){this.size=0,this.__data__={hash:new i,map:new(o||a),string:new i}}},function(e,n,t){var i=t(273),a=t(274),o=t(275),r=t(276),s=t(277);function c(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var i=e[n];this.set(i[0],i[1])}}c.prototype.clear=i,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=r,c.prototype.set=s,e.exports=c},function(e,n,t){var i=t(83);e.exports=function(){this.__data__=i?i(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var i=t(83),a=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(i){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(n,e)?n[e]:void 0}},function(e,n,t){var i=t(83),a=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return i?void 0!==n[e]:a.call(n,e)}},function(e,n,t){var i=t(83);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=i&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var i=t(84);e.exports=function(e){var n=i(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var i=t(84);e.exports=function(e){return i(this,e).get(e)}},function(e,n,t){var i=t(84);e.exports=function(e){return i(this,e).has(e)}},function(e,n,t){var i=t(84);e.exports=function(e,n){var t=i(this,e),a=t.size;return t.set(e,n),this.size+=t.size==a?0:1,this}},function(e,n,t){var i=t(169),a=t(174),o=t(287),r=t(290),s=t(306),c=t(31),d=t(178),l=t(180),u="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,p,f,m){var b=c(e),y=c(n),g=b?"[object Array]":s(e),v=y?"[object Array]":s(n),w=(g="[object Arguments]"==g?u:g)==u,P=(v="[object Arguments]"==v?u:v)==u,T=g==v;if(T&&d(e)){if(!d(n))return!1;b=!0,w=!1}if(T&&!w)return m||(m=new i),b||l(e)?a(e,n,t,p,f,m):o(e,n,g,t,p,f,m);if(!(1&t)){var A=w&&h.call(e,"__wrapped__"),I=P&&h.call(n,"__wrapped__");if(A||I){var q=A?e.value():e,S=I?n.value():n;return m||(m=new i),f(q,S,t,p,m)}}return!!T&&(m||(m=new i),r(e,n,t,p,f,m))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,i=null==e?0:e.length;++t<i;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var i=t(67),a=t(288),o=t(170),r=t(174),s=t(289),c=t(117),d=i?i.prototype:void 0,l=d?d.valueOf:void 0;e.exports=function(e,n,t,i,d,u,h){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!u(new a(e),new a(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var p=s;case"[object Set]":var f=1&i;if(p||(p=c),e.size!=n.size&&!f)return!1;var m=h.get(e);if(m)return m==n;i|=2,h.set(e,n);var b=r(p(e),p(n),i,d,u,h);return h.delete(e),b;case"[object Symbol]":if(l)return l.call(e)==l.call(n)}return!1}},function(e,n,t){var i=t(32).Uint8Array;e.exports=i},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,i){t[++n]=[i,e]})),t}},function(e,n,t){var i=t(291),a=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,o,r,s){var c=1&t,d=i(e),l=d.length;if(l!=i(n).length&&!c)return!1;for(var u=l;u--;){var h=d[u];if(!(c?h in n:a.call(n,h)))return!1}var p=s.get(e),f=s.get(n);if(p&&f)return p==n&&f==e;var m=!0;s.set(e,n),s.set(n,e);for(var b=c;++u<l;){var y=e[h=d[u]],g=n[h];if(o)var v=c?o(g,y,h,n,e,s):o(y,g,h,e,n,s);if(!(void 0===v?y===g||r(y,g,t,o,s):v)){m=!1;break}b||(b="constructor"==h)}if(m&&!b){var w=e.constructor,P=n.constructor;w==P||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof P&&P instanceof P||(m=!1)}return s.delete(e),s.delete(n),m}},function(e,n,t){var i=t(292),a=t(293),o=t(177);e.exports=function(e){return i(e,o,a)}},function(e,n,t){var i=t(167),a=t(31);e.exports=function(e,n,t){var o=n(e);return a(e)?o:i(o,t(e))}},function(e,n,t){var i=t(294),a=t(295),o=Object.prototype.propertyIsEnumerable,r=Object.getOwnPropertySymbols,s=r?function(e){return null==e?[]:(e=Object(e),i(r(e),(function(n){return o.call(e,n)})))}:a;e.exports=s},function(e,n){e.exports=function(e,n){for(var t=-1,i=null==e?0:e.length,a=0,o=[];++t<i;){var r=e[t];n(r,t,e)&&(o[a++]=r)}return o}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var i=t(297),a=t(113),o=t(31),r=t(178),s=t(179),c=t(180),d=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=o(e),l=!t&&a(e),u=!t&&!l&&r(e),h=!t&&!l&&!u&&c(e),p=t||l||u||h,f=p?i(e.length,String):[],m=f.length;for(var b in e)!n&&!d.call(e,b)||p&&("length"==b||u&&("offset"==b||"parent"==b)||h&&("buffer"==b||"byteLength"==b||"byteOffset"==b)||s(b,m))||f.push(b);return f}},function(e,n){e.exports=function(e,n){for(var t=-1,i=Array(e);++t<e;)i[t]=n(t);return i}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var i=t(58),a=t(118),o=t(49),r={};r["[object Float32Array]"]=r["[object Float64Array]"]=r["[object Int8Array]"]=r["[object Int16Array]"]=r["[object Int32Array]"]=r["[object Uint8Array]"]=r["[object Uint8ClampedArray]"]=r["[object Uint16Array]"]=r["[object Uint32Array]"]=!0,r["[object Arguments]"]=r["[object Array]"]=r["[object ArrayBuffer]"]=r["[object Boolean]"]=r["[object DataView]"]=r["[object Date]"]=r["[object Error]"]=r["[object Function]"]=r["[object Map]"]=r["[object Number]"]=r["[object Object]"]=r["[object RegExp]"]=r["[object Set]"]=r["[object String]"]=r["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&a(e.length)&&!!r[i(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var i=t(168),a=n&&!n.nodeType&&n,o=a&&"object"==typeof e&&e&&!e.nodeType&&e,r=o&&o.exports===a&&i.process,s=function(){try{var e=o&&o.require&&o.require("util").types;return e||r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=s}).call(this,t(138)(e))},function(e,n,t){var i=t(303),a=t(304),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!i(e))return a(e);var n=[];for(var t in Object(e))o.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var i=t(305)(Object.keys,Object);e.exports=i},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var i=t(307),a=t(114),o=t(308),r=t(182),s=t(309),c=t(58),d=t(172),l=d(i),u=d(a),h=d(o),p=d(r),f=d(s),m=c;(i&&"[object DataView]"!=m(new i(new ArrayBuffer(1)))||a&&"[object Map]"!=m(new a)||o&&"[object Promise]"!=m(o.resolve())||r&&"[object Set]"!=m(new r)||s&&"[object WeakMap]"!=m(new s))&&(m=function(e){var n=c(e),t="[object Object]"==n?e.constructor:void 0,i=t?d(t):"";if(i)switch(i){case l:return"[object DataView]";case u:return"[object Map]";case h:return"[object Promise]";case p:return"[object Set]";case f:return"[object WeakMap]"}return n}),e.exports=m},function(e,n,t){var i=t(44)(t(32),"DataView");e.exports=i},function(e,n,t){var i=t(44)(t(32),"Promise");e.exports=i},function(e,n,t){var i=t(44)(t(32),"WeakMap");e.exports=i},function(e,n,t){var i=t(183),a=t(177);e.exports=function(e){for(var n=a(e),t=n.length;t--;){var o=n[t],r=e[o];n[t]=[o,r,i(r)]}return n}},function(e,n,t){var i=t(173),a=t(312),o=t(319),r=t(119),s=t(183),c=t(184),d=t(85);e.exports=function(e,n){return r(e)&&s(n)?c(d(e),n):function(t){var r=a(t,e);return void 0===r&&r===n?o(t,e):i(n,r,3)}}},function(e,n,t){var i=t(185);e.exports=function(e,n,t){var a=null==e?void 0:i(e,n);return void 0===a?t:a}},function(e,n,t){var i=t(314),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,r=i((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(a,(function(e,t,i,a){n.push(i?a.replace(o,"$1"):t||e)})),n}));e.exports=r},function(e,n,t){var i=t(315);e.exports=function(e){var n=i(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var i=t(116);function a(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var i=arguments,a=n?n.apply(this,i):i[0],o=t.cache;if(o.has(a))return o.get(a);var r=e.apply(this,i);return t.cache=o.set(a,r)||o,r};return t.cache=new(a.Cache||i),t}a.Cache=i,e.exports=a},function(e,n,t){var i=t(317);e.exports=function(e){return null==e?"":i(e)}},function(e,n,t){var i=t(67),a=t(318),o=t(31),r=t(120),s=i?i.prototype:void 0,c=s?s.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(o(n))return a(n,e)+"";if(r(n))return c?c.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,i=null==e?0:e.length,a=Array(i);++t<i;)a[t]=n(e[t],t,e);return a}},function(e,n,t){var i=t(320),a=t(321);e.exports=function(e,n){return null!=e&&a(e,n,i)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var i=t(186),a=t(113),o=t(31),r=t(179),s=t(118),c=t(85);e.exports=function(e,n,t){for(var d=-1,l=(n=i(n,e)).length,u=!1;++d<l;){var h=c(n[d]);if(!(u=null!=e&&t(e,h)))break;e=e[h]}return u||++d!=l?u:!!(l=null==e?0:e.length)&&s(l)&&r(h,l)&&(o(e)||a(e))}},function(e,n,t){var i=t(323),a=t(324),o=t(119),r=t(85);e.exports=function(e){return o(e)?i(r(e)):a(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var i=t(185);e.exports=function(e){return function(n){return i(n,e)}}},function(e,n,t){var i=t(121),a=t(326),o=t(328);e.exports=function(e,n){return o(a(e,n,i),e+"")}},function(e,n,t){var i=t(327),a=Math.max;e.exports=function(e,n,t){return n=a(void 0===n?e.length-1:n,0),function(){for(var o=arguments,r=-1,s=a(o.length-n,0),c=Array(s);++r<s;)c[r]=o[n+r];r=-1;for(var d=Array(n+1);++r<n;)d[r]=o[r];return d[n]=t(c),i(e,this,d)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var i=t(329),a=t(332)(i);e.exports=a},function(e,n,t){var i=t(330),a=t(331),o=t(121),r=a?function(e,n){return a(e,"toString",{configurable:!0,enumerable:!1,value:i(n),writable:!0})}:o;e.exports=r},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var i=t(44),a=function(){try{var e=i(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=a},function(e,n){var t=Date.now;e.exports=function(e){var n=0,i=0;return function(){var a=t(),o=16-(a-i);if(i=a,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var i=t(175),a=t(334),o=t(339),r=t(176),s=t(340),c=t(117);e.exports=function(e,n,t){var d=-1,l=a,u=e.length,h=!0,p=[],f=p;if(t)h=!1,l=o;else if(u>=200){var m=n?null:s(e);if(m)return c(m);h=!1,l=r,f=new i}else f=n?[]:p;e:for(;++d<u;){var b=e[d],y=n?n(b):b;if(b=t||0!==b?b:0,h&&y==y){for(var g=f.length;g--;)if(f[g]===y)continue e;n&&f.push(y),p.push(b)}else l(f,y,t)||(f!==p&&f.push(y),p.push(b))}return p}},function(e,n,t){var i=t(335);e.exports=function(e,n){return!!(null==e?0:e.length)&&i(e,n,0)>-1}},function(e,n,t){var i=t(336),a=t(337),o=t(338);e.exports=function(e,n,t){return n==n?o(e,n,t):i(e,a,t)}},function(e,n){e.exports=function(e,n,t,i){for(var a=e.length,o=t+(i?1:-1);i?o--:++o<a;)if(n(e[o],o,e))return o;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var i=t-1,a=e.length;++i<a;)if(e[i]===n)return i;return-1}},function(e,n){e.exports=function(e,n,t){for(var i=-1,a=null==e?0:e.length;++i<a;)if(t(n,e[i]))return!0;return!1}},function(e,n,t){var i=t(182),a=t(341),o=t(117),r=i&&1/o(new i([,-0]))[1]==1/0?function(e){return new i(e)}:a;e.exports=r},function(e,n){e.exports=function(){}},function(e,n,t){var i=t(181),a=t(49);e.exports=function(e){return a(e)&&i(e)}},function(e,n,t){var i=t(3),a=t(8),o=t(25),r=t(40).f,s=t(14),c=a((function(){r(1)}));i({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(e,n){return r(o(e),n)}})},function(e,n,t){var i=t(3),a=t(14);i({target:"Object",stat:!0,forced:!a,sham:!a},{defineProperties:t(132)})},function(e,n,t){var i=t(9),a=t(219).trim,o=t(139),r=i.parseInt,s=/^[+-]?0[Xx]/,c=8!==r(o+"08")||22!==r(o+"0x16");e.exports=c?function(e,n){var t=a(String(e));return r(t,n>>>0||(s.test(t)?16:10))}:r},function(e,n,t){"use strict";t(187)},function(e,n,t){},function(e,n,t){"use strict";t(188)},function(e,n,t){var i=t(3),a=t(350).entries;i({target:"Object",stat:!0},{entries:function(e){return a(e)}})},function(e,n,t){var i=t(14),a=t(61),o=t(25),r=t(78).f,s=function(e){return function(n){for(var t,s=o(n),c=a(s),d=c.length,l=0,u=[];d>l;)t=c[l++],i&&!r.call(s,t)||u.push(e?[t,s[t]]:s[t]);return u}};e.exports={entries:s(!0),values:s(!1)}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(189)},function(e,n,t){"use strict";t(190)},function(e,n,t){"use strict";var i=t(19),a=t(191),o=t(360),r=t(197);var s=function e(n){var t=new o(n),s=a(o.prototype.request,t);return i.extend(s,o.prototype,t),i.extend(s,t),s.create=function(t){return e(r(n,t))},s}(t(86));s.Axios=o,s.Cancel=t(87),s.CancelToken=t(373),s.isCancel=t(196),s.VERSION=t(198).version,s.all=function(e){return Promise.all(e)},s.spread=t(374),s.isAxiosError=t(375),e.exports=s,e.exports.default=s},function(e,n,t){"use strict";var i=t(19),a=t(192),o=t(361),r=t(362),s=t(197),c=t(372),d=c.validators;function l(e){this.defaults=e,this.interceptors={request:new o,response:new o}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var n=e.transitional;void 0!==n&&c.assertOptions(n,{silentJSONParsing:d.transitional(d.boolean),forcedJSONParsing:d.transitional(d.boolean),clarifyTimeoutError:d.transitional(d.boolean)},!1);var t=[],i=!0;this.interceptors.request.forEach((function(n){"function"==typeof n.runWhen&&!1===n.runWhen(e)||(i=i&&n.synchronous,t.unshift(n.fulfilled,n.rejected))}));var a,o=[];if(this.interceptors.response.forEach((function(e){o.push(e.fulfilled,e.rejected)})),!i){var l=[r,void 0];for(Array.prototype.unshift.apply(l,t),l=l.concat(o),a=Promise.resolve(e);l.length;)a=a.then(l.shift(),l.shift());return a}for(var u=e;t.length;){var h=t.shift(),p=t.shift();try{u=h(u)}catch(e){p(e);break}}try{a=r(u)}catch(e){return Promise.reject(e)}for(;o.length;)a=a.then(o.shift(),o.shift());return a},l.prototype.getUri=function(e){return e=s(this.defaults,e),a(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(n,t){return this.request(s(t||{},{method:e,url:n,data:(t||{}).data}))}})),i.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(n,t,i){return this.request(s(i||{},{method:e,url:n,data:t}))}})),e.exports=l},function(e,n,t){"use strict";var i=t(19);function a(){this.handlers=[]}a.prototype.use=function(e,n,t){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!t&&t.synchronous,runWhen:t?t.runWhen:null}),this.handlers.length-1},a.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},a.prototype.forEach=function(e){i.forEach(this.handlers,(function(n){null!==n&&e(n)}))},e.exports=a},function(e,n,t){"use strict";var i=t(19),a=t(363),o=t(196),r=t(86),s=t(87);function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new s("canceled")}e.exports=function(e){return c(e),e.headers=e.headers||{},e.data=a.call(e,e.data,e.headers,e.transformRequest),e.headers=i.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(n){delete e.headers[n]})),(e.adapter||r.adapter)(e).then((function(n){return c(e),n.data=a.call(e,n.data,n.headers,e.transformResponse),n}),(function(n){return o(n)||(c(e),n&&n.response&&(n.response.data=a.call(e,n.response.data,n.response.headers,e.transformResponse))),Promise.reject(n)}))}},function(e,n,t){"use strict";var i=t(19),a=t(86);e.exports=function(e,n,t){var o=this||a;return i.forEach(t,(function(t){e=t.call(o,e,n)})),e}},function(e,n,t){"use strict";var i=t(19);e.exports=function(e,n){i.forEach(e,(function(t,i){i!==n&&i.toUpperCase()===n.toUpperCase()&&(e[n]=t,delete e[i])}))}},function(e,n,t){"use strict";var i=t(195);e.exports=function(e,n,t){var a=t.config.validateStatus;t.status&&a&&!a(t.status)?n(i("Request failed with status code "+t.status,t.config,null,t.request,t)):e(t)}},function(e,n,t){"use strict";var i=t(19);e.exports=i.isStandardBrowserEnv()?{write:function(e,n,t,a,o,r){var s=[];s.push(e+"="+encodeURIComponent(n)),i.isNumber(t)&&s.push("expires="+new Date(t).toGMTString()),i.isString(a)&&s.push("path="+a),i.isString(o)&&s.push("domain="+o),!0===r&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,n,t){"use strict";var i=t(368),a=t(369);e.exports=function(e,n){return e&&!i(n)?a(e,n):n}},function(e,n,t){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,n,t){"use strict";e.exports=function(e,n){return n?e.replace(/\/+$/,"")+"/"+n.replace(/^\/+/,""):e}},function(e,n,t){"use strict";var i=t(19),a=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var n,t,o,r={};return e?(i.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),n=i.trim(e.substr(0,o)).toLowerCase(),t=i.trim(e.substr(o+1)),n){if(r[n]&&a.indexOf(n)>=0)return;r[n]="set-cookie"===n?(r[n]?r[n]:[]).concat([t]):r[n]?r[n]+", "+t:t}})),r):r}},function(e,n,t){"use strict";var i=t(19);e.exports=i.isStandardBrowserEnv()?function(){var e,n=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");function a(e){var i=e;return n&&(t.setAttribute("href",i),i=t.href),t.setAttribute("href",i),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return e=a(window.location.href),function(n){var t=i.isString(n)?a(n):n;return t.protocol===e.protocol&&t.host===e.host}}():function(){return!0}},function(e,n,t){"use strict";var i=t(198).version,a={};["object","boolean","number","function","string","symbol"].forEach((function(e,n){a[e]=function(t){return typeof t===e||"a"+(n<1?"n ":" ")+e}}));var o={};a.transitional=function(e,n,t){function a(e,n){return"[Axios v"+i+"] Transitional option '"+e+"'"+n+(t?". "+t:"")}return function(t,i,r){if(!1===e)throw new Error(a(i," has been removed"+(n?" in "+n:"")));return n&&!o[i]&&(o[i]=!0,console.warn(a(i," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(t,i,r)}},e.exports={assertOptions:function(e,n,t){if("object"!=typeof e)throw new TypeError("options must be an object");for(var i=Object.keys(e),a=i.length;a-- >0;){var o=i[a],r=n[o];if(r){var s=e[o],c=void 0===s||r(s,o,e);if(!0!==c)throw new TypeError("option "+o+" must be "+c)}else if(!0!==t)throw Error("Unknown option "+o)}},validators:a}},function(e,n,t){"use strict";var i=t(87);function a(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var t=this;this.promise.then((function(e){if(t._listeners){var n,i=t._listeners.length;for(n=0;n<i;n++)t._listeners[n](e);t._listeners=null}})),this.promise.then=function(e){var n,i=new Promise((function(e){t.subscribe(e),n=e})).then(e);return i.cancel=function(){t.unsubscribe(n)},i},e((function(e){t.reason||(t.reason=new i(e),n(t.reason))}))}a.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},a.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},a.prototype.unsubscribe=function(e){if(this._listeners){var n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}},a.source=function(){var e;return{token:new a((function(n){e=n})),cancel:e}},e.exports=a},function(e,n,t){"use strict";e.exports=function(e){return function(n){return e.apply(null,n)}}},function(e,n,t){"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";var i=t(41),a=t(13),o=[].slice,r={},s=function(e,n,t){if(!(n in r)){for(var i=[],a=0;a<n;a++)i[a]="a["+a+"]";r[n]=Function("C,a","return new C("+i.join(",")+")")}return r[n](e,t)};e.exports=Function.bind||function(e){var n=i(this),t=o.call(arguments,1),r=function(){var i=t.concat(o.call(arguments));return this instanceof r?s(n,i.length,i):n.apply(e,i)};return a(n.prototype)&&(r.prototype=n.prototype),r}},function(e,n,t){"use strict";t(201)},function(e,n,t){"use strict";t(202)},function(e,n,t){"use strict";t.r(n);t(131),t(234),t(240),t(241);var i=t(17),a=(t(51),t(91),t(12),t(21),t(24),t(29),t(36),t(1));function o(e,n){for(var t in n)e[t]=n[t];return e}var r=/[!'()*]/g,s=function(e){return"%"+e.charCodeAt(0).toString(16)},c=/%2C/g,d=function(e){return encodeURIComponent(e).replace(r,s).replace(c,",")};function l(e){try{return decodeURIComponent(e)}catch(e){0}return e}var u=function(e){return null==e||"object"==typeof e?e:String(e)};function h(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),i=l(t.shift()),a=t.length>0?l(t.join("=")):null;void 0===n[i]?n[i]=a:Array.isArray(n[i])?n[i].push(a):n[i]=[n[i],a]})),n):n}function p(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return d(n);if(Array.isArray(t)){var i=[];return t.forEach((function(e){void 0!==e&&(null===e?i.push(d(n)):i.push(d(n)+"="+d(e)))})),i.join("&")}return d(n)+"="+d(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var f=/\/?$/;function m(e,n,t,i){var a=i&&i.options.stringifyQuery,o=n.query||{};try{o=b(o)}catch(e){}var r={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:o,params:n.params||{},fullPath:v(n,a),matched:e?g(e):[]};return t&&(r.redirectedFrom=v(t,a)),Object.freeze(r)}function b(e){if(Array.isArray(e))return e.map(b);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=b(e[t]);return n}return e}var y=m(null,{path:"/"});function g(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function v(e,n){var t=e.path,i=e.query;void 0===i&&(i={});var a=e.hash;return void 0===a&&(a=""),(t||"/")+(n||p)(i)+a}function w(e,n,t){return n===y?e===n:!!n&&(e.path&&n.path?e.path.replace(f,"")===n.path.replace(f,"")&&(t||e.hash===n.hash&&P(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&P(e.query,n.query)&&P(e.params,n.params))))}function P(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),i=Object.keys(n).sort();return t.length===i.length&&t.every((function(t,a){var o=e[t];if(i[a]!==t)return!1;var r=n[t];return null==o||null==r?o===r:"object"==typeof o&&"object"==typeof r?P(o,r):String(o)===String(r)}))}function T(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var i in t.instances){var a=t.instances[i],o=t.enteredCbs[i];if(a&&o){delete t.enteredCbs[i];for(var r=0;r<o.length;r++)a._isBeingDestroyed||o[r](a)}}}}var A={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,i=n.children,a=n.parent,r=n.data;r.routerView=!0;for(var s=a.$createElement,c=t.name,d=a.$route,l=a._routerViewCache||(a._routerViewCache={}),u=0,h=!1;a&&a._routerRoot!==a;){var p=a.$vnode?a.$vnode.data:{};p.routerView&&u++,p.keepAlive&&a._directInactive&&a._inactive&&(h=!0),a=a.$parent}if(r.routerViewDepth=u,h){var f=l[c],m=f&&f.component;return m?(f.configProps&&I(m,r,f.route,f.configProps),s(m,r,i)):s()}var b=d.matched[u],y=b&&b.components[c];if(!b||!y)return l[c]=null,s();l[c]={component:y},r.registerRouteInstance=function(e,n){var t=b.instances[c];(n&&t!==e||!n&&t===e)&&(b.instances[c]=n)},(r.hook||(r.hook={})).prepatch=function(e,n){b.instances[c]=n.componentInstance},r.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==b.instances[c]&&(b.instances[c]=e.componentInstance),T(d)};var g=b.props&&b.props[c];return g&&(o(l[c],{route:d,configProps:g}),I(y,r,d,g)),s(y,r,i)}};function I(e,n,t,i){var a=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,i);if(a){a=n.props=o({},a);var r=n.attrs=n.attrs||{};for(var s in a)e.props&&s in e.props||(r[s]=a[s],delete a[s])}}function q(e,n,t){var i=e.charAt(0);if("/"===i)return e;if("?"===i||"#"===i)return n+e;var a=n.split("/");t&&a[a.length-1]||a.pop();for(var o=e.replace(/^\//,"").split("/"),r=0;r<o.length;r++){var s=o[r];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function S(e){return e.replace(/\/\//g,"/")}var k=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},M=H,C=D,O=function(e,n){return F(D(e,n),n)},j=F,x=z,R=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function D(e,n){for(var t,i=[],a=0,o=0,r="",s=n&&n.delimiter||"/";null!=(t=R.exec(e));){var c=t[0],d=t[1],l=t.index;if(r+=e.slice(o,l),o=l+c.length,d)r+=d[1];else{var u=e[o],h=t[2],p=t[3],f=t[4],m=t[5],b=t[6],y=t[7];r&&(i.push(r),r="");var g=null!=h&&null!=u&&u!==h,v="+"===b||"*"===b,w="?"===b||"*"===b,P=t[2]||s,T=f||m;i.push({name:p||a++,prefix:h||"",delimiter:P,optional:w,repeat:v,partial:g,asterisk:!!y,pattern:T?B(T):y?".*":"[^"+N(P)+"]+?"})}}return o<e.length&&(r+=e.substr(o)),r&&i.push(r),i}function E(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function F(e,n){for(var t=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(t[i]=new RegExp("^(?:"+e[i].pattern+")$",L(n)));return function(n,i){for(var a="",o=n||{},r=(i||{}).pretty?E:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var d,l=o[c.name];if(null==l){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(k(l)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<l.length;u++){if(d=r(l[u]),!t[s].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");a+=(0===u?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(l).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):r(l),!t[s].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');a+=c.prefix+d}}else a+=c}return a}}function N(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function B(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function U(e,n){return e.keys=n,e}function L(e){return e&&e.sensitive?"":"i"}function z(e,n,t){k(n)||(t=n||t,n=[]);for(var i=(t=t||{}).strict,a=!1!==t.end,o="",r=0;r<e.length;r++){var s=e[r];if("string"==typeof s)o+=N(s);else{var c=N(s.prefix),d="(?:"+s.pattern+")";n.push(s),s.repeat&&(d+="(?:"+c+d+")*"),o+=d=s.optional?s.partial?c+"("+d+")?":"(?:"+c+"("+d+"))?":c+"("+d+")"}}var l=N(t.delimiter||"/"),u=o.slice(-l.length)===l;return i||(o=(u?o.slice(0,-l.length):o)+"(?:"+l+"(?=$))?"),o+=a?"$":i&&u?"":"(?="+l+"|$)",U(new RegExp("^"+o,L(t)),n)}function H(e,n,t){return k(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var i=0;i<t.length;i++)n.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return U(e,n)}(e,n):k(e)?function(e,n,t){for(var i=[],a=0;a<e.length;a++)i.push(H(e[a],n,t).source);return U(new RegExp("(?:"+i.join("|")+")",L(t)),n)}(e,n,t):function(e,n,t){return z(D(e,t),n,t)}(e,n,t)}M.parse=C,M.compile=O,M.tokensToFunction=j,M.tokensToRegExp=x;var _=Object.create(null);function G(e,n,t){n=n||{};try{var i=_[e]||(_[e]=M.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),i(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function V(e,n,t,i){var a="string"==typeof e?{path:e}:e;if(a._normalized)return a;if(a.name){var r=(a=o({},e)).params;return r&&"object"==typeof r&&(a.params=o({},r)),a}if(!a.path&&a.params&&n){(a=o({},a))._normalized=!0;var s=o(o({},n.params),a.params);if(n.name)a.name=n.name,a.params=s;else if(n.matched.length){var c=n.matched[n.matched.length-1].path;a.path=G(c,s,n.path)}else 0;return a}var d=function(e){var n="",t="",i=e.indexOf("#");i>=0&&(n=e.slice(i),e=e.slice(0,i));var a=e.indexOf("?");return a>=0&&(t=e.slice(a+1),e=e.slice(0,a)),{path:e,query:t,hash:n}}(a.path||""),l=n&&n.path||"/",p=d.path?q(d.path,l,t||a.append):l,f=function(e,n,t){void 0===n&&(n={});var i,a=t||h;try{i=a(e||"")}catch(e){i={}}for(var o in n){var r=n[o];i[o]=Array.isArray(r)?r.map(u):u(r)}return i}(d.query,a.query,i&&i.options.parseQuery),m=a.hash||d.hash;return m&&"#"!==m.charAt(0)&&(m="#"+m),{_normalized:!0,path:p,query:f,hash:m}}var $,K=function(){},X={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,i=this.$route,a=t.resolve(this.to,i,this.append),r=a.location,s=a.route,c=a.href,d={},l=t.options.linkActiveClass,u=t.options.linkExactActiveClass,h=null==l?"router-link-active":l,p=null==u?"router-link-exact-active":u,b=null==this.activeClass?h:this.activeClass,y=null==this.exactActiveClass?p:this.exactActiveClass,g=s.redirectedFrom?m(null,V(s.redirectedFrom),null,t):s;d[y]=w(i,g,this.exactPath),d[b]=this.exact||this.exactPath?d[y]:function(e,n){return 0===e.path.replace(f,"/").indexOf(n.path.replace(f,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(i,g);var v=d[y]?this.ariaCurrentValue:null,P=function(e){J(e)&&(n.replace?t.replace(r,K):t.push(r,K))},T={click:J};Array.isArray(this.event)?this.event.forEach((function(e){T[e]=P})):T[this.event]=P;var A={class:d},I=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:c,route:s,navigate:P,isActive:d[b],isExactActive:d[y]});if(I){if(1===I.length)return I[0];if(I.length>1||!I.length)return 0===I.length?e():e("span",{},I)}if("a"===this.tag)A.on=T,A.attrs={href:c,"aria-current":v};else{var q=function e(n){var t;if(n)for(var i=0;i<n.length;i++){if("a"===(t=n[i]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(q){q.isStatic=!1;var S=q.data=o({},q.data);for(var k in S.on=S.on||{},S.on){var M=S.on[k];k in T&&(S.on[k]=Array.isArray(M)?M:[M])}for(var C in T)C in S.on?S.on[C].push(T[C]):S.on[C]=P;var O=q.data.attrs=o({},q.data.attrs);O.href=c,O["aria-current"]=v}else A.on=T}return e(this.tag,A,this.$slots.default)}};function J(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var Y="undefined"!=typeof window;function Q(e,n,t,i,a){var o=n||[],r=t||Object.create(null),s=i||Object.create(null);e.forEach((function(e){!function e(n,t,i,a,o,r){var s=a.path,c=a.name;0;var d=a.pathToRegexpOptions||{},l=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return S(n.path+"/"+e)}(s,o,d.strict);"boolean"==typeof a.caseSensitive&&(d.sensitive=a.caseSensitive);var u={path:l,regex:W(l,d),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:c,parent:o,matchAs:r,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var o=r?S(r+"/"+a.path):void 0;e(n,t,i,a,u,o)}));t[u.path]||(n.push(u.path),t[u.path]=u);if(void 0!==a.alias)for(var h=Array.isArray(a.alias)?a.alias:[a.alias],p=0;p<h.length;++p){0;var f={path:h[p],children:a.children};e(n,t,i,f,o,u.path||"/")}c&&(i[c]||(i[c]=u))}(o,r,s,e,a)}));for(var c=0,d=o.length;c<d;c++)"*"===o[c]&&(o.push(o.splice(c,1)[0]),d--,c--);return{pathList:o,pathMap:r,nameMap:s}}function W(e,n){return M(e,[],n)}function Z(e,n){var t=Q(e),i=t.pathList,a=t.pathMap,o=t.nameMap;function r(e,t,r){var s=V(e,t,!1,n),d=s.name;if(d){var l=o[d];if(!l)return c(null,s);var u=l.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var h in t.params)!(h in s.params)&&u.indexOf(h)>-1&&(s.params[h]=t.params[h]);return s.path=G(l.path,s.params),c(l,s,r)}if(s.path){s.params={};for(var p=0;p<i.length;p++){var f=i[p],m=a[f];if(ee(m.regex,s.path,s.params))return c(m,s,r)}}return c(null,s)}function s(e,t){var i=e.redirect,a="function"==typeof i?i(m(e,t,null,n)):i;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return c(null,t);var s=a,d=s.name,l=s.path,u=t.query,h=t.hash,p=t.params;if(u=s.hasOwnProperty("query")?s.query:u,h=s.hasOwnProperty("hash")?s.hash:h,p=s.hasOwnProperty("params")?s.params:p,d){o[d];return r({_normalized:!0,name:d,query:u,hash:h,params:p},void 0,t)}if(l){var f=function(e,n){return q(e,n.parent?n.parent.path:"/",!0)}(l,e);return r({_normalized:!0,path:G(f,p),query:u,hash:h},void 0,t)}return c(null,t)}function c(e,t,i){return e&&e.redirect?s(e,i||t):e&&e.matchAs?function(e,n,t){var i=r({_normalized:!0,path:G(t,n.params)});if(i){var a=i.matched,o=a[a.length-1];return n.params=i.params,c(o,n)}return c(null,n)}(0,t,e.matchAs):m(e,t,i,n)}return{match:r,addRoute:function(e,n){var t="object"!=typeof e?o[e]:void 0;Q([n||e],i,a,o,t),t&&Q(t.alias.map((function(e){return{path:e,children:[n]}})),i,a,o,t)},getRoutes:function(){return i.map((function(e){return a[e]}))},addRoutes:function(e){Q(e,i,a,o)}}}function ee(e,n,t){var i=n.match(e);if(!i)return!1;if(!t)return!0;for(var a=1,o=i.length;a<o;++a){var r=e.keys[a-1];r&&(t[r.name||"pathMatch"]="string"==typeof i[a]?l(i[a]):i[a])}return!0}var ne=Y&&window.performance&&window.performance.now?window.performance:Date;function te(){return ne.now().toFixed(3)}var ie=te();function ae(){return ie}function oe(e){return ie=e}var re=Object.create(null);function se(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=o({},window.history.state);return t.key=ae(),window.history.replaceState(t,"",n),window.addEventListener("popstate",le),function(){window.removeEventListener("popstate",le)}}function ce(e,n,t,i){if(e.app){var a=e.options.scrollBehavior;a&&e.app.$nextTick((function(){var o=function(){var e=ae();if(e)return re[e]}(),r=a.call(e,n,t,i?o:null);r&&("function"==typeof r.then?r.then((function(e){me(e,o)})).catch((function(e){0})):me(r,o))}))}}function de(){var e=ae();e&&(re[e]={x:window.pageXOffset,y:window.pageYOffset})}function le(e){de(),e.state&&e.state.key&&oe(e.state.key)}function ue(e){return pe(e.x)||pe(e.y)}function he(e){return{x:pe(e.x)?e.x:window.pageXOffset,y:pe(e.y)?e.y:window.pageYOffset}}function pe(e){return"number"==typeof e}var fe=/^#\d/;function me(e,n){var t,i="object"==typeof e;if(i&&"string"==typeof e.selector){var a=fe.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(a){var o=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),i=e.getBoundingClientRect();return{x:i.left-t.left-n.x,y:i.top-t.top-n.y}}(a,o={x:pe((t=o).x)?t.x:0,y:pe(t.y)?t.y:0})}else ue(e)&&(n=he(e))}else i&&ue(e)&&(n=he(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var be=Y&&function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"function"==typeof window.history.pushState)}();function ye(e,n){de();var t=window.history;try{if(n){var i=o({},t.state);i.key=ae(),t.replaceState(i,"",e)}else t.pushState({key:oe(te())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function ge(e){ye(e,!0)}function ve(e,n,t){var i=function(a){a>=e.length?t():e[a]?n(e[a],(function(){i(a+1)})):i(a+1)};i(0)}var we={redirected:2,aborted:4,cancelled:8,duplicated:16};function Pe(e,n){return Ae(e,n,we.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return Ie.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function Te(e,n){return Ae(e,n,we.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function Ae(e,n,t,i){var a=new Error(i);return a._isRouter=!0,a.from=e,a.to=n,a.type=t,a}var Ie=["params","query","hash"];function qe(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function Se(e,n){return qe(e)&&e._isRouter&&(null==n||e.type===n)}function ke(e){return function(n,t,i){var a=!1,o=0,r=null;Me(e,(function(e,n,t,s){if("function"==typeof e&&void 0===e.cid){a=!0,o++;var c,d=je((function(n){var a;((a=n).__esModule||Oe&&"Module"===a[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:$.extend(n),t.components[s]=n,--o<=0&&i()})),l=je((function(e){var n="Failed to resolve async component "+s+": "+e;r||(r=qe(e)?e:new Error(n),i(r))}));try{c=e(d,l)}catch(e){l(e)}if(c)if("function"==typeof c.then)c.then(d,l);else{var u=c.component;u&&"function"==typeof u.then&&u.then(d,l)}}})),a||i()}}function Me(e,n){return Ce(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Ce(e){return Array.prototype.concat.apply([],e)}var Oe="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function je(e){var n=!1;return function(){for(var t=[],i=arguments.length;i--;)t[i]=arguments[i];if(!n)return n=!0,e.apply(this,t)}}var xe=function(e,n){this.router=e,this.base=function(e){if(!e)if(Y){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=y,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Re(e,n,t,i){var a=Me(e,(function(e,i,a,o){var r=function(e,n){"function"!=typeof e&&(e=$.extend(e));return e.options[n]}(e,n);if(r)return Array.isArray(r)?r.map((function(e){return t(e,i,a,o)})):t(r,i,a,o)}));return Ce(i?a.reverse():a)}function De(e,n){if(n)return function(){return e.apply(n,arguments)}}xe.prototype.listen=function(e){this.cb=e},xe.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},xe.prototype.onError=function(e){this.errorCbs.push(e)},xe.prototype.transitionTo=function(e,n,t){var i,a=this;try{i=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var o=this.current;this.confirmTransition(i,(function(){a.updateRoute(i),n&&n(i),a.ensureURL(),a.router.afterHooks.forEach((function(e){e&&e(i,o)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(e){e(i)})))}),(function(e){t&&t(e),e&&!a.ready&&(Se(e,we.redirected)&&o===y||(a.ready=!0,a.readyErrorCbs.forEach((function(n){n(e)}))))}))},xe.prototype.confirmTransition=function(e,n,t){var i=this,a=this.current;this.pending=e;var o,r,s=function(e){!Se(e)&&qe(e)&&(i.errorCbs.length?i.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},c=e.matched.length-1,d=a.matched.length-1;if(w(e,a)&&c===d&&e.matched[c]===a.matched[d])return this.ensureURL(),s(((r=Ae(o=a,e,we.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",r));var l=function(e,n){var t,i=Math.max(e.length,n.length);for(t=0;t<i&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),u=l.updated,h=l.deactivated,p=l.activated,f=[].concat(function(e){return Re(e,"beforeRouteLeave",De,!0)}(h),this.router.beforeHooks,function(e){return Re(e,"beforeRouteUpdate",De)}(u),p.map((function(e){return e.beforeEnter})),ke(p)),m=function(n,t){if(i.pending!==e)return s(Te(a,e));try{n(e,a,(function(n){!1===n?(i.ensureURL(!0),s(function(e,n){return Ae(e,n,we.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(a,e))):qe(n)?(i.ensureURL(!0),s(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(s(Pe(a,e)),"object"==typeof n&&n.replace?i.replace(n):i.push(n)):t(n)}))}catch(e){s(e)}};ve(f,m,(function(){ve(function(e){return Re(e,"beforeRouteEnter",(function(e,n,t,i){return function(e,n,t){return function(i,a,o){return e(i,a,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),o(e)}))}}(e,t,i)}))}(p).concat(i.router.resolveHooks),m,(function(){if(i.pending!==e)return s(Te(a,e));i.pending=null,n(e),i.router.app&&i.router.app.$nextTick((function(){T(e)}))}))}))},xe.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},xe.prototype.setupListeners=function(){},xe.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=y,this.pending=null};var Ee=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Fe(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,i=be&&t;i&&this.listeners.push(se());var a=function(){var t=e.current,a=Fe(e.base);e.current===y&&a===e._startLocation||e.transitionTo(a,(function(e){i&&ce(n,e,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var i=this,a=this.current;this.transitionTo(e,(function(e){ye(S(i.base+e.fullPath)),ce(i.router,e,a,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var i=this,a=this.current;this.transitionTo(e,(function(e){ge(S(i.base+e.fullPath)),ce(i.router,e,a,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Fe(this.base)!==this.current.fullPath){var n=S(this.base+this.current.fullPath);e?ye(n):ge(n)}},n.prototype.getCurrentLocation=function(){return Fe(this.base)},n}(xe);function Fe(e){var n=window.location.pathname;return e&&0===n.toLowerCase().indexOf(e.toLowerCase())&&(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var Ne=function(e){function n(n,t,i){e.call(this,n,t),i&&function(e){var n=Fe(e);if(!/^\/#/.test(n))return window.location.replace(S(e+"/#"+n)),!0}(this.base)||Be()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=be&&n;t&&this.listeners.push(se());var i=function(){var n=e.current;Be()&&e.transitionTo(Ue(),(function(i){t&&ce(e.router,i,n,!0),be||He(i.fullPath)}))},a=be?"popstate":"hashchange";window.addEventListener(a,i),this.listeners.push((function(){window.removeEventListener(a,i)}))}},n.prototype.push=function(e,n,t){var i=this,a=this.current;this.transitionTo(e,(function(e){ze(e.fullPath),ce(i.router,e,a,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var i=this,a=this.current;this.transitionTo(e,(function(e){He(e.fullPath),ce(i.router,e,a,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Ue()!==n&&(e?ze(n):He(n))},n.prototype.getCurrentLocation=function(){return Ue()},n}(xe);function Be(){var e=Ue();return"/"===e.charAt(0)||(He("/"+e),!1)}function Ue(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Le(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function ze(e){be?ye(Le(e)):window.location.hash=e}function He(e){be?ge(Le(e)):window.location.replace(Le(e))}var _e=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var i=this;this.transitionTo(e,(function(e){i.stack=i.stack.slice(0,i.index+1).concat(e),i.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var i=this;this.transitionTo(e,(function(e){i.stack=i.stack.slice(0,i.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var i=this.stack[t];this.confirmTransition(i,(function(){var e=n.current;n.index=t,n.updateRoute(i),n.router.afterHooks.forEach((function(n){n&&n(i,e)}))}),(function(e){Se(e,we.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(xe),Ge=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Z(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!be&&!1!==e.fallback,this.fallback&&(n="hash"),Y||(n="abstract"),this.mode=n,n){case"history":this.history=new Ee(this,e.base);break;case"hash":this.history=new Ne(this,e.base,this.fallback);break;case"abstract":this.history=new _e(this,e.base);break;default:0}},Ve={currentRoute:{configurable:!0}};function $e(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}Ge.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Ve.currentRoute.get=function(){return this.history&&this.history.current},Ge.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Ee||t instanceof Ne){var i=function(e){t.setupListeners(),function(e){var i=t.current,a=n.options.scrollBehavior;be&&a&&"fullPath"in e&&ce(n,e,i,!1)}(e)};t.transitionTo(t.getCurrentLocation(),i,i)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},Ge.prototype.beforeEach=function(e){return $e(this.beforeHooks,e)},Ge.prototype.beforeResolve=function(e){return $e(this.resolveHooks,e)},Ge.prototype.afterEach=function(e){return $e(this.afterHooks,e)},Ge.prototype.onReady=function(e,n){this.history.onReady(e,n)},Ge.prototype.onError=function(e){this.history.onError(e)},Ge.prototype.push=function(e,n,t){var i=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){i.history.push(e,n,t)}));this.history.push(e,n,t)},Ge.prototype.replace=function(e,n,t){var i=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){i.history.replace(e,n,t)}));this.history.replace(e,n,t)},Ge.prototype.go=function(e){this.history.go(e)},Ge.prototype.back=function(){this.go(-1)},Ge.prototype.forward=function(){this.go(1)},Ge.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},Ge.prototype.resolve=function(e,n,t){var i=V(e,n=n||this.history.current,t,this),a=this.match(i,n),o=a.redirectedFrom||a.fullPath;return{location:i,route:a,href:function(e,n,t){var i="hash"===t?"#"+n:n;return e?S(e+"/"+i):i}(this.history.base,o,this.mode),normalizedTo:i,resolved:a}},Ge.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ge.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==y&&this.history.transitionTo(this.history.getCurrentLocation())},Ge.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==y&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ge.prototype,Ve),Ge.install=function e(n){if(!e.installed||$!==n){e.installed=!0,$=n;var t=function(e){return void 0!==e},i=function(e,n){var i=e.$options._parentVnode;t(i)&&t(i=i.data)&&t(i=i.registerRouteInstance)&&i(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,i(this,this)},destroyed:function(){i(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",A),n.component("RouterLink",X);var a=n.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Ge.version="3.5.1",Ge.isNavigationFailure=Se,Ge.NavigationFailureType=we,Ge.START_LOCATION=y,Y&&window.Vue&&window.Vue.use(Ge);var Ke=Ge;t(157),t(158),t(243),t(95),t(226),t(37),t(38),t(245);function Xe(e){e.locales&&Object.keys(e.locales).forEach((function(n){e.locales[n].path=n})),Object.freeze(e)}t(34),t(43),t(66);var Je=t(52),Ye=(t(166),t(22),t(30),t(210),t(211),{NotFound:function(){return t.e(76).then(t.bind(null,499))},Layout:function(){return Promise.all([t.e(0),t.e(6),t.e(7)]).then(t.bind(null,498))},GlobalLayout:function(){return Promise.resolve().then(t.bind(null,0))}}),Qe={"v-bafe9662":function(){return t.e(77).then(t.bind(null,541))},"v-d95c8766":function(){return t.e(78).then(t.bind(null,542))},"v-67ea57bc":function(){return t.e(79).then(t.bind(null,543))},"v-6ce79e58":function(){return t.e(83).then(t.bind(null,544))},"v-70291314":function(){return t.e(82).then(t.bind(null,545))},"v-1072a010":function(){return t.e(81).then(t.bind(null,546))},"v-f7ba786a":function(){return t.e(80).then(t.bind(null,547))},"v-178f82f8":function(){return t.e(84).then(t.bind(null,548))},"v-0bed007c":function(){return t.e(85).then(t.bind(null,549))},"v-5419cfb1":function(){return Promise.all([t.e(0),t.e(1),t.e(12)]).then(t.bind(null,500))},"v-41c9cef1":function(){return t.e(86).then(t.bind(null,550))},"v-3ed9379e":function(){return t.e(87).then(t.bind(null,551))},"v-71f73c49":function(){return Promise.all([t.e(0),t.e(1),t.e(44)]).then(t.bind(null,501))},"v-1eca3571":function(){return Promise.all([t.e(0),t.e(1),t.e(13)]).then(t.bind(null,502))},"v-8f2a935e":function(){return Promise.all([t.e(0),t.e(1),t.e(45)]).then(t.bind(null,503))},"v-29ac1cd0":function(){return t.e(89).then(t.bind(null,552))},"v-07f4f7f1":function(){return t.e(18).then(t.bind(null,504))},"v-908bc336":function(){return t.e(88).then(t.bind(null,553))},"v-d17b4d9e":function(){return Promise.all([t.e(0),t.e(1),t.e(46)]).then(t.bind(null,505))},"v-347ddf46":function(){return t.e(90).then(t.bind(null,554))},"v-ad15e4de":function(){return t.e(91).then(t.bind(null,555))},"v-cf98898a":function(){return t.e(24).then(t.bind(null,506))},"v-b972491e":function(){return Promise.all([t.e(0),t.e(1),t.e(14)]).then(t.bind(null,507))},"v-03130251":function(){return t.e(42).then(t.bind(null,508))},"v-8017e46a":function(){return Promise.all([t.e(0),t.e(1),t.e(15)]).then(t.bind(null,509))},"v-ab347f5e":function(){return Promise.all([t.e(0),t.e(1),t.e(19)]).then(t.bind(null,510))},"v-6f863d11":function(){return t.e(92).then(t.bind(null,556))},"v-ff4aea1e":function(){return Promise.all([t.e(0),t.e(1),t.e(20)]).then(t.bind(null,511))},"v-1f7e901e":function(){return Promise.all([t.e(0),t.e(1),t.e(47)]).then(t.bind(null,512))},"v-15153551":function(){return Promise.all([t.e(0),t.e(1),t.e(17)]).then(t.bind(null,513))},"v-1f241ee3":function(){return Promise.all([t.e(0),t.e(1),t.e(16)]).then(t.bind(null,514))},"v-6bb205b8":function(){return t.e(94).then(t.bind(null,557))},"v-6a2d969a":function(){return t.e(93).then(t.bind(null,558))},"v-d8cb96d0":function(){return t.e(95).then(t.bind(null,559))},"v-64d2a214":function(){return t.e(97).then(t.bind(null,560))},"v-47209790":function(){return t.e(98).then(t.bind(null,561))},"v-23694f90":function(){return t.e(96).then(t.bind(null,562))},"v-b2df5790":function(){return t.e(99).then(t.bind(null,563))},"v-111e5a38":function(){return t.e(100).then(t.bind(null,564))},"v-30bc70d8":function(){return t.e(101).then(t.bind(null,565))},"v-7a35ca05":function(){return t.e(102).then(t.bind(null,566))},"v-696c4c18":function(){return t.e(103).then(t.bind(null,567))},"v-53778f60":function(){return t.e(104).then(t.bind(null,568))},"v-c0047d3c":function(){return t.e(105).then(t.bind(null,569))},"v-bbe02a20":function(){return t.e(106).then(t.bind(null,570))},"v-66efdeb4":function(){return t.e(109).then(t.bind(null,571))},"v-d4f60b90":function(){return t.e(110).then(t.bind(null,572))},"v-10f7ddc6":function(){return t.e(111).then(t.bind(null,573))},"v-275a07d8":function(){return t.e(112).then(t.bind(null,574))},"v-73b81562":function(){return t.e(114).then(t.bind(null,575))},"v-1ab93410":function(){return t.e(113).then(t.bind(null,576))},"v-2d074238":function(){return t.e(108).then(t.bind(null,577))},"v-a5b20018":function(){return t.e(115).then(t.bind(null,578))},"v-01a97382":function(){return t.e(116).then(t.bind(null,579))},"v-ad4ffaf0":function(){return t.e(118).then(t.bind(null,580))},"v-f43024d0":function(){return t.e(119).then(t.bind(null,581))},"v-7625d9b8":function(){return t.e(107).then(t.bind(null,582))},"v-678ebab8":function(){return t.e(120).then(t.bind(null,583))},"v-1c327d98":function(){return t.e(121).then(t.bind(null,584))},"v-2be03798":function(){return t.e(117).then(t.bind(null,585))},"v-3eca9242":function(){return t.e(122).then(t.bind(null,586))},"v-16de81d8":function(){return t.e(125).then(t.bind(null,587))},"v-6e91a8f2":function(){return t.e(124).then(t.bind(null,588))},"v-2c57b75e":function(){return t.e(126).then(t.bind(null,589))},"v-736185d3":function(){return t.e(127).then(t.bind(null,590))},"v-aec34412":function(){return t.e(123).then(t.bind(null,591))},"v-dc10ee10":function(){return t.e(128).then(t.bind(null,592))},"v-12932556":function(){return t.e(129).then(t.bind(null,593))},"v-51ac86f8":function(){return t.e(132).then(t.bind(null,594))},"v-15d08cd8":function(){return t.e(131).then(t.bind(null,595))},"v-7d83edb8":function(){return t.e(133).then(t.bind(null,596))},"v-13461887":function(){return t.e(134).then(t.bind(null,597))},"v-95b8cb78":function(){return t.e(135).then(t.bind(null,598))},"v-7eff6d2c":function(){return t.e(136).then(t.bind(null,599))},"v-f2258890":function(){return t.e(137).then(t.bind(null,600))},"v-db14a79e":function(){return t.e(130).then(t.bind(null,601))},"v-519aee11":function(){return t.e(138).then(t.bind(null,602))},"v-41d3ccb8":function(){return t.e(139).then(t.bind(null,603))},"v-5a8d68f8":function(){return t.e(141).then(t.bind(null,604))},"v-30ac8ad0":function(){return t.e(143).then(t.bind(null,605))},"v-acf0f39e":function(){return t.e(142).then(t.bind(null,606))},"v-3268c0ea":function(){return t.e(140).then(t.bind(null,607))},"v-961caed0":function(){return t.e(144).then(t.bind(null,608))},"v-28c6e45e":function(){return t.e(145).then(t.bind(null,609))},"v-53ba34b8":function(){return t.e(146).then(t.bind(null,610))},"v-413ebbb8":function(){return t.e(147).then(t.bind(null,611))},"v-55b734ac":function(){return t.e(148).then(t.bind(null,612))},"v-15ed1ed0":function(){return t.e(151).then(t.bind(null,613))},"v-b6e1629e":function(){return t.e(149).then(t.bind(null,614))},"v-4a5993f8":function(){return t.e(150).then(t.bind(null,615))},"v-1f032eec":function(){return t.e(152).then(t.bind(null,616))},"v-a1d2b7de":function(){return Promise.all([t.e(0),t.e(1),t.e(21)]).then(t.bind(null,515))},"v-dd0cae90":function(){return t.e(153).then(t.bind(null,617))},"v-2f26d510":function(){return t.e(154).then(t.bind(null,618))},"v-7d05d150":function(){return t.e(155).then(t.bind(null,619))},"v-c8b409ce":function(){return t.e(156).then(t.bind(null,620))},"v-55c31810":function(){return t.e(157).then(t.bind(null,621))},"v-54383596":function(){return t.e(158).then(t.bind(null,622))}};function We(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var Ze=/-(\w)/g,en=We((function(e){return e.replace(Ze,(function(e,n){return n?n.toUpperCase():""}))})),nn=/\B([A-Z])/g,tn=We((function(e){return e.replace(nn,"-$1").toLowerCase()})),an=We((function(e){return e.charAt(0).toUpperCase()+e.slice(1)}));function on(e,n){if(n)return e(n)?e(n):n.includes("-")?e(an(en(n))):e(an(n))||e(tn(n))}var rn=Object.assign({},Ye,Qe),sn=function(e){return rn[e]},cn=function(e){return Qe[e]},dn=function(e){return Ye[e]},ln=function(e){return a.default.component(e)};function un(e){return on(cn,e)}function hn(e){return on(dn,e)}function pn(e){return on(sn,e)}function fn(e){return on(ln,e)}function mn(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return Promise.all(n.filter((function(e){return e})).map(function(){var e=Object(i.a)(regeneratorRuntime.mark((function e(n){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(fn(n)||!pn(n)){e.next=5;break}return e.next=3,pn(n)();case 3:t=e.sent,a.default.component(n,t.default);case 5:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()))}var bn=t(35),yn=(t(222),t(93),t(204)),gn=t.n(yn),vn={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(e){return"meta"===Object(bn.a)(e,1)[0]})).map((function(e){var n=Object(bn.a)(e,2);n[0];return n[1]})),this.$ssrContext){var e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map((function(e){var n="<meta";return Object.keys(e).forEach((function(t){n+=" ".concat(t,'="').concat(e[t],'"')})),n+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=Pn(this.$canonicalUrl)}var n},mounted:function(){this.currentMetaTags=Object(Je.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var e=this.getMergedMetaTags();this.currentMetaTags=Tn(e,this.currentMetaTags)},getMergedMetaTags:function(){var e=this.$page.frontmatter.meta||[];return gn()([{name:"description",content:this.$description}],e,this.siteMeta,An)},updateCanonicalLink:function(){wn(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",Pn(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){Tn(null,this.currentMetaTags),wn()}};function wn(){var e=document.querySelector("link[rel='canonical']");e&&e.remove()}function Pn(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e?'<link href="'.concat(e,'" rel="canonical" />'):""}function Tn(e,n){if(n&&Object(Je.a)(n).filter((function(e){return e.parentNode===document.head})).forEach((function(e){return document.head.removeChild(e)})),e)return e.map((function(e){var n=document.createElement("meta");return Object.keys(e).forEach((function(t){n.setAttribute(t,e[t])})),document.head.appendChild(n),n}))}function An(e){for(var n=0,t=["name","property","itemprop"];n<t.length;n++){var i=t[n];if(e.hasOwnProperty(i))return e[i]+i}return JSON.stringify(e)}t(48);var In=t(89),qn=t.n(In),Sn={mounted:function(){var e=this;qn.a.configure({showSpinner:!1}),this.$router.beforeEach((function(e,n,t){e.path===n.path||a.default.component(e.name)||qn.a.start(),t()})),this.$router.afterEach((function(){qn.a.done(),e.isSidebarOpen=!1}))}},kn=t(4),Mn=(t(124),t(229),{props:{parent:Object,code:String,options:{align:String,color:String,backgroundTransition:Boolean,backgroundColor:String,successText:String,staticIcon:Boolean}},data:function(){return{success:!1,originalBackground:null,originalTransition:null}},computed:{alignStyle:function(){var e={};return e[this.options.align]="7.5px",e},iconClass:function(){return this.options.staticIcon?"":"hover"}},mounted:function(){this.originalTransition=this.parent.style.transition,this.originalBackground=this.parent.style.background},beforeDestroy:function(){this.parent.style.transition=this.originalTransition,this.parent.style.background=this.originalBackground},methods:{hexToRgb:function(e){var n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return n?{r:parseInt(n[1],16),g:parseInt(n[2],16),b:parseInt(n[3],16)}:null},copyToClipboard:function(e){var n=this;if(navigator.clipboard)navigator.clipboard.writeText(this.code).then((function(){n.setSuccessTransitions()}),(function(){}));else{var t=document.createElement("textarea");document.body.appendChild(t),t.value=this.code,t.select(),document.execCommand("Copy"),t.remove(),this.setSuccessTransitions()}},setSuccessTransitions:function(){var e=this;if(clearTimeout(this.successTimeout),this.options.backgroundTransition){this.parent.style.transition="background 350ms";var n=this.hexToRgb(this.options.backgroundColor);this.parent.style.background="rgba(".concat(n.r,", ").concat(n.g,", ").concat(n.b,", 0.1)")}this.success=!0,this.successTimeout=setTimeout((function(){e.options.backgroundTransition&&(e.parent.style.background=e.originalBackground,e.parent.style.transition=e.originalTransition),e.success=!1}),500)}}}),Cn=(t(346),t(20)),On=Object(Cn.a)(Mn,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"code-copy"},[t("svg",{class:e.iconClass,style:e.alignStyle,attrs:{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"},on:{click:e.copyToClipboard}},[t("path",{attrs:{fill:"none",d:"M0 0h24v24H0z"}}),e._v(" "),t("path",{attrs:{fill:e.options.color,d:"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z"}})]),e._v(" "),t("span",{class:e.success?"success":"",style:e.alignStyle},[e._v("\n        "+e._s(e.options.successText)+"\n    ")])])}),[],!1,null,"49140617",null).exports,jn=(t(347),{updated:function(){this.update()},methods:{update:function(){setTimeout((function(){document.querySelectorAll('div[class*="language-"] pre').forEach((function(e){if(!e.classList.contains("code-copy-added")){var n=new(a.default.extend(On));n.options=Object(kn.a)({},{align:"bottom",color:"#27b1ff",backgroundTransition:!0,backgroundColor:"#0075b8",successText:"Copied!",staticIcon:!1}),n.code=e.innerText,n.parent=e,n.$mount(),e.classList.add("code-copy-added"),e.appendChild(n.$el)}}))}),100)}}}),xn=t(205),Rn=t.n(xn),Dn=[vn,Sn,jn,{mounted:function(){Rn.a.polyfill()}}],En=t(0);!function(e,n,t){var i;switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),(i=e[n]).push.apply(i,Object(Je.a)(t));break;default:throw new Error("Unknown option name.")}}(En.default,"mixins",Dn);var Fn=[{name:"v-bafe9662",path:"/api-versions-1.0/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-bafe9662").then(t)}},{path:"/api-versions-1.0/index.html",redirect:"/api-versions-1.0/"},{name:"v-d95c8766",path:"/api-versions-1.1/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-d95c8766").then(t)}},{path:"/api-versions-1.1/index.html",redirect:"/api-versions-1.1/"},{name:"v-67ea57bc",path:"/api-versions-1.2/get-started.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-67ea57bc").then(t)}},{name:"v-6ce79e58",path:"/api-versions-1.2/resources/highlights.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-6ce79e58").then(t)}},{name:"v-70291314",path:"/api-versions-1.2/resources/change-list.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-70291314").then(t)}},{name:"v-1072a010",path:"/api-versions-1.2/resources/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1072a010").then(t)}},{name:"v-f7ba786a",path:"/api-versions-1.2/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-f7ba786a").then(t)}},{path:"/api-versions-1.2/index.html",redirect:"/api-versions-1.2/"},{name:"v-178f82f8",path:"/api-versions-1.2/resources/open-oas3-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-178f82f8").then(t)}},{name:"v-0bed007c",path:"/api-versions-1.2/use-cases-about.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-0bed007c").then(t)}},{name:"v-5419cfb1",path:"/banks-microfinance-institutions/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-5419cfb1").then(t)}},{path:"/banks-microfinance-institutions/index.html",redirect:"/banks-microfinance-institutions/"},{name:"v-41c9cef1",path:"/dashboard/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-41c9cef1").then(t)}},{path:"/dashboard/index.html",redirect:"/dashboard/"},{name:"v-3ed9379e",path:"/documentation/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-3ed9379e").then(t)}},{path:"/documentation/index.html",redirect:"/documentation/"},{name:"v-71f73c49",path:"/education-and-health/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-71f73c49").then(t)}},{path:"/education-and-health/index.html",redirect:"/education-and-health/"},{name:"v-1eca3571",path:"/employers/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1eca3571").then(t)}},{path:"/employers/index.html",redirect:"/employers/"},{name:"v-8f2a935e",path:"/energy-utilities-agritech/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-8f2a935e").then(t)}},{path:"/energy-utilities-agritech/index.html",redirect:"/energy-utilities-agritech/"},{name:"v-29ac1cd0",path:"/examples/swagger-page.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-29ac1cd0").then(t)}},{name:"v-07f4f7f1",path:"/faq/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-07f4f7f1").then(t)}},{path:"/faq/index.html",redirect:"/faq/"},{name:"v-908bc336",path:"/examples/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-908bc336").then(t)}},{path:"/examples/index.html",redirect:"/examples/"},{name:"v-d17b4d9e",path:"/fintech-providers/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-d17b4d9e").then(t)}},{path:"/fintech-providers/index.html",redirect:"/fintech-providers/"},{name:"v-347ddf46",path:"/forgot-password/confirmation.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-347ddf46").then(t)}},{name:"v-ad15e4de",path:"/forgot-password/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-ad15e4de").then(t)}},{path:"/forgot-password/index.html",redirect:"/forgot-password/"},{name:"v-cf98898a",path:"/glossary/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-cf98898a").then(t)}},{path:"/glossary/index.html",redirect:"/glossary/"},{name:"v-b972491e",path:"/governments/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-b972491e").then(t)}},{path:"/governments/index.html",redirect:"/governments/"},{name:"v-03130251",path:"/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-03130251").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-8017e46a",path:"/international-transfer-organisations/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-8017e46a").then(t)}},{path:"/international-transfer-organisations/index.html",redirect:"/international-transfer-organisations/"},{name:"v-ab347f5e",path:"/humanitarian-agencies/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-ab347f5e").then(t)}},{path:"/humanitarian-agencies/index.html",redirect:"/humanitarian-agencies/"},{name:"v-6f863d11",path:"/login/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-6f863d11").then(t)}},{path:"/login/index.html",redirect:"/login/"},{name:"v-ff4aea1e",path:"/merchants-and-service-providers/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-ff4aea1e").then(t)}},{path:"/merchants-and-service-providers/index.html",redirect:"/merchants-and-service-providers/"},{name:"v-1f7e901e",path:"/mobile-money-agents/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1f7e901e").then(t)}},{path:"/mobile-money-agents/index.html",redirect:"/mobile-money-agents/"},{name:"v-15153551",path:"/payment-service-providers-and-payment-aggregators/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-15153551").then(t)}},{path:"/payment-service-providers-and-payment-aggregators/index.html",redirect:"/payment-service-providers-and-payment-aggregators/"},{name:"v-1f241ee3",path:"/mobile-money-providers/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1f241ee3").then(t)}},{path:"/mobile-money-providers/index.html",redirect:"/mobile-money-providers/"},{name:"v-6bb205b8",path:"/sdks/android/github.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-6bb205b8").then(t)}},{name:"v-6a2d969a",path:"/sdks/android/downloads.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-6a2d969a").then(t)}},{name:"v-d8cb96d0",path:"/sdks/android/introduction.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-d8cb96d0").then(t)}},{name:"v-64d2a214",path:"/sdks/android/system-requirements.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-64d2a214").then(t)}},{name:"v-47209790",path:"/sdks/auth/api-authorization.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-47209790").then(t)}},{name:"v-23694f90",path:"/sdks/android/sdk-initialization.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-23694f90").then(t)}},{name:"v-b2df5790",path:"/sdks/auth/client-authentication.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-b2df5790").then(t)}},{name:"v-111e5a38",path:"/sdks/getting-started/introduction.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-111e5a38").then(t)}},{name:"v-30bc70d8",path:"/sdks/getting-started/sdks.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-30bc70d8").then(t)}},{name:"v-7a35ca05",path:"/sdks/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-7a35ca05").then(t)}},{path:"/sdks/index.html",redirect:"/sdks/"},{name:"v-696c4c18",path:"/sdks/java/downloads.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-696c4c18").then(t)}},{name:"v-53778f60",path:"/sdks/java/github.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-53778f60").then(t)}},{name:"v-c0047d3c",path:"/sdks/java/introduction.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-c0047d3c").then(t)}},{name:"v-bbe02a20",path:"/sdks/java/sdk-initialization.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-bbe02a20").then(t)}},{name:"v-66efdeb4",path:"/sdks/javascript/github.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-66efdeb4").then(t)}},{name:"v-d4f60b90",path:"/sdks/javascript/introduction.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-d4f60b90").then(t)}},{name:"v-10f7ddc6",path:"/sdks/javascript/sdk-initialization.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-10f7ddc6").then(t)}},{name:"v-275a07d8",path:"/sdks/javascript/system-requirements.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-275a07d8").then(t)}},{name:"v-73b81562",path:"/sdks/nodejs/github.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-73b81562").then(t)}},{name:"v-1ab93410",path:"/sdks/nodejs/downloads.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1ab93410").then(t)}},{name:"v-2d074238",path:"/sdks/javascript/downloads.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-2d074238").then(t)}},{name:"v-a5b20018",path:"/sdks/nodejs/introduction.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-a5b20018").then(t)}},{name:"v-01a97382",path:"/sdks/nodejs/sdk-initialization.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-01a97382").then(t)}},{name:"v-ad4ffaf0",path:"/sdks/php/downloads.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-ad4ffaf0").then(t)}},{name:"v-f43024d0",path:"/sdks/php/github.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-f43024d0").then(t)}},{name:"v-7625d9b8",path:"/sdks/java/system-requirements.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-7625d9b8").then(t)}},{name:"v-678ebab8",path:"/sdks/php/introduction.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-678ebab8").then(t)}},{name:"v-1c327d98",path:"/sdks/php/sdk-initialization.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1c327d98").then(t)}},{name:"v-2be03798",path:"/sdks/nodejs/system-requirements.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-2be03798").then(t)}},{name:"v-3eca9242",path:"/sdks/php/system-requirements.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-3eca9242").then(t)}},{name:"v-16de81d8",path:"/signup/set-new-password.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-16de81d8").then(t)}},{name:"v-6e91a8f2",path:"/signup/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-6e91a8f2").then(t)}},{path:"/signup/index.html",redirect:"/signup/"},{name:"v-2c57b75e",path:"/support/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-2c57b75e").then(t)}},{path:"/support/index.html",redirect:"/support/"},{name:"v-736185d3",path:"/test/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-736185d3").then(t)}},{path:"/test/index.html",redirect:"/test/"},{name:"v-aec34412",path:"/security/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-aec34412").then(t)}},{path:"/security/index.html",redirect:"/security/"},{name:"v-dc10ee10",path:"/use-cases/account-linking/account-linking-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-dc10ee10").then(t)}},{name:"v-12932556",path:"/use-cases/account-linking/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-12932556").then(t)}},{name:"v-51ac86f8",path:"/use-cases/agent-services/agent-services-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-51ac86f8").then(t)}},{name:"v-15d08cd8",path:"/use-cases/account-linking/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-15d08cd8").then(t)}},{name:"v-7d83edb8",path:"/use-cases/agent-services/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-7d83edb8").then(t)}},{name:"v-13461887",path:"/use-cases/agent-services/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-13461887").then(t)}},{path:"/use-cases/agent-services/index.html",redirect:"/use-cases/agent-services/"},{name:"v-95b8cb78",path:"/use-cases/agent-services/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-95b8cb78").then(t)}},{name:"v-7eff6d2c",path:"/use-cases/bill-payments/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-7eff6d2c").then(t)}},{name:"v-f2258890",path:"/use-cases/bill-payments/bill-payments-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-f2258890").then(t)}},{name:"v-db14a79e",path:"/use-cases/account-linking/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-db14a79e").then(t)}},{path:"/use-cases/account-linking/index.html",redirect:"/use-cases/account-linking/"},{name:"v-519aee11",path:"/use-cases/bill-payments/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-519aee11").then(t)}},{path:"/use-cases/bill-payments/index.html",redirect:"/use-cases/bill-payments/"},{name:"v-41d3ccb8",path:"/use-cases/bill-payments/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-41d3ccb8").then(t)}},{name:"v-5a8d68f8",path:"/use-cases/disbursements/disbursements-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-5a8d68f8").then(t)}},{name:"v-30ac8ad0",path:"/use-cases/disbursements/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-30ac8ad0").then(t)}},{name:"v-acf0f39e",path:"/use-cases/disbursements/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-acf0f39e").then(t)}},{path:"/use-cases/disbursements/index.html",redirect:"/use-cases/disbursements/"},{name:"v-3268c0ea",path:"/use-cases/disbursements/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-3268c0ea").then(t)}},{name:"v-961caed0",path:"/use-cases/international-transfers/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-961caed0").then(t)}},{name:"v-28c6e45e",path:"/use-cases/international-transfers/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-28c6e45e").then(t)}},{path:"/use-cases/international-transfers/index.html",redirect:"/use-cases/international-transfers/"},{name:"v-53ba34b8",path:"/use-cases/international-transfers/international-transfers-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-53ba34b8").then(t)}},{name:"v-413ebbb8",path:"/use-cases/international-transfers/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-413ebbb8").then(t)}},{name:"v-55b734ac",path:"/use-cases/merchant-payments/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-55b734ac").then(t)}},{name:"v-15ed1ed0",path:"/use-cases/merchant-payments/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-15ed1ed0").then(t)}},{name:"v-b6e1629e",path:"/use-cases/merchant-payments/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-b6e1629e").then(t)}},{path:"/use-cases/merchant-payments/index.html",redirect:"/use-cases/merchant-payments/"},{name:"v-4a5993f8",path:"/use-cases/merchant-payments/merchant-payments-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-4a5993f8").then(t)}},{name:"v-1f032eec",path:"/use-cases/p-2-p-transfers/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-1f032eec").then(t)}},{name:"v-a1d2b7de",path:"/use-cases/p-2-p-transfers/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-a1d2b7de").then(t)}},{path:"/use-cases/p-2-p-transfers/index.html",redirect:"/use-cases/p-2-p-transfers/"},{name:"v-dd0cae90",path:"/use-cases/p-2-p-transfers/p2p-transfers-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-dd0cae90").then(t)}},{name:"v-2f26d510",path:"/use-cases/p-2-p-transfers/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-2f26d510").then(t)}},{name:"v-7d05d150",path:"/use-cases/recurring-payments/api-service-definition.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-7d05d150").then(t)}},{name:"v-c8b409ce",path:"/use-cases/recurring-payments/",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-c8b409ce").then(t)}},{path:"/use-cases/recurring-payments/index.html",redirect:"/use-cases/recurring-payments/"},{name:"v-55c31810",path:"/use-cases/recurring-payments/recurring-payments-open-oas-ui.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-55c31810").then(t)}},{name:"v-54383596",path:"/use-cases/recurring-payments/scenarios/scenarios.html",component:En.default,beforeEnter:function(e,n,t){mn("Layout","v-54383596").then(t)}},{path:"*",component:En.default}],Nn={title:"Mobile Money API Developer Portal",description:"Mobile Money API documentation",base:"/",headTags:[["meta",{name:"theme-color",content:"red"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["script",{src:"/js/fix-scroll-to-hash.js"}]],pages:[{title:"MM API Specification v1.0",frontmatter:{pageClass:"api-page container--narrow",title:"MM API Specification v1.0"},regularPath:"/api-versions-1.0/",relativePath:"api-versions-1.0/index.md",key:"v-bafe9662",path:"/api-versions-1.0/",headersStr:null,content:"# GSMA Mobile Money API Specification v1.0\n\nWelcome to the GSMA Mobile Money API Developer Portal. The Mobile Money API is an initiative developed through collaboration between the mobile money industry and the GSMA, which provides a harmonized API Specification for all the common mobile money use cases which is both easy to use and secure. Using best practices from the technology industry in API design and security, it aims to simplify and accelerate integration with mobile money platforms and stimulate the growth of the ecosystem.\n\nThe key design principles of the API include the use of REST architectural principles, the use of the JSON data format for requests and responses, and the provision of a set of well-defined objects that are abstracted from the underlying object representations held in different mobile money systems. The API also defines a standard set of transaction types and other key enumerations, uses ISO international standards for enumerations such as currency and country codes, and provides support for supplementary metadata and sub-types for properties specific to different mobile money providers.\n\nThe Mobile Money Developer Portal provides access to the Mobile Money API Specification assets and a full suite of developer documentation and tools to facilitate developers implementing the specification, whether they are Mobile Money Providers or Service Providers building solutions for the mobile money ecosystem.\n\nThe developer documentation includes developer guides for getting started with the Mobile Money API covering API Fundamentals and API Behaviour & Error Handling and reference documentation for all APIs and supporting objects included in the specification. Developers can also access security design and implementation guidelines to ensure that best practices are applied to the connection between the API client and the API gateway, and to authenticating end users to the mobile money platform.\n\nThe developer tools include the GSMA Simulator which provides an example simulated API implementation developed to facilitate API adoption and testing, an example Authentication Gateway which adopts the best practice security recommendations of OAuth 2.0, and use case examples which include Postman Collections enabling developers to test the simulated APIs directly or through the authentication gateway.\n\nDownload Specification",normalizedContent:"# gsma mobile money api specification v1.0\n\nwelcome to the gsma mobile money api developer portal. the mobile money api is an initiative developed through collaboration between the mobile money industry and the gsma, which provides a harmonized api specification for all the common mobile money use cases which is both easy to use and secure. using best practices from the technology industry in api design and security, it aims to simplify and accelerate integration with mobile money platforms and stimulate the growth of the ecosystem.\n\nthe key design principles of the api include the use of rest architectural principles, the use of the json data format for requests and responses, and the provision of a set of well-defined objects that are abstracted from the underlying object representations held in different mobile money systems. the api also defines a standard set of transaction types and other key enumerations, uses iso international standards for enumerations such as currency and country codes, and provides support for supplementary metadata and sub-types for properties specific to different mobile money providers.\n\nthe mobile money developer portal provides access to the mobile money api specification assets and a full suite of developer documentation and tools to facilitate developers implementing the specification, whether they are mobile money providers or service providers building solutions for the mobile money ecosystem.\n\nthe developer documentation includes developer guides for getting started with the mobile money api covering api fundamentals and api behaviour & error handling and reference documentation for all apis and supporting objects included in the specification. developers can also access security design and implementation guidelines to ensure that best practices are applied to the connection between the api client and the api gateway, and to authenticating end users to the mobile money platform.\n\nthe developer tools include the gsma simulator which provides an example simulated api implementation developed to facilitate api adoption and testing, an example authentication gateway which adopts the best practice security recommendations of oauth 2.0, and use case examples which include postman collections enabling developers to test the simulated apis directly or through the authentication gateway.\n\ndownload specification",charsets:{}},{title:"MM API Specification v1.1",frontmatter:{pageClass:"api-page container--narrow",title:"MM API Specification v1.1"},regularPath:"/api-versions-1.1/",relativePath:"api-versions-1.1/index.md",key:"v-d95c8766",path:"/api-versions-1.1/",headersStr:null,content:"# GSMA Mobile Money API Specification v1.1\n\nWelcome to the GSMA Mobile Money API Developer Portal. The Mobile Money API is an initiative developed through collaboration between the mobile money industry and the GSMA, which provides a harmonized API Specification for all the common mobile money use cases which is both easy to use and secure. Using best practices from the technology industry in API design and security, it aims to simplify and accelerate integration with mobile money platforms and stimulate the growth of the ecosystem.\n\nThe key design principles of the API include the use of REST architectural principles, the use of the JSON data format for requests and responses, and the provision of a set of well-defined objects that are abstracted from the underlying object representations held in different mobile money systems. The API also defines a standard set of transaction types and other key enumerations, uses ISO international standards for enumerations such as currency and country codes, and provides support for supplementary metadata and sub-types for properties specific to different mobile money providers.\n\nThe Mobile Money Developer Portal provides access to the Mobile Money API Specification assets and a full suite of developer documentation and tools to facilitate developers implementing the specification, whether they are Mobile Money Providers or Service Providers building solutions for the mobile money ecosystem.\n\nThe developer documentation includes developer guides for getting started with the Mobile Money API covering API Fundamentals and API Behaviour & Error Handling and reference documentation for all APIs and supporting objects included in the specification. Developers can also access security design and implementation guidelines to ensure that best practices are applied to the connection between the API client and the API gateway, and to authenticating end users to the mobile money platform.\n\nThe developer tools include the GSMA Simulator which provides an example simulated API implementation developed to facilitate API adoption and testing, an example Authentication Gateway which adopts the best practice security recommendations of OAuth 2.0, and use case examples which include Postman Collections enabling developers to test the simulated APIs directly or through the authentication gateway.\n\nDownload Specification",normalizedContent:"# gsma mobile money api specification v1.1\n\nwelcome to the gsma mobile money api developer portal. the mobile money api is an initiative developed through collaboration between the mobile money industry and the gsma, which provides a harmonized api specification for all the common mobile money use cases which is both easy to use and secure. using best practices from the technology industry in api design and security, it aims to simplify and accelerate integration with mobile money platforms and stimulate the growth of the ecosystem.\n\nthe key design principles of the api include the use of rest architectural principles, the use of the json data format for requests and responses, and the provision of a set of well-defined objects that are abstracted from the underlying object representations held in different mobile money systems. the api also defines a standard set of transaction types and other key enumerations, uses iso international standards for enumerations such as currency and country codes, and provides support for supplementary metadata and sub-types for properties specific to different mobile money providers.\n\nthe mobile money developer portal provides access to the mobile money api specification assets and a full suite of developer documentation and tools to facilitate developers implementing the specification, whether they are mobile money providers or service providers building solutions for the mobile money ecosystem.\n\nthe developer documentation includes developer guides for getting started with the mobile money api covering api fundamentals and api behaviour & error handling and reference documentation for all apis and supporting objects included in the specification. developers can also access security design and implementation guidelines to ensure that best practices are applied to the connection between the api client and the api gateway, and to authenticating end users to the mobile money platform.\n\nthe developer tools include the gsma simulator which provides an example simulated api implementation developed to facilitate api adoption and testing, an example authentication gateway which adopts the best practice security recommendations of oauth 2.0, and use case examples which include postman collections enabling developers to test the simulated apis directly or through the authentication gateway.\n\ndownload specification",charsets:{}},{title:"Getting Started",frontmatter:{pageClass:"api-page has-code-panel",title:"Getting Started"},regularPath:"/api-versions-1.2/get-started.html",relativePath:"api-versions-1.2/get-started.md",key:"v-67ea57bc",path:"/api-versions-1.2/get-started.html",headers:[{level:2,title:"API Fundamentals",slug:"api-fundamentals",normalizedTitle:"api fundamentals",charIndex:0},{level:5,title:"URI",slug:"uri",normalizedTitle:"uri",charIndex:20},{level:5,title:"Methods",slug:"methods",normalizedTitle:"methods",charIndex:372},{level:5,title:"Patch Specifics",slug:"patch-specifics",normalizedTitle:"patch specifics",charIndex:598},{level:5,title:"Resource Naming",slug:"resource-naming",normalizedTitle:"resource naming",charIndex:966},{level:5,title:"Client Correlation ID",slug:"client-correlation-id",normalizedTitle:"client correlation id",charIndex:1221},{level:5,title:"Use Case Flow Patterns",slug:"use-case-flow-patterns",normalizedTitle:"use case flow patterns",charIndex:1898},{level:5,title:"Case Sensitivity",slug:"case-sensitivity",normalizedTitle:"case sensitivity",charIndex:2617},{level:5,title:"HTTP Header Information",slug:"http-header-information",normalizedTitle:"http header information",charIndex:3020},{level:6,title:"Standard Request Headers",slug:"standard-request-headers",normalizedTitle:"standard request headers",charIndex:3233},{level:6,title:"Standard Response Headers",slug:"standard-response-headers",normalizedTitle:"standard response headers",charIndex:4215},{level:6,title:"Custom Request Headers",slug:"custom-request-headers",normalizedTitle:"custom request headers",charIndex:4714},{level:6,title:"Custom Response Headers",slug:"custom-response-headers",normalizedTitle:"custom response headers",charIndex:7863},{level:5,title:"API Versioning",slug:"api-versioning",normalizedTitle:"api versioning",charIndex:8243},{level:5,title:"Amount Validation",slug:"amount-validation",normalizedTitle:"amount validation",charIndex:9835},{level:2,title:"API Behaviour & Error Handling",slug:"api-behaviour-error-handling",normalizedTitle:"api behaviour &amp; error handling",charIndex:null},{level:3,title:"API Behavioural Model",slug:"api-behavioural-model",normalizedTitle:"api behavioural model",charIndex:11421},{level:4,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:11446},{level:4,title:"Request State Object",slug:"request-state-object",normalizedTitle:"request state object",charIndex:11741},{level:4,title:"Generic API Sequence Diagrams",slug:"generic-api-sequence-diagrams",normalizedTitle:"generic api sequence diagrams",charIndex:15777},{level:3,title:"API Error Handling",slug:"api-error-handling",normalizedTitle:"api error handling",charIndex:21290},{level:4,title:"Summary of HTTP Response Codes",slug:"summary-of-http-response-codes",normalizedTitle:"summary of http response codes",charIndex:21312},{level:4,title:"HTTP Error Response Codes",slug:"http-error-response-codes",normalizedTitle:"http error response codes",charIndex:21736},{level:4,title:"Errors Object Definition",slug:"errors-object-definition",normalizedTitle:"errors object definition",charIndex:23328},{level:5,title:"Error Parameters Object",slug:"error-parameters-object",normalizedTitle:"error parameters object",charIndex:26770},{level:4,title:"API Error Codes",slug:"api-error-codes",normalizedTitle:"api error codes",charIndex:27819},{level:3,title:"API Heartbeat",slug:"api-heartbeat",normalizedTitle:"api heartbeat",charIndex:35863},{level:3,title:"Missing Response Retrieval",slug:"missing-response-retrieval",normalizedTitle:"missing response retrieval",charIndex:38039}],headersStr:"API Fundamentals URI Methods Patch Specifics Resource Naming Client Correlation ID Use Case Flow Patterns Case Sensitivity HTTP Header Information Standard Request Headers Standard Response Headers Custom Request Headers Custom Response Headers API Versioning Amount Validation API Behaviour & Error Handling API Behavioural Model Overview Request State Object Generic API Sequence Diagrams API Error Handling Summary of HTTP Response Codes HTTP Error Response Codes Errors Object Definition Error Parameters Object API Error Codes API Heartbeat Missing Response Retrieval",content:'# API Fundamentals\n\n# URI\n\nThe Mobile Money API uses the following URI format:\n\n{…]/{version}/mm/{Resource}\n\nWhere:\n\n * … is defined upon implementation of the API by the API provider.\n * version is as per standards defined in the API Versioning section.\n * mm is literal for ‘Mobile Money’.\n * resource identifies the object and resource that is the subject of the API.\n\n# Methods\n\nThe specification supports the following request methods:\n\n * POST. Used to create a resource\n * PATCH. Used to update a resource\n * GET. Used to return a representation of a resource or a collection of resources.\n\n# Patch Specifics\n\nUpdates to resources are accomplished by use of the HTTP PATCH method. The PATCH format is based upon IETF RFC 6902.. IETF RFC 6902. The replace operation replaces the value of the target property with the supplied value. An example of a replace operation is [{ "op": "replace", "path": "/XYZ", "value": “test” }] where XYZ is the target property.\n\n# Resource Naming\n\nThe resource part of the URI path identifies the type of resource and if applicable, the specific resource for which an operation is to be performed. Resources are reflected in plural and by use of nouns, for example, /accounts/bills.\n\n# Client Correlation ID\n\nA client correlation id can be supplied by the API client on HTTP POST and PATCH requests. The client correlation id is a UUID that enables the client to correlate the API request with the resource created/updated by the provider. The client correlation id is specified in the HTTP Request Header. When a provider issues a callback, the provider should ensure that the original correlation id provided by the client is placed in request header.\n\nThe client correlation ID supports safe operations. A POST request that is submitted with a correlation ID that has already been supplied will be rejected as unsafe, thus avoiding transaction duplication.\n\n# Use Case Flow Patterns\n\nAll use cases supported by the API are built on standardised flow patterns. Flow patterns exist for viewing, updating, and creating resources.\n\nThere are two standard flows:\n\n * Synchronous Flow. The final resource is always provided in response to an API request. There is no interim response. Can be used with POST, PATCH and GET requests.\n * Asynchronous Flow. An interim response is always provided in response to an API request in the form of a Request State object. The final response is then provided via a callback or alternatively can be accessed via polling on Request State. Can be used with POST and PATCH requests.\n\nMore detail can be found in the API Behavioural Model section.\n\n# Case Sensitivity\n\nAll API properties are defined in camelCase format.\n\nAll enumeration values referenced within the API use lower case notation – this includes acronyms and abbreviations. The only exceptions are for\n\n * ISO Codes (country and currency) – the API uses these codes as defined per ISO.\n * Error Codes. Upper Case is used to identify the first letter of each word to assist readability.\n\n# HTTP Header Information\n\nThe following header information can be supplied for the mobile money API.\n\nFor the security headers, please also refer to the Mobile Money API Security Design for further information.\n\n# Standard Request Headers\n\n{\n  "Accept": ["application/json"],\n  "Accept-Charset": ["utf-8"],\n  "Authorization": ["Bearer RsT5OjbzRn430zqMLgV3Ia"],\n  "Content-Length": ["123"],\n  "Content-Type": ["application/json"]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nHEADER           VALUE                                                      OPTIONALITY   NOTES\nAccept           application/json                                           Mandatory     \nAccept-Charset   utf-8                                                      Mandatory     \nAuthorization    Authorization: Basic {base64Encode(concatenated client\'s   Mandatory     \n                 username followed by ‘:’ and password)} OR OAuth2 Access\n                 Token. For OAuth2 format is {‘Bearer’ token value}\nContent-Length   Length of request content in 8-bit bytes                   Mandatory     \nContent-Type     application/json                                           Mandatory     \n\n# Standard Response Headers\n\n{\n  "Content-Length": ["123"],\n  "Content-Type": ["application/json; charset=utf-8"]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nHEADER           VALUE                             OPTIONALITY   NOTES\nContent-Length   Length of response content        Conditional   Applicable only if the HTTP response contains JSON body\nContent-Type     application/json; charset=utf-8   Conditional   Applicable only if the HTTP response contains JSON body\n\n# Custom Request Headers\n\n{\n  "X-API-Key": ["a4db08b7-5729-4ba9-8c08-f2df493465a1"],\n  "X-User-Bearer": ["Bearer RsT5OjbzRn430zqMLgV3Ia"],\n  "X-Date": ["2017-07-21T17:32:28Z"],\n  "X-Client-Id": ["12345"],\n  "X-Content-Hash": ["7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069"],\n  "X-CorrelationID": ["d820237c-aa97-47e7-9704-1bc6d8ecad2d"],\n  "X-User-Credential-1": ["1234"],\n  "X-User-Credential-2": ["PassWord"],\n  "X-Channel": ["Web"],\n  "X-Callback-URL": ["https://application.com/callback"]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nHEADER                VALUE                                                          OPTIONALITY   NOTES\nX-API-Key             Used to pass pre-shared client\'s API key to the server         Conditional   Only required when API Client Authentication based on API\n                                                                                                   key is used.\nX-User-Bearer         Used to pass user’s access token                               Conditional   Only required when OAuth 2.0/OIDC authorisation framework is\n                                                                                                   used for end-user authentication.\nX-Date                {The date and time that the message was sent in HTTP-date      Conditional   Used for Basic message integrity checks.\n                      format - RFC 7231}\nX-Client-Id           Used to pass pre-shared client\'s identifier to the server      Conditional   Can be used in addition to X-API-Key.\nX-Content-Hash        SHA-256 hex digest of the request content (encrypted or        Conditional   Applicable only if the HTTP request contains JSON body and\n                      plain)                                                                       basic data integrity checking is to be performed.\nX-CorrelationID       UUID                                                           Conditional   Please refer to Client Correlation ID.\nX-User-Credential-1   Contains an authentication credential of the end user (e.g.    Conditional   Should only be used when OAuth 2.0/OIDC authorisation\n                      PIN, Password).                                                              framework has not been implemented by the API Provider.\nX-User-Credential-2   Contains an authentication credential of the end user (e.g.    Conditional   Should only be used when OAuth 2.0/OIDC authorisation\n                      PIN, Password). Can be used when a second credential is                      framework has not been implemented by the API Provider.\n                      required.\nX-Channel             string containing the channel that was used to originate the   Conditional   Used to identify the API invocation channel.\n                      request. For example, USSD, Web, App.\nX-Callback-URL        string containing the URL which should receive the Callback    Conditional   Will only be used by the API provider if they have\n                      for asynchronous requests.                                                   implemented the Callback method.\n\n# Custom Response Headers\n\n{\n  "X-Date": ["2017-07-21T17:32:28Z"]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nHEADER   VALUE                                                        OPTIONALITY   NOTES\nX-Date   {The date and time that the response was sent in HTTP-date   Conditional   Used for Basic message integrity checks\n         format - RFC 7231}\n\n# API Versioning\n\nWhen changes are made to the Mobile Money API, a new version is released. There are three types of API versions:\n\n * major (backwards incompatible)\n * minor (backwards compatible)\n * patch (backwards compatible)\n\nThe following types of changes are considered to be backwards compatible:\n\n * Addition of new API Services.\n * Adding optional request properties and/or optional input parameters such as query strings to existing objects.\n * Addition of new properties to existing API responses.\n * Changing the order of properties within a request or response object.\n * New error codes.\n\nThe following types of changes are considered to be backwards incompatible and hence major:\n\n * Introducing mandatory properties.\n * Changing datatypes on properties.\n * Changes to API URIs/Paths.\n\nThe version that a client intends to use is indicated in the path. Format is ‘X.Y.Z’ where ‘X’ is the major version, ‘Y’ is the minor version and ‘Z’ is a patch version. Versions are sequentially numbered. When a major version is incremented, the minor version is reset to zero.\n\nThe following table provides examples of API version compatibility:\n\nCLIENT VERSION   PROVIDER VERSION   COMPATIBLE?\n1.0.0            1.1.0              Yes\n1.1.0            1.0.0              Client would need to submit only 1.0.0 related payload. If\n                                    1.1.0 services, properties or parameters are supplied by the\n                                    client, the provider will reject the request.\n2.0.0            1.0.0              No\n1.0.0            2.0.0              No\n\n# Amount Validation\n\nThe mobile money API applies common validation to all amount properties. The following rules are applied during validation:\n\n * Between zero and four decimal places can be supplied.\n * Leading zeroes are not permitted except where the value is less than 1. For any value less than one, one and only one leading zero must be supplied.\n * Trailing zeroes are permitted.\n * Negative values are not permitted.\n * Maximum value that can be supplied is 999999999999999999.9999.\n\nAmount validation examples are shown below.\n\nVALUE                 PERMITTED?\n5                     Yes\n5.0                   Yes\n5.                    No\n5.00                  Yes\n5.5                   Yes\n5.50                  Yes\n5.5555                Yes\n5.55555               No\n555555555555555555    Yes\n5555555555555555555   No\n-5.5                  No\n0.5                   Yes\n.5                    No\n00.5                  No\n0                     Yes\n00.00                 No\n0.00                  Yes\n0000001.32            No\n\n\n# API Behaviour & Error Handling\n\nThe Mobile Money API manages API state and exception handling in a harmonised manner:\n\n * API Behavioural Model. Provides standardised flows for synchronous and asynchronous processing patterns.\n * API Error Handling. Supports use of standardised HTTP response codes and an errors object that returns additional information as to why the request failed.\n * API Heartbeat enables API provider service availability to be established by clients.\n\nThe responses object enables clients to request a missing API response.\n\n\n# API Behavioural Model\n\n# Overview\n\nAPI behaviour is governed by the following factors:\n\n * The resource.\n * The type of operation, i.e. create, update, or read.\n * Whether the provider will process the request synchronously.\n * Whether the provider implements callback or polling methods for asynchronous processing.\n\n# Request State Object\n\nAsynchronous flows involve a callback mechanism or a polling mechanism to enable the client to determine the final state of the request. Both mechanisms involve the use of the Request State object as per below:\n\n * Callback. A request is initiated via a HTTP POST or PATCH request with an intermediate response represented by a Request State object. Once the request has been completed, the provider will initiate a PUT request to the URL specified by the client in the X-Callback-URL request header. The callback will provide the client with one of the following:\n   \n   * Final representation of the resource for successful creation requests\n   * A {"result": "success"} response for successful update requests\n\n * Polling. A request is initiated via a HTTP POST or PATCH request with an intermediate response provided in the form of the Request State object. A HTTP GET is then issued against /requeststate by the client at intervals until the final resource state and resource reference is returned.\n\nThe object definition for RequestState is described below.\n\n{\n  "serverCorrelationId": "878be43d-9fde-467b-a26b-889c80bf8830",\n  "objectReference": "12345",\n  "status": "pending",\n  "notificationMethod": "callback",\n  "pendingReason": "A textual description...",\n  "expiryTime": "2017-07-21T17:32:28Z",\n  "pollLimit": 5,\n  "errorReference": {\n    "errorCategory": "BusinessRule",\n    "errorCode": "GenericError"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nREQUESTSTATE OBJECT PROPERTIES                                                                                                    \nName                             Type        Description                                                          Reference       Validation\nserverCorrelationId              string      A unique identifier issued by the provider to enable the      → NA                   UUID format\n                                             client to identify the RequestState resource on subsequent    ← M\n                                             polling requests.\nobjectReference                  string      Provides a reference to the subject resource, e.g.            → NA                   \n                                             transaction reference.                                        ← O\nstatus                           string      Indicates the status of the request.                          → NA                   Enumeration = pending, completed, failed\n                                                                                                           ← M\nnotificationMethod               date-time   Indicates whether a callback will be issued or whether the    → NA                   Enumeration = callback, polling\n                                             client will need to poll.                                     ← M\npendingReason                    string      A textual description that can be provided to describe the    → NA                   \n                                             reason for a pending status.                                  ← O\nexpiryTime                       date-time   Indicates the time by which the provider will fail the        → NA                   \n                                             request if completion criteria have not been met. For an      ← O\n                                             example, a debit party failing to authorise within the\n                                             allowed time period.\npollLimit                        integer     Indicates the number of poll attempts for the given           → NA                   \n                                             requeststate resource that will be allowed by the provider.   ← O\nerrorReference                   object      If the asynchronous processing failed, details of the error   → NA   Errors Object   \n                                             will be returned here.                                        ← O\n\n# Generic API Sequence Diagrams\n\nFigures 1 to 7 illustrate the standard flows for the Mobile Money API. The green flows represent a success path and red flows represent a failure path.\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP GET Request activate Client activate Provider Provider->>Provider: Validate & Process\nRequest alt Failure? Provider--)Client: HTTP 4xx/5xx Response else Success Provider--)Client: HTTP 200 Response end deactivate Provider deactivate Client\n\nFigure 1 : Mobile Money API Generic Sequence Diagram for Read Requests\n\n\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP POST Request activate Client activate Provider Provider->>Provider: Validate & Process\nRequest alt Failure Provider--)Client: HTTP 4xx/5xx Response else Success Provider--)Client: HTTP 201 Response end deactivate Provider deactivate Client\n\nFigure 2 : Mobile Money API Synchronous Diagram for Create Requests\n\n\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP POST Request activate Client activate Provider Provider->>Provider: Validate Request alt Validation Failed Provider--)Client: HTTP 4xx/5xx Response else Validation Succeeded Provider--)Client: HTTP 202 Response, Response Object = requestState, Status = Pending end deactivate Client Provider->>Provider: Process Request activate Client alt Processing Failed Provider->>Client: HTTP PUT Request, Error Object is Returned alt Successful Response Client--)Provider: HTTP 204 Resposne else Failure Response Client--)Provider: HTTP 4xx/5xx Response end else Processing Completed Provider->>Client: HTTP PUT Request, Created Object is Returned alt Failure Response Client--)Provider: HTTP 4xx/5xx Response else Successful Response Client--)Provider: HTTP 204 Resposne end end deactivate Client deactivate Provider\n\nFigure 3 : Mobile Money API Asynchronous Callback Diagram for Create Requests\n\n\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP POST Request activate Client activate Provider Provider->>Provider: Validate Request alt Validation Failed Provider--)Client: HTTP 4xx/5xx Response else Validation Succeeded Provider--)Client: HTTP 202 Response, Response Object = requestState, Status = Pending end Provider->>Provider: Process Request loop Until requestState.status = completed or failed Client->>Provider: HTTP GET Request, Requested Resource = requestState alt Successful Response Provider--)Client: HTTP 200 Response, Response Object = requestState, status = pending OR completed OR failed else Failure Response Provider--)Client: HTTP 4xx/5xx Response end end opt requestState.status = completed Note right of Client: Optional Flow - use if the Client wishes to retrieve a representation of the created resourse. Client->>Provider: HTTP GET Request Provider--)Client: (Refer to GET Sequence Diagram for HTTP response details) end deactivate Client deactivate Provider\n\nFigure 4 : Mobile Money API Asynchronous Polling Diagram for Create Requests\n\n\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP PATCH Request activate Client activate Provider Provider->>Provider: Validate & Process\nRequest alt Failure Provider--)Client: HTTP 4xx/5xx Response else Success Provider--)Client: HTTP 204 Response end deactivate Provider deactivate Client\n\nFigure 5 : Mobile Money API Synchronous Diagram for Update Requests\n\n\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP PATCH Request activate Client activate Provider Provider->>Provider: Validate Request alt Validation Failed Provider--)Client: HTTP 4xx/5xx Response else Validation Succeeded Provider--)Client: HTTP 202 Response, Response Object = requestState, Status = Pending end deactivate Client Provider->>Provider: Process Request activate Client alt Processing Failed Provider->>Client: HTTP PUT Request, Error Object is returned alt Successful Response Client--)Provider: HTTP 204 Resposne else Failure Response Client--)Provider: HTTP 4xx/5xx Response end else Processing Completed Provider->>Client: HTTP PUT Request, {"result":"success"} is returned alt Failure Response Client--)Provider: HTTP 4xx/5xx Response else Successful Response Client--)Provider: HTTP 204 Resposne end end deactivate Client deactivate Provider\n\nFigure 6 : Mobile Money API Asynchronous Callback Diagram for Update Requests\n\n\n\nsequenceDiagram participant Client participant Provider Client->>Provider: HTTP PATCH Request activate Client activate Provider Provider->>Provider: Validate Request alt Validation Failed Provider--)Client: HTTP 4xx/5xx Response else Validation Succeeded Provider--)Client: HTTP 202 Response, Response Object = requestState, Status = Pending end Provider->>Provider: Process Request loop Until requestState.status = completed or failed Client->>Provider: HTTP GET Request, Requested Resource = requestState alt Successful Response Provider--)Client: HTTP 200 Response, Response Object = requestState, status = pending OR completed OR failed else Failure Response Provider--)Client: HTTP 4xx/5xx Response end end opt requestState.status = completed Note right of Client: Optional Flow - use if the Client wishes to retrieve a representation of the created resourse. Client->>Provider: HTTP GET Request Provider--)Client: (Refer to GET Sequence Diagram for HTTP response details) end deactivate Client deactivate Provider\n\nFigure 7 : Mobile Money API Asynchronous Polling Diagram for Update Requests\n\n\n# API Error Handling\n\n# Summary of HTTP Response Codes\n\nThe following HTTP response codes are returned for the listed methods:\n\nMETHOD   SUCCESS   INTERMEDIATE   CLIENT ERROR    SERVER ERROR\nGET      200       N/A            400, 401, 404   500, 503\nPOST     201       202            400, 401, 404   500, 503\n\nTIP\n\nNote that the ‘intermediate’ column in the table above relates to the HTTP response for the first leg of an asynchronous request.\n\n# HTTP Error Response Codes\n\nERROR CATEGORY        DESCRIPTION                                                    HTTP RESPONSE CODE\nBusinessRule          The resource could not be successfully completed due a         400\n                      violation of a business rule. Business rules include\n                      financial limit violations, duplicate requests, and invalid\n                      states.\nValidation            Violation of a constraint that will prevent the resource       400\n                      from being processed. Examples include:\n                      - Invalid property length.\n                      - Failure to resolve regular expression.\nAuthorisation         It was not possible to authenticate or authorise the client    401\n                      or other party to perform the service.\nIdentification        The requested resource could not be matched on the system      404\n                      with the supplied identifier(s).\nInternal              The request could not be completed due to non-client related   500\n                      issues that do not constitute complete system\n                      unavailability. Examples include software licence issues,\n                      unavailability of system configuration information.\nService Unavailable   The service is not currently available. This could be due to   503\n                      network issues, issues with individual components or\n                      complete systems outages. Regardless of the cause, the\n                      result means that the request cannot be performed.\n\n# Errors Object Definition\n\nThe mobile money API uses the errors object to provide error details to API clients. The following properties are included:\n\n * Error Category. All error codes must be associated with an appropriate category. This provides context and uniqueness to the error code.\n\n * Error Code. Provides the reason for the request failure. Error codes are generally granular, i.e. they provide a specific reason for failure. In some cases, granularity is neither possible nor desirable. Where this is the case, a generic code has been defined. Cases include:\n   \n   * The API Provider has generated an error that does not map to existing Rule error codes.\n   * The API Provider wishes to avoid disclosure of confidential information regarding the resource or parties to the resource. For example, the fact that a customer has breached their monthly transaction limit may not be disclosed to specific clients.\n\n * Error Description. A textual description of the error code.\n\n * Error Parameters. Provides a construct to communicate supplementary information regarding the error in key/value pairs. The supplementary information is currently non-harmonised and can include:\n   \n   * The API provider-specific Error Code and Description.\n   * Additional identification of the error subject, e.g. account identifiers, invalid properties etc…\n   * Diagnostic information, e.g. affected subsystem, licence failure type etc…\n\nWith the errorParameters property, care should be taken regarding confidentially of information. Confidential parameter information should only be disclosed to trusted clients.\n\n{\n  "errorCategory": "BusinessRule",\n  "errorCode": "GenericError",\n  "errorDescription": "A textual description of the error.",\n  "errorDateTime": "2017-07-21T17:32:28Z",\n  "errorParameters": [\n    {\n      "key": "providedValue",\n      "value": "+33555789123"\n    }\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nERRORS OBJECT PROPERTIES                                                                                                       \nName                       Type        Description                                                         Reference           Validation\nerrorCategory              string      The category grouping for the error.                          → M                       Enumeration = Errors Categories\n                                                                                                     ← M\nerrorCode                  string      The harmonised error code identifying the reason for error.   → M                       Enumeration = Errors Codes\n                                                                                                     ← M\nerrorDescription           string      A textual description of the error.                           → O                       \n                                                                                                     ← O\nerrorDateTime              date-time   The timestamp indicating when the error occurred.             → O                       \n                                                                                                     ← O\nerrorParameters            array       Diagnostic information in the form of key/value pairs         → O   Errors Parameters   \n                                       relating to the error.                                        ← O\n\n# Error Parameters Object\n\nAllows error parameter properties to be specified in the form of key/value pairs. The number of key/value pairs is limited to 20.\n\n{\n  "errorParameters": [\n    {\n      "key": "providedValue",\n      "value": "+33555789123"\n    }\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nERROR PARAMETERS OBJECT PROPERTIES                                                                                        \nName                                 Type     Description                                                     Reference   Validation\nkey                                  string   Identifies the type of additional error parameter.        → M               \n                                                                                                        ← M\nvalue                                string   Identifies the value of the additional error parameter.   → M               \n                                                                                                        ← M\n\n# API Error Codes\n\nERROR CATEGORY        ERROR CODE                          ERROR CODE DESCRIPTION\nBusinessRule          GenericError                        A generic Error Code for the Rule Error Category. This is\n                                                          used in two scenarios:\n                                                          1. The API Provider has generated an error that does not map\n                                                          to existing Rule error codes.\n                                                          2. The API Provider wishes to avoid disclosure of\n                                                          confidential information regarding the resource or parties\n                                                          to the resource.\nBusinessRule          DailyVolumeLimitExceeded            The party has exceeded their daily transacting volume limit\n                                                          - This can be a service limit or a limit that is specific to\n                                                          the party.\nBusinessRule          DailyValueLimitExceeded             The party has exceeded their daily transacting value limit -\n                                                          This can be a service limit or a limit that is specific to\n                                                          the party.\nBusinessRule          WeeklyVolumeLimitExceeded           The party has exceeded their weekly transacting volume limit\n                                                          - This can be a service limit or a limit that is specific to\n                                                          the party.\nBusinessRule          WeeklyValueLimitExceeded            The party has exceeded their weekly transacting value limit\n                                                          - This can be a service limit or a limit that is specific to\n                                                          the party.\nBusinessRule          MonthlyVolumeLimitExceeded          The party has exceeded their monthly transacting volume\n                                                          limit - This can be a service limit or a limit that is\n                                                          specific to the party.\nBusinessRule          MonthlyValueLimitExceeded           The party has exceeded their monthly transacting value limit\n                                                          - This can be a service limit or a limit that is specific to\n                                                          the party.\nBusinessRule          AccountMaxTotalValueExceeded        The party has exceeded their cumulative transacting value\n                                                          limit defined for the account.\nBusinessRule          AccountMaxTotalVolumeExceeded       The party has exceeded their cumulative transacting volume\n                                                          limit defined for the account.\nBusinessRule          LessThanTransactionMinValue         The amount specified for the transaction is less than the\n                                                          defined minimum for the service.\nBusinessRule          GreaterThanTransactionMaxValue      The amount specified for the transaction is greater than the\n                                                          defined maximum for the service.\nBusinessRule          MaxBalanceExceeded                  The amount specified will cause the balance of the credit\n                                                          parties account to exceed the rule limit.\nBusinessRule          SamePartiesError                    The debit and credit parties are the same.\nBusinessRule          DuplicateRequest                    The request has previously been processed, i.e. this request\n                                                          is a duplicate and hence has been rejected.\nBusinessRule          InsufficientFunds                   Available funds are not sufficient to enable the party to be\n                                                          debited for the requested transaction.\nBusinessRule          IncorrectState                      The account is in a state that does not permit the requested\n                                                          service.\nBusinessRule          UnderPaymentNotAllowed              The requested amount is less than the amount that needs to\n                                                          be supplied for this transaction\nBusinessRule          OverPaymentNotAllowed               The requested amount is greater than the amount that needs\n                                                          to be supplied for this transaction\nBusinessRule          RateLimitError                      The client has submitted too many requests within a period\n                                                          of time.\nIdentification        IdentifierError                     The requested resource could not be matched on the system\n                                                          with the supplied identifier(s).\nValidation            GenericError                        A generic Error Code for the Validation Error Category. This\n                                                          is used in where the API Provider has generated an error\n                                                          that does not map to existing Validation error codes.\nValidation            LengthError                         The specified property contents are greater than the maximum\n                                                          allowed length or less than the minimum allowed length.\nValidation            FormatError                         The specified property contents do not conform to the format\n                                                          required for this Property.\nValidation            NegativeValue                       The amount supplied is negative and this is not allowed for\n                                                          the given service.\nValidation            CurrencyNotSupported                The currency supplied is not supported by the API Provider.\nValidation            MandatoryValueNotSupplied           A mandatory value has not been provided in the header and/or\n                                                          JSON body.\nAuthorisation         ClientAuthorisationError            General Client Authentication failure. No further details\n                                                          provided to prevent leakage of security information.\nAuthorisation         RequestDeclined                     The debit party did not approve the request.\nAuthorisation         RequestingPartyAuthorisationError   The party requesting the service has not provided the right\n                                                          credentials and/or does not have permission to perform this\n                                                          service.\nInternal              GenericError                        The request could not be completed due to a non-client\n                                                          related issues that do not constitute complete system\n                                                          unavailability. Examples include software licence issues,\n                                                          unavailability of system configuration information.\nService Unavailable   GenericError                        The service is not currently available. This could be due to\n                                                          network issues, issues with individual components or\n                                                          complete systems outages. Regardless of the cause, the\n                                                          result means that the request cannot be performed.\n\n\n# API Heartbeat\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the system of an API provider is in a state that enables a client to submit a request for processing within established SLAs. There are three states that can be returned by the API provider in response to a heartbeat request:\n\n * Available. The system is available and can receive and complete requests within SLAs.\n * Degraded. The system can receive and complete requests but not within SLAs, i.e. delay in transaction processing is anticipated. When known, the expected processing delay time can be returned by the provider.\n * Unavailable. The system cannot receive and process requests. Any submitted requests will fail whilst the system is in this state.\n\nThe Heartbeat can be requested using the following path:\n\n * GET /heartbeat\n\nOnly synchronous API Heartbeat requests are supported. The HTTP response contains the following properties.\n\n{\n  "serviceStatus": "degraded",\n  "delay": 4000,\n  "plannedRestorationTime": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nHEARTBEAT RESPONSE PROPERTIES                                                                                                \nName                            Type        Description                                                          Reference   Validation\nserviceStatus                   string      Provides the status of the requested service.                 → NA               Enumeration = available, unavailable, degraded\n                                                                                                          ← M\ndelay                           number      The anticipated processing delay in milliseconds.             → NA               serviceStatus property must be set to degraded.\n                                                                                                          ← O\nplannedRestorationTime          date-time   Where the planned restoration time is known (e.g. scheduled   → NA               \n                                            maintenance), it can be provided in this property.            ← O\n\n\n# Missing Response Retrieval\n\nIn some circumstances, the client may not have received the final representation of the resource for which it attempted to create. For example, a proxy server issue may have resulted in a HTTP 5xx response but the provider may have actually successfully completed the request. The /responses API allows a client to identify and retrieve the final representation of the resource assuming that the resource was created. In order to get a representation, the client issues a GET /Responses/{clientCorrelationId}. The provider will then match the client correlation id to the appropriate resource and return a link to that resource. If the resource is not found for the given correlation id then a HTTP 404 will be returned.\n\nThe response object for /responses is detailed below.\n\n{\n  "link": "https://application.com/uuid"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nRESPONSES RESPONSE PROPERTIES                                                                                          \nName                            Type     Description                                                       Reference   Validation\nlink                            string   Provides a URL to the resource associated with the given   → NA               \n                                         correlation ID.                                            ← M',normalizedContent:'# api fundamentals\n\n# uri\n\nthe mobile money api uses the following uri format:\n\n{…]/{version}/mm/{resource}\n\nwhere:\n\n * … is defined upon implementation of the api by the api provider.\n * version is as per standards defined in the api versioning section.\n * mm is literal for ‘mobile money’.\n * resource identifies the object and resource that is the subject of the api.\n\n# methods\n\nthe specification supports the following request methods:\n\n * post. used to create a resource\n * patch. used to update a resource\n * get. used to return a representation of a resource or a collection of resources.\n\n# patch specifics\n\nupdates to resources are accomplished by use of the http patch method. the patch format is based upon ietf rfc 6902.. ietf rfc 6902. the replace operation replaces the value of the target property with the supplied value. an example of a replace operation is [{ "op": "replace", "path": "/xyz", "value": “test” }] where xyz is the target property.\n\n# resource naming\n\nthe resource part of the uri path identifies the type of resource and if applicable, the specific resource for which an operation is to be performed. resources are reflected in plural and by use of nouns, for example, /accounts/bills.\n\n# client correlation id\n\na client correlation id can be supplied by the api client on http post and patch requests. the client correlation id is a uuid that enables the client to correlate the api request with the resource created/updated by the provider. the client correlation id is specified in the http request header. when a provider issues a callback, the provider should ensure that the original correlation id provided by the client is placed in request header.\n\nthe client correlation id supports safe operations. a post request that is submitted with a correlation id that has already been supplied will be rejected as unsafe, thus avoiding transaction duplication.\n\n# use case flow patterns\n\nall use cases supported by the api are built on standardised flow patterns. flow patterns exist for viewing, updating, and creating resources.\n\nthere are two standard flows:\n\n * synchronous flow. the final resource is always provided in response to an api request. there is no interim response. can be used with post, patch and get requests.\n * asynchronous flow. an interim response is always provided in response to an api request in the form of a request state object. the final response is then provided via a callback or alternatively can be accessed via polling on request state. can be used with post and patch requests.\n\nmore detail can be found in the api behavioural model section.\n\n# case sensitivity\n\nall api properties are defined in camelcase format.\n\nall enumeration values referenced within the api use lower case notation – this includes acronyms and abbreviations. the only exceptions are for\n\n * iso codes (country and currency) – the api uses these codes as defined per iso.\n * error codes. upper case is used to identify the first letter of each word to assist readability.\n\n# http header information\n\nthe following header information can be supplied for the mobile money api.\n\nfor the security headers, please also refer to the mobile money api security design for further information.\n\n# standard request headers\n\n{\n  "accept": ["application/json"],\n  "accept-charset": ["utf-8"],\n  "authorization": ["bearer rst5ojbzrn430zqmlgv3ia"],\n  "content-length": ["123"],\n  "content-type": ["application/json"]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nheader           value                                                      optionality   notes\naccept           application/json                                           mandatory     \naccept-charset   utf-8                                                      mandatory     \nauthorization    authorization: basic {base64encode(concatenated client\'s   mandatory     \n                 username followed by ‘:’ and password)} or oauth2 access\n                 token. for oauth2 format is {‘bearer’ token value}\ncontent-length   length of request content in 8-bit bytes                   mandatory     \ncontent-type     application/json                                           mandatory     \n\n# standard response headers\n\n{\n  "content-length": ["123"],\n  "content-type": ["application/json; charset=utf-8"]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nheader           value                             optionality   notes\ncontent-length   length of response content        conditional   applicable only if the http response contains json body\ncontent-type     application/json; charset=utf-8   conditional   applicable only if the http response contains json body\n\n# custom request headers\n\n{\n  "x-api-key": ["a4db08b7-5729-4ba9-8c08-f2df493465a1"],\n  "x-user-bearer": ["bearer rst5ojbzrn430zqmlgv3ia"],\n  "x-date": ["2017-07-21t17:32:28z"],\n  "x-client-id": ["12345"],\n  "x-content-hash": ["7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069"],\n  "x-correlationid": ["d820237c-aa97-47e7-9704-1bc6d8ecad2d"],\n  "x-user-credential-1": ["1234"],\n  "x-user-credential-2": ["password"],\n  "x-channel": ["web"],\n  "x-callback-url": ["https://application.com/callback"]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nheader                value                                                          optionality   notes\nx-api-key             used to pass pre-shared client\'s api key to the server         conditional   only required when api client authentication based on api\n                                                                                                   key is used.\nx-user-bearer         used to pass user’s access token                               conditional   only required when oauth 2.0/oidc authorisation framework is\n                                                                                                   used for end-user authentication.\nx-date                {the date and time that the message was sent in http-date      conditional   used for basic message integrity checks.\n                      format - rfc 7231}\nx-client-id           used to pass pre-shared client\'s identifier to the server      conditional   can be used in addition to x-api-key.\nx-content-hash        sha-256 hex digest of the request content (encrypted or        conditional   applicable only if the http request contains json body and\n                      plain)                                                                       basic data integrity checking is to be performed.\nx-correlationid       uuid                                                           conditional   please refer to client correlation id.\nx-user-credential-1   contains an authentication credential of the end user (e.g.    conditional   should only be used when oauth 2.0/oidc authorisation\n                      pin, password).                                                              framework has not been implemented by the api provider.\nx-user-credential-2   contains an authentication credential of the end user (e.g.    conditional   should only be used when oauth 2.0/oidc authorisation\n                      pin, password). can be used when a second credential is                      framework has not been implemented by the api provider.\n                      required.\nx-channel             string containing the channel that was used to originate the   conditional   used to identify the api invocation channel.\n                      request. for example, ussd, web, app.\nx-callback-url        string containing the url which should receive the callback    conditional   will only be used by the api provider if they have\n                      for asynchronous requests.                                                   implemented the callback method.\n\n# custom response headers\n\n{\n  "x-date": ["2017-07-21t17:32:28z"]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nheader   value                                                        optionality   notes\nx-date   {the date and time that the response was sent in http-date   conditional   used for basic message integrity checks\n         format - rfc 7231}\n\n# api versioning\n\nwhen changes are made to the mobile money api, a new version is released. there are three types of api versions:\n\n * major (backwards incompatible)\n * minor (backwards compatible)\n * patch (backwards compatible)\n\nthe following types of changes are considered to be backwards compatible:\n\n * addition of new api services.\n * adding optional request properties and/or optional input parameters such as query strings to existing objects.\n * addition of new properties to existing api responses.\n * changing the order of properties within a request or response object.\n * new error codes.\n\nthe following types of changes are considered to be backwards incompatible and hence major:\n\n * introducing mandatory properties.\n * changing datatypes on properties.\n * changes to api uris/paths.\n\nthe version that a client intends to use is indicated in the path. format is ‘x.y.z’ where ‘x’ is the major version, ‘y’ is the minor version and ‘z’ is a patch version. versions are sequentially numbered. when a major version is incremented, the minor version is reset to zero.\n\nthe following table provides examples of api version compatibility:\n\nclient version   provider version   compatible?\n1.0.0            1.1.0              yes\n1.1.0            1.0.0              client would need to submit only 1.0.0 related payload. if\n                                    1.1.0 services, properties or parameters are supplied by the\n                                    client, the provider will reject the request.\n2.0.0            1.0.0              no\n1.0.0            2.0.0              no\n\n# amount validation\n\nthe mobile money api applies common validation to all amount properties. the following rules are applied during validation:\n\n * between zero and four decimal places can be supplied.\n * leading zeroes are not permitted except where the value is less than 1. for any value less than one, one and only one leading zero must be supplied.\n * trailing zeroes are permitted.\n * negative values are not permitted.\n * maximum value that can be supplied is 999999999999999999.9999.\n\namount validation examples are shown below.\n\nvalue                 permitted?\n5                     yes\n5.0                   yes\n5.                    no\n5.00                  yes\n5.5                   yes\n5.50                  yes\n5.5555                yes\n5.55555               no\n555555555555555555    yes\n5555555555555555555   no\n-5.5                  no\n0.5                   yes\n.5                    no\n00.5                  no\n0                     yes\n00.00                 no\n0.00                  yes\n0000001.32            no\n\n\n# api behaviour & error handling\n\nthe mobile money api manages api state and exception handling in a harmonised manner:\n\n * api behavioural model. provides standardised flows for synchronous and asynchronous processing patterns.\n * api error handling. supports use of standardised http response codes and an errors object that returns additional information as to why the request failed.\n * api heartbeat enables api provider service availability to be established by clients.\n\nthe responses object enables clients to request a missing api response.\n\n\n# api behavioural model\n\n# overview\n\napi behaviour is governed by the following factors:\n\n * the resource.\n * the type of operation, i.e. create, update, or read.\n * whether the provider will process the request synchronously.\n * whether the provider implements callback or polling methods for asynchronous processing.\n\n# request state object\n\nasynchronous flows involve a callback mechanism or a polling mechanism to enable the client to determine the final state of the request. both mechanisms involve the use of the request state object as per below:\n\n * callback. a request is initiated via a http post or patch request with an intermediate response represented by a request state object. once the request has been completed, the provider will initiate a put request to the url specified by the client in the x-callback-url request header. the callback will provide the client with one of the following:\n   \n   * final representation of the resource for successful creation requests\n   * a {"result": "success"} response for successful update requests\n\n * polling. a request is initiated via a http post or patch request with an intermediate response provided in the form of the request state object. a http get is then issued against /requeststate by the client at intervals until the final resource state and resource reference is returned.\n\nthe object definition for requeststate is described below.\n\n{\n  "servercorrelationid": "878be43d-9fde-467b-a26b-889c80bf8830",\n  "objectreference": "12345",\n  "status": "pending",\n  "notificationmethod": "callback",\n  "pendingreason": "a textual description...",\n  "expirytime": "2017-07-21t17:32:28z",\n  "polllimit": 5,\n  "errorreference": {\n    "errorcategory": "businessrule",\n    "errorcode": "genericerror"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nrequeststate object properties                                                                                                    \nname                             type        description                                                          reference       validation\nservercorrelationid              string      a unique identifier issued by the provider to enable the      → na                   uuid format\n                                             client to identify the requeststate resource on subsequent    ← m\n                                             polling requests.\nobjectreference                  string      provides a reference to the subject resource, e.g.            → na                   \n                                             transaction reference.                                        ← o\nstatus                           string      indicates the status of the request.                          → na                   enumeration = pending, completed, failed\n                                                                                                           ← m\nnotificationmethod               date-time   indicates whether a callback will be issued or whether the    → na                   enumeration = callback, polling\n                                             client will need to poll.                                     ← m\npendingreason                    string      a textual description that can be provided to describe the    → na                   \n                                             reason for a pending status.                                  ← o\nexpirytime                       date-time   indicates the time by which the provider will fail the        → na                   \n                                             request if completion criteria have not been met. for an      ← o\n                                             example, a debit party failing to authorise within the\n                                             allowed time period.\npolllimit                        integer     indicates the number of poll attempts for the given           → na                   \n                                             requeststate resource that will be allowed by the provider.   ← o\nerrorreference                   object      if the asynchronous processing failed, details of the error   → na   errors object   \n                                             will be returned here.                                        ← o\n\n# generic api sequence diagrams\n\nfigures 1 to 7 illustrate the standard flows for the mobile money api. the green flows represent a success path and red flows represent a failure path.\n\nsequencediagram participant client participant provider client->>provider: http get request activate client activate provider provider->>provider: validate & process\nrequest alt failure? provider--)client: http 4xx/5xx response else success provider--)client: http 200 response end deactivate provider deactivate client\n\nfigure 1 : mobile money api generic sequence diagram for read requests\n\n\n\nsequencediagram participant client participant provider client->>provider: http post request activate client activate provider provider->>provider: validate & process\nrequest alt failure provider--)client: http 4xx/5xx response else success provider--)client: http 201 response end deactivate provider deactivate client\n\nfigure 2 : mobile money api synchronous diagram for create requests\n\n\n\nsequencediagram participant client participant provider client->>provider: http post request activate client activate provider provider->>provider: validate request alt validation failed provider--)client: http 4xx/5xx response else validation succeeded provider--)client: http 202 response, response object = requeststate, status = pending end deactivate client provider->>provider: process request activate client alt processing failed provider->>client: http put request, error object is returned alt successful response client--)provider: http 204 resposne else failure response client--)provider: http 4xx/5xx response end else processing completed provider->>client: http put request, created object is returned alt failure response client--)provider: http 4xx/5xx response else successful response client--)provider: http 204 resposne end end deactivate client deactivate provider\n\nfigure 3 : mobile money api asynchronous callback diagram for create requests\n\n\n\nsequencediagram participant client participant provider client->>provider: http post request activate client activate provider provider->>provider: validate request alt validation failed provider--)client: http 4xx/5xx response else validation succeeded provider--)client: http 202 response, response object = requeststate, status = pending end provider->>provider: process request loop until requeststate.status = completed or failed client->>provider: http get request, requested resource = requeststate alt successful response provider--)client: http 200 response, response object = requeststate, status = pending or completed or failed else failure response provider--)client: http 4xx/5xx response end end opt requeststate.status = completed note right of client: optional flow - use if the client wishes to retrieve a representation of the created resourse. client->>provider: http get request provider--)client: (refer to get sequence diagram for http response details) end deactivate client deactivate provider\n\nfigure 4 : mobile money api asynchronous polling diagram for create requests\n\n\n\nsequencediagram participant client participant provider client->>provider: http patch request activate client activate provider provider->>provider: validate & process\nrequest alt failure provider--)client: http 4xx/5xx response else success provider--)client: http 204 response end deactivate provider deactivate client\n\nfigure 5 : mobile money api synchronous diagram for update requests\n\n\n\nsequencediagram participant client participant provider client->>provider: http patch request activate client activate provider provider->>provider: validate request alt validation failed provider--)client: http 4xx/5xx response else validation succeeded provider--)client: http 202 response, response object = requeststate, status = pending end deactivate client provider->>provider: process request activate client alt processing failed provider->>client: http put request, error object is returned alt successful response client--)provider: http 204 resposne else failure response client--)provider: http 4xx/5xx response end else processing completed provider->>client: http put request, {"result":"success"} is returned alt failure response client--)provider: http 4xx/5xx response else successful response client--)provider: http 204 resposne end end deactivate client deactivate provider\n\nfigure 6 : mobile money api asynchronous callback diagram for update requests\n\n\n\nsequencediagram participant client participant provider client->>provider: http patch request activate client activate provider provider->>provider: validate request alt validation failed provider--)client: http 4xx/5xx response else validation succeeded provider--)client: http 202 response, response object = requeststate, status = pending end provider->>provider: process request loop until requeststate.status = completed or failed client->>provider: http get request, requested resource = requeststate alt successful response provider--)client: http 200 response, response object = requeststate, status = pending or completed or failed else failure response provider--)client: http 4xx/5xx response end end opt requeststate.status = completed note right of client: optional flow - use if the client wishes to retrieve a representation of the created resourse. client->>provider: http get request provider--)client: (refer to get sequence diagram for http response details) end deactivate client deactivate provider\n\nfigure 7 : mobile money api asynchronous polling diagram for update requests\n\n\n# api error handling\n\n# summary of http response codes\n\nthe following http response codes are returned for the listed methods:\n\nmethod   success   intermediate   client error    server error\nget      200       n/a            400, 401, 404   500, 503\npost     201       202            400, 401, 404   500, 503\n\ntip\n\nnote that the ‘intermediate’ column in the table above relates to the http response for the first leg of an asynchronous request.\n\n# http error response codes\n\nerror category        description                                                    http response code\nbusinessrule          the resource could not be successfully completed due a         400\n                      violation of a business rule. business rules include\n                      financial limit violations, duplicate requests, and invalid\n                      states.\nvalidation            violation of a constraint that will prevent the resource       400\n                      from being processed. examples include:\n                      - invalid property length.\n                      - failure to resolve regular expression.\nauthorisation         it was not possible to authenticate or authorise the client    401\n                      or other party to perform the service.\nidentification        the requested resource could not be matched on the system      404\n                      with the supplied identifier(s).\ninternal              the request could not be completed due to non-client related   500\n                      issues that do not constitute complete system\n                      unavailability. examples include software licence issues,\n                      unavailability of system configuration information.\nservice unavailable   the service is not currently available. this could be due to   503\n                      network issues, issues with individual components or\n                      complete systems outages. regardless of the cause, the\n                      result means that the request cannot be performed.\n\n# errors object definition\n\nthe mobile money api uses the errors object to provide error details to api clients. the following properties are included:\n\n * error category. all error codes must be associated with an appropriate category. this provides context and uniqueness to the error code.\n\n * error code. provides the reason for the request failure. error codes are generally granular, i.e. they provide a specific reason for failure. in some cases, granularity is neither possible nor desirable. where this is the case, a generic code has been defined. cases include:\n   \n   * the api provider has generated an error that does not map to existing rule error codes.\n   * the api provider wishes to avoid disclosure of confidential information regarding the resource or parties to the resource. for example, the fact that a customer has breached their monthly transaction limit may not be disclosed to specific clients.\n\n * error description. a textual description of the error code.\n\n * error parameters. provides a construct to communicate supplementary information regarding the error in key/value pairs. the supplementary information is currently non-harmonised and can include:\n   \n   * the api provider-specific error code and description.\n   * additional identification of the error subject, e.g. account identifiers, invalid properties etc…\n   * diagnostic information, e.g. affected subsystem, licence failure type etc…\n\nwith the errorparameters property, care should be taken regarding confidentially of information. confidential parameter information should only be disclosed to trusted clients.\n\n{\n  "errorcategory": "businessrule",\n  "errorcode": "genericerror",\n  "errordescription": "a textual description of the error.",\n  "errordatetime": "2017-07-21t17:32:28z",\n  "errorparameters": [\n    {\n      "key": "providedvalue",\n      "value": "+33555789123"\n    }\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nerrors object properties                                                                                                       \nname                       type        description                                                         reference           validation\nerrorcategory              string      the category grouping for the error.                          → m                       enumeration = errors categories\n                                                                                                     ← m\nerrorcode                  string      the harmonised error code identifying the reason for error.   → m                       enumeration = errors codes\n                                                                                                     ← m\nerrordescription           string      a textual description of the error.                           → o                       \n                                                                                                     ← o\nerrordatetime              date-time   the timestamp indicating when the error occurred.             → o                       \n                                                                                                     ← o\nerrorparameters            array       diagnostic information in the form of key/value pairs         → o   errors parameters   \n                                       relating to the error.                                        ← o\n\n# error parameters object\n\nallows error parameter properties to be specified in the form of key/value pairs. the number of key/value pairs is limited to 20.\n\n{\n  "errorparameters": [\n    {\n      "key": "providedvalue",\n      "value": "+33555789123"\n    }\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nerror parameters object properties                                                                                        \nname                                 type     description                                                     reference   validation\nkey                                  string   identifies the type of additional error parameter.        → m               \n                                                                                                        ← m\nvalue                                string   identifies the value of the additional error parameter.   → m               \n                                                                                                        ← m\n\n# api error codes\n\nerror category        error code                          error code description\nbusinessrule          genericerror                        a generic error code for the rule error category. this is\n                                                          used in two scenarios:\n                                                          1. the api provider has generated an error that does not map\n                                                          to existing rule error codes.\n                                                          2. the api provider wishes to avoid disclosure of\n                                                          confidential information regarding the resource or parties\n                                                          to the resource.\nbusinessrule          dailyvolumelimitexceeded            the party has exceeded their daily transacting volume limit\n                                                          - this can be a service limit or a limit that is specific to\n                                                          the party.\nbusinessrule          dailyvaluelimitexceeded             the party has exceeded their daily transacting value limit -\n                                                          this can be a service limit or a limit that is specific to\n                                                          the party.\nbusinessrule          weeklyvolumelimitexceeded           the party has exceeded their weekly transacting volume limit\n                                                          - this can be a service limit or a limit that is specific to\n                                                          the party.\nbusinessrule          weeklyvaluelimitexceeded            the party has exceeded their weekly transacting value limit\n                                                          - this can be a service limit or a limit that is specific to\n                                                          the party.\nbusinessrule          monthlyvolumelimitexceeded          the party has exceeded their monthly transacting volume\n                                                          limit - this can be a service limit or a limit that is\n                                                          specific to the party.\nbusinessrule          monthlyvaluelimitexceeded           the party has exceeded their monthly transacting value limit\n                                                          - this can be a service limit or a limit that is specific to\n                                                          the party.\nbusinessrule          accountmaxtotalvalueexceeded        the party has exceeded their cumulative transacting value\n                                                          limit defined for the account.\nbusinessrule          accountmaxtotalvolumeexceeded       the party has exceeded their cumulative transacting volume\n                                                          limit defined for the account.\nbusinessrule          lessthantransactionminvalue         the amount specified for the transaction is less than the\n                                                          defined minimum for the service.\nbusinessrule          greaterthantransactionmaxvalue      the amount specified for the transaction is greater than the\n                                                          defined maximum for the service.\nbusinessrule          maxbalanceexceeded                  the amount specified will cause the balance of the credit\n                                                          parties account to exceed the rule limit.\nbusinessrule          samepartieserror                    the debit and credit parties are the same.\nbusinessrule          duplicaterequest                    the request has previously been processed, i.e. this request\n                                                          is a duplicate and hence has been rejected.\nbusinessrule          insufficientfunds                   available funds are not sufficient to enable the party to be\n                                                          debited for the requested transaction.\nbusinessrule          incorrectstate                      the account is in a state that does not permit the requested\n                                                          service.\nbusinessrule          underpaymentnotallowed              the requested amount is less than the amount that needs to\n                                                          be supplied for this transaction\nbusinessrule          overpaymentnotallowed               the requested amount is greater than the amount that needs\n                                                          to be supplied for this transaction\nbusinessrule          ratelimiterror                      the client has submitted too many requests within a period\n                                                          of time.\nidentification        identifiererror                     the requested resource could not be matched on the system\n                                                          with the supplied identifier(s).\nvalidation            genericerror                        a generic error code for the validation error category. this\n                                                          is used in where the api provider has generated an error\n                                                          that does not map to existing validation error codes.\nvalidation            lengtherror                         the specified property contents are greater than the maximum\n                                                          allowed length or less than the minimum allowed length.\nvalidation            formaterror                         the specified property contents do not conform to the format\n                                                          required for this property.\nvalidation            negativevalue                       the amount supplied is negative and this is not allowed for\n                                                          the given service.\nvalidation            currencynotsupported                the currency supplied is not supported by the api provider.\nvalidation            mandatoryvaluenotsupplied           a mandatory value has not been provided in the header and/or\n                                                          json body.\nauthorisation         clientauthorisationerror            general client authentication failure. no further details\n                                                          provided to prevent leakage of security information.\nauthorisation         requestdeclined                     the debit party did not approve the request.\nauthorisation         requestingpartyauthorisationerror   the party requesting the service has not provided the right\n                                                          credentials and/or does not have permission to perform this\n                                                          service.\ninternal              genericerror                        the request could not be completed due to a non-client\n                                                          related issues that do not constitute complete system\n                                                          unavailability. examples include software licence issues,\n                                                          unavailability of system configuration information.\nservice unavailable   genericerror                        the service is not currently available. this could be due to\n                                                          network issues, issues with individual components or\n                                                          complete systems outages. regardless of the cause, the\n                                                          result means that the request cannot be performed.\n\n\n# api heartbeat\n\nthe heartbeat api is used for monitoring purposes and establishes whether the system of an api provider is in a state that enables a client to submit a request for processing within established slas. there are three states that can be returned by the api provider in response to a heartbeat request:\n\n * available. the system is available and can receive and complete requests within slas.\n * degraded. the system can receive and complete requests but not within slas, i.e. delay in transaction processing is anticipated. when known, the expected processing delay time can be returned by the provider.\n * unavailable. the system cannot receive and process requests. any submitted requests will fail whilst the system is in this state.\n\nthe heartbeat can be requested using the following path:\n\n * get /heartbeat\n\nonly synchronous api heartbeat requests are supported. the http response contains the following properties.\n\n{\n  "servicestatus": "degraded",\n  "delay": 4000,\n  "plannedrestorationtime": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nheartbeat response properties                                                                                                \nname                            type        description                                                          reference   validation\nservicestatus                   string      provides the status of the requested service.                 → na               enumeration = available, unavailable, degraded\n                                                                                                          ← m\ndelay                           number      the anticipated processing delay in milliseconds.             → na               servicestatus property must be set to degraded.\n                                                                                                          ← o\nplannedrestorationtime          date-time   where the planned restoration time is known (e.g. scheduled   → na               \n                                            maintenance), it can be provided in this property.            ← o\n\n\n# missing response retrieval\n\nin some circumstances, the client may not have received the final representation of the resource for which it attempted to create. for example, a proxy server issue may have resulted in a http 5xx response but the provider may have actually successfully completed the request. the /responses api allows a client to identify and retrieve the final representation of the resource assuming that the resource was created. in order to get a representation, the client issues a get /responses/{clientcorrelationid}. the provider will then match the client correlation id to the appropriate resource and return a link to that resource. if the resource is not found for the given correlation id then a http 404 will be returned.\n\nthe response object for /responses is detailed below.\n\n{\n  "link": "https://application.com/uuid"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nresponses response properties                                                                                          \nname                            type     description                                                       reference   validation\nlink                            string   provides a url to the resource associated with the given   → na               \n                                         correlation id.                                            ← m',charsets:{}},{title:"Highlights",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Highlights"},regularPath:"/api-versions-1.2/resources/highlights.html",relativePath:"api-versions-1.2/resources/highlights.md",key:"v-6ce79e58",path:"/api-versions-1.2/resources/highlights.html",headersStr:null,content:"Version 1.2 of the Mobile Money API has seen the introduction of a number of changes that increase deliver new features and increase consistency.\n\n\n# New Features\n\n * New API to allow mobile money customer accounts to be created.\n * Mobile Money customer accounts can also be updated in certain circumstances, for example, to update the KYC verification status of a customer.\n * Ability to update the status of a transaction to support two stage transaction processing.\n * Mobile Money operators can now submit bill payments to service providers without a bill reference.\n * Bill Payments can now be retrieved from a service provider.\n * Usage of date fields have now been harmonised across APIs with consistent usage of creation, modification, and request dates.\n * New fields Quotations and Transactions to identify origination and destination of the request.\n * Improvements to API readability with harmonised ordering of fields and additional API and field descriptions.",normalizedContent:"version 1.2 of the mobile money api has seen the introduction of a number of changes that increase deliver new features and increase consistency.\n\n\n# new features\n\n * new api to allow mobile money customer accounts to be created.\n * mobile money customer accounts can also be updated in certain circumstances, for example, to update the kyc verification status of a customer.\n * ability to update the status of a transaction to support two stage transaction processing.\n * mobile money operators can now submit bill payments to service providers without a bill reference.\n * bill payments can now be retrieved from a service provider.\n * usage of date fields have now been harmonised across apis with consistent usage of creation, modification, and request dates.\n * new fields quotations and transactions to identify origination and destination of the request.\n * improvements to api readability with harmonised ordering of fields and additional api and field descriptions.",charsets:{}},{title:"Change List",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Change List"},regularPath:"/api-versions-1.2/resources/change-list.html",relativePath:"api-versions-1.2/resources/change-list.md",key:"v-70291314",path:"/api-versions-1.2/resources/change-list.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:963},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1244},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2232},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3291},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3921},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4862},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5264},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5589},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6337},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7181},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7777},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8708},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8872}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n   1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n   2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n   \n   * accountStatus\n   * accountSubstatus\n\n * Account Identity Fields\n   \n   * identityStatus\n   * kycVerificationStatus\n   * kycVerificationEntity\n   * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n   1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n   2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n   \n   * accountstatus\n   * accountsubstatus\n\n * account identity fields\n   \n   * identitystatus\n   * kycverificationstatus\n   * kycverificationentity\n   * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"API Service Definition",frontmatter:{sidebarDepth:2,pageClass:"api-page has-code-panel",title:"API Service Definition"},regularPath:"/api-versions-1.2/resources/api-service-definition.html",relativePath:"api-versions-1.2/resources/api-service-definition.md",key:"v-1072a010",path:"/api-versions-1.2/resources/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:804},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2331},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2816},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:13347},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:14291},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:14557},{level:3,title:"Batch Transactions",slug:"batch-transactions",normalizedTitle:"batch transactions",charIndex:23134},{level:4,title:"Batch Transactions Workflow",slug:"batch-transactions-workflow",normalizedTitle:"batch transactions workflow",charIndex:23632},{level:5,title:"One-Shot Batch Processing",slug:"one-shot-batch-processing",normalizedTitle:"one-shot batch processing",charIndex:25293},{level:5,title:"Batch Processing with Maker/Checker",slug:"batch-processing-with-maker-checker",normalizedTitle:"batch processing with maker/checker",charIndex:26390},{level:3,title:"Batch Transactions API",slug:"batch-transactions-api",normalizedTitle:"batch transactions api",charIndex:28441},{level:4,title:"Batch Transaction Object UML Diagram",slug:"batch-transaction-object-uml-diagram",normalizedTitle:"batch transaction object uml diagram",charIndex:29065},{level:4,title:"Batch Transaction Object Definition",slug:"batch-transaction-object-definition",normalizedTitle:"batch transaction object definition",charIndex:29607},{level:3,title:"Batch Rejections API",slug:"batch-rejections-api",normalizedTitle:"batch rejections api",charIndex:35173},{level:4,title:"Batch Rejection UML Class Diagram",slug:"batch-rejection-uml-class-diagram",normalizedTitle:"batch rejection uml class diagram",charIndex:36799},{level:4,title:"Batch Rejection Object Definition",slug:"batch-rejection-object-definition",normalizedTitle:"batch rejection object definition",charIndex:37056},{level:3,title:"Batch Completions API",slug:"batch-completions-api",normalizedTitle:"batch completions api",charIndex:39902},{level:4,title:"Batch Completion UML Class Diagram",slug:"batch-completion-uml-class-diagram",normalizedTitle:"batch completion uml class diagram",charIndex:41491},{level:4,title:"Batch Completion Object Definition",slug:"batch-completion-object-definition",normalizedTitle:"batch completion object definition",charIndex:41753},{level:3,title:"Accounts APIs",slug:"accounts-apis",normalizedTitle:"accounts apis",charIndex:44594},{level:4,title:"Identifying a Target Account",slug:"identifying-a-target-account",normalizedTitle:"identifying a target account",charIndex:44783},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:44936},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:45119},{level:4,title:"Account Creation",slug:"account-creation",normalizedTitle:"account creation",charIndex:45616},{level:4,title:"Account Retrieval",slug:"account-retrieval",normalizedTitle:"account retrieval",charIndex:46282},{level:4,title:"Account Update",slug:"account-update",normalizedTitle:"account update",charIndex:46495},{level:5,title:"Account-Level Updates",slug:"account-level-updates",normalizedTitle:"account-level updates",charIndex:46513},{level:5,title:"Identity-Level Updates",slug:"identity-level-updates",normalizedTitle:"identity-level updates",charIndex:47491},{level:4,title:"Account UML Diagram",slug:"account-uml-diagram",normalizedTitle:"account uml diagram",charIndex:49608},{level:4,title:"Account Object Definition",slug:"account-object-definition",normalizedTitle:"account object definition",charIndex:49987},{level:4,title:"Retrieving Transactions for an Account",slug:"retrieving-transactions-for-an-account",normalizedTitle:"retrieving transactions for an account",charIndex:55995},{level:5,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:58093},{level:4,title:"Accounts Status API",slug:"accounts-status-api",normalizedTitle:"accounts status api",charIndex:58628},{level:5,title:"Account Status UML Class Diagram",slug:"account-status-uml-class-diagram",normalizedTitle:"account status uml class diagram",charIndex:58951},{level:5,title:"Account Status Object Definition",slug:"account-status-object-definition",normalizedTitle:"account status object definition",charIndex:59081},{level:4,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:60721},{level:5,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:61088},{level:4,title:"Account Holder Name API",slug:"account-holder-name-api",normalizedTitle:"account holder name api",charIndex:63844},{level:5,title:"Account Holder Name UML Class Diagram",slug:"account-holder-name-uml-class-diagram",normalizedTitle:"account holder name uml class diagram",charIndex:64107},{level:5,title:"Account Holder Name Object Definition",slug:"account-holder-name-object-definition",normalizedTitle:"account holder name object definition",charIndex:64253},{level:4,title:"Account Statement Entries API",slug:"account-statement-entries-api",normalizedTitle:"account statement entries api",charIndex:65358},{level:5,title:"Account Statement Entry UML Class Diagram",slug:"account-statement-entry-uml-class-diagram",normalizedTitle:"account statement entry uml class diagram",charIndex:67842},{level:5,title:"Account Statement Entry Object Definition",slug:"account-statement-entry-object-definition",normalizedTitle:"account statement entry object definition",charIndex:68222},{level:3,title:"Bills API",slug:"bills-api",normalizedTitle:"bills api",charIndex:72850},{level:4,title:"Bill UML Class Diagram",slug:"bill-uml-class-diagram",normalizedTitle:"bill uml class diagram",charIndex:74776},{level:4,title:"Bill Object Definition",slug:"bill-object-definition",normalizedTitle:"bill object definition",charIndex:74910},{level:3,title:"Bill Payments API",slug:"bill-payments-api",normalizedTitle:"bill payments api",charIndex:78521},{level:4,title:"Bill Payment UML Class Diagram",slug:"bill-payment-uml-class-diagram",normalizedTitle:"bill payment uml class diagram",charIndex:81309},{level:4,title:"Bill Payment Object Definition",slug:"bill-payment-object-definition",normalizedTitle:"bill payment object definition",charIndex:81642},{level:3,title:"Bill Companies API",slug:"bill-companies-api",normalizedTitle:"bill companies api",charIndex:87942},{level:4,title:"Bill Company UML Class Diagram",slug:"bill-company-uml-class-diagram",normalizedTitle:"bill company uml class diagram",charIndex:89454},{level:4,title:"Bill Company Object Definition",slug:"bill-company-object-definition",normalizedTitle:"bill company object definition",charIndex:89731},{level:3,title:"Debit Mandates API",slug:"debit-mandates-api",normalizedTitle:"debit mandates api",charIndex:91846},{level:4,title:"Debit Mandate UML Class Diagram",slug:"debit-mandate-uml-class-diagram",normalizedTitle:"debit mandate uml class diagram",charIndex:94085},{level:4,title:"Debit Mandate Object Definition",slug:"debit-mandate-object-definition",normalizedTitle:"debit mandate object definition",charIndex:94312},{level:3,title:"Links API",slug:"links-api",normalizedTitle:"links api",charIndex:98972},{level:4,title:"Link UML Class Diagram",slug:"link-uml-class-diagram",normalizedTitle:"link uml class diagram",charIndex:100400},{level:4,title:"Link Object Definition",slug:"link-object-definition",normalizedTitle:"link object definition",charIndex:100551},{level:3,title:"Authorisation Codes API",slug:"authorisation-codes-api",normalizedTitle:"authorisation codes api",charIndex:103723},{level:4,title:"Authorisation Code UML Class Diagram",slug:"authorisation-code-uml-class-diagram",normalizedTitle:"authorisation code uml class diagram",charIndex:107433},{level:4,title:"Authorisation Code Object Definition",slug:"authorisation-code-object-definition",normalizedTitle:"authorisation code object definition",charIndex:107805},{level:3,title:"Quotations API",slug:"quotations-api",normalizedTitle:"quotations api",charIndex:113640},{level:4,title:"Quotation UML Class Diagram",slug:"quotation-uml-class-diagram",normalizedTitle:"quotation uml class diagram",charIndex:116616},{level:4,title:"Quotation Object Definition",slug:"quotation-object-definition",normalizedTitle:"quotation object definition",charIndex:117053},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:125459},{level:3,title:"International Transfer Information Object",slug:"international-transfer-information-object",normalizedTitle:"international transfer information object",charIndex:125482},{level:3,title:"KYC Information Object",slug:"kyc-information-object",normalizedTitle:"kyc information object",charIndex:129038},{level:3,title:"Name Object",slug:"name-object",normalizedTitle:"name object",charIndex:133205},{level:3,title:"Id Document Object",slug:"id-document-object",normalizedTitle:"id document object",charIndex:134899},{level:3,title:"Address Object",slug:"address-object",normalizedTitle:"address object",charIndex:137367},{level:3,title:"Account Identifier Object",slug:"account-identifier-object",normalizedTitle:"account identifier object",charIndex:138966},{level:3,title:"Identity Object",slug:"identity-object",normalizedTitle:"identity object",charIndex:140086},{level:3,title:"Quote Object",slug:"quote-object",normalizedTitle:"quote object",charIndex:143099},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:146642},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:147639},{level:3,title:"Supplementary Bill Reference Object",slug:"supplementary-bill-reference-object",normalizedTitle:"supplementary bill reference object",charIndex:148628},{level:3,title:"Transaction Type Object",slug:"transaction-type-object",normalizedTitle:"transaction type object",charIndex:149784},{level:3,title:"Channel Type Object",slug:"channel-type-object",normalizedTitle:"channel type object",charIndex:150699},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:151278},{level:3,title:"Commission Object",slug:"commission-object",normalizedTitle:"commission object",charIndex:152282},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:153374},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:154385},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:154402},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:154778},{level:3,title:"ID Types",slug:"id-types",normalizedTitle:"id types",charIndex:155999},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:157130},{level:3,title:"ISO Country Codes",slug:"iso-country-codes",normalizedTitle:"iso country codes",charIndex:162898},{level:3,title:"Delivery Method Types",slug:"delivery-method-types",normalizedTitle:"delivery method types",charIndex:163238},{level:3,title:"Frequency Type",slug:"frequency-type",normalizedTitle:"frequency type",charIndex:163839}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Batch Transactions Batch Transactions Workflow One-Shot Batch Processing Batch Processing with Maker/Checker Batch Transactions API Batch Transaction Object UML Diagram Batch Transaction Object Definition Batch Rejections API Batch Rejection UML Class Diagram Batch Rejection Object Definition Batch Completions API Batch Completion UML Class Diagram Batch Completion Object Definition Accounts APIs Identifying a Target Account Single Identifier Method Multiple Identifiers Method Account Creation Account Retrieval Account Update Account-Level Updates Identity-Level Updates Account UML Diagram Account Object Definition Retrieving Transactions for an Account Account Transaction UML Class Diagram Accounts Status API Account Status UML Class Diagram Account Status Object Definition Account Balances API Account Balance UML Class Diagram Account Holder Name API Account Holder Name UML Class Diagram Account Holder Name Object Definition Account Statement Entries API Account Statement Entry UML Class Diagram Account Statement Entry Object Definition Bills API Bill UML Class Diagram Bill Object Definition Bill Payments API Bill Payment UML Class Diagram Bill Payment Object Definition Bill Companies API Bill Company UML Class Diagram Bill Company Object Definition Debit Mandates API Debit Mandate UML Class Diagram Debit Mandate Object Definition Links API Link UML Class Diagram Link Object Definition Authorisation Codes API Authorisation Code UML Class Diagram Authorisation Code Object Definition Quotations API Quotation UML Class Diagram Quotation Object Definition Supporting Objects International Transfer Information Object KYC Information Object Name Object Id Document Object Address Object Account Identifier Object Identity Object Quote Object Metadata Object Custom Data Object Supplementary Bill Reference Object Transaction Type Object Channel Type Object Fees Object Commission Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types ID Types Account Identifiers ISO Country Codes Delivery Method Types Frequency Type",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is an array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nThe Transactions APIs are used to support mobile money financial transaction use cases. Transactions are used for a wide range of use cases including merchant payments, international transfers, domestic transfers, and agent cash-in/cash-out.\n\nThe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nPOST        POST                                         To be used for transaction creation when the provider’s API\n            /transactions/type/{transactiontype}         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET                                          To view a transaction.\n            /transactions/{transactionReference}\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Transaction "1" *-- "0..20" Metadata Transaction "1" *-- "0..2" KYC Information Transaction "1" *-- "0..1" International Transfer Information KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name\n\nFigure 2-1 Transaction UML Class Diagram\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                                  \nName                                         Type        Description                                                           Reference                            Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                        \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                         \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                         \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers                  creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                         debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers                  debitParty must be supplied if creditParty is omitted. If\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                         creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                         Enumeration = Transaction Types\n                                                         the URL).                                                      ← M                                         Note that only Reversals and Refunds (adjustments) are\n                                                                                                                                                                    supported.\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                         \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                        \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                         Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                         validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                         Enumeration = ISO Currency Codes.\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                         \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                          \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                         \n                                                         was initiated.                                                 ← O\ninternationalTransferInformation             object      A collection of fields detailing information specifically      → O    International Transfer Information   \n                                                         used for international transfers.                              ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                         \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrecipientKyc                                 object      A collection of fields detailing the KYC of the transaction    → O    KYC Information                      \n                                                         recipient.                                                     ← O\nsenderKyc                                    object      A collection of fields detailing the KYC of the transaction    → O    KYC Information                      \n                                                         sender.                                                        ← O\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation              \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                         \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                        \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                        \n                                                         Provider.                                                      ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                        \n                                                         Provider.                                                      ← O\nrequestDate                                  date-time   The date and time of the transaction request as supplied by    → O                                         \n                                                         the client                                                     ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object                   \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                             \n                                                         populate additional properties that describe administrative    ← O\n                                                         information regarding the transaction.\n\n\n# Reversals API\n\nThe Reversals API is used to reverse, adjust or refund a financial transaction. The originating transaction reference must be provided in the path in order to identify the transaction to be reversed. For a partial reversal, the amount needs to be supplied. It should be noted that some API providers do not support partial reversals and will return an error if a partial amount is supplied.\n\nFor viewing and updating reversals, the Transactions API should be used.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Credit Party Identifier "0..10" --* "" Reversal Debit Party Identifier "0..10" --* "" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\nFigure 2-2 Reversal UML Class Diagram\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nREVERSAL OBJECT                                                                                                                                          \nName                                         Type        Description                                                           Reference                 Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                             \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                              \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → NA                             \n                                                         transaction which is the subject of the reversal.              ← M\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → O    Account Identifiers       \n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← O\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → O    Account Identifiers       \n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← O\ntype                                         string      The harmonised Transaction Type.                               → M                              Enumeration = Transaction Types\n                                                                                                                        ← M                              Note that only Reversals and Refunds (adjustments) are\n                                                                                                                                                         supported.\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                              \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                             \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → O                              Please refer to API Fundamentals document for amount\n                                                                                                                        ← O                              validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → O                              Enumeration = ISO Currency Codes.\n                                                                                                                        ← O\ndescriptionText                              string      Free format text description of the transaction provided by    → O                              \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object               \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                              \n                                                         was initiated.                                                 ← O\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                              \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                             \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                             \n                                                         Provider.                                                      ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                             \n                                                         Provider.                                                      ← O\nrequestDate                                  date-time   The date and time of the transaction request as supplied by    → O                              \n                                                         the client                                                     ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                  \n                                                         populate additional properties that describe administrative    ← O\n                                                         information regarding the transaction.\n\n\n# Batch Transactions\n\nThe Mobile Money API allows clients to submit, approve and view batches of transactions. The following steps describe an end to end flow for processing batch transactions. Two types of processing modes are supported:\n\n * One shot processing without an approver.\n * Maker/checker approval, i.e. transactions are not completed until approved via a second API request.\n\nThe individual APIs that are referenced in the steps below are fully documented in subsequent sub-sections.\n\n# Batch Transactions Workflow\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../batchtransactions\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchTitle": "Batch_Test",\n    "batchDescription": "Testing a Batch",\n    "scheduledStartDate": "2017-07-21T17:32:28Z"\n}\n\n\n \n\n\nGET .../batchtransactions/Place your Batch Id here/completions\n\n\n \n\n\nGET .../batchtransactions/Place your Batch Id here/rejections\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n# One-Shot Batch Processing\n\nCreating a Batch\n\n 1. Client submits the batch for processing via POST /batchtransactions.\n\n 2. The client will return the requestState object indicating whether a callback will be provided or polling is required.\n\n 3. The API provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. Once parsing has completed, the API provider will set the batch status in the batchTransactions object to ‘completed’.\n\nVerifying a Batch\n\n \n\n 5. The client will be able to retrieve the batch transaction object by invoking GET /batchtransactions using the object reference provided by the requestState object. Alternatively, if Callback is specified, the client will receive the representation of the batchTransactions object to their nominated URL set in the X-Callback-URL header.\n\nIf errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via GET /batchtransactions/rejections. Successfully completed transactions can be viewed via GET /batchtransactions/completions.\n\n# Batch Processing with Maker/Checker\n\nCreating a Batch\n\n 1. Client submits the batch for processing via POST /batchtransactions.\n\n 2. The client will return the requestState object indicating whether a callback will be provided or polling is required.\n\n 3. The API provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. Once parsing has completed, the API provider will set the batch status in the batchTransactions object to ‘created’.\n\nVerifying a Batch\n\n 5. The client will be able to retrieve the batch transaction object by invoking GET /batchtransactions using the object reference provided by the requestState object. Alternatively, if Callback is specified, the client will receive the representation of the batchTransactions object to their nominated URL set in the X-Callback-URL header.\n\n 6. If errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via GET /batchtransactions/rejections.\n\nApproving a Batch\n\n 7.  A client can approve the batch for posting by issuing a PATCH /batchtransactions in order to update the status to ‘approved’.\n\n 8.  As per step 2, a requestState object will be returned indicating whether a callback will be provided or polling is required.\n\n 9.  The API provider will then post the transactions in the batch considering any scheduling considerations.\n\n 10. Once posting is completed, the API provider will set the batch status in the batchTransactions object to ‘completed’.\n\n 11. The client will be able to retrieve the batchTransactions object by invoking GET /batchtransactions using the object reference provided by the requestState object. Alternatively, if Callback is specified, the client will receive the representation of the batchTransactions object to their nominated URL set in the X-Callback-URL header.\n\nthe client will also be able to retrieve a list of successful transaction completions /batchtransactions/completions and transaction failures /batchtransactions/rejections.\n\n\n# Batch Transactions API\n\nThis API enables clients to submit and approve a batch of transactions. The API allows transactions of multiple types to be included in a single batch. The following paths are permitted:\n\n- Submit a batch: POST /batchtransactions\n\n- Approve a batch: PATCH /bathtransactions/{batchID}. The Batch Status needs to be set to ‘approved’.\n\n- View details regarding batch processing: GET /batchtransactions/{batchID}\n\n\n\nOnly asynchronous mode is supported for the POST and PATCH methods. For the GET method, only synchronous mode is supported.\n\nThere is a limit of 999,999 transaction records per batch.\n\n# Batch Transaction Object UML Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Transaction "0.." --* "1" Batch Transaction Transaction "1" *-- "0..20" Metadata Transaction "1" *-- "0..1" International Transfer Information KYC Information "0..2" --* "1" Transaction KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name\n\nFigure 2-3 Batch Transaction UML Class Diagram\n\n# Batch Transaction Object Definition\n\n{\n  "batchID": "d24651c4-ef6f-4c5c-af0e-468f1dc53624",\n  "batchStatus": "approved",\n  "Transactions": [\n    {\n      //transaction 1 object...\n      },\n    {\n      //transaction 2 object...\n    }\n  ]\n  "approvalDate": "2017-07-21T17:32:28Z", \n  "completionDate": "2017-07-21T17:32:28Z",\n  "batchTitle": "Batch title...",\n  "batchDescription": "Batch description...",\n  "processingFlag": true,\n  "completedCount": 3,\n  "parsingSuccessCount": 2,\n  "rejectionCount": 1,\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "scheduledStartDate": "2017-07-21T17:32:28Z",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBATCH TRANSACTION OBJECT                                                                                                               \nName                       Type        Description                                                           Reference                 Validation\nbatchID                    string      Identifier for the Batch that is assigned by the API           → NA                             \n                                       provider. This ID is used by the client on subsequent GET or   ← M\n                                       PATCH methods.\nbatchStatus                string      Indicates the status of the batch.                             → O                              Enumeration = created, approved, completed\n                                                                                                      ← M\nTransactions               array       Collection of Transactions that are to be processed. Note      → M    Transactions              \n                                       that the representation of each completed transaction can be   ← NA\n                                       retrieved via the ‘/completions API.\napprovalDate               date-time   Indicates when the batch was approved as recorded by the API   → NA                             \n                                       provider.                                                      ← M\ncompletionDate             date-time   Indicates when the batch was completed as recorded by the      → NA                             \n                                       API provider.                                                  ← M\nbatchTitle                 string      Client-provided title for the batch.                           → O                              \n                                                                                                      ← O\nbatchDescription           string      Client-provided description of the batch.                      → O                              \n                                                                                                      ← O\nprocessingFlag             boolean     Indicates whether the batch is currently undergoing            → NA                             \n                                       processing by the API Provider.                                ← O\ncompletedCount             integer     Indicates the number of records that have been successfully    → NA                             \n                                       completed.                                                     ← O\nparsingSuccessCount        integer     Indicates the number of records that have been parsed          → NA                             \n                                       successfully.                                                  ← O\nrejectionCount             integer     Indicates the number of records that have been rejected,       → NA                             \n                                       either during parsing or during final processing.              ← O\nrequestingOrganisation     object      The originating organisation of the request.                   → O    Requesting Organisation   \n                                                                                                      ← O\nscheduledStartDate         date-time   If the batch has been scheduled, the expected start time is    → O                              \n                                       provided here.                                                 ← O\ncreationDate               date-time   Indicates when the batch was created as recorded by the API    → NA                             \n                                       provider.                                                      ← O\nmodificationDate           date-time   Indicates when the batch was modified as recorded by the API   → NA                             \n                                       provider.                                                      ← O\nrequestDate                date-time   The date and time of the batch request as supplied by the      → O                              \n                                       client.                                                        ← O\ncustomData                 string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                       provider specific fields.                                      ← O\n\n\n# Batch Rejections API\n\nThis API enables clients to retrieve information on all transactions that have either failed parsing or have failed to complete. Only the GET method is supported. The path is batchtransactions/{batchID}/rejections.\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Batch Rejection UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Batch Rejection Debit Party Identifier "1..10" --* "1" Batch Rejection Batch Rejection "0..*" --* "1" Batch Transaction\n\nFigure 2-4 Batch Rejection UML Class Diagram\n\n# Batch Rejection Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "rejectionReason": "Some rejection reason...",\n  "rejectionDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBATCH REJECTION OBJECT                                                                                                                               \nName                                         Type        Description                                                           Reference             Validation\ntransactionReference                         string      Transaction Reference as assigned by the API provider.         → NA                         \n                                                                                                                        ← O\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → NA                         \n                                                         to be associated with the transactions.                        ← O\ncreditParty                                  array       The credit party identifiers for the transaction as specific   → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\ndebitParty                                   array       The debit party identifiers for the transaction as specific    → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\nrejectionReason                              string      The reason for the transaction request as indicated by the     → NA                         \n                                                         API provider.                                                  ← M\nrejectionDate                                date-time   Date and time of the rejection.                                → NA                         \n                                                                                                                        ← M\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object    \n                                                         provider specific fields.                                      ← O\n\n\n# Batch Completions API\n\nThis API lists all transactions that have successfully completed for a given batch. Only the GET method is supported. The path format is batchtransactions/{batchID}/completions.\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count)\n\n# Batch Completion UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Batch Completion Debit Party Identifier "1..10" --* "1" Batch Completion Batch Completion "0..*" --* "1" Batch Transaction\n\nFigure 2-5 Batch Completion UML Class Diagram\n\n# Batch Completion Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "completionDate": "2017-07-21T17:32:28Z",\n  "link": "https://application.com/uuid",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBATCH COMPLETION OBJECT                                                                                                                              \nName                                         Type        Description                                                           Reference             Validation\ntransactionReference                         string      Transaction Reference as assigned by the API provider.         → NA                         \n                                                                                                                        ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → NA                         \n                                                         to be associated with the transactions.                        ← O\ncreditParty                                  array       The credit party identifiers for the transaction as specific   → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\ndebitParty                                   array       The debit party identifiers for the transaction as specific    → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\ncompletionDate                               date-time   Date and time indicating when the transaction was completed.   → NA                         \n                                                                                                                        ← M\nlink                                         string      Provides a URL to the transaction resource.                    → NA                         \n                                                                                                                        ← M\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object    \n                                                         provider specific fields.                                      ← O\n\n\n# Accounts APIs\n\nThe Accounts APIs are used to support a range of account-related operations. Types of accounts include mobile wallets, bank accounts, savings accounts, and loan accounts.\n\n# Identifying a Target Account\n\nTwo methods are provided for identifying an account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used: /accounts/{identifierType}/{identifier}.\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used: /accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3}.\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n# Account Creation\n\nThe Mobile Money API allows account creation for customers who are classified as individuals. The creation of a customer account can be triggered by various means including:\n\n * Account creation via a mobile money agent.\n\n * Automatic account creation upon SIM registration.\n\n * App-based self-registration.\n\nRegardless of the method of creation, new customers are generally provided with account and transaction limits based upon the level of KYC information they have provided and whether their KYC information has been physically verified.\n\nTo create an account, use POST /accounts/{identityType}, supplying ‘individual’ as the identityType.\n\n# Account Retrieval\n\nAccount details, including associated account identities can be retrieved via the following paths:\n\nGET /accounts/{accountIdentifierType}/{identifier} OR\n\nGET /accounts/{Account Identifiers}\n\n# Account Update\n\n# Account-Level Updates\n\nTo update information held against an account, use one of the following paths:\n\nPATCH /accounts/{accountIdentifierType}/{identifier} OR\n\nPATCH /accounts/{Account Identifiers}\n\n\n\nThe following account fields can be updated:\n\n{\n  "accountStatus": {\n    "op": "replace", \n    "path": "/accountStatus", \n    "value": "string"\n  },\n  "accountSubStatus": {\n    "op": "replace", \n    "path": "/accountSubStatus", \n    "value": "string"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nFIELD              PATCH BODY                                                     DESCRIPTION\naccountStatus      "op": "replace", "path": "/accountStatus", "value": "string"   Use to modify the status of an account.\naccountSubStatus   "op": "replace", "path": "/accountSubStatus", "value":         Use to modify the sub-status of an account.\n                   "string"\n\nFor more information on the above fields please refer to the Account object.\n\n# Identity-Level Updates\n\nTo update an information held against an identity associated with an account, use one of the following paths:\n\nPATCH /accounts/{identifierType}/{identifier}/identities/{identityId} OR\n\nPATCH /accounts/{Account Identifiers}/identities/{identityId}\n\n\n\nThe following identity fields can be updated:\n\n{\n  "identity.identityStatus": {\n    "op": "replace", \n    "path": "/identityStatus", \n    "value": "string"\n  },\n  "identity.kycVerificationStatus": {\n    "op": "replace", \n    "path": "/kycVerificationStatus", \n    "value": "string"\n  },\n  "identity.kycVerificationEntity": {\n    "op": "replace", \n    "path": "/kycVerificationEntity", \n    "value": "string"\n  },\n  "identity.kycLevel": {\n    "op": "replace", \n    "path": "/kycLevel", \n    "value": "string"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nFIELD                            PATCH BODY                                                    DESCRIPTION\nidentity.identityStatus          "op": "replace", "path": "/identityStatus", "value":          Use to modify the status of an identity associated with an\n                                 "string"                                                      account.\nidentity.kycVerificationStatus   "op": "replace", "path": "/kycVerificationStatus", "value":   Use to change the KYC verification status of an identity\n                                 "string"                                                      associated with an account.\nidentity.kycVerificationEntity   "op": "replace", "path": "/kycVerificationEntity", "value":   Use to indicate the entity (e.g. mobile money agent) that\n                                 "string"                                                      performed the verification.\nidentity.kycLevel                "op": "replace", "path": "/kycLevel", "value": “integer”      UUse to modify the KYC level of an identity associated with\n                                                                                               an account.\n\nFor more information on the above fields please refer to the Identity Object.\n\n# Account UML Diagram\n\nclassDiagram ID Document "0..10" --* "1" KYC Information Address "0..1" --* "1" KYC Information Name "0..1" --* "1" KYC Information KYC Information "1" --* "1" Identity Account Identifier "1..10" --* "1" Account Identity "1..20" --* "1" Account Fee "1..20" --* "1" Account Commission "1..20" --* "1" Account\n\nFigure 2-6 Account Creation UML Class Diagram\n\n# Account Object Definition\n\n{\n  "accountIdentifiers": [\n    {\n      "key": "myCustomKey",\n      "value": "myCustomValue"\n    }\n  ],\n  "identity": [\n    {\n      "identityId": "12345",\n      "identityType": "individual",\n      "identityKyc": {\n        "dateOfBirth": "2000-11-20",\n        "birthCountry": "GB",\n        "contactPhone": "+1234567890"\n      },\n      "accountRelationship": "accountholder"\n    }\n  ],\n  "accountType": "seller",\n  "accountSubStatus": "api",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "commissionEarned": {\n    "commissionType": "transfer",\n    "commissionAmount": "2.50",\n    "commissionCurrency": "GBP"\n  },\n  "registeringEntity": "My FSP",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nACCOUNT OBJECT                                                                                                               \nName                 Type        Description                                                           Reference             Validation\naccountIdentifiers   array       A series of key/value pairs that enable the account to be      → O    Account Identifiers   \n                                 identified. Identifiers are assigned by the API Provider       ← M\n                                 during creation.\nidentity             array       An account must be associated with one or more identities.     → M    Identity Object       \n                                                                                                ← M\naccountType          string      A non-harmonised field that indicates the type of the          → O                          \n                                 account.                                                       ← O\naccountStatus        string      Indicates a simplified representation of the account status.   → NA                         \n                                 This will be shown as ‘available’ or ‘unavailable’. A state    ← M\n                                 of ‘unavailable’ means that the account is in a state that\n                                 does not allow posting of transactions.\naccountSubStatus     string      Field can be used to return a provider-specific status for     → NA                         \n                                 the account.                                                   ← O\ncurrentBalance       string      The current outstanding balance on the account.                → NA                         Please refer to API Fundamentals document for amount\n                                                                                                ← O                          validation rules.\navailableBalance     string      Indicates the balance that is able to be debited for an        → NA                         Please refer to API Fundamentals document for amount\n                                 account. This balance is only provided on some API provider    ← O                          validation rules.\n                                 systems.\nreservedBalance      string      Indicates the portion of the balance that is reserved, i.e.    → NA                         Please refer to API Fundamentals document for amount\n                                 intended to be debited. This balance is only provided on       ← O                          validation rules.\n                                 some API provider systems.\nunClearedBalance     string      Indicates the sum of uncleared funds in an account, i.e.       → NA                         Please refer to API Fundamentals document for amount\n                                 those that are awaiting a credit confirmation.                 ← O                          validation rules.\ncurrency             string      Currency of the account.                                       → NA                         Enumeration = ISO Currency Codes\n                                                                                                ← O\ncustomData           string      A collection of key/value pairs that can be used for           → O    Custom Data Object    \n                                 provider specific fields.                                      ← O\nfees                 string      Returns all fees related to the creation of the account.       → O    Fees Object           \n                                                                                                ← O\ncommissionEarned     string      Returns all commission earned by the registering entity for    → NA   Commission Object     \n                                 the creation of the account.                                   ← O\nregisteringEntity    string      The entity that registered the account, for example, a         → O                          \n                                 mobile money agent.                                            ← O\ncreationDate         date-time   Indicates when the account was created as recorded by the      → NA                         \n                                 API provider.                                                  ← O\nmodificationDate     date-time   Indicates when the account was modified as recorded by the     → NA                         \n                                 API provider.                                                  ← O\nrequestDate          date-time   The date and time of the account request as supplied by the    → O                          \n                                 client.                                                        ← O\n\n# Retrieving Transactions for an Account\n\nIt is possible to return a range of transactions for an account as per the following paths:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions.\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum creationDate for which records should\n                                          be returned.\ntoDateTime          string    date-time   Indicates the maximum creationDate for which records should\n                                          be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram ID Document "0..10" --* "1" KYC Information Address "0..1" --* "1" KYC Information Name "0..1" --* "1" KYC Information Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction KYC Information "0..2" --* "1" Transaction Metadata "0..20" --* "1" Transaction International TransferInformation "0..1" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2-7 Account Transaction UML Class Diagram\n\n# Accounts Status API\n\nThe Accounts Status API returns a harmonised status of the account. The status enables the client to determine whether transactions can be subsequently posted against the account. Permitted paths are GET /accounts/{identifierType}/{identifier}/status’ or GET /accounts/{Account Identifiers}/status.\n\n# Account Status UML Class Diagram\n\nclassDiagram Account Status "1" --* "1" Account\n\nFigure 2-8 Account Status UML Class Diagram\n\n# Account Status Object Definition\n\n{\n  "accountStatus": "available",\n  "subStatus": "approved",\n  "lei": "22210053OF4F2MYKUV22"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nACCOUNT STATUS OBJECT                                                                                              \nName                    Type     Description                                                           Reference   Validation\naccountStatus           string   Indicates a simplified representation of the account status.   → NA               Enumeration = available, unavailable, unregistered\n                                 This will be shown as ‘available’ or ‘unavailable’. A state    ← M\n                                 of ‘unavailable’ means that the account is in a state that\n                                 does not allow posting of transactions. Unregistered\n                                 indicates that although not available, a transaction posted\n                                 with the account identifier(s) will result in an\n                                 unregistered voucher creation.\nsubStatus               string   Field can be used to return a provider-specific status for     → NA               \n                                 the account.                                                   ← O\nlei                     string   Indicates the Legal Entity Identifier of the organisation      → NA               Refer to LEI format as defined here:\n                                 holding the account.                                           ← O                https://www.leiroc.org/lei.htm\n\n# Account Balances API\n\nThis API defines specific fields for returning balances associated with an account. Permitted paths are GET /accounts/{identifierType}/{identifier}/balance or GET /accounts/{Account Identifiers}/balance.\n\nA ‘self’ version is also available where the calling API client is the account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram Account Balance "1" --* "1" Account\n\nFigure 2-9 Account Balance UML Class Diagram\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBALANCE OBJECT                                                                                                \nName               Type     Description                                                           Reference   Validation\naccountStatus      string   Indicates a harmonises representation of the account state.    → NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    ← O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                → NA               Please refer to API Fundamentals document for amount\n                                                                                           ← O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        → NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    ← O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    → NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       ← O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       → NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← O                validation rules.\ncurrency           string   Currency for all returned balances.                            → NA               Enumeration = ISO Currency Codes\n                                                                                           ← O\n\n# Account Holder Name API\n\nThis API defines specific fields for returning account holder name information associated with an account. Permitted paths are GET /accounts/{identifierType}/{identifier}/accountname or GET /accounts/{Account Identifiers}/accountname.\n\n# Account Holder Name UML Class Diagram\n\nclassDiagram Account Holder Name "1" --* "1" Account\n\nFigure 2-10 Account Holder Name UML Class Diagram\n\n# Account Holder Name Object Definition\n\n{\n  "name": {\n    "title": "Mr",\n    "firstName": "John",\n    "middleName": "Alan",\n    "lastName": "Doe",\n    "fullName": "John Alan Doe",\n    "nativeName": "John Doe"\n  },\n  "lei": "22210053OF4F2MYKUV22"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nACCOUNT HOLDER NAME OBJECT                                                                                              \nName                         Type        Description                                                        Reference   Validation\nname                         Reference   A collection of fields detailing the name of the Primary    → NA   Name        \n                                         Account Holder.                                             ← O\nlei                          string      Indicates the Legal Entity Identifier of the organisation   → NA               Refer to LEI format as defined here:\n                                         holding the account.                                        ← O                https://www.leiroc.org/lei.htm\n\n# Account Statement Entries API\n\nThe Account Statement Entries API enables a generic representation of transactions to be returned so that they can be displayed in an account statement for the account holder. To return statement entries, an account or a transaction reference must be specified. The supported paths are as follows:\n\nTo return a specific statement entry:\n\n- GET /statemententries/{transactionReference}\n\nTo return a range of statement entries:\n\n- GET /accounts/{ identifierType}/{identifier}statemententries or /accounts/{Account Identifiers}/statemententries.\n\n\n\nTo filter the number of records returned, the following query string parameters can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "displayType": "list"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum creationDate for which records should\n                                          be returned.\ntoDateTime          string    date-time   Indicates the maximum creationDate for which records should\n                                          be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ndisplayType         string    N/A         Indicates the Display Type of the transactions to be\n                                          returned.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the statement entries are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Statement Entry UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Statement Entry Debit Party Identifier "1..10" --* "1" Statement Entry classDiagram Credit Party Identifier "1..10" --* "1" Statement Entry Debit Party Identifier "1..10" --* "1" Statement Entry Statement Entry "0..*" --* "2" Account\n\nFigure 2-11 Statement Entry UML Class Diagram\n\n# Account Statement Entry Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "My transaction description.",\n  "displayType": "list",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nACCOUNT STATEMENT ENTRY OBJECT                                                                                                          \nName                             Type        Description                                                          Reference             Validation\ntransactionReference             string      Unique reference for the transaction. This is returned in     → NA                         \n                                             the response by API provider.                                 ← M\ncreditParty                      array       A series of key/value pairs that identify the credit party.   → NA   Account Identifiers   \n                                             Keys include MSISDN and Wallet Identifier.                    ← M\ndebitParty                       array       A collection of key/value pairs that identify the debit.      → NA   Account Identifiers   \n                                             Keys include MSISDN and Wallet Identifier.                    ← M\ntransactionStatus                string      Indicates the status of the transaction as represented by     → NA                         \n                                             the API provider.                                             ← M\namount                           string      Amount of the transaction.                                    → NA                         Please refer to API Fundamentals document for amount\n                                                                                                           ← M                          validation rules.\ncurrency                         string      Currency of the transaction.                                  → NA                         Enumeration = ISO Currency Codes\n                                                                                                           ← M\ndescriptionText                  string      Free format text description of the transaction provided by   → NA                         \n                                             the client. This can be provided as a reference for the       ← O\n                                             receiver on a notification SMS and on an account statement.\ndisplayType                      string      The transaction type that is to be used for presentation to   → NA                         \n                                             the account holder as determined by the API provider. This    ← O\n                                             is not necessarily the actual transaction type.\ntransactionReceipt               string      Transaction receipt number as notified to the parties. This   → NA                         \n                                             may differ from the Transaction Reference.                    ← O\ncreationDate                     date-time   Date and time when the transaction was created by the API     → NA                         \n                                             Provider.                                                     ← O\nmodificationDate                 date-time   Date and time when the transaction modified by the API        → NA                         \n                                             Provider.                                                     ← O\nrequestDate                      date-time   The date and time of the transaction request as supplied by   → NA                         \n                                             the client.                                                   ← O\ncustomData                       string      A collection of key/value pairs that can be used for          → O    Custom Data Object    \n                                             provider specific fields.                                     ← O\n\n\n# Bills API\n\nThe Bills API are used to return all outstanding bills associated with an account. The main purpose of the API is to support Bill Presentment, i.e. presenting all applicable bills for a payer to view and select for payment. To pay a bill, the Bill Payments API is used. Permitted paths are GET /accounts/{identifierType}/{identifier}/bills or GET /accounts/{Account Identifiers}/bills.\n\nTo filter the number of records returned, the following query string parameters can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the bills are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Bill UML Class Diagram\n\nclassDiagram Metadata "0..20" --* "1" Bill Bill "0..*" --* "1" Account\n\nFigure 2-12 Bill UML Class Diagram\n\n# Bill Object Definition\n\n{\n  "billReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "billStatus": "partialpaid",\n  "amountDue": "123.45",\n  "billDescription": "My custom description...",\n  "currency": "GBP",\n  "dueDate": "2018-11-20",\n  "minimumAmountDue": "23.45",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBILL OBJECT                                                                                                              \nName               Type        Description                                                          Reference            Validation\nbillReference      string      Reference number for the Bill that the payer can use when     → NA                        \n                               making a payment.                                             ← O\nbillStatus         string      Identifies the status of the Bill.                            → NA                        ‘paid’, ‘unpaid’, ‘partialpaid’\n                                                                                             ← O\namountDue          string      Amount outstanding on the bill to be paid.                    → NA                        Please refer to API Fundamentals document for amount\n                                                                                             ← O                         validation rules.\nbillDescription    string      Description of the bill that is to be paid.                   → NA                        \n                                                                                             ← O\ncurrency           string      Currency of the bill to be paid.                              → NA                        Enumeration = ISO Currency Codes\n                                                                                             ← O\ndueDate            date        Date on which the Bill is due to be paid.                     → NA                        \n                                                                                             ← O\nminimumAmountDue   string      The minimum amount that is outstanding on the bill to be      → NA                        Please refer to API Fundamentals document for amount\n                               paid.                                                         ← O                         validation rules.\ncreationDate       date-time   Indicates when the bill was created by the API provider.      → NA                        \n                                                                                             ← O\nmodificationDate   date-time   Indicates when the bill was modified by the API provider.     → NA                        \n                                                                                             ← O\ncustomData         string      A collection of key/value pairs that can be used for          → O    Custom Data Object   \n                               provider specific fields.                                     ← O\nmetadata           array       A collection of key/value pairs. These can be used to         → NA   Metadata             \n                               populate additional properties that describe administrative   ← O\n                               information regarding the bill.\n\n\n# Bill Payments API\n\nThe Bill Payments APIs are used to pay a specific bill associated with an account held with a service provider. Bill payments can also be retrieved. Permitted paths are:\n\nPATH                                                                     USAGE\n/accounts/{identifierType}/{identifier}/bills/{billReference}/payments   Use when a single identifier suffices to identify the bill\n                                                                         account.\n/accounts/{Account                                                       Use when two or three identifiers are required to identify\nIdentifiers}/bills/{billReference}/payments                              an account.\n/bills/{billReference}/payments                                          Use when a bill payment is not associated with a service\n                                                                         provider account.\n/accounts/{identifierType}/{identifier}/bills/payments OR                Use when a bill does not have a bill reference\n/accounts/{Account Identifiers}/bills/payments\n\nAs per MM API standards, POST is used to create a bill payment whereas GET is used to retrieve all payments associated with a bill.\n\nWhen retrieving bill payments, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the bill payments are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Bill Payment UML Class Diagram\n\nclassDiagram Supplementary Bill Reference "0..20" --* "1" Bill Payment Metadata "0..20" --* "1" Bill Payment classDiagram Supplementary Bill Reference "0..20" --* "1" Bill Payment Metadata "0..20" --* "1" Bill Payment Bill Payment "0..*" --* "1" Account\n\nFigure 2-13 Bill Payment UML Class Diagram\n\n# Bill Payment Object Definition\n\n{\n  "serviceProviderPaymentReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "paymentType": "fullpayment",\n  "billPaymentStatus": "approved",\n  "amountPaid": "123.45",\n  "currency": "GBP",\n  "customerReference": "Customer reference text...",\n  "requestingOrganisation": "creditFSP",\n  "supplementaryBillReferenceDetails": [\n    {\n      "paymentReferenceType": "paymentReferenceValue"\n    }\n  ],\n  "serviceProviderComment": "This is SP comment...",\n  "serviceProviderNotification": "This is SP notification...",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBILL PAYMENT OBJECT                                                                                                                                 \nName                                         Type        Description                                                           Reference            Validation\nserviceProviderPaymentReference              string      Reference for the payment generated by the service provider.   → O                         \n                                                                                                                        ← O\nrequestingOrganisationTransactionReference   string      The mobile money provider’s (or Financial Institution’s)       → O                         \n                                                         transaction reference used to debit the customer and credit    ← O\n                                                         the service provider.\npaymentType                                  string      Describes the type of Bill Payment, i.e. whether a full or     → O                         Enumeration = ‘fullpayment’, ‘partialpayment’\n                                                         partial payment.                                               ← O\nbillPaymentStatus                            string      Indicates the status of the bill payment as stored by the      → NA                        \n                                                         API provider.                                                  ← M\namountPaid                                   string      Amount that is being paid.                                     → M                         Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                         validation rules.\ncurrency                                     string      Currency of the amount that is being paid.                     → M                         Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ncustomerReference                            string      Textual reference provided by the customer paying the bill.    → O                         \n                                                                                                                        ← O\nrequestingOrganisation                       string      The originating mobile money provider or financial             → O                         \n                                                         institution that holds the wallet/account of the payer.        ← O\nsupplementaryBillReferenceDetails            array       In some cases, a single reference is not sufficient to         → C    Bill References      Not applicable if billReference is no passed in the path.\n                                                         identify a bill. This key-value collection enables further     ← C\n                                                         reference information to be supplied.\nserviceProviderComment                       string      Allows the Service Provider to include specific information    → NA                        \n                                                         regarding the bill payment.                                    ← O\nserviceProviderNotification                  string      Allows the Service Provider to include specific information    → NA                        \n                                                         that will be included on the notification to the customer by   ← O\n                                                         the mobile money provider.\ncreationDate                                 date-time   Indicates when the bill payment was created as recorded by     → NA                        \n                                                         the API provider.                                              ← O\nmodificationDate                             date-time   Indicates when the bill payment was modified as recorded by    → NA                        \n                                                         the API provider.                                              ← O\nrequestDate                                  date-time   The date and time of the bill payment request as supplied by   → O                         \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object   \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata             \n                                                         populate additional properties that describe administrative    ← O\n                                                         information regarding the bill payment.\n\n\n# Bill Companies API\n\nThe Bill Companies APIs are used to return a list of Service Providers that accept bill payments. Permitted paths are as per below:\n\n * Bill Companies irrespective of account:\n   \n   * Use GET /billcompanies to return a list of all bill payment service providers.\n   \n   * Use GET /billcompanies/{serviceProvider} to return a specific bill payment service provider.\n\n * Bill Companies for a given account:\n   \n   * GET /accounts/{identifierType}/{identifier}/billcompanies or GET /accounts/{Account Identifiers}/billcompanies.\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER   TYPE      FORMAT   DESCRIPTION\nlimit       integer   N/A      Supports pagination. If this is not supplied, then the\n                               server will apply a limit of 50 records returned for each\n                               request.\noffset      integer   N/A      Supports pagination. This value will indicate the cursor\n                               position from where to retrieve the set of records. For\n                               example, a limit of 50 and offset of 10 will return records\n                               11 to 60.\n\nTIP\n\nNote: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Bill Company UML Class Diagram\n\nclassDiagram Supplementary Service Provider Details "0..20" --* "1" Bill Company classDiagram Supplementary Service Provider Details "0..20" --* "1" Bill Company Bill Company "0..*" --* "1" Account\n\nFigure 2-14 Bill Company UML Class Diagram\n\n# Bill Company Object Definition\n\n{\n  "serviceProvider": "987654321",\n  "serviceProviderType": "seller",\n  "serviceProviderSubType": "merchant",\n  "companyName": "Merchant Seller LLC",\n  "supplementaryServiceProviderDetails": [\n    {\n      "paymentReferenceType": "paymentReferenceValue"\n    }\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBILL COMPANIES OBJECT                                                                                                                                       \nName                                  Type     Description                                                         Reference                                Validation\nserviceProvider                       string   Service Provider Reference Code.                             → NA                                            \n                                                                                                            ← M\nserviceProviderType                   string   Type of Service Provider that accepts payments.              → NA                                            \n                                                                                                            ← O\nserviceProviderSubType                string   Sub-Type of Service Provider.                                → NA                                            \n                                                                                                            ← O\ncompanyName                           string   Display Name for the Service Provider.                       → NA                                            \n                                                                                                            ← M\nsupplementaryServiceProviderDetails   array    In some cases, further information for a service provider    → NA   Supplementary Service Provider Details   \n                                               can be returned. This key-value collection enables further   ← O\n                                               information to be supplied.\n\n\n# Debit Mandates API\n\nThe Debit Mandates APIs allow a mobile money customer to provide prior approval for payments to be taken from their account by a requesting payee. If the amount limit field is not supplied, the payee will be able to take any amount. Mandates can be open-ended or can be constrained by a quantified number of payments for a given frequency.\n\nMandates can be created, viewed, and modified. The request to create a debit mandate will be typically initiated by the service provider (payee) but can also be requested by the customer (payer).\n\nThe permitted paths are as follows. Note that the payer account is identified in the path whereas the payee account is identified in the request body.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/2000/debitmandates\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n   "payee": [\n    {\n      "key": "accountid",\n      "value": "2999"\n    }\n  ],\n    "requestDate": "2017-07-21T17:32:28Z",\n    "startDate": "2018-11-20",\n    "currency": "GBP",\n    "amountLimit": "1000.00",\n    "endDate": "2018-11-20",\n    "numberOfPayments": "2",\n    "frequencyType": "sixmonths",\n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]        \n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n * Creation: POST /accounts/{identifierType}/{identifier}/debitmandates or POST /accounts/{Account Identifiers}/debitmandates.\n\n * Update: In order to update a debit mandate, a HTTP PATCH is used. Format is: PATCH /accounts/{identifierType}/{identifier}/debitmandates/{mandateReference} or PATCH /accounts/{Account Identifiers}/debitmandates/{mandateReference}\n\n * Read. GET /accounts/{identifierType}/{identifier}/debitmandates/{mandateReference} or GET /accounts/{Account Identifiers}/debitmandates/{mandateReference}.\n\nSynchronous and asynchronous modes are supported for the POST and PATCH methods whereas only synchronous mode is supported for the GET method.\n\nThe following fields are modifiable: mandateStatus, startDate, endDate, frequencyType, numberOfPayments.\n\n# Debit Mandate UML Class Diagram\n\nclassDiagram Payee Identifiers "0..10" --* "1" Debit Mandate Payer Identifiers "0..10" --* "1" Debit Mandate Debit Mandate "0..*" --* "1" Account\n\nFigure 2-15 Debit Mandate UML Class Diagram\n\n# Debit Mandate Object Definition\n\n{\n  "mandateReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "payee": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "mandateStatus": "active",\n  "startDate": "2018-11-20",\n  "amountLimit": "123.45",\n  "currency": "GBP",\n  "endDate": "2018-11-20",\n  "frequencyType": "weekly",\n  "numberOfPayments": 50,\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nDEBIT MANDATE OBJECT                                                                                                                 \nName                     Type        Description                                                           Reference                 Validation\nmandateReference         string      Unique reference provided by the API Provider for the Debit    → NA                             \n                                     Mandate.                                                       ← M\npayee                    array       A series of key/value pairs that enable the payee to be        → O    Account Identifiers       \n                                     identified. Keys include MSISDN and Wallet Identifier.         ← O\nmandateStatus            string      Indicates the status of the Debit Mandate as held in the API   → O                              Enumeration = active, inactive\n                                     Provider system.                                               ← O\nstartDate                date        Date on which the mandate starts. If a frequencyType is        → M                              \n                                     specified, this will also be the date on which the first       ← M\n                                     payment is to be taken.\namountLimit              string      The maximum amount that can be taken by the Payee on a         → O                              Please refer to API Fundamentals document for amount\n                                     payment request.                                               ← O                              validation rules.\ncurrency                 string      Currency of the amount limit.                                  → O                              Enumeration = ISO Currency Codes\n                                                                                                    ← O\nendDate                  date        Date on which the Debit Mandate ends.                          → O                              \n                                                                                                    ← O\nfrequencyType            string      Indicates the frequency for which payments will be taken       → O                              Enumeration = Frequency\n                                     from the payers account.                                       ← O\nnumberOfPayments         number      Indicates the number of consecutive payments that are to be    → O                              \n                                     taken.                                                         ← O\nrequestingOrganisation   object      The originating organisation of the request.                   → O    Requesting Organisation   \n                                                                                                    ← O\ncreationDate             date-time   Date and time when the Debit Mandate was created by the API    → NA                             \n                                     Provider.                                                      ← O\nmodificationDate         date-time   Date and time when the Debit Mandate was modified by the API   → NA                             \n                                     Provider.                                                      ← O\nrequestDate              date-time   The date and time of the debit mandate request as supplied     → O                              \n                                     by the client.                                                 ← O\ncustomData               string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                     provider specific fields.                                      ← O\n\n\n# Links API\n\nThe Links APIs are used to establish a link between two separate accounts on the client and provider systems. The API can be used for example to link a mobile wallet account to a Microfinance Institution account or a bank account. The link object does not mandate the processes to verify and authenticate a link request - this depends upon the use case. A link needs to be associated with a mode of operation:\n\n * pull. The link can be used by the client to debit the target account held by the provider.\n\n * push. The link can be used by the client to credit the target account held by the provider.\n\n * both. The link can be used for Push and Pull requests.\n\nTo identify the accounts that are to be linked, the target account is specified in the path whereas the source account is specified in the link object.\n\nThe permitted paths are as follows:\n\n * Creation: POST /accounts/{identifierType}/{identifier}/links or POST /accounts/{ Account Identifiers}/links.\n\n * Update of status and/or mode fields: PATCH /accounts/{identifierType}/{identifier}/links/{linkReference} or PATCH /accounts/{Account Identifiers}/links/{linkReference}.\n\n * Read. GET /accounts/{identifierType}/{identifier}/links/{linkReference} or GET /accounts/{Account Identifiers}/links/{linkReference}.\n\nSynchronous and asynchronous modes are supported for POST and PATCH methods whereas only synchronous mode is supported for the GET method.\n\n# Link UML Class Diagram\n\nclassDiagram Source Account Identifier "1..10" --* "1" Link Link "0..*" --* "1" Account\n\nFigure 2-16 Link UML Class Diagram\n\n# Link Object Definition\n\n{\n  "linkReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "sourceAccountIdentifiers": [\n    {\n      "key":"MSISDN",\n      "value":"+1234567890"\n    }\n  ],\n  "mode": "both",\n  "status": "inactive",\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nLINK OBJECT                                                                                                                           \nName                       Type        Description                                                          Reference                 Validation\nlinkReference              string      Indicates the Link reference. This enables a linked account   → NA                             \n                                       to be uniquely identified.                                    ← M\nsourceAccountIdentifiers   array       A series of key/value pairs that identify the source          → M    Account Identifiers       \n                                       account. Keys include MSISDN and Wallet Identifier.           ← M\nmode                       string      Indicates the mode of operation for the Link.                 → M                              Enumeration = push, pull, both\n                                                                                                     ← M\nstatus                     string      Indicates the status of the Link.                             → M                              Enumeration = active, inactive\n                                                                                                     ← M\nrequestingOrganisation     object      The originating organisation of the request.                  → O    Requesting Organisation   \n                                                                                                     ← O\ncreationDate               date-time   Indicates when the link was created as recorded by the API    → NA                             \n                                       provider.                                                     ← O\nmodificationDate           date-time   Indicates when the link was modified as recorded by the API   → NA                             \n                                       provider.                                                     ← O\nrequestDate                date-time   The date and time of the link request as supplied by the      → O                              \n                                       client.                                                       ← O\ncustomData                 string      Contains provider specific fields.                            → O    Custom Data Object        \n                                                                                                     ← O\n\n\n# Authorisation Codes API\n\nThe Authorisation Codes APIs allow a payer to generate a payment code which when presented to the payee, can be redeemed for an amount associated with the code.\n\nAuthorisation codes can be set to expire. Note that expiry time can be specified via the API, however the mobile money provider may mandate a common expiry period for all codes.\n\nAuthorisation Codes are used widely in the industry across a range of use cases, including:\n\n * ATM Codes for card-less withdrawals. A code is generated in advance by the customer and entered into the ATM to facilitate the withdrawal.\n\n * Pre-authorised codes for agent withdrawals. A code is generated in advance by the customer and given to the agent to facilitate the withdrawal.\n\n * Pre-authorised codes for merchant payments. The customer generates a code which can be redeemed at a merchant.\n\nOnce an authorisation code has been generated, it can be presented through multiple means, including encoding into a QR code. Typically, an authorisation code will expire.\n\nThe following paths are permitted:\n\n * Generate an Authorisation Code. POST /accounts/{identifierType}/{identifier}/authorisationcodes or POST /accounts/{Account Identifiers}/authorisationcodes\n\n * Cancel an Authorisation Code (codeState = ‘cancelled’). PATCH /accounts/{identifierType}/{identifier}/authorisationcodes/{authorisationCode} or PATCH /accounts/{Account Identifiers}/authorisationcodes/{authorisationCode}.\n\n * View An Authorisation Code for a given account. GET /accounts/{identifierType}/{identifier}/authorisationcodes/{authorisationCode} or GET /accounts/{Requestor Account Identifiers}/authorisationcodes/{authorisationCode}.\n\n * View all Authorisation Codes for a given account. GET /accounts/{identifierType}/{identifier}/authorisationcodes or GET /accounts/{Requestor Account Identifiers}/authorisationcodes.\n\nWhen retrieving authorisation codes, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "codeState": "active"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\ncodeState      string    string      Allows filtering on the state of the authorisation code.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the authorisation codes are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\nSynchronous and asynchronous modes are supported for the POST and PATCH methods whereas only synchronous mode is supported for the GET method.\n\n# Authorisation Code UML Class Diagram\n\nclassDiagram Redemption Account Identifier "0..10" --* "1" Authorisation Code Metadata "0..20" --* "1" Authorisation Code Redemption Channel "0..50" --* "1" Authorisation Code Redemption Transaction Type "0..50" --* "1" Authorisation Code Authorisation Code "0..*" --* "1" Account\n\nFigure 2-17 Authorisation Code UML Class Diagram\n\n# Authorisation Code Object Definition\n\n{\n  "authorisationCode": "12345",\n  "codeState": "expired",\n  "amount": "123.45",\n  "currency": "GBP",\n  "amountType": "exact",\n  "codeLifetime": 30000,\n  "holdFundsIndicator": true,\n  "redemptionAccountIdentifiers": [\n    {\n      "key":"MSISDN",\n      "value":"+1234567890"\n    }\n  ],\n  "redemptionChannels": "ATM",\n  "redemptionTransactionTypes": {\n    "transactionStatus": "completed",\n    "transactionType": "merchantpay"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nAUTHORISATION CODES OBJECT                                                                                                                  \nName                           Type        Description                                                           Reference                  Validation\nauthorisationCode              string      The code that will be presented to the other party for         → NA                              \n                                           redemption.                                                    ← M\ncodeState                      string      Indicates the state of the Authorisation Code                  → NA                              Enumeration = ‘active’, ‘expired’, ‘cancelled’\n                                                                                                          ← M\namount                         string      Indicates the amount associated with the authorisation code.   → O                               Please refer to API Fundamentals document for amount\n                                           Typically, this is set by the client.                          ← O                               validation rules.\ncurrency                       string      Indicates the amount currency. Must be supplied when an        → O                               Enumeration = ISO Currency Codes\n                                           amount is supplied.                                            ← O\namountType                     string      The amount for the authorisation can be an exact amount or     → O                               Enumeration = ‘exact’, ‘maximum’\n                                           can be a maximum amount, i.e. redemption up to but not         ← O\n                                           higher than the amount specified.\ncodeLifetime                   integer     Indicates the expiry time in seconds of the code. Depending    → O                               If supplied, then must be 1 second or greater.\n                                           upon the use case, this can be set by the client or server.    ← O\nholdFundsIndicator             boolean     Indicates whether funds should be reserved against the         → O                               \n                                           payer’s account where the payer is the requestor.              ← O\nredemptionAccountIdentifiers   array       A series of key/value pairs that identify the account where    → O    Account Identifiers        \n                                           the code must be redeemed. Only needed if the redemption       ← O\n                                           account needs to be explicitly stated.\nredemptionChannels             string      Indicates the channel(s) that the code can be redeemed         → O    Channel Types Object       \n                                           against, e.g. ATM, Merchant, etc..                             ← O\nredemptionTransactionTypes     string      Indicates the Transaction Types(s) that the code can be        → O    Transaction Types Object   \n                                           redeemed against.                                              ← O\nrequestingOrganisation         object      The originating organisation of the request.                   → O    Requesting Organisation    \n                                                                                                          ← O\ncreationDate                   date-time   Indicates when the link was created as recorded by the API     → NA                              \n                                           provider.                                                      ← O\nmodificationDate               date-time   Indicates when the link was modified as recorded by the API    → NA                              \n                                           provider.                                                      ← O\nrequestDate                    date-time   The date and time of the request as provided by the client.    → O                               \n                                                                                                          ← O\ncustomData                     string      A collection of key/value pairs that can be used for           → O    Custom Data Object         \n                                           provider specific fields.                                      ← O\nmetadata                       array       A collection of key/value pairs. These can be used to          → O    Metadata                   \n                                           populate additional properties that describe administrative    ← O\n                                           information regarding the authorisation code\n\n\n# Quotations API\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../quotations\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestAmount": "75.30",\n    "requestCurrency": "RWF",\n  "requestDate": "2017-07-21T17:32:28Z",\n    "type": "inttransfer",\n    "subType": "abc",\n    "chosenDeliveryMethod": "agent",\n    "senderKyc": {\n        "nationality": "GB",\n        "dateOfBirth": "2000-11-20",\n        "occupation": "Manager",\n        "employerName": "MFX",\n        "contactPhone": "+447125588999",\n        "gender": "m",\n        "emailAddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthCountry": "GB",\n        "idDocument": [\n            {\n                "idType": "nationalidcard",\n                "idNumber": "1234567",\n                "issueDate": "2018-11-20",\n                "expiryDate": "2018-11-20",\n                "issuer": "UKPA",\n                "issuerPlace": "GB",\n                "issuerCountry": "GB",\n                "otherIdDescription": "test"\n            }\n        ],\n        "postalAddress": {\n            "country": "GB",\n            "addressLine1": "111 ABC Street",\n            "city": "New York",\n            "stateProvince": "New York",\n            "postalCode": "ABCD"\n        },\n        "subjectName": {\n            "title": "Mr",\n            "firstName": "Luke",\n            "middleName": "R",\n            "lastName": "Skywalker",\n            "fullName": "Luke R Skywalker",\n            "nativeName": "ABC"\n        }        \n    },    \n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],    \n  "sendingServiceProviderCountry": "AD",\n  "originCountry": "AD",\n  "receivingCountry": "AD"\n}\n\n\n \n\n\nGET .../quotations/dd82cc6a-159a-4ddf-bea7-23bae38e72c5\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nThe Quotations APIs are used to obtain one or multiple quotes for a mobile money customer that wishes to transfer money. The creation of a quote involves returning any fees that will be levied on the sending customer and if the request is international, the forex rate. A request is made for a quotation by the requesting Service Provider in response to a customer request. The quotation is calculated and returned. If the customer is satisfied with the quotation, then they can confirm and proceed with a transaction request using the /transactions API.\n\nThe following paths are permitted:\n\n * Creation of a quotation: POST /quotations\n\n * View a quotation: GET /quotations/{Quotation Reference}\n\n# Quotation UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Quotation Debit Party Identifier "1..10" --* "1" Quotation Metadata "0..20" --* "1" Quotation Quotation "1" *-- "0..2" KYC Information Quotation "1" *-- "0..1" Quote KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name Quote "1" *-- "0..20" Fee\n\nFigure 2-18 Quotation UML Class Diagram\n\n# Quotation Object Definition\n\n{\n  "quotationReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "quotationStatus": "completed",\n  "requestAmount": "123.45",\n  "requestCurrency": "GBP",\n  "availableDeliveryMethod": "directtoaccount",\n  "chosenDeliveryMethod": "personaldelivery",\n  "originCountry": "GB",\n  "receivingCountry": "IE",\n  "quotes": [\n    {\n      "quoteId": "123456789",\n      "receivingAmount": "123.45",\n      "receivingCurrency": "GBP",\n      "sendingAmount": "123.45",\n      "sendingCurrency": "GBP"\n    }\n  ],\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "recipientBlockingReason": "No supported currency...",\n  "senderBlockingReason": "Not enough funds...",\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "sendingServiceProviderCountry": "GB",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nQUOTATION OBJECT DEFINITION                                                                                                                 \nName                            Type        Description                                                           Reference                 Validation\nquotationReference              string      Unique reference for the quotation as provided by the API      → NA                             \n                                            Provider.                                                      ← M\ncreditParty                     array       A series of key/value pairs that enable the credit party to    → M    Account Identifiers       \n                                            be identified. Keys include MSISDN and Wallet Identifier.      ← M\ndebitParty                      array       A collection of key/value pairs that enable the debit party    → M    Account Identifiers       \n                                            to be identified. Keys include MSISDN and Wallet Identifier.   ← M\ntype                            string      The transaction type that the quotation has been requested     → O                              Enumeration = Transaction Types\n                                            for.                                                           ← O\nsubtype                         string      The transaction sub-type that the quotation has been           → O                              \n                                            requested for.                                                 ← O\nquotationStatus                 string      Indicates the creation state of the quotation.                 → NA                             Enumeration = pending, rejected, completed\n                                                                                                           ← O\nrequestAmount                   string      Requested Quotation amount.                                    → M                              Please refer to API Fundamentals document for amount\n                                                                                                           ← M                              validation rules.\nrequestCurrency                 string      Currency of the requested quotation amount.                    → M                              Enumeration = ISO Currency Codes\n                                                                                                           ← M\navailableDeliveryMethod         string      Delivery Method that is possible for the intended recipient.   → NA                             Enumeration = Delivery Method\n                                                                                                           ← O\nchosenDeliveryMethod            string      The delivery method chosen by the sending end user as the      → O                              Enumeration = Delivery Method\n                                            specific delivery method to be used in the quotes received.    ← O\noriginCountry                   string      The originating country of the quotation request, i.e. the     → O                              \n                                            country where the request was initiated.                       ← O\nreceivingCountry                string      Destination country of the quotation request, i.e. the         → O                              \n                                            country that the sender wishes to send to.                     ← O\nquotes                          array       A collection of quotes. A quote can be received from a         → NA   Quotes                    \n                                            single receiving financial service provider or from multiple   ← O\n                                            providers.\nrecipientKyc                    object      A collection of fields detailing the KYC of the transaction    → O    KYC Information           \n                                            recipient, typically used for International Transfers.         ← O\nsenderKyc                       object      A collection of fields detailing the KYC of the transaction    → O    KYC Information           \n                                            sender, typically used for International Transfers.            ← O\nrecipientBlockingReason         string      The reason for blocking the quotation, based on AML checks     → NA                             \n                                            on the recipient.                                              ← O\nsenderBlockingReason            string      The reason for blocking the quotation, based on AML checks     → NA                             \n                                            on the sender.                                                 ← O\nrequestingOrganisation          object      The originating organisation of the request.                   → NA   Requesting Organisation   \n                                                                                                           ← O\nsendingServiceProviderCountry   string      The country of the sending service provider that holds the     → O                              \n                                            account of the sender.                                         ← O\ncreationDate                    date-time   Date and time when the quotation was created by the API        → NA                             \n                                            Provider.                                                      ← O\nmodificationDate                date-time   Date and time when the quotation was modified by the API       → NA                             \n                                            Provider.                                                      ← O\nrequestDate                     date-time   The date and time of the quotation request as supplied by      → O                              \n                                            the client.                                                    ← O\ncustomData                      string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                            provider specific fields.                                      ← O\nmetadata                        array       A collection of key/value pairs. These can be used to          → O    Metadata                  \n                                            populate additional properties that describe administrative    ← O\n                                            information regarding the quotation.\n\n\n# Supporting Objects\n\n\n# International Transfer Information Object\n\nThe International Transfer Information object contains details that are specific to international money transfers.\n\n{\n  "quotationReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "quoteId": "123456789",\n  "originCountry": "GB",\n  "deliveryMethod": "personaldelivery",\n  "receivingCountry": "IE",\n  "relationshipSender": "Household",\n  "recipientBlockingReason": "ID card is expired...",\n  "senderBlockingReason": "Address must be provided...",\n  "remittancePurpose": "Commission...",\n  "sendingServiceProviderCountry": "GB"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nINTERNATIONAL TRANSFER INFORMATION OBJECT                                                                                              \nName                                        Type     Description                                                           Reference   Validation\nquotationReference                          string   Reference for the quotation that was provided to the sender.   → O                \n                                                     (refer to Quotations API for more information).                ← O\nquoteId                                     string   The specific quote associated with the quotation (refer to     → O                \n                                                     Quotes object for more information).                           ← O\noriginCountry                               string   The originating country of the transaction, i.e. the country   → M                Enumeration = ISO Country Codes.\n                                                     where the transaction was initiated.                           ← M\ndeliveryMethod                              string   The recipient delivery method as chosen by the sender.         → O                Enumeration = Delivery Method Types\n                                                                                                                    ← O\nreceivingCountry                            string   Destination country of the international transfer.             → O                \n                                                                                                                    ← O\nrelationshipSender                          string   Indicates the relationship (if any) between the sender and     → O                \n                                                     the receiver.                                                  ← O\nrecipientBlockingReason                     string   The reason for blocking the transaction, based on AML checks   → NA               \n                                                     on the recipient.                                              ← O\nsenderBlockingReason                        string   The reason for blocking the transaction, based on AML checks   → NA               \n                                                     on the sender.                                                 ← O\nremittancePurpose                           string   field providing a description of the reason for the            → O                \n                                                     international transfer.                                        ← O\nsendingServiceProviderCountry               string   The country of the sending service provider that holds the     → O                \n                                                     account of the sender.                                         ← O\n\n\n# KYC Information Object\n\nKYC refers to ‘Know your Customer’. The KYC object contains a number of fields that enable the identity of the subject to be verified. KYC can be provided with transfers for the sending identity and the receiving identity. There are no mandatory KYC object fields.\n\n{\n  "birthCountry": "GB",\n  "dateOfBirth": "2000-11-20",\n  "contactPhone": "+1234567890",\n  "emailAddress": "example@mail.com",\n  "employerName": "Employer LLC",\n  "gender": "m",\n  "idDocument": [\n    {\n      "idType": "passport",\n      "idNumber": "TEST123456"\n    }\n  ],\n  "nationality": "GB",\n  "postalAddress": {\n    "addressLine1": "33 Brow Rd",\n    "addressLine2": "Unit 200",\n    "addressLine3": "Paddock",\n    "city": "Huddersfield",\n    "stateProvince": "West Yorkshire",\n    "postalCode": "HD1 4TP",\n    "country": "GB"\n  },\n  "occupation": "Manager",\n  "subjectName": {\n    "title": "Mr",\n    "firstName": "John",\n    "middleName": "Alan",\n    "lastName": "Doe",\n    "fullName": "John Alan Doe",\n    "nativeName": "John Doe"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nKYC INFORMATION OBJECT                                                                                                    \nName                     Type     Description                                                        Reference            Validation\nbirthCountry             string   The country of birth of the KYC subject.                    → O                         Enumeration = ISO Country Codes.\n                                                                                              ← O\ndateOfBirth              date     Birth date of the KYC subject.                              → O                         \n                                                                                              ← O\ncontactPhone             string   Contact phone number (mobile or landline) of the KYC        → O                         Must contain between 6 and 15 consecutive digits\n                                  subject.                                                    ← O                         First character can contain a ‘+’ or digit\n                                                                                                                          Can contain spaces.\nemailAddress             string   Email address of the KYC subject.                           → O                         \n                                                                                              ← O\nemployerName             string   Employer name of the KYC subject.                           → O                         \n                                                                                              ← O\ngender                   string   Gender of the KYC Object.                                   → O                         Length=1, Enumeration = (m)ale, (f)emale, (u)nspecified\n                                                                                              ← O\nidDocument               array    An array of fields containing the forms of identification   → O    Id Document Object   \n                                  that are associated with the subject.                       ← O\nnationality              string   Nationality of the KYC subject.                             → NA                        Enumeration = ISO Country Codes\n                                                                                              ← O\npostalAddress            object   A collection of fields that details the postal address of   → O    Address              \n                                  the KYC subject.                                            ← O\noccupation               string   Occupation of the KYC subject.                              → O                         \n                                                                                              ← O\nsubjectName              object   Refers to the name fields for the KYC subject.              → O    Name                 \n                                                                                              ← O\n\n\n# Name Object\n\nThe name object identifies the name details for the subject identity.\n\n{\n  "title": "Mr",\n  "firstName": "John",\n  "middleName": "Alan",\n  "lastName": "Doe",\n  "fullName": "John Alan Doe",\n  "nativeName": "John Doe"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME OBJECT                                                                                             \nName          Type     Description                                                          Reference   Validation\ntitle         string   The given title of the KYC subject, e.g. Mr, Mrs, Dr.          → O               \n                                                                                      ← O\nfirstName     string   First name (also referred to as given name) of the KYC         → O               \n                       subject.                                                       ← O\nmiddleName    string   Middle Name of the KYC subject.                                → O               \n                                                                                      ← O\nlastName      string   Surname (also referred to as last or family name) of the KYC   → O               \n                       subject.                                                       ← O\nfullName      string   The full name of the KYC subject.                              → O               \n                                                                                      ← O\nnativeName    string   The full name expressed as in the native language.             → O               \n                                                                                      ← O\n\n\n# Id Document Object\n\nAs part of KYC information, identification documentation is normally required. The Id Document Object enables documents pertaining to a subject’s identity to be described.\n\n{\n  "idType": "passport",\n  "idNumber": "TEST123456",\n  "issueDate": "2018-11-20",\n  "expiryDate ": "2018-11-20",\n  "issuer": "123456789",\n  "issuerPlace": "London",\n  "issuerCountry": "GB",\n  "otherIdDescription": "Other ID description..."\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nID DOCUMENT OBJECT                                                                                             \nName                 Type     Description                                                          Reference   Validation\nidType               string   Indicates the type of identification for the KYC subject,      → M               Enumeration = ID Types\n                              e.g. passport, driving licence etc..                           ← M\nidNumber             string   Reference pertaining to the type of identification for the     → O               \n                              KYC subject.                                                   ← O\nissueDate            date     Date of issue for the identification document.                 → O               \n                                                                                             ← O\nexpiryDate           date     Date of expiry for the identification document.                → O               \n                                                                                             ← O\nissuer               string   Indicates the organisation/government entity that issued the   → O               \n                              ID document.                                                   ← O\nissuerPlace          string   Place of issue for the identification type.                    → O               \n                                                                                             ← O\nissuerCountry        string   Country where the identification type was issued.              → O               Enumeration = ISO Country Codes\n                                                                                             ← O\notherIdDescription   string   Where an ID Type of ‘otherid’ is specified, a description of   → O               \n                              the type of identification can be provided in this field.      ← O\n\n\n# Address Object\n\nThe address object holds the postal address of the subject. Due to variability of address information in a number of mobile money markets, only the country is mandatory.\n\n{\n  "addressLine1": "33 Brow Rd",\n  "addressLine2": "Unit 200",\n  "addressLine3": "Paddock",\n  "city": "Huddersfield",\n  "stateProvince": "West Yorkshire",\n  "postalCode": "HD1 4TP",\n  "country": "GB"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nADDRESS OBJECT                                                            \nName             Type     Description                         Reference   Validation\naddressLine1     string   First line of the address.    → O               \n                                                        ← O\naddressLine2     string   Second line of the address.   → O               \n                                                        ← O\naddressLine3     string   Third line of the address.    → O               \n                                                        ← O\ncity             string   City/Town.                    → O               \n                                                        ← O\nstateProvince    string   State or Province.            → O               \n                                                        ← O\npostalCode       string   Postal Code.                  → O               \n                                                        ← O\ncountry          string   Country                       → M               Enumeration = ISO Country Codes\n                                                        ← M\n\n\n# Account Identifier Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nACCOUNT IDENTIFIER OBJECT                                                                            \nName                        Type     Description                                         Reference   Validation\nkey                         string   Provides the account identifier type.         → M               Enumeration = Account Identifiers\n                                                                                   ← M\nvalue                       string   Provides the account identifier type value.   → M               \n                                                                                   ← M\n\n\n# Identity Object\n\nThe Identity object defines the information for an identity associated with an account. Between one and twenty identities can be associated with an account.\n\n{\n  "identityId": "12345",\n  "identityType": "individual",\n  "identityStatus": "Completed",\n  "identityKyc": {\n    "dateOfBirth": "2000-11-20",\n    "birthCountry": "GB",\n    "contactPhone": "+1234567890"\n  },\n  "accountRelationship": "accountholder",\n  "kycVerificationStatus": "verified",\n  "kycVerificationEntity": "123456789",\n  "kycLevel": "Regular",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nIDENTITY OBJECT                                                                                                          \nName                    Type      Description                                                          Reference         Validation\nidentityId              string    A unique id for the identity as assigned by the API           → NA                     \n                                  Provider.                                                     ← M\nidentityType            string    Indicates the type of the identity. Currently, only           → NA                     ‘individual’\n                                  ‘individual’ is supported.                                    ← M\nidentityStatus          string    A non-harmonised field describing the status of the           → NA                     \n                                  identity.                                                     ← O\nidentityKyc             object    A collection of fields detailing the KYC held for the         → M    KYC Information   \n                                  identity.                                                     ← M\naccountRelationship     string    Describes the relationship that the identity holds with the   → M                      ‘accountholder’\n                                  account.                                                      ← M\nkycVerificationStatus   string    Indicates the status of the identity’s KYC verification.      → O                      ‘verified’, ‘unverified’, ‘rejected’\n                                                                                                ← O\nkycVerificationEntity   string    Indicates the entity (e.g. mobile money agent) that has       → O                      \n                                  verified the KYC of the identity.                             ← O\nkycLevel                integer   Indicates the KYC level that the identity is associated       → O                      \n                                  with.                                                         ← O\ncustomData              array     A collection of key/value pairs that can be used for          → O                      \n                                  provider specific fields.                                     ← O\n\n\n# Quote Object\n\nQuotations can consist of multiple quotes. The fields for a quote are defined in the object.\n\n{\n  "quoteId": "123456789",\n  "receivingAmount": "123.45",\n  "receivingCurrency": "GBP",\n  "sendingAmount": "123.45",\n  "sendingCurrency": "GBP",\n  "deliveryMethod": "personaldelivery",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "fxRate": "1.0000000000",\n  "quoteExpiryTime": "2017-07-21T17:32:28Z",\n  "receivingServiceProvider": "Receiving FSP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nQUOTE OBJECT                                                                                                               \nName                       Type        Description                                                           Reference     Validation\nquoteId                    string      The unique ID for this quote.                                  → NA                 \n                                                                                                      ← M\nreceivingAmount            string      The total amount as it will be received by the receiving end   → NA                 Please refer to API Fundamentals document for amount\n                                       user.                                                          ← M                  validation rules.\nreceivingCurrency          string      The currency of the quote.                                     → NA                 Enumeration = ISO Currency Codes\n                                                                                                      ← M\nsendingAmount              string      Requested quotation amount as supplied by the sender.          → NA                 Please refer to API Fundamentals document for amount\n                                                                                                      ← M                  validation rules.\nsendingCurrency            string      Currency of the requested quotation amount.                    → NA                 Enumeration = ISO Currency Codes\n                                                                                                      ← M\ndeliveryMethod             string      The delivery method that is applicable to the quotation.       → NA                 Enumeration = Delivery Method\n                                                                                                      ← O\nfees                       array       Returns all fees that are applicable to the quote.             → NA   Fees Object   \n                                                                                                      ← O\nfxRate                     string      The conversion rate applicable between the sending and the     → NA                 Please refer to API Fundamentals document for amount\n                                       receiving currency for the requested transaction.              ← O                  validation rules. Note 10 decimal places supported.\nquoteExpiryTime            date-time   The timestamp when the quote will expire.                      → NA                 \n                                                                                                      ← O\nreceivingServiceProvider   string      The name of the receiving service provider, i.e. the           → NA                 \n                                       provider that the quote is associated with.                    ← O\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nMETADATA OBJECT                                                                              \nName              Type     Description                                           Reference   Validation\nkey               string   Identifies the type of additional fields.       → M               \n                                                                           ← M\nvalue             string   Identifies the value of the additional field.   → M               \n                                                                           ← M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCUSTOM DATA OBJECT                                                                              \nName                 Type     Description                                           Reference   Validation\nkey                  string   Identifies the type of additional fields.       → M               \n                                                                              ← M\nvalue                string   Identifies the value of the additional field.   → M               \n                                                                              ← M\n\n\n# Supplementary Bill Reference Object\n\nThis object enables additional payment references to be specified for a bill payment in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "paymentReferenceType": "paymentReferenceValue"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nSUPPLEMENTARY BILL REFERENCE OBJECT                                                                                          \nName                                  Type     Description                                                       Reference   Validation\npaymentReferenceType                  string   Identifies the type of the additional payment reference.    → M               \n                                                                                                           ← M\npaymentReferenceValue                 string   Identifies the value of the additional payment reference.   → M               \n                                                                                                           ← M\n\n\n# Transaction Type Object\n\nThis object enables multiple transaction types to be specified along with paired sub-types. This object is used where multiple transaction types need to be passed in an API.\n\n{\n  "transactionType": "merchantpay",\n  "transactionSubType": "local",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION TYPE OBJECT                                                                     \nName                      Type     Description                                  Reference   Validation\ntransactionType           string   Identifies the Transaction Type.       → M               Enumeration = Transaction Types\n                                                                          ← M\ntransactionSubType        string   Identifies the Transaction Sub-Type.   → O               \n                                                                          ← O\n\n\n# Channel Type Object\n\nThis object enables multiple channel types to be specified. This object is used where multiple channel types need to be passed in an API.\n\n{\n  "channelType": "ATM"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCHANNEL TYPE OBJECT                                                             \nName                  Type     Description                          Reference   Validation\nchannelType           string   Identifies the Channel Type.   → M               \n                                                              ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nFEES OBJECT                                                                        \nName          Type     Description                                     Reference   Validation\nfeeType       string   Defines the type of fee.                  → M               \n                                                                 ← M\nfeeAmount     string   Defines the amount of the fee.            → M               Please refer to API Fundamentals document for amount\n                                                                 ← M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   → M               Enumeration = ISO Currency Codes\n                                                                 ← M\n\n\n# Commission Object\n\nAn object that enables earned commission that is calculated by the API provider to be returned.\n\n{\n  "commissionType": "surcharge",\n  "commissionAmount": "2",\n  "commissionCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCOMMISSION OBJECT                                                                         \nName                 Type     Description                                     Reference   Validation\ncommissionType       string   Defines the type of commission.           → M               \n                                                                        ← M\ncommissionAmount     string   Defines the amount of the commission.     → M               Please refer to API Fundamentals document for amount\n                                                                        ← M               validation rules.\ncommissionCurrency   string   Defines the currency of the commission.   → M               Enumeration = ISO Currency Codes\n                                                                        ← M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nREQUESTING ORGANISATION OBJECT                                                                                       \nName                                   Type     Description                                              Reference   Validation\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid’\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE           DESCRIPTION\nbillpay        Payment of bill from a business for goods and/or services.\ndeposit        Exchange of cash in return for e-Money at a physical agent\n               or via ATM.\ndisbursement   Disbursement of funds (making payments from an organisation\n               (business, NGO, government entity) to a mobile money\n               recipient.\ntransfer       Transfer of funds between mobile money provider and another\n               provider or financial institution in the same country.\nmerchantpay    Purchases of goods and/or services from shops (payer\n               present) or online (payer not present).\ninttransfer    Transfer of funds to a recipient in another country, either\n               directly to/from a mobile wallet or via an international\n               money transfer provider.\nadjustment     General adjustments to an account via an adjustment\n               transaction (e.g. refunds).\nreversal       Reversal of a prior transaction to return funds to the\n               payer.\nwithdrawal     Exchange of e-Money in return for cash at a physical agent\n               or via ATM.\n\n\n# ID Types\n\nThe ID Types enumeration contains accepted identification types. Due to the wide international variation in accepted types of identification, a catch-all type of ‘otherid’ is included.\n\nID TYPE                DESCRIPTION\npassport               Payment of bill from a business for goods and/or services.\nnationalregistration   National Registration Number.\nothered                Catch-all for IDs not on the list.\ndrivinglicence         Driving Licence Number.\nsocialsecurity         Social Security Number.\nalienregistration      Alien Registration ID.\nnationalidcard         National Identity Card.\nemployer               Employers Identification.\ntaxid                  Tax Identification Number.\nseniorcitizenscard     Senior Citizens ID Card.\nmarriagecertificate    Marriage Certificate.\nbirthcertificate       Birth Certificate.\nhealthcard             Health Card.\nvotersid               Voters Identification.\nvillageelderletter     Letter of confirmation from village elder.\npancard                Credit/debit card number (Primary Account Number).\nofficialletter         Official letter confirming identity.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              >First character can contain a ‘+’ or digit\n                                                              >Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   string   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  string   Provides a reference for a Service Provider.\nstoreid            Store ID                          string   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         string   Name of the bank.\nbankaccounttitle   Bank Account Title                string   The title of the bank account.\nemailaddress       Email Address                     string   emailaddress of the party.\nmandatereference   Debit Mandate Reference           string   A means to identify an account via a debit mandate\n                                                              reference.\n\n\n# ISO Country Codes\n\nThe two-character alphabetic code for country as defined by ISO 3166 is to be used for all fields specifying a country or nationality. The full list of codes is maintained by the International Organisation for Standardisation. The list can be obtained via the following website - http://www.iso.org/iso/country_codes\n\n\n# Delivery Method Types\n\nWhen a customer requests a quotation they are able to specify their preferred method of delivery of the transfer to the recipient. Permitted delivery methods are provided below.\n\nDELIVERY METHOD    DESCRIPTION\ndirecttoaccount    The transfer is to be delivered into the account (wallet) of\n                   the recipient.\nagent              The recipient can visit an agent and get the transferred\n                   funds.\npersonaldelivery   a supplementary service where an authorised person can\n                   deliver the funds, in hand, to the receiving end user.\n\n\n# Frequency Type\n\nWhen requesting a debit mandate, the API client is able to specify the frequency of which the payment should be taken. Valid values are defined in the table below.\n\nFREQUENCY TYPE        DESCRIPTION\nweekly                Payment will be taken weekly.\nfortnight             Payment will be taken every two weeks.\nmonthspecificdate     Payment to be taken on a specific date every month.\ntwomonths             Payment to be taken every two months.\nthreemonths           Payment to be taken every three months.\nfourmonths            Payment to be taken every four months.\nsixmonths             Payment to be taken every six months.\nyearly                Payment to be taken yearly.\nlastdaymonth          Payment to be taken on the last calendar day of the month.\nlastdaymonthworking   Payment to be taken on the last working day of the month\n                      according to working days as per the resident country of the\n                      account.\nlastmonday            Payment to be taken on the last Monday of the month.\nlasttuesday           Payment to be taken on the last Tuesday of the month.\nlastwednesday         Payment to be taken on the last Wednesday of the month.\nlastthursday          Payment to be taken on the last Thursday of the month.\nlastfriday            Payment to be taken on the last Friday of the month.\nlastsaturday          Payment to be taken on the last Saturday of the month.\nlastsunday            Payment to be taken on the last Sunday of the month.\nspecificdaymonthly    Payment to be taken on a specific day of the month.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is an array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\nthe transactions apis are used to support mobile money financial transaction use cases. transactions are used for a wide range of use cases including merchant payments, international transfers, domestic transfers, and agent cash-in/cash-out.\n\nthe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\npost        post                                         to be used for transaction creation when the provider’s api\n            /transactions/type/{transactiontype}         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get                                          to view a transaction.\n            /transactions/{transactionreference}\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction transaction "1" *-- "0..20" metadata transaction "1" *-- "0..2" kyc information transaction "1" *-- "0..1" international transfer information kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name\n\nfigure 2-1 transaction uml class diagram\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                                  \nname                                         type        description                                                           reference                            validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                        \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                         \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                         \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers                  creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                         debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers                  debitparty must be supplied if creditparty is omitted. if\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                         creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                         enumeration = transaction types\n                                                         the url).                                                      ← m                                         note that only reversals and refunds (adjustments) are\n                                                                                                                                                                    supported.\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                         \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                        \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                         please refer to api fundamentals document for amount\n                                                                                                                        ← m                                         validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                         enumeration = iso currency codes.\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                         \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                          \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                         \n                                                         was initiated.                                                 ← o\ninternationaltransferinformation             object      a collection of fields detailing information specifically      → o    international transfer information   \n                                                         used for international transfers.                              ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                         \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrecipientkyc                                 object      a collection of fields detailing the kyc of the transaction    → o    kyc information                      \n                                                         recipient.                                                     ← o\nsenderkyc                                    object      a collection of fields detailing the kyc of the transaction    → o    kyc information                      \n                                                         sender.                                                        ← o\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation              \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                         \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                        \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                        \n                                                         provider.                                                      ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                        \n                                                         provider.                                                      ← o\nrequestdate                                  date-time   the date and time of the transaction request as supplied by    → o                                         \n                                                         the client                                                     ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object                   \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                             \n                                                         populate additional properties that describe administrative    ← o\n                                                         information regarding the transaction.\n\n\n# reversals api\n\nthe reversals api is used to reverse, adjust or refund a financial transaction. the originating transaction reference must be provided in the path in order to identify the transaction to be reversed. for a partial reversal, the amount needs to be supplied. it should be noted that some api providers do not support partial reversals and will return an error if a partial amount is supplied.\n\nfor viewing and updating reversals, the transactions api should be used.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram credit party identifier "0..10" --* "" reversal debit party identifier "0..10" --* "" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\nfigure 2-2 reversal uml class diagram\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nreversal object                                                                                                                                          \nname                                         type        description                                                           reference                 validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                             \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                              \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → na                             \n                                                         transaction which is the subject of the reversal.              ← m\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → o    account identifiers       \n                                                         be identified. keys include msisdn and wallet identifier.      ← o\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → o    account identifiers       \n                                                         to be identified. keys include msisdn and wallet identifier.   ← o\ntype                                         string      the harmonised transaction type.                               → m                              enumeration = transaction types\n                                                                                                                        ← m                              note that only reversals and refunds (adjustments) are\n                                                                                                                                                         supported.\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                              \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                             \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → o                              please refer to api fundamentals document for amount\n                                                                                                                        ← o                              validation rules.\ncurrency                                     string      currency of the transaction amount.                            → o                              enumeration = iso currency codes.\n                                                                                                                        ← o\ndescriptiontext                              string      free format text description of the transaction provided by    → o                              \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object               \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                              \n                                                         was initiated.                                                 ← o\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                              \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                             \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                             \n                                                         provider.                                                      ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                             \n                                                         provider.                                                      ← o\nrequestdate                                  date-time   the date and time of the transaction request as supplied by    → o                              \n                                                         the client                                                     ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                  \n                                                         populate additional properties that describe administrative    ← o\n                                                         information regarding the transaction.\n\n\n# batch transactions\n\nthe mobile money api allows clients to submit, approve and view batches of transactions. the following steps describe an end to end flow for processing batch transactions. two types of processing modes are supported:\n\n * one shot processing without an approver.\n * maker/checker approval, i.e. transactions are not completed until approved via a second api request.\n\nthe individual apis that are referenced in the steps below are fully documented in subsequent sub-sections.\n\n# batch transactions workflow\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../batchtransactions\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchtitle": "batch_test",\n    "batchdescription": "testing a batch",\n    "scheduledstartdate": "2017-07-21t17:32:28z"\n}\n\n\n \n\n\nget .../batchtransactions/place your batch id here/completions\n\n\n \n\n\nget .../batchtransactions/place your batch id here/rejections\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n# one-shot batch processing\n\ncreating a batch\n\n 1. client submits the batch for processing via post /batchtransactions.\n\n 2. the client will return the requeststate object indicating whether a callback will be provided or polling is required.\n\n 3. the api provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. once parsing has completed, the api provider will set the batch status in the batchtransactions object to ‘completed’.\n\nverifying a batch\n\n \n\n 5. the client will be able to retrieve the batch transaction object by invoking get /batchtransactions using the object reference provided by the requeststate object. alternatively, if callback is specified, the client will receive the representation of the batchtransactions object to their nominated url set in the x-callback-url header.\n\nif errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via get /batchtransactions/rejections. successfully completed transactions can be viewed via get /batchtransactions/completions.\n\n# batch processing with maker/checker\n\ncreating a batch\n\n 1. client submits the batch for processing via post /batchtransactions.\n\n 2. the client will return the requeststate object indicating whether a callback will be provided or polling is required.\n\n 3. the api provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. once parsing has completed, the api provider will set the batch status in the batchtransactions object to ‘created’.\n\nverifying a batch\n\n 5. the client will be able to retrieve the batch transaction object by invoking get /batchtransactions using the object reference provided by the requeststate object. alternatively, if callback is specified, the client will receive the representation of the batchtransactions object to their nominated url set in the x-callback-url header.\n\n 6. if errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via get /batchtransactions/rejections.\n\napproving a batch\n\n 7.  a client can approve the batch for posting by issuing a patch /batchtransactions in order to update the status to ‘approved’.\n\n 8.  as per step 2, a requeststate object will be returned indicating whether a callback will be provided or polling is required.\n\n 9.  the api provider will then post the transactions in the batch considering any scheduling considerations.\n\n 10. once posting is completed, the api provider will set the batch status in the batchtransactions object to ‘completed’.\n\n 11. the client will be able to retrieve the batchtransactions object by invoking get /batchtransactions using the object reference provided by the requeststate object. alternatively, if callback is specified, the client will receive the representation of the batchtransactions object to their nominated url set in the x-callback-url header.\n\nthe client will also be able to retrieve a list of successful transaction completions /batchtransactions/completions and transaction failures /batchtransactions/rejections.\n\n\n# batch transactions api\n\nthis api enables clients to submit and approve a batch of transactions. the api allows transactions of multiple types to be included in a single batch. the following paths are permitted:\n\n- submit a batch: post /batchtransactions\n\n- approve a batch: patch /bathtransactions/{batchid}. the batch status needs to be set to ‘approved’.\n\n- view details regarding batch processing: get /batchtransactions/{batchid}\n\n\n\nonly asynchronous mode is supported for the post and patch methods. for the get method, only synchronous mode is supported.\n\nthere is a limit of 999,999 transaction records per batch.\n\n# batch transaction object uml diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction transaction "0.." --* "1" batch transaction transaction "1" *-- "0..20" metadata transaction "1" *-- "0..1" international transfer information kyc information "0..2" --* "1" transaction kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name\n\nfigure 2-3 batch transaction uml class diagram\n\n# batch transaction object definition\n\n{\n  "batchid": "d24651c4-ef6f-4c5c-af0e-468f1dc53624",\n  "batchstatus": "approved",\n  "transactions": [\n    {\n      //transaction 1 object...\n      },\n    {\n      //transaction 2 object...\n    }\n  ]\n  "approvaldate": "2017-07-21t17:32:28z", \n  "completiondate": "2017-07-21t17:32:28z",\n  "batchtitle": "batch title...",\n  "batchdescription": "batch description...",\n  "processingflag": true,\n  "completedcount": 3,\n  "parsingsuccesscount": 2,\n  "rejectioncount": 1,\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "scheduledstartdate": "2017-07-21t17:32:28z",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbatch transaction object                                                                                                               \nname                       type        description                                                           reference                 validation\nbatchid                    string      identifier for the batch that is assigned by the api           → na                             \n                                       provider. this id is used by the client on subsequent get or   ← m\n                                       patch methods.\nbatchstatus                string      indicates the status of the batch.                             → o                              enumeration = created, approved, completed\n                                                                                                      ← m\ntransactions               array       collection of transactions that are to be processed. note      → m    transactions              \n                                       that the representation of each completed transaction can be   ← na\n                                       retrieved via the ‘/completions api.\napprovaldate               date-time   indicates when the batch was approved as recorded by the api   → na                             \n                                       provider.                                                      ← m\ncompletiondate             date-time   indicates when the batch was completed as recorded by the      → na                             \n                                       api provider.                                                  ← m\nbatchtitle                 string      client-provided title for the batch.                           → o                              \n                                                                                                      ← o\nbatchdescription           string      client-provided description of the batch.                      → o                              \n                                                                                                      ← o\nprocessingflag             boolean     indicates whether the batch is currently undergoing            → na                             \n                                       processing by the api provider.                                ← o\ncompletedcount             integer     indicates the number of records that have been successfully    → na                             \n                                       completed.                                                     ← o\nparsingsuccesscount        integer     indicates the number of records that have been parsed          → na                             \n                                       successfully.                                                  ← o\nrejectioncount             integer     indicates the number of records that have been rejected,       → na                             \n                                       either during parsing or during final processing.              ← o\nrequestingorganisation     object      the originating organisation of the request.                   → o    requesting organisation   \n                                                                                                      ← o\nscheduledstartdate         date-time   if the batch has been scheduled, the expected start time is    → o                              \n                                       provided here.                                                 ← o\ncreationdate               date-time   indicates when the batch was created as recorded by the api    → na                             \n                                       provider.                                                      ← o\nmodificationdate           date-time   indicates when the batch was modified as recorded by the api   → na                             \n                                       provider.                                                      ← o\nrequestdate                date-time   the date and time of the batch request as supplied by the      → o                              \n                                       client.                                                        ← o\ncustomdata                 string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                       provider specific fields.                                      ← o\n\n\n# batch rejections api\n\nthis api enables clients to retrieve information on all transactions that have either failed parsing or have failed to complete. only the get method is supported. the path is batchtransactions/{batchid}/rejections.\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# batch rejection uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" batch rejection debit party identifier "1..10" --* "1" batch rejection batch rejection "0..*" --* "1" batch transaction\n\nfigure 2-4 batch rejection uml class diagram\n\n# batch rejection object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "rejectionreason": "some rejection reason...",\n  "rejectiondate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbatch rejection object                                                                                                                               \nname                                         type        description                                                           reference             validation\ntransactionreference                         string      transaction reference as assigned by the api provider.         → na                         \n                                                                                                                        ← o\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → na                         \n                                                         to be associated with the transactions.                        ← o\ncreditparty                                  array       the credit party identifiers for the transaction as specific   → na   account identifiers   \n                                                         in the batch request.                                          ← m\ndebitparty                                   array       the debit party identifiers for the transaction as specific    → na   account identifiers   \n                                                         in the batch request.                                          ← m\nrejectionreason                              string      the reason for the transaction request as indicated by the     → na                         \n                                                         api provider.                                                  ← m\nrejectiondate                                date-time   date and time of the rejection.                                → na                         \n                                                                                                                        ← m\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object    \n                                                         provider specific fields.                                      ← o\n\n\n# batch completions api\n\nthis api lists all transactions that have successfully completed for a given batch. only the get method is supported. the path format is batchtransactions/{batchid}/completions.\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count)\n\n# batch completion uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" batch completion debit party identifier "1..10" --* "1" batch completion batch completion "0..*" --* "1" batch transaction\n\nfigure 2-5 batch completion uml class diagram\n\n# batch completion object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "completiondate": "2017-07-21t17:32:28z",\n  "link": "https://application.com/uuid",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbatch completion object                                                                                                                              \nname                                         type        description                                                           reference             validation\ntransactionreference                         string      transaction reference as assigned by the api provider.         → na                         \n                                                                                                                        ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → na                         \n                                                         to be associated with the transactions.                        ← o\ncreditparty                                  array       the credit party identifiers for the transaction as specific   → na   account identifiers   \n                                                         in the batch request.                                          ← m\ndebitparty                                   array       the debit party identifiers for the transaction as specific    → na   account identifiers   \n                                                         in the batch request.                                          ← m\ncompletiondate                               date-time   date and time indicating when the transaction was completed.   → na                         \n                                                                                                                        ← m\nlink                                         string      provides a url to the transaction resource.                    → na                         \n                                                                                                                        ← m\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object    \n                                                         provider specific fields.                                      ← o\n\n\n# accounts apis\n\nthe accounts apis are used to support a range of account-related operations. types of accounts include mobile wallets, bank accounts, savings accounts, and loan accounts.\n\n# identifying a target account\n\ntwo methods are provided for identifying an account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used: /accounts/{identifiertype}/{identifier}.\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used: /accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3}.\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n# account creation\n\nthe mobile money api allows account creation for customers who are classified as individuals. the creation of a customer account can be triggered by various means including:\n\n * account creation via a mobile money agent.\n\n * automatic account creation upon sim registration.\n\n * app-based self-registration.\n\nregardless of the method of creation, new customers are generally provided with account and transaction limits based upon the level of kyc information they have provided and whether their kyc information has been physically verified.\n\nto create an account, use post /accounts/{identitytype}, supplying ‘individual’ as the identitytype.\n\n# account retrieval\n\naccount details, including associated account identities can be retrieved via the following paths:\n\nget /accounts/{accountidentifiertype}/{identifier} or\n\nget /accounts/{account identifiers}\n\n# account update\n\n# account-level updates\n\nto update information held against an account, use one of the following paths:\n\npatch /accounts/{accountidentifiertype}/{identifier} or\n\npatch /accounts/{account identifiers}\n\n\n\nthe following account fields can be updated:\n\n{\n  "accountstatus": {\n    "op": "replace", \n    "path": "/accountstatus", \n    "value": "string"\n  },\n  "accountsubstatus": {\n    "op": "replace", \n    "path": "/accountsubstatus", \n    "value": "string"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nfield              patch body                                                     description\naccountstatus      "op": "replace", "path": "/accountstatus", "value": "string"   use to modify the status of an account.\naccountsubstatus   "op": "replace", "path": "/accountsubstatus", "value":         use to modify the sub-status of an account.\n                   "string"\n\nfor more information on the above fields please refer to the account object.\n\n# identity-level updates\n\nto update an information held against an identity associated with an account, use one of the following paths:\n\npatch /accounts/{identifiertype}/{identifier}/identities/{identityid} or\n\npatch /accounts/{account identifiers}/identities/{identityid}\n\n\n\nthe following identity fields can be updated:\n\n{\n  "identity.identitystatus": {\n    "op": "replace", \n    "path": "/identitystatus", \n    "value": "string"\n  },\n  "identity.kycverificationstatus": {\n    "op": "replace", \n    "path": "/kycverificationstatus", \n    "value": "string"\n  },\n  "identity.kycverificationentity": {\n    "op": "replace", \n    "path": "/kycverificationentity", \n    "value": "string"\n  },\n  "identity.kyclevel": {\n    "op": "replace", \n    "path": "/kyclevel", \n    "value": "string"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nfield                            patch body                                                    description\nidentity.identitystatus          "op": "replace", "path": "/identitystatus", "value":          use to modify the status of an identity associated with an\n                                 "string"                                                      account.\nidentity.kycverificationstatus   "op": "replace", "path": "/kycverificationstatus", "value":   use to change the kyc verification status of an identity\n                                 "string"                                                      associated with an account.\nidentity.kycverificationentity   "op": "replace", "path": "/kycverificationentity", "value":   use to indicate the entity (e.g. mobile money agent) that\n                                 "string"                                                      performed the verification.\nidentity.kyclevel                "op": "replace", "path": "/kyclevel", "value": “integer”      uuse to modify the kyc level of an identity associated with\n                                                                                               an account.\n\nfor more information on the above fields please refer to the identity object.\n\n# account uml diagram\n\nclassdiagram id document "0..10" --* "1" kyc information address "0..1" --* "1" kyc information name "0..1" --* "1" kyc information kyc information "1" --* "1" identity account identifier "1..10" --* "1" account identity "1..20" --* "1" account fee "1..20" --* "1" account commission "1..20" --* "1" account\n\nfigure 2-6 account creation uml class diagram\n\n# account object definition\n\n{\n  "accountidentifiers": [\n    {\n      "key": "mycustomkey",\n      "value": "mycustomvalue"\n    }\n  ],\n  "identity": [\n    {\n      "identityid": "12345",\n      "identitytype": "individual",\n      "identitykyc": {\n        "dateofbirth": "2000-11-20",\n        "birthcountry": "gb",\n        "contactphone": "+1234567890"\n      },\n      "accountrelationship": "accountholder"\n    }\n  ],\n  "accounttype": "seller",\n  "accountsubstatus": "api",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "commissionearned": {\n    "commissiontype": "transfer",\n    "commissionamount": "2.50",\n    "commissioncurrency": "gbp"\n  },\n  "registeringentity": "my fsp",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naccount object                                                                                                               \nname                 type        description                                                           reference             validation\naccountidentifiers   array       a series of key/value pairs that enable the account to be      → o    account identifiers   \n                                 identified. identifiers are assigned by the api provider       ← m\n                                 during creation.\nidentity             array       an account must be associated with one or more identities.     → m    identity object       \n                                                                                                ← m\naccounttype          string      a non-harmonised field that indicates the type of the          → o                          \n                                 account.                                                       ← o\naccountstatus        string      indicates a simplified representation of the account status.   → na                         \n                                 this will be shown as ‘available’ or ‘unavailable’. a state    ← m\n                                 of ‘unavailable’ means that the account is in a state that\n                                 does not allow posting of transactions.\naccountsubstatus     string      field can be used to return a provider-specific status for     → na                         \n                                 the account.                                                   ← o\ncurrentbalance       string      the current outstanding balance on the account.                → na                         please refer to api fundamentals document for amount\n                                                                                                ← o                          validation rules.\navailablebalance     string      indicates the balance that is able to be debited for an        → na                         please refer to api fundamentals document for amount\n                                 account. this balance is only provided on some api provider    ← o                          validation rules.\n                                 systems.\nreservedbalance      string      indicates the portion of the balance that is reserved, i.e.    → na                         please refer to api fundamentals document for amount\n                                 intended to be debited. this balance is only provided on       ← o                          validation rules.\n                                 some api provider systems.\nunclearedbalance     string      indicates the sum of uncleared funds in an account, i.e.       → na                         please refer to api fundamentals document for amount\n                                 those that are awaiting a credit confirmation.                 ← o                          validation rules.\ncurrency             string      currency of the account.                                       → na                         enumeration = iso currency codes\n                                                                                                ← o\ncustomdata           string      a collection of key/value pairs that can be used for           → o    custom data object    \n                                 provider specific fields.                                      ← o\nfees                 string      returns all fees related to the creation of the account.       → o    fees object           \n                                                                                                ← o\ncommissionearned     string      returns all commission earned by the registering entity for    → na   commission object     \n                                 the creation of the account.                                   ← o\nregisteringentity    string      the entity that registered the account, for example, a         → o                          \n                                 mobile money agent.                                            ← o\ncreationdate         date-time   indicates when the account was created as recorded by the      → na                         \n                                 api provider.                                                  ← o\nmodificationdate     date-time   indicates when the account was modified as recorded by the     → na                         \n                                 api provider.                                                  ← o\nrequestdate          date-time   the date and time of the account request as supplied by the    → o                          \n                                 client.                                                        ← o\n\n# retrieving transactions for an account\n\nit is possible to return a range of transactions for an account as per the following paths:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions.\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum creationdate for which records should\n                                          be returned.\ntodatetime          string    date-time   indicates the maximum creationdate for which records should\n                                          be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram id document "0..10" --* "1" kyc information address "0..1" --* "1" kyc information name "0..1" --* "1" kyc information credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction kyc information "0..2" --* "1" transaction metadata "0..20" --* "1" transaction international transferinformation "0..1" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2-7 account transaction uml class diagram\n\n# accounts status api\n\nthe accounts status api returns a harmonised status of the account. the status enables the client to determine whether transactions can be subsequently posted against the account. permitted paths are get /accounts/{identifiertype}/{identifier}/status’ or get /accounts/{account identifiers}/status.\n\n# account status uml class diagram\n\nclassdiagram account status "1" --* "1" account\n\nfigure 2-8 account status uml class diagram\n\n# account status object definition\n\n{\n  "accountstatus": "available",\n  "substatus": "approved",\n  "lei": "22210053of4f2mykuv22"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naccount status object                                                                                              \nname                    type     description                                                           reference   validation\naccountstatus           string   indicates a simplified representation of the account status.   → na               enumeration = available, unavailable, unregistered\n                                 this will be shown as ‘available’ or ‘unavailable’. a state    ← m\n                                 of ‘unavailable’ means that the account is in a state that\n                                 does not allow posting of transactions. unregistered\n                                 indicates that although not available, a transaction posted\n                                 with the account identifier(s) will result in an\n                                 unregistered voucher creation.\nsubstatus               string   field can be used to return a provider-specific status for     → na               \n                                 the account.                                                   ← o\nlei                     string   indicates the legal entity identifier of the organisation      → na               refer to lei format as defined here:\n                                 holding the account.                                           ← o                https://www.leiroc.org/lei.htm\n\n# account balances api\n\nthis api defines specific fields for returning balances associated with an account. permitted paths are get /accounts/{identifiertype}/{identifier}/balance or get /accounts/{account identifiers}/balance.\n\na ‘self’ version is also available where the calling api client is the account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram account balance "1" --* "1" account\n\nfigure 2-9 account balance uml class diagram\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbalance object                                                                                                \nname               type     description                                                           reference   validation\naccountstatus      string   indicates a harmonises representation of the account state.    → na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    ← o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                → na               please refer to api fundamentals document for amount\n                                                                                           ← o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        → na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    ← o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    → na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       ← o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       → na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← o                validation rules.\ncurrency           string   currency for all returned balances.                            → na               enumeration = iso currency codes\n                                                                                           ← o\n\n# account holder name api\n\nthis api defines specific fields for returning account holder name information associated with an account. permitted paths are get /accounts/{identifiertype}/{identifier}/accountname or get /accounts/{account identifiers}/accountname.\n\n# account holder name uml class diagram\n\nclassdiagram account holder name "1" --* "1" account\n\nfigure 2-10 account holder name uml class diagram\n\n# account holder name object definition\n\n{\n  "name": {\n    "title": "mr",\n    "firstname": "john",\n    "middlename": "alan",\n    "lastname": "doe",\n    "fullname": "john alan doe",\n    "nativename": "john doe"\n  },\n  "lei": "22210053of4f2mykuv22"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naccount holder name object                                                                                              \nname                         type        description                                                        reference   validation\nname                         reference   a collection of fields detailing the name of the primary    → na   name        \n                                         account holder.                                             ← o\nlei                          string      indicates the legal entity identifier of the organisation   → na               refer to lei format as defined here:\n                                         holding the account.                                        ← o                https://www.leiroc.org/lei.htm\n\n# account statement entries api\n\nthe account statement entries api enables a generic representation of transactions to be returned so that they can be displayed in an account statement for the account holder. to return statement entries, an account or a transaction reference must be specified. the supported paths are as follows:\n\nto return a specific statement entry:\n\n- get /statemententries/{transactionreference}\n\nto return a range of statement entries:\n\n- get /accounts/{ identifiertype}/{identifier}statemententries or /accounts/{account identifiers}/statemententries.\n\n\n\nto filter the number of records returned, the following query string parameters can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "displaytype": "list"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum creationdate for which records should\n                                          be returned.\ntodatetime          string    date-time   indicates the maximum creationdate for which records should\n                                          be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ndisplaytype         string    n/a         indicates the display type of the transactions to be\n                                          returned.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the statement entries are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account statement entry uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" statement entry debit party identifier "1..10" --* "1" statement entry classdiagram credit party identifier "1..10" --* "1" statement entry debit party identifier "1..10" --* "1" statement entry statement entry "0..*" --* "2" account\n\nfigure 2-11 statement entry uml class diagram\n\n# account statement entry object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "my transaction description.",\n  "displaytype": "list",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naccount statement entry object                                                                                                          \nname                             type        description                                                          reference             validation\ntransactionreference             string      unique reference for the transaction. this is returned in     → na                         \n                                             the response by api provider.                                 ← m\ncreditparty                      array       a series of key/value pairs that identify the credit party.   → na   account identifiers   \n                                             keys include msisdn and wallet identifier.                    ← m\ndebitparty                       array       a collection of key/value pairs that identify the debit.      → na   account identifiers   \n                                             keys include msisdn and wallet identifier.                    ← m\ntransactionstatus                string      indicates the status of the transaction as represented by     → na                         \n                                             the api provider.                                             ← m\namount                           string      amount of the transaction.                                    → na                         please refer to api fundamentals document for amount\n                                                                                                           ← m                          validation rules.\ncurrency                         string      currency of the transaction.                                  → na                         enumeration = iso currency codes\n                                                                                                           ← m\ndescriptiontext                  string      free format text description of the transaction provided by   → na                         \n                                             the client. this can be provided as a reference for the       ← o\n                                             receiver on a notification sms and on an account statement.\ndisplaytype                      string      the transaction type that is to be used for presentation to   → na                         \n                                             the account holder as determined by the api provider. this    ← o\n                                             is not necessarily the actual transaction type.\ntransactionreceipt               string      transaction receipt number as notified to the parties. this   → na                         \n                                             may differ from the transaction reference.                    ← o\ncreationdate                     date-time   date and time when the transaction was created by the api     → na                         \n                                             provider.                                                     ← o\nmodificationdate                 date-time   date and time when the transaction modified by the api        → na                         \n                                             provider.                                                     ← o\nrequestdate                      date-time   the date and time of the transaction request as supplied by   → na                         \n                                             the client.                                                   ← o\ncustomdata                       string      a collection of key/value pairs that can be used for          → o    custom data object    \n                                             provider specific fields.                                     ← o\n\n\n# bills api\n\nthe bills api are used to return all outstanding bills associated with an account. the main purpose of the api is to support bill presentment, i.e. presenting all applicable bills for a payer to view and select for payment. to pay a bill, the bill payments api is used. permitted paths are get /accounts/{identifiertype}/{identifier}/bills or get /accounts/{account identifiers}/bills.\n\nto filter the number of records returned, the following query string parameters can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the bills are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# bill uml class diagram\n\nclassdiagram metadata "0..20" --* "1" bill bill "0..*" --* "1" account\n\nfigure 2-12 bill uml class diagram\n\n# bill object definition\n\n{\n  "billreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "billstatus": "partialpaid",\n  "amountdue": "123.45",\n  "billdescription": "my custom description...",\n  "currency": "gbp",\n  "duedate": "2018-11-20",\n  "minimumamountdue": "23.45",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbill object                                                                                                              \nname               type        description                                                          reference            validation\nbillreference      string      reference number for the bill that the payer can use when     → na                        \n                               making a payment.                                             ← o\nbillstatus         string      identifies the status of the bill.                            → na                        ‘paid’, ‘unpaid’, ‘partialpaid’\n                                                                                             ← o\namountdue          string      amount outstanding on the bill to be paid.                    → na                        please refer to api fundamentals document for amount\n                                                                                             ← o                         validation rules.\nbilldescription    string      description of the bill that is to be paid.                   → na                        \n                                                                                             ← o\ncurrency           string      currency of the bill to be paid.                              → na                        enumeration = iso currency codes\n                                                                                             ← o\nduedate            date        date on which the bill is due to be paid.                     → na                        \n                                                                                             ← o\nminimumamountdue   string      the minimum amount that is outstanding on the bill to be      → na                        please refer to api fundamentals document for amount\n                               paid.                                                         ← o                         validation rules.\ncreationdate       date-time   indicates when the bill was created by the api provider.      → na                        \n                                                                                             ← o\nmodificationdate   date-time   indicates when the bill was modified by the api provider.     → na                        \n                                                                                             ← o\ncustomdata         string      a collection of key/value pairs that can be used for          → o    custom data object   \n                               provider specific fields.                                     ← o\nmetadata           array       a collection of key/value pairs. these can be used to         → na   metadata             \n                               populate additional properties that describe administrative   ← o\n                               information regarding the bill.\n\n\n# bill payments api\n\nthe bill payments apis are used to pay a specific bill associated with an account held with a service provider. bill payments can also be retrieved. permitted paths are:\n\npath                                                                     usage\n/accounts/{identifiertype}/{identifier}/bills/{billreference}/payments   use when a single identifier suffices to identify the bill\n                                                                         account.\n/accounts/{account                                                       use when two or three identifiers are required to identify\nidentifiers}/bills/{billreference}/payments                              an account.\n/bills/{billreference}/payments                                          use when a bill payment is not associated with a service\n                                                                         provider account.\n/accounts/{identifiertype}/{identifier}/bills/payments or                use when a bill does not have a bill reference\n/accounts/{account identifiers}/bills/payments\n\nas per mm api standards, post is used to create a bill payment whereas get is used to retrieve all payments associated with a bill.\n\nwhen retrieving bill payments, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the bill payments are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# bill payment uml class diagram\n\nclassdiagram supplementary bill reference "0..20" --* "1" bill payment metadata "0..20" --* "1" bill payment classdiagram supplementary bill reference "0..20" --* "1" bill payment metadata "0..20" --* "1" bill payment bill payment "0..*" --* "1" account\n\nfigure 2-13 bill payment uml class diagram\n\n# bill payment object definition\n\n{\n  "serviceproviderpaymentreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "paymenttype": "fullpayment",\n  "billpaymentstatus": "approved",\n  "amountpaid": "123.45",\n  "currency": "gbp",\n  "customerreference": "customer reference text...",\n  "requestingorganisation": "creditfsp",\n  "supplementarybillreferencedetails": [\n    {\n      "paymentreferencetype": "paymentreferencevalue"\n    }\n  ],\n  "serviceprovidercomment": "this is sp comment...",\n  "serviceprovidernotification": "this is sp notification...",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbill payment object                                                                                                                                 \nname                                         type        description                                                           reference            validation\nserviceproviderpaymentreference              string      reference for the payment generated by the service provider.   → o                         \n                                                                                                                        ← o\nrequestingorganisationtransactionreference   string      the mobile money provider’s (or financial institution’s)       → o                         \n                                                         transaction reference used to debit the customer and credit    ← o\n                                                         the service provider.\npaymenttype                                  string      describes the type of bill payment, i.e. whether a full or     → o                         enumeration = ‘fullpayment’, ‘partialpayment’\n                                                         partial payment.                                               ← o\nbillpaymentstatus                            string      indicates the status of the bill payment as stored by the      → na                        \n                                                         api provider.                                                  ← m\namountpaid                                   string      amount that is being paid.                                     → m                         please refer to api fundamentals document for amount\n                                                                                                                        ← m                         validation rules.\ncurrency                                     string      currency of the amount that is being paid.                     → m                         enumeration = iso currency codes\n                                                                                                                        ← m\ncustomerreference                            string      textual reference provided by the customer paying the bill.    → o                         \n                                                                                                                        ← o\nrequestingorganisation                       string      the originating mobile money provider or financial             → o                         \n                                                         institution that holds the wallet/account of the payer.        ← o\nsupplementarybillreferencedetails            array       in some cases, a single reference is not sufficient to         → c    bill references      not applicable if billreference is no passed in the path.\n                                                         identify a bill. this key-value collection enables further     ← c\n                                                         reference information to be supplied.\nserviceprovidercomment                       string      allows the service provider to include specific information    → na                        \n                                                         regarding the bill payment.                                    ← o\nserviceprovidernotification                  string      allows the service provider to include specific information    → na                        \n                                                         that will be included on the notification to the customer by   ← o\n                                                         the mobile money provider.\ncreationdate                                 date-time   indicates when the bill payment was created as recorded by     → na                        \n                                                         the api provider.                                              ← o\nmodificationdate                             date-time   indicates when the bill payment was modified as recorded by    → na                        \n                                                         the api provider.                                              ← o\nrequestdate                                  date-time   the date and time of the bill payment request as supplied by   → o                         \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object   \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata             \n                                                         populate additional properties that describe administrative    ← o\n                                                         information regarding the bill payment.\n\n\n# bill companies api\n\nthe bill companies apis are used to return a list of service providers that accept bill payments. permitted paths are as per below:\n\n * bill companies irrespective of account:\n   \n   * use get /billcompanies to return a list of all bill payment service providers.\n   \n   * use get /billcompanies/{serviceprovider} to return a specific bill payment service provider.\n\n * bill companies for a given account:\n   \n   * get /accounts/{identifiertype}/{identifier}/billcompanies or get /accounts/{account identifiers}/billcompanies.\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter   type      format   description\nlimit       integer   n/a      supports pagination. if this is not supplied, then the\n                               server will apply a limit of 50 records returned for each\n                               request.\noffset      integer   n/a      supports pagination. this value will indicate the cursor\n                               position from where to retrieve the set of records. for\n                               example, a limit of 50 and offset of 10 will return records\n                               11 to 60.\n\ntip\n\nnote: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# bill company uml class diagram\n\nclassdiagram supplementary service provider details "0..20" --* "1" bill company classdiagram supplementary service provider details "0..20" --* "1" bill company bill company "0..*" --* "1" account\n\nfigure 2-14 bill company uml class diagram\n\n# bill company object definition\n\n{\n  "serviceprovider": "987654321",\n  "serviceprovidertype": "seller",\n  "serviceprovidersubtype": "merchant",\n  "companyname": "merchant seller llc",\n  "supplementaryserviceproviderdetails": [\n    {\n      "paymentreferencetype": "paymentreferencevalue"\n    }\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbill companies object                                                                                                                                       \nname                                  type     description                                                         reference                                validation\nserviceprovider                       string   service provider reference code.                             → na                                            \n                                                                                                            ← m\nserviceprovidertype                   string   type of service provider that accepts payments.              → na                                            \n                                                                                                            ← o\nserviceprovidersubtype                string   sub-type of service provider.                                → na                                            \n                                                                                                            ← o\ncompanyname                           string   display name for the service provider.                       → na                                            \n                                                                                                            ← m\nsupplementaryserviceproviderdetails   array    in some cases, further information for a service provider    → na   supplementary service provider details   \n                                               can be returned. this key-value collection enables further   ← o\n                                               information to be supplied.\n\n\n# debit mandates api\n\nthe debit mandates apis allow a mobile money customer to provide prior approval for payments to be taken from their account by a requesting payee. if the amount limit field is not supplied, the payee will be able to take any amount. mandates can be open-ended or can be constrained by a quantified number of payments for a given frequency.\n\nmandates can be created, viewed, and modified. the request to create a debit mandate will be typically initiated by the service provider (payee) but can also be requested by the customer (payer).\n\nthe permitted paths are as follows. note that the payer account is identified in the path whereas the payee account is identified in the request body.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/2000/debitmandates\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n   "payee": [\n    {\n      "key": "accountid",\n      "value": "2999"\n    }\n  ],\n    "requestdate": "2017-07-21t17:32:28z",\n    "startdate": "2018-11-20",\n    "currency": "gbp",\n    "amountlimit": "1000.00",\n    "enddate": "2018-11-20",\n    "numberofpayments": "2",\n    "frequencytype": "sixmonths",\n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]        \n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n * creation: post /accounts/{identifiertype}/{identifier}/debitmandates or post /accounts/{account identifiers}/debitmandates.\n\n * update: in order to update a debit mandate, a http patch is used. format is: patch /accounts/{identifiertype}/{identifier}/debitmandates/{mandatereference} or patch /accounts/{account identifiers}/debitmandates/{mandatereference}\n\n * read. get /accounts/{identifiertype}/{identifier}/debitmandates/{mandatereference} or get /accounts/{account identifiers}/debitmandates/{mandatereference}.\n\nsynchronous and asynchronous modes are supported for the post and patch methods whereas only synchronous mode is supported for the get method.\n\nthe following fields are modifiable: mandatestatus, startdate, enddate, frequencytype, numberofpayments.\n\n# debit mandate uml class diagram\n\nclassdiagram payee identifiers "0..10" --* "1" debit mandate payer identifiers "0..10" --* "1" debit mandate debit mandate "0..*" --* "1" account\n\nfigure 2-15 debit mandate uml class diagram\n\n# debit mandate object definition\n\n{\n  "mandatereference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "payee": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "mandatestatus": "active",\n  "startdate": "2018-11-20",\n  "amountlimit": "123.45",\n  "currency": "gbp",\n  "enddate": "2018-11-20",\n  "frequencytype": "weekly",\n  "numberofpayments": 50,\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ndebit mandate object                                                                                                                 \nname                     type        description                                                           reference                 validation\nmandatereference         string      unique reference provided by the api provider for the debit    → na                             \n                                     mandate.                                                       ← m\npayee                    array       a series of key/value pairs that enable the payee to be        → o    account identifiers       \n                                     identified. keys include msisdn and wallet identifier.         ← o\nmandatestatus            string      indicates the status of the debit mandate as held in the api   → o                              enumeration = active, inactive\n                                     provider system.                                               ← o\nstartdate                date        date on which the mandate starts. if a frequencytype is        → m                              \n                                     specified, this will also be the date on which the first       ← m\n                                     payment is to be taken.\namountlimit              string      the maximum amount that can be taken by the payee on a         → o                              please refer to api fundamentals document for amount\n                                     payment request.                                               ← o                              validation rules.\ncurrency                 string      currency of the amount limit.                                  → o                              enumeration = iso currency codes\n                                                                                                    ← o\nenddate                  date        date on which the debit mandate ends.                          → o                              \n                                                                                                    ← o\nfrequencytype            string      indicates the frequency for which payments will be taken       → o                              enumeration = frequency\n                                     from the payers account.                                       ← o\nnumberofpayments         number      indicates the number of consecutive payments that are to be    → o                              \n                                     taken.                                                         ← o\nrequestingorganisation   object      the originating organisation of the request.                   → o    requesting organisation   \n                                                                                                    ← o\ncreationdate             date-time   date and time when the debit mandate was created by the api    → na                             \n                                     provider.                                                      ← o\nmodificationdate         date-time   date and time when the debit mandate was modified by the api   → na                             \n                                     provider.                                                      ← o\nrequestdate              date-time   the date and time of the debit mandate request as supplied     → o                              \n                                     by the client.                                                 ← o\ncustomdata               string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                     provider specific fields.                                      ← o\n\n\n# links api\n\nthe links apis are used to establish a link between two separate accounts on the client and provider systems. the api can be used for example to link a mobile wallet account to a microfinance institution account or a bank account. the link object does not mandate the processes to verify and authenticate a link request - this depends upon the use case. a link needs to be associated with a mode of operation:\n\n * pull. the link can be used by the client to debit the target account held by the provider.\n\n * push. the link can be used by the client to credit the target account held by the provider.\n\n * both. the link can be used for push and pull requests.\n\nto identify the accounts that are to be linked, the target account is specified in the path whereas the source account is specified in the link object.\n\nthe permitted paths are as follows:\n\n * creation: post /accounts/{identifiertype}/{identifier}/links or post /accounts/{ account identifiers}/links.\n\n * update of status and/or mode fields: patch /accounts/{identifiertype}/{identifier}/links/{linkreference} or patch /accounts/{account identifiers}/links/{linkreference}.\n\n * read. get /accounts/{identifiertype}/{identifier}/links/{linkreference} or get /accounts/{account identifiers}/links/{linkreference}.\n\nsynchronous and asynchronous modes are supported for post and patch methods whereas only synchronous mode is supported for the get method.\n\n# link uml class diagram\n\nclassdiagram source account identifier "1..10" --* "1" link link "0..*" --* "1" account\n\nfigure 2-16 link uml class diagram\n\n# link object definition\n\n{\n  "linkreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "sourceaccountidentifiers": [\n    {\n      "key":"msisdn",\n      "value":"+1234567890"\n    }\n  ],\n  "mode": "both",\n  "status": "inactive",\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nlink object                                                                                                                           \nname                       type        description                                                          reference                 validation\nlinkreference              string      indicates the link reference. this enables a linked account   → na                             \n                                       to be uniquely identified.                                    ← m\nsourceaccountidentifiers   array       a series of key/value pairs that identify the source          → m    account identifiers       \n                                       account. keys include msisdn and wallet identifier.           ← m\nmode                       string      indicates the mode of operation for the link.                 → m                              enumeration = push, pull, both\n                                                                                                     ← m\nstatus                     string      indicates the status of the link.                             → m                              enumeration = active, inactive\n                                                                                                     ← m\nrequestingorganisation     object      the originating organisation of the request.                  → o    requesting organisation   \n                                                                                                     ← o\ncreationdate               date-time   indicates when the link was created as recorded by the api    → na                             \n                                       provider.                                                     ← o\nmodificationdate           date-time   indicates when the link was modified as recorded by the api   → na                             \n                                       provider.                                                     ← o\nrequestdate                date-time   the date and time of the link request as supplied by the      → o                              \n                                       client.                                                       ← o\ncustomdata                 string      contains provider specific fields.                            → o    custom data object        \n                                                                                                     ← o\n\n\n# authorisation codes api\n\nthe authorisation codes apis allow a payer to generate a payment code which when presented to the payee, can be redeemed for an amount associated with the code.\n\nauthorisation codes can be set to expire. note that expiry time can be specified via the api, however the mobile money provider may mandate a common expiry period for all codes.\n\nauthorisation codes are used widely in the industry across a range of use cases, including:\n\n * atm codes for card-less withdrawals. a code is generated in advance by the customer and entered into the atm to facilitate the withdrawal.\n\n * pre-authorised codes for agent withdrawals. a code is generated in advance by the customer and given to the agent to facilitate the withdrawal.\n\n * pre-authorised codes for merchant payments. the customer generates a code which can be redeemed at a merchant.\n\nonce an authorisation code has been generated, it can be presented through multiple means, including encoding into a qr code. typically, an authorisation code will expire.\n\nthe following paths are permitted:\n\n * generate an authorisation code. post /accounts/{identifiertype}/{identifier}/authorisationcodes or post /accounts/{account identifiers}/authorisationcodes\n\n * cancel an authorisation code (codestate = ‘cancelled’). patch /accounts/{identifiertype}/{identifier}/authorisationcodes/{authorisationcode} or patch /accounts/{account identifiers}/authorisationcodes/{authorisationcode}.\n\n * view an authorisation code for a given account. get /accounts/{identifiertype}/{identifier}/authorisationcodes/{authorisationcode} or get /accounts/{requestor account identifiers}/authorisationcodes/{authorisationcode}.\n\n * view all authorisation codes for a given account. get /accounts/{identifiertype}/{identifier}/authorisationcodes or get /accounts/{requestor account identifiers}/authorisationcodes.\n\nwhen retrieving authorisation codes, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "codestate": "active"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\ncodestate      string    string      allows filtering on the state of the authorisation code.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the authorisation codes are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\nsynchronous and asynchronous modes are supported for the post and patch methods whereas only synchronous mode is supported for the get method.\n\n# authorisation code uml class diagram\n\nclassdiagram redemption account identifier "0..10" --* "1" authorisation code metadata "0..20" --* "1" authorisation code redemption channel "0..50" --* "1" authorisation code redemption transaction type "0..50" --* "1" authorisation code authorisation code "0..*" --* "1" account\n\nfigure 2-17 authorisation code uml class diagram\n\n# authorisation code object definition\n\n{\n  "authorisationcode": "12345",\n  "codestate": "expired",\n  "amount": "123.45",\n  "currency": "gbp",\n  "amounttype": "exact",\n  "codelifetime": 30000,\n  "holdfundsindicator": true,\n  "redemptionaccountidentifiers": [\n    {\n      "key":"msisdn",\n      "value":"+1234567890"\n    }\n  ],\n  "redemptionchannels": "atm",\n  "redemptiontransactiontypes": {\n    "transactionstatus": "completed",\n    "transactiontype": "merchantpay"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nauthorisation codes object                                                                                                                  \nname                           type        description                                                           reference                  validation\nauthorisationcode              string      the code that will be presented to the other party for         → na                              \n                                           redemption.                                                    ← m\ncodestate                      string      indicates the state of the authorisation code                  → na                              enumeration = ‘active’, ‘expired’, ‘cancelled’\n                                                                                                          ← m\namount                         string      indicates the amount associated with the authorisation code.   → o                               please refer to api fundamentals document for amount\n                                           typically, this is set by the client.                          ← o                               validation rules.\ncurrency                       string      indicates the amount currency. must be supplied when an        → o                               enumeration = iso currency codes\n                                           amount is supplied.                                            ← o\namounttype                     string      the amount for the authorisation can be an exact amount or     → o                               enumeration = ‘exact’, ‘maximum’\n                                           can be a maximum amount, i.e. redemption up to but not         ← o\n                                           higher than the amount specified.\ncodelifetime                   integer     indicates the expiry time in seconds of the code. depending    → o                               if supplied, then must be 1 second or greater.\n                                           upon the use case, this can be set by the client or server.    ← o\nholdfundsindicator             boolean     indicates whether funds should be reserved against the         → o                               \n                                           payer’s account where the payer is the requestor.              ← o\nredemptionaccountidentifiers   array       a series of key/value pairs that identify the account where    → o    account identifiers        \n                                           the code must be redeemed. only needed if the redemption       ← o\n                                           account needs to be explicitly stated.\nredemptionchannels             string      indicates the channel(s) that the code can be redeemed         → o    channel types object       \n                                           against, e.g. atm, merchant, etc..                             ← o\nredemptiontransactiontypes     string      indicates the transaction types(s) that the code can be        → o    transaction types object   \n                                           redeemed against.                                              ← o\nrequestingorganisation         object      the originating organisation of the request.                   → o    requesting organisation    \n                                                                                                          ← o\ncreationdate                   date-time   indicates when the link was created as recorded by the api     → na                              \n                                           provider.                                                      ← o\nmodificationdate               date-time   indicates when the link was modified as recorded by the api    → na                              \n                                           provider.                                                      ← o\nrequestdate                    date-time   the date and time of the request as provided by the client.    → o                               \n                                                                                                          ← o\ncustomdata                     string      a collection of key/value pairs that can be used for           → o    custom data object         \n                                           provider specific fields.                                      ← o\nmetadata                       array       a collection of key/value pairs. these can be used to          → o    metadata                   \n                                           populate additional properties that describe administrative    ← o\n                                           information regarding the authorisation code\n\n\n# quotations api\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../quotations\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestamount": "75.30",\n    "requestcurrency": "rwf",\n  "requestdate": "2017-07-21t17:32:28z",\n    "type": "inttransfer",\n    "subtype": "abc",\n    "chosendeliverymethod": "agent",\n    "senderkyc": {\n        "nationality": "gb",\n        "dateofbirth": "2000-11-20",\n        "occupation": "manager",\n        "employername": "mfx",\n        "contactphone": "+447125588999",\n        "gender": "m",\n        "emailaddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthcountry": "gb",\n        "iddocument": [\n            {\n                "idtype": "nationalidcard",\n                "idnumber": "1234567",\n                "issuedate": "2018-11-20",\n                "expirydate": "2018-11-20",\n                "issuer": "ukpa",\n                "issuerplace": "gb",\n                "issuercountry": "gb",\n                "otheriddescription": "test"\n            }\n        ],\n        "postaladdress": {\n            "country": "gb",\n            "addressline1": "111 abc street",\n            "city": "new york",\n            "stateprovince": "new york",\n            "postalcode": "abcd"\n        },\n        "subjectname": {\n            "title": "mr",\n            "firstname": "luke",\n            "middlename": "r",\n            "lastname": "skywalker",\n            "fullname": "luke r skywalker",\n            "nativename": "abc"\n        }        \n    },    \n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],    \n  "sendingserviceprovidercountry": "ad",\n  "origincountry": "ad",\n  "receivingcountry": "ad"\n}\n\n\n \n\n\nget .../quotations/dd82cc6a-159a-4ddf-bea7-23bae38e72c5\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nthe quotations apis are used to obtain one or multiple quotes for a mobile money customer that wishes to transfer money. the creation of a quote involves returning any fees that will be levied on the sending customer and if the request is international, the forex rate. a request is made for a quotation by the requesting service provider in response to a customer request. the quotation is calculated and returned. if the customer is satisfied with the quotation, then they can confirm and proceed with a transaction request using the /transactions api.\n\nthe following paths are permitted:\n\n * creation of a quotation: post /quotations\n\n * view a quotation: get /quotations/{quotation reference}\n\n# quotation uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" quotation debit party identifier "1..10" --* "1" quotation metadata "0..20" --* "1" quotation quotation "1" *-- "0..2" kyc information quotation "1" *-- "0..1" quote kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name quote "1" *-- "0..20" fee\n\nfigure 2-18 quotation uml class diagram\n\n# quotation object definition\n\n{\n  "quotationreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "quotationstatus": "completed",\n  "requestamount": "123.45",\n  "requestcurrency": "gbp",\n  "availabledeliverymethod": "directtoaccount",\n  "chosendeliverymethod": "personaldelivery",\n  "origincountry": "gb",\n  "receivingcountry": "ie",\n  "quotes": [\n    {\n      "quoteid": "123456789",\n      "receivingamount": "123.45",\n      "receivingcurrency": "gbp",\n      "sendingamount": "123.45",\n      "sendingcurrency": "gbp"\n    }\n  ],\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "recipientblockingreason": "no supported currency...",\n  "senderblockingreason": "not enough funds...",\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "sendingserviceprovidercountry": "gb",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nquotation object definition                                                                                                                 \nname                            type        description                                                           reference                 validation\nquotationreference              string      unique reference for the quotation as provided by the api      → na                             \n                                            provider.                                                      ← m\ncreditparty                     array       a series of key/value pairs that enable the credit party to    → m    account identifiers       \n                                            be identified. keys include msisdn and wallet identifier.      ← m\ndebitparty                      array       a collection of key/value pairs that enable the debit party    → m    account identifiers       \n                                            to be identified. keys include msisdn and wallet identifier.   ← m\ntype                            string      the transaction type that the quotation has been requested     → o                              enumeration = transaction types\n                                            for.                                                           ← o\nsubtype                         string      the transaction sub-type that the quotation has been           → o                              \n                                            requested for.                                                 ← o\nquotationstatus                 string      indicates the creation state of the quotation.                 → na                             enumeration = pending, rejected, completed\n                                                                                                           ← o\nrequestamount                   string      requested quotation amount.                                    → m                              please refer to api fundamentals document for amount\n                                                                                                           ← m                              validation rules.\nrequestcurrency                 string      currency of the requested quotation amount.                    → m                              enumeration = iso currency codes\n                                                                                                           ← m\navailabledeliverymethod         string      delivery method that is possible for the intended recipient.   → na                             enumeration = delivery method\n                                                                                                           ← o\nchosendeliverymethod            string      the delivery method chosen by the sending end user as the      → o                              enumeration = delivery method\n                                            specific delivery method to be used in the quotes received.    ← o\norigincountry                   string      the originating country of the quotation request, i.e. the     → o                              \n                                            country where the request was initiated.                       ← o\nreceivingcountry                string      destination country of the quotation request, i.e. the         → o                              \n                                            country that the sender wishes to send to.                     ← o\nquotes                          array       a collection of quotes. a quote can be received from a         → na   quotes                    \n                                            single receiving financial service provider or from multiple   ← o\n                                            providers.\nrecipientkyc                    object      a collection of fields detailing the kyc of the transaction    → o    kyc information           \n                                            recipient, typically used for international transfers.         ← o\nsenderkyc                       object      a collection of fields detailing the kyc of the transaction    → o    kyc information           \n                                            sender, typically used for international transfers.            ← o\nrecipientblockingreason         string      the reason for blocking the quotation, based on aml checks     → na                             \n                                            on the recipient.                                              ← o\nsenderblockingreason            string      the reason for blocking the quotation, based on aml checks     → na                             \n                                            on the sender.                                                 ← o\nrequestingorganisation          object      the originating organisation of the request.                   → na   requesting organisation   \n                                                                                                           ← o\nsendingserviceprovidercountry   string      the country of the sending service provider that holds the     → o                              \n                                            account of the sender.                                         ← o\ncreationdate                    date-time   date and time when the quotation was created by the api        → na                             \n                                            provider.                                                      ← o\nmodificationdate                date-time   date and time when the quotation was modified by the api       → na                             \n                                            provider.                                                      ← o\nrequestdate                     date-time   the date and time of the quotation request as supplied by      → o                              \n                                            the client.                                                    ← o\ncustomdata                      string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                            provider specific fields.                                      ← o\nmetadata                        array       a collection of key/value pairs. these can be used to          → o    metadata                  \n                                            populate additional properties that describe administrative    ← o\n                                            information regarding the quotation.\n\n\n# supporting objects\n\n\n# international transfer information object\n\nthe international transfer information object contains details that are specific to international money transfers.\n\n{\n  "quotationreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "quoteid": "123456789",\n  "origincountry": "gb",\n  "deliverymethod": "personaldelivery",\n  "receivingcountry": "ie",\n  "relationshipsender": "household",\n  "recipientblockingreason": "id card is expired...",\n  "senderblockingreason": "address must be provided...",\n  "remittancepurpose": "commission...",\n  "sendingserviceprovidercountry": "gb"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ninternational transfer information object                                                                                              \nname                                        type     description                                                           reference   validation\nquotationreference                          string   reference for the quotation that was provided to the sender.   → o                \n                                                     (refer to quotations api for more information).                ← o\nquoteid                                     string   the specific quote associated with the quotation (refer to     → o                \n                                                     quotes object for more information).                           ← o\norigincountry                               string   the originating country of the transaction, i.e. the country   → m                enumeration = iso country codes.\n                                                     where the transaction was initiated.                           ← m\ndeliverymethod                              string   the recipient delivery method as chosen by the sender.         → o                enumeration = delivery method types\n                                                                                                                    ← o\nreceivingcountry                            string   destination country of the international transfer.             → o                \n                                                                                                                    ← o\nrelationshipsender                          string   indicates the relationship (if any) between the sender and     → o                \n                                                     the receiver.                                                  ← o\nrecipientblockingreason                     string   the reason for blocking the transaction, based on aml checks   → na               \n                                                     on the recipient.                                              ← o\nsenderblockingreason                        string   the reason for blocking the transaction, based on aml checks   → na               \n                                                     on the sender.                                                 ← o\nremittancepurpose                           string   field providing a description of the reason for the            → o                \n                                                     international transfer.                                        ← o\nsendingserviceprovidercountry               string   the country of the sending service provider that holds the     → o                \n                                                     account of the sender.                                         ← o\n\n\n# kyc information object\n\nkyc refers to ‘know your customer’. the kyc object contains a number of fields that enable the identity of the subject to be verified. kyc can be provided with transfers for the sending identity and the receiving identity. there are no mandatory kyc object fields.\n\n{\n  "birthcountry": "gb",\n  "dateofbirth": "2000-11-20",\n  "contactphone": "+1234567890",\n  "emailaddress": "example@mail.com",\n  "employername": "employer llc",\n  "gender": "m",\n  "iddocument": [\n    {\n      "idtype": "passport",\n      "idnumber": "test123456"\n    }\n  ],\n  "nationality": "gb",\n  "postaladdress": {\n    "addressline1": "33 brow rd",\n    "addressline2": "unit 200",\n    "addressline3": "paddock",\n    "city": "huddersfield",\n    "stateprovince": "west yorkshire",\n    "postalcode": "hd1 4tp",\n    "country": "gb"\n  },\n  "occupation": "manager",\n  "subjectname": {\n    "title": "mr",\n    "firstname": "john",\n    "middlename": "alan",\n    "lastname": "doe",\n    "fullname": "john alan doe",\n    "nativename": "john doe"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nkyc information object                                                                                                    \nname                     type     description                                                        reference            validation\nbirthcountry             string   the country of birth of the kyc subject.                    → o                         enumeration = iso country codes.\n                                                                                              ← o\ndateofbirth              date     birth date of the kyc subject.                              → o                         \n                                                                                              ← o\ncontactphone             string   contact phone number (mobile or landline) of the kyc        → o                         must contain between 6 and 15 consecutive digits\n                                  subject.                                                    ← o                         first character can contain a ‘+’ or digit\n                                                                                                                          can contain spaces.\nemailaddress             string   email address of the kyc subject.                           → o                         \n                                                                                              ← o\nemployername             string   employer name of the kyc subject.                           → o                         \n                                                                                              ← o\ngender                   string   gender of the kyc object.                                   → o                         length=1, enumeration = (m)ale, (f)emale, (u)nspecified\n                                                                                              ← o\niddocument               array    an array of fields containing the forms of identification   → o    id document object   \n                                  that are associated with the subject.                       ← o\nnationality              string   nationality of the kyc subject.                             → na                        enumeration = iso country codes\n                                                                                              ← o\npostaladdress            object   a collection of fields that details the postal address of   → o    address              \n                                  the kyc subject.                                            ← o\noccupation               string   occupation of the kyc subject.                              → o                         \n                                                                                              ← o\nsubjectname              object   refers to the name fields for the kyc subject.              → o    name                 \n                                                                                              ← o\n\n\n# name object\n\nthe name object identifies the name details for the subject identity.\n\n{\n  "title": "mr",\n  "firstname": "john",\n  "middlename": "alan",\n  "lastname": "doe",\n  "fullname": "john alan doe",\n  "nativename": "john doe"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname object                                                                                             \nname          type     description                                                          reference   validation\ntitle         string   the given title of the kyc subject, e.g. mr, mrs, dr.          → o               \n                                                                                      ← o\nfirstname     string   first name (also referred to as given name) of the kyc         → o               \n                       subject.                                                       ← o\nmiddlename    string   middle name of the kyc subject.                                → o               \n                                                                                      ← o\nlastname      string   surname (also referred to as last or family name) of the kyc   → o               \n                       subject.                                                       ← o\nfullname      string   the full name of the kyc subject.                              → o               \n                                                                                      ← o\nnativename    string   the full name expressed as in the native language.             → o               \n                                                                                      ← o\n\n\n# id document object\n\nas part of kyc information, identification documentation is normally required. the id document object enables documents pertaining to a subject’s identity to be described.\n\n{\n  "idtype": "passport",\n  "idnumber": "test123456",\n  "issuedate": "2018-11-20",\n  "expirydate ": "2018-11-20",\n  "issuer": "123456789",\n  "issuerplace": "london",\n  "issuercountry": "gb",\n  "otheriddescription": "other id description..."\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nid document object                                                                                             \nname                 type     description                                                          reference   validation\nidtype               string   indicates the type of identification for the kyc subject,      → m               enumeration = id types\n                              e.g. passport, driving licence etc..                           ← m\nidnumber             string   reference pertaining to the type of identification for the     → o               \n                              kyc subject.                                                   ← o\nissuedate            date     date of issue for the identification document.                 → o               \n                                                                                             ← o\nexpirydate           date     date of expiry for the identification document.                → o               \n                                                                                             ← o\nissuer               string   indicates the organisation/government entity that issued the   → o               \n                              id document.                                                   ← o\nissuerplace          string   place of issue for the identification type.                    → o               \n                                                                                             ← o\nissuercountry        string   country where the identification type was issued.              → o               enumeration = iso country codes\n                                                                                             ← o\notheriddescription   string   where an id type of ‘otherid’ is specified, a description of   → o               \n                              the type of identification can be provided in this field.      ← o\n\n\n# address object\n\nthe address object holds the postal address of the subject. due to variability of address information in a number of mobile money markets, only the country is mandatory.\n\n{\n  "addressline1": "33 brow rd",\n  "addressline2": "unit 200",\n  "addressline3": "paddock",\n  "city": "huddersfield",\n  "stateprovince": "west yorkshire",\n  "postalcode": "hd1 4tp",\n  "country": "gb"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naddress object                                                            \nname             type     description                         reference   validation\naddressline1     string   first line of the address.    → o               \n                                                        ← o\naddressline2     string   second line of the address.   → o               \n                                                        ← o\naddressline3     string   third line of the address.    → o               \n                                                        ← o\ncity             string   city/town.                    → o               \n                                                        ← o\nstateprovince    string   state or province.            → o               \n                                                        ← o\npostalcode       string   postal code.                  → o               \n                                                        ← o\ncountry          string   country                       → m               enumeration = iso country codes\n                                                        ← m\n\n\n# account identifier object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naccount identifier object                                                                            \nname                        type     description                                         reference   validation\nkey                         string   provides the account identifier type.         → m               enumeration = account identifiers\n                                                                                   ← m\nvalue                       string   provides the account identifier type value.   → m               \n                                                                                   ← m\n\n\n# identity object\n\nthe identity object defines the information for an identity associated with an account. between one and twenty identities can be associated with an account.\n\n{\n  "identityid": "12345",\n  "identitytype": "individual",\n  "identitystatus": "completed",\n  "identitykyc": {\n    "dateofbirth": "2000-11-20",\n    "birthcountry": "gb",\n    "contactphone": "+1234567890"\n  },\n  "accountrelationship": "accountholder",\n  "kycverificationstatus": "verified",\n  "kycverificationentity": "123456789",\n  "kyclevel": "regular",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nidentity object                                                                                                          \nname                    type      description                                                          reference         validation\nidentityid              string    a unique id for the identity as assigned by the api           → na                     \n                                  provider.                                                     ← m\nidentitytype            string    indicates the type of the identity. currently, only           → na                     ‘individual’\n                                  ‘individual’ is supported.                                    ← m\nidentitystatus          string    a non-harmonised field describing the status of the           → na                     \n                                  identity.                                                     ← o\nidentitykyc             object    a collection of fields detailing the kyc held for the         → m    kyc information   \n                                  identity.                                                     ← m\naccountrelationship     string    describes the relationship that the identity holds with the   → m                      ‘accountholder’\n                                  account.                                                      ← m\nkycverificationstatus   string    indicates the status of the identity’s kyc verification.      → o                      ‘verified’, ‘unverified’, ‘rejected’\n                                                                                                ← o\nkycverificationentity   string    indicates the entity (e.g. mobile money agent) that has       → o                      \n                                  verified the kyc of the identity.                             ← o\nkyclevel                integer   indicates the kyc level that the identity is associated       → o                      \n                                  with.                                                         ← o\ncustomdata              array     a collection of key/value pairs that can be used for          → o                      \n                                  provider specific fields.                                     ← o\n\n\n# quote object\n\nquotations can consist of multiple quotes. the fields for a quote are defined in the object.\n\n{\n  "quoteid": "123456789",\n  "receivingamount": "123.45",\n  "receivingcurrency": "gbp",\n  "sendingamount": "123.45",\n  "sendingcurrency": "gbp",\n  "deliverymethod": "personaldelivery",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "fxrate": "1.0000000000",\n  "quoteexpirytime": "2017-07-21t17:32:28z",\n  "receivingserviceprovider": "receiving fsp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nquote object                                                                                                               \nname                       type        description                                                           reference     validation\nquoteid                    string      the unique id for this quote.                                  → na                 \n                                                                                                      ← m\nreceivingamount            string      the total amount as it will be received by the receiving end   → na                 please refer to api fundamentals document for amount\n                                       user.                                                          ← m                  validation rules.\nreceivingcurrency          string      the currency of the quote.                                     → na                 enumeration = iso currency codes\n                                                                                                      ← m\nsendingamount              string      requested quotation amount as supplied by the sender.          → na                 please refer to api fundamentals document for amount\n                                                                                                      ← m                  validation rules.\nsendingcurrency            string      currency of the requested quotation amount.                    → na                 enumeration = iso currency codes\n                                                                                                      ← m\ndeliverymethod             string      the delivery method that is applicable to the quotation.       → na                 enumeration = delivery method\n                                                                                                      ← o\nfees                       array       returns all fees that are applicable to the quote.             → na   fees object   \n                                                                                                      ← o\nfxrate                     string      the conversion rate applicable between the sending and the     → na                 please refer to api fundamentals document for amount\n                                       receiving currency for the requested transaction.              ← o                  validation rules. note 10 decimal places supported.\nquoteexpirytime            date-time   the timestamp when the quote will expire.                      → na                 \n                                                                                                      ← o\nreceivingserviceprovider   string      the name of the receiving service provider, i.e. the           → na                 \n                                       provider that the quote is associated with.                    ← o\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nmetadata object                                                                              \nname              type     description                                           reference   validation\nkey               string   identifies the type of additional fields.       → m               \n                                                                           ← m\nvalue             string   identifies the value of the additional field.   → m               \n                                                                           ← m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncustom data object                                                                              \nname                 type     description                                           reference   validation\nkey                  string   identifies the type of additional fields.       → m               \n                                                                              ← m\nvalue                string   identifies the value of the additional field.   → m               \n                                                                              ← m\n\n\n# supplementary bill reference object\n\nthis object enables additional payment references to be specified for a bill payment in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "paymentreferencetype": "paymentreferencevalue"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nsupplementary bill reference object                                                                                          \nname                                  type     description                                                       reference   validation\npaymentreferencetype                  string   identifies the type of the additional payment reference.    → m               \n                                                                                                           ← m\npaymentreferencevalue                 string   identifies the value of the additional payment reference.   → m               \n                                                                                                           ← m\n\n\n# transaction type object\n\nthis object enables multiple transaction types to be specified along with paired sub-types. this object is used where multiple transaction types need to be passed in an api.\n\n{\n  "transactiontype": "merchantpay",\n  "transactionsubtype": "local",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction type object                                                                     \nname                      type     description                                  reference   validation\ntransactiontype           string   identifies the transaction type.       → m               enumeration = transaction types\n                                                                          ← m\ntransactionsubtype        string   identifies the transaction sub-type.   → o               \n                                                                          ← o\n\n\n# channel type object\n\nthis object enables multiple channel types to be specified. this object is used where multiple channel types need to be passed in an api.\n\n{\n  "channeltype": "atm"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nchannel type object                                                             \nname                  type     description                          reference   validation\nchanneltype           string   identifies the channel type.   → m               \n                                                              ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nfees object                                                                        \nname          type     description                                     reference   validation\nfeetype       string   defines the type of fee.                  → m               \n                                                                 ← m\nfeeamount     string   defines the amount of the fee.            → m               please refer to api fundamentals document for amount\n                                                                 ← m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   → m               enumeration = iso currency codes\n                                                                 ← m\n\n\n# commission object\n\nan object that enables earned commission that is calculated by the api provider to be returned.\n\n{\n  "commissiontype": "surcharge",\n  "commissionamount": "2",\n  "commissioncurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncommission object                                                                         \nname                 type     description                                     reference   validation\ncommissiontype       string   defines the type of commission.           → m               \n                                                                        ← m\ncommissionamount     string   defines the amount of the commission.     → m               please refer to api fundamentals document for amount\n                                                                        ← m               validation rules.\ncommissioncurrency   string   defines the currency of the commission.   → m               enumeration = iso currency codes\n                                                                        ← m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nrequesting organisation object                                                                                       \nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid’\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode           description\nbillpay        payment of bill from a business for goods and/or services.\ndeposit        exchange of cash in return for e-money at a physical agent\n               or via atm.\ndisbursement   disbursement of funds (making payments from an organisation\n               (business, ngo, government entity) to a mobile money\n               recipient.\ntransfer       transfer of funds between mobile money provider and another\n               provider or financial institution in the same country.\nmerchantpay    purchases of goods and/or services from shops (payer\n               present) or online (payer not present).\ninttransfer    transfer of funds to a recipient in another country, either\n               directly to/from a mobile wallet or via an international\n               money transfer provider.\nadjustment     general adjustments to an account via an adjustment\n               transaction (e.g. refunds).\nreversal       reversal of a prior transaction to return funds to the\n               payer.\nwithdrawal     exchange of e-money in return for cash at a physical agent\n               or via atm.\n\n\n# id types\n\nthe id types enumeration contains accepted identification types. due to the wide international variation in accepted types of identification, a catch-all type of ‘otherid’ is included.\n\nid type                description\npassport               payment of bill from a business for goods and/or services.\nnationalregistration   national registration number.\nothered                catch-all for ids not on the list.\ndrivinglicence         driving licence number.\nsocialsecurity         social security number.\nalienregistration      alien registration id.\nnationalidcard         national identity card.\nemployer               employers identification.\ntaxid                  tax identification number.\nseniorcitizenscard     senior citizens id card.\nmarriagecertificate    marriage certificate.\nbirthcertificate       birth certificate.\nhealthcard             health card.\nvotersid               voters identification.\nvillageelderletter     letter of confirmation from village elder.\npancard                credit/debit card number (primary account number).\nofficialletter         official letter confirming identity.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              >first character can contain a ‘+’ or digit\n                                                              >can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.\n\n\n# iso country codes\n\nthe two-character alphabetic code for country as defined by iso 3166 is to be used for all fields specifying a country or nationality. the full list of codes is maintained by the international organisation for standardisation. the list can be obtained via the following website - http://www.iso.org/iso/country_codes\n\n\n# delivery method types\n\nwhen a customer requests a quotation they are able to specify their preferred method of delivery of the transfer to the recipient. permitted delivery methods are provided below.\n\ndelivery method    description\ndirecttoaccount    the transfer is to be delivered into the account (wallet) of\n                   the recipient.\nagent              the recipient can visit an agent and get the transferred\n                   funds.\npersonaldelivery   a supplementary service where an authorised person can\n                   deliver the funds, in hand, to the receiving end user.\n\n\n# frequency type\n\nwhen requesting a debit mandate, the api client is able to specify the frequency of which the payment should be taken. valid values are defined in the table below.\n\nfrequency type        description\nweekly                payment will be taken weekly.\nfortnight             payment will be taken every two weeks.\nmonthspecificdate     payment to be taken on a specific date every month.\ntwomonths             payment to be taken every two months.\nthreemonths           payment to be taken every three months.\nfourmonths            payment to be taken every four months.\nsixmonths             payment to be taken every six months.\nyearly                payment to be taken yearly.\nlastdaymonth          payment to be taken on the last calendar day of the month.\nlastdaymonthworking   payment to be taken on the last working day of the month\n                      according to working days as per the resident country of the\n                      account.\nlastmonday            payment to be taken on the last monday of the month.\nlasttuesday           payment to be taken on the last tuesday of the month.\nlastwednesday         payment to be taken on the last wednesday of the month.\nlastthursday          payment to be taken on the last thursday of the month.\nlastfriday            payment to be taken on the last friday of the month.\nlastsaturday          payment to be taken on the last saturday of the month.\nlastsunday            payment to be taken on the last sunday of the month.\nspecificdaymonthly    payment to be taken on a specific day of the month.',charsets:{}},{title:"MM API Specification v1.2",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"MM API Specification v1.2"},regularPath:"/api-versions-1.2/",relativePath:"api-versions-1.2/index.md",key:"v-f7ba786a",path:"/api-versions-1.2/",headersStr:null,content:"# GSMA Mobile Money API Specification v1.2\n\nWelcome to the GSMA Mobile Money API Developer Portal. The Mobile Money API is an initiative developed through collaboration between the mobile money industry and the GSMA, which provides a harmonized API Specification for all the common mobile money use cases which is both easy to use and secure. Using best practices from the technology industry in API design and security, it aims to simplify and accelerate integration with mobile money platforms and stimulate the growth of the ecosystem.\n\nThe key design principles of the API include the use of REST architectural principles, the use of the JSON data format for requests and responses, and the provision of a set of well-defined objects that are abstracted from the underlying object representations held in different mobile money systems. The API also defines a standard set of transaction types and other key enumerations, uses ISO international standards for enumerations such as currency and country codes, and provides support for supplementary metadata and sub-types for properties specific to different mobile money providers.\n\nThe Mobile Money Developer Portal provides access to the Mobile Money API Specification assets and a full suite of developer documentation and tools to facilitate developers implementing the specification, whether they are Mobile Money Providers or Service Providers building solutions for the mobile money ecosystem.\n\nThe developer documentation includes developer guides for getting started with the Mobile Money API covering API Fundamentals and API Behaviour & Error Handling and reference documentation for all APIs and supporting objects included in the specification. Developers can also access security design and implementation guidelines to ensure that best practices are applied to the connection between the API client and the API gateway, and to authenticating end users to the mobile money platform.\n\nThe developer tools include the GSMA Simulator which provides an example simulated API implementation developed to facilitate API adoption and testing, an example Authentication Gateway which adopts the best practice security recommendations of OAuth 2.0, and use case examples which include Postman Collections enabling developers to test the simulated APIs directly or through the authentication gateway.",normalizedContent:"# gsma mobile money api specification v1.2\n\nwelcome to the gsma mobile money api developer portal. the mobile money api is an initiative developed through collaboration between the mobile money industry and the gsma, which provides a harmonized api specification for all the common mobile money use cases which is both easy to use and secure. using best practices from the technology industry in api design and security, it aims to simplify and accelerate integration with mobile money platforms and stimulate the growth of the ecosystem.\n\nthe key design principles of the api include the use of rest architectural principles, the use of the json data format for requests and responses, and the provision of a set of well-defined objects that are abstracted from the underlying object representations held in different mobile money systems. the api also defines a standard set of transaction types and other key enumerations, uses iso international standards for enumerations such as currency and country codes, and provides support for supplementary metadata and sub-types for properties specific to different mobile money providers.\n\nthe mobile money developer portal provides access to the mobile money api specification assets and a full suite of developer documentation and tools to facilitate developers implementing the specification, whether they are mobile money providers or service providers building solutions for the mobile money ecosystem.\n\nthe developer documentation includes developer guides for getting started with the mobile money api covering api fundamentals and api behaviour & error handling and reference documentation for all apis and supporting objects included in the specification. developers can also access security design and implementation guidelines to ensure that best practices are applied to the connection between the api client and the api gateway, and to authenticating end users to the mobile money platform.\n\nthe developer tools include the gsma simulator which provides an example simulated api implementation developed to facilitate api adoption and testing, an example authentication gateway which adopts the best practice security recommendations of oauth 2.0, and use case examples which include postman collections enabling developers to test the simulated apis directly or through the authentication gateway.",charsets:{}},{title:"Open OAS3 UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Open OAS3 UI"},regularPath:"/api-versions-1.2/resources/open-oas3-ui.html",relativePath:"api-versions-1.2/resources/open-oas3-ui.md",key:"v-178f82f8",path:"/api-versions-1.2/resources/open-oas3-ui.html",headers:[{level:2,title:"Open OAS3 UI",slug:"open-oas3-ui",normalizedTitle:"open oas3 ui",charIndex:0}],headersStr:"Open OAS3 UI",content:"# Open OAS3 UI",normalizedContent:"# open oas3 ui",charsets:{}},{title:"API Use Cases",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"API Use Cases"},regularPath:"/api-versions-1.2/use-cases-about.html",relativePath:"api-versions-1.2/use-cases-about.md",key:"v-0bed007c",path:"/api-versions-1.2/use-cases-about.html",headers:[{level:2,title:"API Use Cases",slug:"api-use-cases",normalizedTitle:"api use cases",charIndex:0}],headersStr:"API Use Cases",content:"# API Use Cases\n\nWe have evolved the API specification from the existing single technical specification view to provide additional API provider and API consumer perspectives for specific use case views for the following 8 use cases supported by the API: Merchant Payments, Disbursements, International Transfers, P2P Transfers, Recurring Payments, Account Linking, Bill Payments, Agent Services (including Cash-In and Cash-Out). This will enable ecosystem players to easily see which parts of the specification are of interest to them, and more easily implement the relevant APIs using the single use case specification definitions provided.\n\n.\n\nRead more about the Mobile Money API Use Сases here:\n\n 1. Merchant Payments,\n 2. Disbursements\n 3. International Transfers\n 4. P2P Transfers\n 5. Recurring Payments\n 6. Account Linking\n 7. Bill Payments\n 8. Agent Services (including Cash-In and Cash-Out)",normalizedContent:"# api use cases\n\nwe have evolved the api specification from the existing single technical specification view to provide additional api provider and api consumer perspectives for specific use case views for the following 8 use cases supported by the api: merchant payments, disbursements, international transfers, p2p transfers, recurring payments, account linking, bill payments, agent services (including cash-in and cash-out). this will enable ecosystem players to easily see which parts of the specification are of interest to them, and more easily implement the relevant apis using the single use case specification definitions provided.\n\n.\n\nread more about the mobile money api use сases here:\n\n 1. merchant payments,\n 2. disbursements\n 3. international transfers\n 4. p2p transfers\n 5. recurring payments\n 6. account linking\n 7. bill payments\n 8. agent services (including cash-in and cash-out)",charsets:{cyrillic:!0}},{title:"Banks & Microfinance Institutions",frontmatter:{pageClass:"industry-page custom",title:"Banks & Microfinance Institutions"},regularPath:"/banks-microfinance-institutions/",relativePath:"banks-microfinance-institutions/index.md",key:"v-5419cfb1",path:"/banks-microfinance-institutions/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:363},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:388},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:388},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:7825},{level:2,title:"Introduction",slug:"introduction-3",normalizedTitle:"introduction",charIndex:388},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:7825},{level:2,title:"Testimonials",slug:"testimonials",normalizedTitle:"testimonials",charIndex:11343},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:11689}],headersStr:"Use cases Introduction Introduction Intended Audience Introduction Intended Audience Testimonials Ready to explore?",content:'Bank and Microfinance Institutions that provide financial services such as loans and savings to customers with mobile money wallets can use the GSMA API Specification to integrate their system with the with the mobile money provider.\n\nCustomers will be able to make money transfers between their bank account and their mobile money wallet in a seamless manner.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here\n\nStart developing\n\n\n# Introduction\n\nThe Account Linking Mobile Money APIs allow financial service providers to link customer accounts to mobile money accounts, thus allowing their customers to push funds to and pull funds from mobile money. Conversely, mobile money providers can use the APIs to link their customers mobile money accounts to financial service providers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations. All documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                  USAGE                                                          ROLE\nFSP - Mobile Money Providers              - To understand how to implement the Mobile Money API to       API Provider\n                                          accept account linking requests from other financial service\n                                          providers.\n                                          - To understand how to implement the Mobile Money API to       API Consumer\n                                          request linking of accounts to other financial service\n                                          providers.\nFSP Banks and Microfinance Institutions   - To understand how to implement the Mobile Money API to       API Provider\n                                          accept account linking requests mobile money providers.\n                                          - To understand how to implement the Mobile Money API to       API Consumer\n                                          request linking of accounts to mobile money providers.\n\nStart developing\n\n\n# Introduction\n\nAgent Services comprises of the following:\n\n\n\nCash-in and Cash-out Services\n\n * Agent-initiated Cash-out. The agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * Customer-initiated Cash-out. The mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * Cash-out via Authorisation Code. The customer generates an authorisation code up to a maximum amount. The agent then enters or scans (if rendered as a QR code) the code to perform the withdrawal.\n * Cash-in. The agent initiates the cash-in by entering the customer account identifier(s).\n\nClosed loop and open-loop agent cash-in and cash-out are supported by the Mobile Money API. Closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. Open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nAgents can be physical agents, i.e. customers that are serviced by an human, or can be an ATM.\n\n\n\nCustomer Account Services\n\n * Customer Registration. Agents can register new customers for mobile money.\n * KYC Verification. Agents that provide KYC verification services can confirm that they have verified customer KYC.\n   \n   \n\nFurther Reading\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer KYC verification services on behalf of mobile\n                         money customers.\nAgents                   To understand how to implement the Mobile Money API to         API Consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and KYC verification.\n\nStart developing\n\n\n# Testimonials\n\nAs a financial service provider operating in a country where the majority of the population have access to banking services through their mobile phones, establishing partnerships and integrating with MMPs has benefited us when extending services to the financially exclude Musoni Banks and MFIs\n\nAccount Linking\n\nAgent Services\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}',normalizedContent:'bank and microfinance institutions that provide financial services such as loans and savings to customers with mobile money wallets can use the gsma api specification to integrate their system with the with the mobile money provider.\n\ncustomers will be able to make money transfers between their bank account and their mobile money wallet in a seamless manner.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here\n\nstart developing\n\n\n# introduction\n\nthe account linking mobile money apis allow financial service providers to link customer accounts to mobile money accounts, thus allowing their customers to push funds to and pull funds from mobile money. conversely, mobile money providers can use the apis to link their customers mobile money accounts to financial service providers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations. all documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                  usage                                                          role\nfsp - mobile money providers              - to understand how to implement the mobile money api to       api provider\n                                          accept account linking requests from other financial service\n                                          providers.\n                                          - to understand how to implement the mobile money api to       api consumer\n                                          request linking of accounts to other financial service\n                                          providers.\nfsp banks and microfinance institutions   - to understand how to implement the mobile money api to       api provider\n                                          accept account linking requests mobile money providers.\n                                          - to understand how to implement the mobile money api to       api consumer\n                                          request linking of accounts to mobile money providers.\n\nstart developing\n\n\n# introduction\n\nagent services comprises of the following:\n\n\n\ncash-in and cash-out services\n\n * agent-initiated cash-out. the agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * customer-initiated cash-out. the mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * cash-out via authorisation code. the customer generates an authorisation code up to a maximum amount. the agent then enters or scans (if rendered as a qr code) the code to perform the withdrawal.\n * cash-in. the agent initiates the cash-in by entering the customer account identifier(s).\n\nclosed loop and open-loop agent cash-in and cash-out are supported by the mobile money api. closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nagents can be physical agents, i.e. customers that are serviced by an human, or can be an atm.\n\n\n\ncustomer account services\n\n * customer registration. agents can register new customers for mobile money.\n * kyc verification. agents that provide kyc verification services can confirm that they have verified customer kyc.\n   \n   \n\nfurther reading\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer kyc verification services on behalf of mobile\n                         money customers.\nagents                   to understand how to implement the mobile money api to         api consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and kyc verification.\n\nstart developing\n\n\n# testimonials\n\nas a financial service provider operating in a country where the majority of the population have access to banking services through their mobile phones, establishing partnerships and integrating with mmps has benefited us when extending services to the financially exclude musoni banks and mfis\n\naccount linking\n\nagent services\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}',charsets:{}},{frontmatter:{pageClass:"dashboard-page"},regularPath:"/dashboard/",relativePath:"dashboard/index.md",key:"v-41c9cef1",path:"/dashboard/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Open OAS3 UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Open OAS3 UI"},regularPath:"/documentation/",relativePath:"documentation/index.md",key:"v-3ed9379e",path:"/documentation/",headers:[{level:2,title:"Open OAS3 UI",slug:"open-oas3-ui",normalizedTitle:"open oas3 ui",charIndex:0}],headersStr:"Open OAS3 UI",content:"# Open OAS3 UI",normalizedContent:"# open oas3 ui",charsets:{}},{title:"Education & Health",frontmatter:{pageClass:"industry-page custom",title:"Education & Health"},regularPath:"/education-and-health/",relativePath:"education-and-health/index.md",key:"v-71f73c49",path:"/education-and-health/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:392},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:417},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:958},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:417},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:958},{level:2,title:"Testimonials",slug:"testimonials",normalizedTitle:"testimonials",charIndex:2714},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:3207}],headersStr:"Use cases Introduction Intended Audience Introduction Intended Audience Testimonials Ready to explore?",content:"Education and Health are two sectors where these institutions can simplify the way they accept payments from clients.\n\nInstitutions such as school, colleges, universities, hospitals and clinics can set up online payment portal where clients can make one-off payments online or set up recurring payment which can be deducted from their mobile money account automatically on a regular basis.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe Recurring Payments Mobile Money APIs allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                        ROLE\nMobile Money Providers   - To understand how to implement the Mobile Money API to     API Provider\n                         receive recurring payment requests from service providers.\n                         - To understand how to implement the Mobile Money API to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nService Providers        To understand how to implement the Mobile Money API to       API Consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nStart developing\n\n\n# Introduction\n\nThe Bill Payments Mobile Money APIs allow service providers to accept bill payments from mobile money customers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                         ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to make   API Consumer\n                         bill payments to service providers.\nService Providers        To understand how to implement the Mobile Money API to        API Provider\n                         accept bill payments from Mobile Money Providers.\n\nStart developing\n\n\n# Testimonials\n\nAs a platform that offers educational content through mobile money, we appreciate the importance of being integrated with MMPs using APIs. It enables our consumers to easily purchase desired content. As we continue to expand our services and customer base, we hope to have access to a Standard API in the future, which will enable us to reach a wider base of users in remote areas. Eneza Education Education Service Provider\n\nP2P Transfers\n\nRecurring Payments\n\nBill Payments\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}",normalizedContent:"education and health are two sectors where these institutions can simplify the way they accept payments from clients.\n\ninstitutions such as school, colleges, universities, hospitals and clinics can set up online payment portal where clients can make one-off payments online or set up recurring payment which can be deducted from their mobile money account automatically on a regular basis.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe recurring payments mobile money apis allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                        role\nmobile money providers   - to understand how to implement the mobile money api to     api provider\n                         receive recurring payment requests from service providers.\n                         - to understand how to implement the mobile money api to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nservice providers        to understand how to implement the mobile money api to       api consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nstart developing\n\n\n# introduction\n\nthe bill payments mobile money apis allow service providers to accept bill payments from mobile money customers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                         role\nmobile money providers   to understand how to implement the mobile money api to make   api consumer\n                         bill payments to service providers.\nservice providers        to understand how to implement the mobile money api to        api provider\n                         accept bill payments from mobile money providers.\n\nstart developing\n\n\n# testimonials\n\nas a platform that offers educational content through mobile money, we appreciate the importance of being integrated with mmps using apis. it enables our consumers to easily purchase desired content. as we continue to expand our services and customer base, we hope to have access to a standard api in the future, which will enable us to reach a wider base of users in remote areas. eneza education education service provider\n\np2p transfers\n\nrecurring payments\n\nbill payments\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}",charsets:{}},{title:"Employers",frontmatter:{pageClass:"industry-page custom",title:"Employers"},regularPath:"/employers/",relativePath:"employers/index.md",key:"v-1eca3571",path:"/employers/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:279},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:304},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:769},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:304},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:8366}],headersStr:"Use cases Introduction Intended Audience Introduction Ready to explore?",content:'Employers can use the GSMA API specification to distribute salaries to their employees.\n\nThis is particular useful in countries where there is a large uptake of mobile money and where employees value the convenience of receiving their salaries directly in their mobile phones.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe Disbursement Mobile Money APIs allow organisations to disburse funds to mobile money recipients.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         organisations to disburse payments in singular and in bulk.\nNGOs                     To understand how to implement the Mobile Money API to         API Consumer\n                         provide aid payments to mobile money recipients.\nGovernment Departments   To understand how to implement the Mobile Money API to         API Consumer\n                         provide social credit payments to mobile money recipients.\nEmployers                To understand how to implement the Mobile Money API to         API Consumer\n                         provide salary payments to mobile money recipients.\n\nStart developing\n\n\n# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here\n\nStart developing\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}',normalizedContent:'employers can use the gsma api specification to distribute salaries to their employees.\n\nthis is particular useful in countries where there is a large uptake of mobile money and where employees value the convenience of receiving their salaries directly in their mobile phones.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe disbursement mobile money apis allow organisations to disburse funds to mobile money recipients.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         organisations to disburse payments in singular and in bulk.\nngos                     to understand how to implement the mobile money api to         api consumer\n                         provide aid payments to mobile money recipients.\ngovernment departments   to understand how to implement the mobile money api to         api consumer\n                         provide social credit payments to mobile money recipients.\nemployers                to understand how to implement the mobile money api to         api consumer\n                         provide salary payments to mobile money recipients.\n\nstart developing\n\n\n# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here\n\nstart developing\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}',charsets:{}},{title:"Energy & Utilities & AgriTech",frontmatter:{pageClass:"industry-page custom",title:"Energy & Utilities & AgriTech"},regularPath:"/energy-utilities-agritech/",relativePath:"energy-utilities-agritech/index.md",key:"v-8f2a935e",path:"/energy-utilities-agritech/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:357},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:382},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:923},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:382},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:923},{level:2,title:"Succeed case study",slug:"succeed-case-study",normalizedTitle:"succeed case study",charIndex:2679},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:3806}],headersStr:"Use cases Introduction Intended Audience Introduction Intended Audience Succeed case study Ready to explore?",content:"Companies in the energy, Utilities and Agritech industries can use the GSMA API specification to support their customers save time by automating the bill payment process. As an example, monthly utility payments can be set up which saves time for customers and resources for companies as this type of set up removes the need for manual payment processing.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe Recurring Payments Mobile Money APIs allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                        ROLE\nMobile Money Providers   - To understand how to implement the Mobile Money API to     API Provider\n                         receive recurring payment requests from service providers.\n                         - To understand how to implement the Mobile Money API to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nService Providers        To understand how to implement the Mobile Money API to       API Consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nStart developing\n\n\n# Introduction\n\nThe Bill Payments Mobile Money APIs allow service providers to accept bill payments from mobile money customers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                         ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to make   API Consumer\n                         bill payments to service providers.\nService Providers        To understand how to implement the Mobile Money API to        API Provider\n                         accept bill payments from Mobile Money Providers.\n\nStart developing\n\n\n# Succeed case study\n\nAs an energy provider whose business is mainly in rural areas, partnerships with MNOs are of extreme importance to its operations. Mobile Money is regarded an enabler of its business. Most of the third-party service provider’s consumers are pay-as-you go customers and by being directly integrated with over 10 MNO partners, it facilitates faster and smoother payments. Although the process of direct integrations has improved since its first integration over seven years ago, the provider are still experiences some challenges when integrating with new partners, particularly the length of integration. The energy provider has previously considered using aggregators; however, the costs proved to be significantly high. The business has stated it would be beneficial to use a Standardised API, as will allow the provider to connect with more MNOs and expand services it offers at a faster rate. One of the provider’s struggles has been maintaining the multiple MNO API connections, which can be minimised by using a Standard API. Engie Energy Provider\n\nBill Payments\n\nRecurring Payments\n\nDisbursements\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}",normalizedContent:"companies in the energy, utilities and agritech industries can use the gsma api specification to support their customers save time by automating the bill payment process. as an example, monthly utility payments can be set up which saves time for customers and resources for companies as this type of set up removes the need for manual payment processing.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe recurring payments mobile money apis allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                        role\nmobile money providers   - to understand how to implement the mobile money api to     api provider\n                         receive recurring payment requests from service providers.\n                         - to understand how to implement the mobile money api to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nservice providers        to understand how to implement the mobile money api to       api consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nstart developing\n\n\n# introduction\n\nthe bill payments mobile money apis allow service providers to accept bill payments from mobile money customers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                         role\nmobile money providers   to understand how to implement the mobile money api to make   api consumer\n                         bill payments to service providers.\nservice providers        to understand how to implement the mobile money api to        api provider\n                         accept bill payments from mobile money providers.\n\nstart developing\n\n\n# succeed case study\n\nas an energy provider whose business is mainly in rural areas, partnerships with mnos are of extreme importance to its operations. mobile money is regarded an enabler of its business. most of the third-party service provider’s consumers are pay-as-you go customers and by being directly integrated with over 10 mno partners, it facilitates faster and smoother payments. although the process of direct integrations has improved since its first integration over seven years ago, the provider are still experiences some challenges when integrating with new partners, particularly the length of integration. the energy provider has previously considered using aggregators; however, the costs proved to be significantly high. the business has stated it would be beneficial to use a standardised api, as will allow the provider to connect with more mnos and expand services it offers at a faster rate. one of the provider’s struggles has been maintaining the multiple mno api connections, which can be minimised by using a standard api. engie energy provider\n\nbill payments\n\nrecurring payments\n\ndisbursements\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}",charsets:{}},{title:"Here is Swagger",frontmatter:{pageClass:"api-page"},regularPath:"/examples/swagger-page.html",relativePath:"examples/swagger-page.md",key:"v-29ac1cd0",path:"/examples/swagger-page.html",headersStr:null,content:"# Here is Swagger",normalizedContent:"# here is swagger",charsets:{}},{title:"FAQ",frontmatter:{pageClass:"faq-page custom",title:"FAQ"},regularPath:"/faq/",relativePath:"faq/index.md",key:"v-07f4f7f1",path:"/faq/",headers:[{level:2,title:"General",slug:"general",normalizedTitle:"general",charIndex:125},{level:2,title:"Technical",slug:"technical",normalizedTitle:"technical",charIndex:2243},{level:2,title:"Security",slug:"security",normalizedTitle:"security",charIndex:4492}],headersStr:"General Technical Security",content:'FAQ Browse our frequently asked questions site from common questions as well as "how to" instructions.\n\n\nNo results found.\n\n\n# General\n\nWhat is the Mobile Money API? The GSMA Mobile Money API is an initiative developed through collaboration between the mobile money industry and the GSMA, which provides a harmonised API Specification for all the common mobile money use cases which is both easy to use and secure. Who created and maintains the Mobile Money API?\nThe API is a GSMA-led industry initiative, for and by the Mobile Money industry, mobile money operators and their technology platform providers. It is maintained by the GSMA working with the industry as it continues to evolve and grow.\nWho can use the Mobile Money API?\nThe API is designed to be used by any party in the Mobile Money industry. This includes Mobile Money Operators, other Payment Service Providers, Retail and eCommerce Merchants, Application Developers, companies receiving Bill Payments, and others.\nWhich use cases does the Mobile Money API support?\nThe GSMA Mobile Money API is an initiative developed through collaboration between the mobile money industry and the GSMA, which provides a harmonised API Specification for all the common mobile money use cases which is both easy to use and secure.\nWhat are the advantages of the Mobile Money API?\nAdoption of the Mobile Money API leads to key benefits including growth of your mobile money ecosystem from faster partner on-boarding as partners will only have to integrate to one common API. Adopting a harmonised API also leads to easier maintenance and evolution of your common Mobile Money operations by providing support for advanced features such as multi-wallets and batch payments.\nIs the GSMA Mobile Money API free to use?\nYes, the GSMA represents the interests of mobile operators worldwide, uniting more than 750 operators with almost 400 companies in the broader mobile ecosystem and the assets we maintain are there to support our members and our industry. We encourage use of the harmonised API and place no restrictions on its use.\nAre there any alternative API standards?\nThere is no other harmonised API that supports the range of Mobile Money use cases provided by the GSMA Mobile Money API.\n\n\n# Technical\n\nWhich API Version should we implement? The current version of the Mobile Money API is v1.1 and this version should be implemented by all new adopters. We encourage existing adopters who have implemented the previous version of the API to migrate to the latest version which is backwards compatible. How did you decide on which APIs to include in the current Specification?\nThe current set of APIs have been selected to cover the most common mobile money use cases that are used in the industry today.\nCan I implement only some of the APIs and still conform to the API Specification?\nYes, you can implement only the APIs which are relevant for your business.\nIs the Mobile Money API easy to implement?\nYes, the Mobile Money API is simple to implement as the API is based upon REST/JSON which is used extensively by the developer community, and most of the APIs are simply defined and only require a small number of mandatory fields. Developers can additionally use Swagger Codegen to rapidly generate Mobile Money API stubs for development and testing, and the GSMA can also support you in implementing the API.\nWhy are only REST and JSON supported over other API designs and data formats?\nThe design decision was based on REST and JSON being the best options for an API in terms of simplicity, ease of development, and because they are the most commonly used and understood architecture and data format today for all kinds of APIs.\nWhy was OAS chosen as the API definition framework over other API frameworks?\nOAS was chosen as it provides the best modelling flexibility and includes a comprehensive toolset to facilitate API implementation including client and server side SDKs.\nDoes the API support synchronous and asynchronous patterns?\nYes, the API supports synchronous and asynchronous patterns for resource creation and update requests, and synchronous patterns only for read requests, which provides support for the most commonly used request paradigms.\nCan you add support for a Mobile Money use case which is not included in the Specification?\nPlease contact us to let us know if you use APIs which are not currently included in the API Specification. We have a living roadmap and will continue to update the Spec over time.\n\n\n# Security\n\nAre there security recommendations to consider when implementing the Mobile Money API? Yes, we provide a comprehensive set of security guidelines, please see our latest Security Design and Implementation guidelines in the Developer Portal here. Do I need to implement an API Gateway to host the Mobile Money API?\nNo. However we recommend you use an API Gateway as this enables efficient developer on-boarding processes, making the implementation process simpler and allowing third parties to more rapidly exploit the benefits of the API. Off the shelf API Gateways do support the Mobile Money API security guidelines, including OAuth2.',normalizedContent:'faq browse our frequently asked questions site from common questions as well as "how to" instructions.\n\n\nno results found.\n\n\n# general\n\nwhat is the mobile money api? the gsma mobile money api is an initiative developed through collaboration between the mobile money industry and the gsma, which provides a harmonised api specification for all the common mobile money use cases which is both easy to use and secure. who created and maintains the mobile money api?\nthe api is a gsma-led industry initiative, for and by the mobile money industry, mobile money operators and their technology platform providers. it is maintained by the gsma working with the industry as it continues to evolve and grow.\nwho can use the mobile money api?\nthe api is designed to be used by any party in the mobile money industry. this includes mobile money operators, other payment service providers, retail and ecommerce merchants, application developers, companies receiving bill payments, and others.\nwhich use cases does the mobile money api support?\nthe gsma mobile money api is an initiative developed through collaboration between the mobile money industry and the gsma, which provides a harmonised api specification for all the common mobile money use cases which is both easy to use and secure.\nwhat are the advantages of the mobile money api?\nadoption of the mobile money api leads to key benefits including growth of your mobile money ecosystem from faster partner on-boarding as partners will only have to integrate to one common api. adopting a harmonised api also leads to easier maintenance and evolution of your common mobile money operations by providing support for advanced features such as multi-wallets and batch payments.\nis the gsma mobile money api free to use?\nyes, the gsma represents the interests of mobile operators worldwide, uniting more than 750 operators with almost 400 companies in the broader mobile ecosystem and the assets we maintain are there to support our members and our industry. we encourage use of the harmonised api and place no restrictions on its use.\nare there any alternative api standards?\nthere is no other harmonised api that supports the range of mobile money use cases provided by the gsma mobile money api.\n\n\n# technical\n\nwhich api version should we implement? the current version of the mobile money api is v1.1 and this version should be implemented by all new adopters. we encourage existing adopters who have implemented the previous version of the api to migrate to the latest version which is backwards compatible. how did you decide on which apis to include in the current specification?\nthe current set of apis have been selected to cover the most common mobile money use cases that are used in the industry today.\ncan i implement only some of the apis and still conform to the api specification?\nyes, you can implement only the apis which are relevant for your business.\nis the mobile money api easy to implement?\nyes, the mobile money api is simple to implement as the api is based upon rest/json which is used extensively by the developer community, and most of the apis are simply defined and only require a small number of mandatory fields. developers can additionally use swagger codegen to rapidly generate mobile money api stubs for development and testing, and the gsma can also support you in implementing the api.\nwhy are only rest and json supported over other api designs and data formats?\nthe design decision was based on rest and json being the best options for an api in terms of simplicity, ease of development, and because they are the most commonly used and understood architecture and data format today for all kinds of apis.\nwhy was oas chosen as the api definition framework over other api frameworks?\noas was chosen as it provides the best modelling flexibility and includes a comprehensive toolset to facilitate api implementation including client and server side sdks.\ndoes the api support synchronous and asynchronous patterns?\nyes, the api supports synchronous and asynchronous patterns for resource creation and update requests, and synchronous patterns only for read requests, which provides support for the most commonly used request paradigms.\ncan you add support for a mobile money use case which is not included in the specification?\nplease contact us to let us know if you use apis which are not currently included in the api specification. we have a living roadmap and will continue to update the spec over time.\n\n\n# security\n\nare there security recommendations to consider when implementing the mobile money api? yes, we provide a comprehensive set of security guidelines, please see our latest security design and implementation guidelines in the developer portal here. do i need to implement an api gateway to host the mobile money api?\nno. however we recommend you use an api gateway as this enables efficient developer on-boarding processes, making the implementation process simpler and allowing third parties to more rapidly exploit the benefits of the api. off the shelf api gateways do support the mobile money api security guidelines, including oauth2.',charsets:{}},{title:"Examples page",frontmatter:{pageClass:"api-page has-code-panel",title:"Examples page"},regularPath:"/examples/",relativePath:"examples/index.md",key:"v-908bc336",path:"/examples/",headers:[{level:2,title:"Heading 2",slug:"heading-2",normalizedTitle:"heading 2",charIndex:643},{level:3,title:"Heading 3",slug:"heading-3",normalizedTitle:"heading 3",charIndex:789},{level:2,title:"Tips",slug:"tips",normalizedTitle:"tips",charIndex:935},{level:2,title:"Sidebar code sections",slug:"sidebar-code-sections",normalizedTitle:"sidebar code sections",charIndex:1118},{level:3,title:"Single language",slug:"single-language",normalizedTitle:"single language",charIndex:1144},{level:3,title:"1 method + 1 language (w/o a switcher)",slug:"_1-method-1-language-w-o-a-switcher",normalizedTitle:"1 method + 1 language (w/o a switcher)",charIndex:3333},{level:3,title:"Multiple methods/objects and languages (w/o switcher)",slug:"multiple-methods-objects-and-languages-w-o-switcher",normalizedTitle:"multiple methods/objects and languages (w/o switcher)",charIndex:5236},{level:3,title:"Multiple methods/objects and languages (with switcher)",slug:"multiple-methods-objects-and-languages-with-switcher",normalizedTitle:"multiple methods/objects and languages (with switcher)",charIndex:7140},{level:2,title:"Table",slug:"table",normalizedTitle:"table",charIndex:9120},{level:2,title:"Code examples",slug:"code-examples",normalizedTitle:"code examples",charIndex:9653},{level:2,title:"Demo component",slug:"demo-component",normalizedTitle:"demo component",charIndex:10461},{level:2,title:"Image in markdown",slug:"image-in-markdown",normalizedTitle:"image in markdown",charIndex:10480},{level:2,title:"Tabs",slug:"tabs",normalizedTitle:"tabs",charIndex:10866},{level:2,title:"Tech diagrams with mermaids",slug:"tech-diagrams-with-mermaids",normalizedTitle:"tech diagrams with mermaids",charIndex:11186},{level:2,title:"Test",slug:"test",normalizedTitle:"test",charIndex:12288}],headersStr:"Heading 2 Heading 3 Tips Sidebar code sections Single language 1 method + 1 language (w/o a switcher) Multiple methods/objects and languages (w/o switcher) Multiple methods/objects and languages (with switcher) Table Code examples Demo component Image in markdown Tabs Tech diagrams with mermaids Test",content:'# Heading 1\n\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using \'Content here, content here\', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for \'lorem ipsum\' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\n# Heading 1\n\n\n# Heading 2\n\nFermentum, at volutpat tincidunt ut. Dui id aliquam sed interdum imperdiet. Donec magna egestas in neque, sed tempor nisl dapibus.\n\n\n# Heading 3\n\nFermentum, at volutpat tincidunt ut. Dui id aliquam sed interdum imperdiet. Donec magna egestas in neque, sed tempor nisl dapibus.\n\n\n# Tips\n\nNote\n\nHendrerit rhoncus, neque nunc massa purus risus.\n\nWarning\n\nHendrerit rhoncus, neque nunc massa purus risus.\n\nWarning\n\nHendrerit rhoncus, neque nunc massa purus risus.\n\n\n# Sidebar code sections\n\n\n# Single language\n\nThis will require a single group use as per VuePress documentation, or as per the next example (here and next we assume that the code group is wrapped by wrappers from above).\n\nIn a few word just use <code-group> tag as a wrapper for a View <code-block> and inside the View add the other combination of <code-group> and <code-block> to include the Object name and info.\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n"debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\nGET .../transactions/36125b528237\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n<?php \nrequire_once("mm-api.php");\ntry {\n  $TransferId = 11111111;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\n<?php \nrequire_once("mm-api.php");\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\n<?php \nrequire_once("mm-api.php");\ntry {\n  $TransferId = 33333333;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nPOST        POST                                         To be used for transaction creation when the provider’s API\n            /transactions/type/{transactiontype}         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET                                          To view a transaction.\n            /transactions/{transactionReference}\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n\n\n\n\n\n# 1 method + 1 language (w/o a switcher)\n\nThis is an example of how the right sidebar can be used for a single method/object w/o adding a language switcher.\n\nE.g. a single method/object needs to be described in one or few languages.\n\nJust use the default 2 groups View and Code, where Code will include a group of two blocks are named as languages, e.g. PHP and JavaScript.\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n//This is JavaScript\nrequire_once("mm-api.php");\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}\n\ntry {\n    $TransferId = 22222222;\n    $Transfer = $Api->Transfers->Get($TransferId);\n} catch(MM-API\\Libraries\\ResponseException $e) {\n    $e->GetErrorDetails()\n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n\n\n<?php \n//This is PHP\nrequire_once("mm-api.php");\ntry {\n  $TransferId = 11111111;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\nOPERATION   PATH                                   DESCRIPTION\nPOST        POST                                   To be used for transaction creation when the provider’s API\n            /transactions/type/{transactiontype}   Gateway requires that the transaction type be identified in\n                                                   the URL.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Multiple methods/objects and languages (w/o switcher)\n\nThis is an example of how multiple methods/objects and languages can be supported.\n\nE.g. we need 2 methods and code examples in two languages for them as separate tabs / <code-group>s.\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\nGET .../transactions/36125b528237\n\n\n//This is JavaScript\ntry {\n  $TransferId = 11111111;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n\n\n//This is JavaScript\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e)\n\n\n<?php \n//This is PHP\nrequire_once("mm-api.php");\ntry {\n  $TransferId = 11111111;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\n<?php \n//This is PHP\nrequire_once("mm-api.php");\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\nOPERATION   PATH                                   DESCRIPTION\nPOST        POST                                   To be used for transaction creation when the provider’s API\n            /transactions/type/{transactiontype}   Gateway requires that the transaction type be identified in\n                                                   the URL.\nView        GET                                    To view a transaction.\n            /transactions/{transactionReference}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Multiple methods/objects and languages (with switcher)\n\nThis is an example of how multiple methods/objects and languages can be supported.\n\nE.g. we need 2 methods and code examples in two languages for them.\n\nThis will require adding methods and code examples for all languages wrapping them into <code-language-selector> tags.\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\nGET .../transactions/36125b528237\n\n\n//This is JavaScript\ntry {\n  $TransferId = 11111111;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n\n\n//This is JavaScript\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e)\n\n\n<?php \n//This is PHP\nrequire_once("mm-api.php");\ntry {\n  $TransferId = 11111111;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\n<?php \n//This is PHP\nrequire_once("mm-api.php");\ntry {\n  $TransferId = 22222222;\n  $Transfer = $Api->Transfers->Get($TransferId);  \n} catch(MM-API\\Libraries\\ResponseException $e) {\n  $e->GetErrorDetails() \n} catch(MM-API\\Libraries\\Exception $e) {\n}  \n?>\n\n\nOPERATION   PATH                                   DESCRIPTION\nPOST        POST                                   To be used for transaction creation when the provider’s API\n            /transactions/type/{transactiontype}   Gateway requires that the transaction type be identified in\n                                                   the URL.\nView        GET                                    To view a transaction.\n            /transactions/{transactionReference}\n\n\n# Table\n\nAUDIENCE                 USAGE                                                    ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to   API provider\n                         receive payments from merchants.\nMerchants                To understand how to implement the Mobile Money API to   API consumer\n                         accept mobile money payments.\n\nFermentum, at volutpat tincidunt ut. Dui id aliquam sed interdum imperdiet. Donec magna egestas in neque, sed tempor nisl dapibus.\n\n\n# Code examples\n\nPOST/transactions/type/merchantpay \\\n\ncurl --location --request POST \'https://sandbox.mobilemoneyapi.io/simulator/v1.2/passthrough/mm/transactions/type/merchantpay\'\\\n--header \'X-CorrelationID: Please enter your UUID here\'\\\n--header \'X-Callback-URL: Please enter your callback URL here\'\\\n--header \'Content-Type: application/json\'\\\n--data-raw \'{\n    "amount": "200.00",\n\n{{ This will be displayed as-is }}\n\nfunction fancyAlert(arg) {\n  if (arg) {\n    $.facebox({div: \'#foo\'})\n  }\n}\n\n\n<?php\necho str_word_count("PHP");\n?> \n\n\nfunction fancyAlert(arg) {\n  if (arg) {\n    $.facebox({div: \'#foo\'})\n  }\n}\n\n\n<?php\necho str_word_count("PHP");\n?> \n\n\n<img :src="$withBase(\'/foo.png\')" alt="foo">\n\n\nDETAILS\n\nThis is a details block, which does not work in IE / Edge\n\n{{ This will be displayed as-is }}\n\n\n# Demo component\n\n\n# Image in markdown\n\n\n\n\n\n * Heading 2\n   * Heading 3\n * Tips\n * Sidebar code sections\n   * Single language\n   * 1 method + 1 language (w/o a switcher)\n   * Multiple methods/objects and languages (w/o switcher)\n   * Multiple methods/objects and languages (with switcher)\n * Table\n * Code examples\n * Demo component\n * Image in markdown\n * Tabs\n * Tech diagrams with mermaids\n * Test\n\n\n\n\n# Tabs\n\n:::: tabs type:board-card ::: tab PHP lazy\n\n<?php\necho str_word_count("PHP example");\n?> \n\n\n::: ::: tab JavaScript lazy\n\nfunction fancyAlert(arg) {\n  if (arg) {\n    $.facebox({div: \'#foo\'})\n  }\n}\n\n\n::: ::::\n\nyarn create vuepress-site [optionalDirectoryName]\n\n\nnpx create-vuepress-site [optionalDirectoryName]\n\n\n\n# Tech diagrams with mermaids\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>+Mobile Money Provider: POST /transactions/type/merchantpay important link Note right of Mobile Money Provider: (1) The merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is "pending". Mobile Money Provider--\x3e>-Merchant: HTTP 202 (Request State Object) Mobile Money Provider->>+Payer: Obtain Customer Authorisation Note right of Payer: (2) The Payer is requested by the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer\nauthorisation. Payer--\x3e>-Mobile Money Provider: (Authorised) Mobile Money Provider->>+Merchant: PUT (Callback URL) (transctions Object) Note right of Mobile Money Provider: (3) The MMP informs the Merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Merchant--\x3e>-Mobile Money Provider: HTTP 204\n\n\n# Test\n\nTest me please',normalizedContent:'# heading 1\n\nit is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. the point of using lorem ipsum is that it has a more-or-less normal distribution of letters, as opposed to using \'content here, content here\', making it look like readable english. many desktop publishing packages and web page editors now use lorem ipsum as their default model text, and a search for \'lorem ipsum\' will uncover many web sites still in their infancy. various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\n\n\n# heading 1\n\n\n# heading 2\n\nfermentum, at volutpat tincidunt ut. dui id aliquam sed interdum imperdiet. donec magna egestas in neque, sed tempor nisl dapibus.\n\n\n# heading 3\n\nfermentum, at volutpat tincidunt ut. dui id aliquam sed interdum imperdiet. donec magna egestas in neque, sed tempor nisl dapibus.\n\n\n# tips\n\nnote\n\nhendrerit rhoncus, neque nunc massa purus risus.\n\nwarning\n\nhendrerit rhoncus, neque nunc massa purus risus.\n\nwarning\n\nhendrerit rhoncus, neque nunc massa purus risus.\n\n\n# sidebar code sections\n\n\n# single language\n\nthis will require a single group use as per vuepress documentation, or as per the next example (here and next we assume that the code group is wrapped by wrappers from above).\n\nin a few word just use <code-group> tag as a wrapper for a view <code-block> and inside the view add the other combination of <code-group> and <code-block> to include the object name and info.\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n"debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\nget .../transactions/36125b528237\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n<?php \nrequire_once("mm-api.php");\ntry {\n  $transferid = 11111111;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\n<?php \nrequire_once("mm-api.php");\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\n<?php \nrequire_once("mm-api.php");\ntry {\n  $transferid = 33333333;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\noperation   path                                         description\npost        post                                         to be used for transaction creation when the provider’s api\n            /transactions/type/{transactiontype}         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get                                          to view a transaction.\n            /transactions/{transactionreference}\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n\n\n\n\n\n# 1 method + 1 language (w/o a switcher)\n\nthis is an example of how the right sidebar can be used for a single method/object w/o adding a language switcher.\n\ne.g. a single method/object needs to be described in one or few languages.\n\njust use the default 2 groups view and code, where code will include a group of two blocks are named as languages, e.g. php and javascript.\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n//this is javascript\nrequire_once("mm-api.php");\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}\n\ntry {\n    $transferid = 22222222;\n    $transfer = $api->transfers->get($transferid);\n} catch(mm-api\\libraries\\responseexception $e) {\n    $e->geterrordetails()\n} catch(mm-api\\libraries\\exception $e) {\n}  \n\n\n<?php \n//this is php\nrequire_once("mm-api.php");\ntry {\n  $transferid = 11111111;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\noperation   path                                   description\npost        post                                   to be used for transaction creation when the provider’s api\n            /transactions/type/{transactiontype}   gateway requires that the transaction type be identified in\n                                                   the url.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# multiple methods/objects and languages (w/o switcher)\n\nthis is an example of how multiple methods/objects and languages can be supported.\n\ne.g. we need 2 methods and code examples in two languages for them as separate tabs / <code-group>s.\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\nget .../transactions/36125b528237\n\n\n//this is javascript\ntry {\n  $transferid = 11111111;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n\n\n//this is javascript\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e)\n\n\n<?php \n//this is php\nrequire_once("mm-api.php");\ntry {\n  $transferid = 11111111;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\n<?php \n//this is php\nrequire_once("mm-api.php");\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\noperation   path                                   description\npost        post                                   to be used for transaction creation when the provider’s api\n            /transactions/type/{transactiontype}   gateway requires that the transaction type be identified in\n                                                   the url.\nview        get                                    to view a transaction.\n            /transactions/{transactionreference}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# multiple methods/objects and languages (with switcher)\n\nthis is an example of how multiple methods/objects and languages can be supported.\n\ne.g. we need 2 methods and code examples in two languages for them.\n\nthis will require adding methods and code examples for all languages wrapping them into <code-language-selector> tags.\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\nget .../transactions/36125b528237\n\n\n//this is javascript\ntry {\n  $transferid = 11111111;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n\n\n//this is javascript\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e)\n\n\n<?php \n//this is php\nrequire_once("mm-api.php");\ntry {\n  $transferid = 11111111;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\n<?php \n//this is php\nrequire_once("mm-api.php");\ntry {\n  $transferid = 22222222;\n  $transfer = $api->transfers->get($transferid);  \n} catch(mm-api\\libraries\\responseexception $e) {\n  $e->geterrordetails() \n} catch(mm-api\\libraries\\exception $e) {\n}  \n?>\n\n\noperation   path                                   description\npost        post                                   to be used for transaction creation when the provider’s api\n            /transactions/type/{transactiontype}   gateway requires that the transaction type be identified in\n                                                   the url.\nview        get                                    to view a transaction.\n            /transactions/{transactionreference}\n\n\n# table\n\naudience                 usage                                                    role\nmobile money providers   to understand how to implement the mobile money api to   api provider\n                         receive payments from merchants.\nmerchants                to understand how to implement the mobile money api to   api consumer\n                         accept mobile money payments.\n\nfermentum, at volutpat tincidunt ut. dui id aliquam sed interdum imperdiet. donec magna egestas in neque, sed tempor nisl dapibus.\n\n\n# code examples\n\npost/transactions/type/merchantpay \\\n\ncurl --location --request post \'https://sandbox.mobilemoneyapi.io/simulator/v1.2/passthrough/mm/transactions/type/merchantpay\'\\\n--header \'x-correlationid: please enter your uuid here\'\\\n--header \'x-callback-url: please enter your callback url here\'\\\n--header \'content-type: application/json\'\\\n--data-raw \'{\n    "amount": "200.00",\n\n{{ this will be displayed as-is }}\n\nfunction fancyalert(arg) {\n  if (arg) {\n    $.facebox({div: \'#foo\'})\n  }\n}\n\n\n<?php\necho str_word_count("php");\n?> \n\n\nfunction fancyalert(arg) {\n  if (arg) {\n    $.facebox({div: \'#foo\'})\n  }\n}\n\n\n<?php\necho str_word_count("php");\n?> \n\n\n<img :src="$withbase(\'/foo.png\')" alt="foo">\n\n\ndetails\n\nthis is a details block, which does not work in ie / edge\n\n{{ this will be displayed as-is }}\n\n\n# demo component\n\n\n# image in markdown\n\n\n\n\n\n * heading 2\n   * heading 3\n * tips\n * sidebar code sections\n   * single language\n   * 1 method + 1 language (w/o a switcher)\n   * multiple methods/objects and languages (w/o switcher)\n   * multiple methods/objects and languages (with switcher)\n * table\n * code examples\n * demo component\n * image in markdown\n * tabs\n * tech diagrams with mermaids\n * test\n\n\n\n\n# tabs\n\n:::: tabs type:board-card ::: tab php lazy\n\n<?php\necho str_word_count("php example");\n?> \n\n\n::: ::: tab javascript lazy\n\nfunction fancyalert(arg) {\n  if (arg) {\n    $.facebox({div: \'#foo\'})\n  }\n}\n\n\n::: ::::\n\nyarn create vuepress-site [optionaldirectoryname]\n\n\nnpx create-vuepress-site [optionaldirectoryname]\n\n\n\n# tech diagrams with mermaids\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>+mobile money provider: post /transactions/type/merchantpay important link note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is "pending". mobile money provider--\x3e>-merchant: http 202 (request state object) mobile money provider->>+payer: obtain customer authorisation note right of payer: (2) the payer is requested by the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer\nauthorisation. payer--\x3e>-mobile money provider: (authorised) mobile money provider->>+merchant: put (callback url) (transctions object) note right of mobile money provider: (3) the mmp informs the merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. merchant--\x3e>-mobile money provider: http 204\n\n\n# test\n\ntest me please',charsets:{}},{title:"FinTech Providers (Insurance Savings Loans)",frontmatter:{pageClass:"industry-page custom",title:"FinTech Providers (Insurance Savings Loans)"},regularPath:"/fintech-providers/",relativePath:"fintech-providers/index.md",key:"v-d17b4d9e",path:"/fintech-providers/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:252},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:277},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:818},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:277},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:818},{level:2,title:"Succeed case study",slug:"succeed-case-study",normalizedTitle:"succeed case study",charIndex:2574},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:3892}],headersStr:"Use cases Introduction Intended Audience Introduction Intended Audience Succeed case study Ready to explore?",content:"Fintech companies that provide services such as insurance and other digital financial services can use the GSMA API specification to enable their customer to make one-off bill payments or set up recurring payments for services such as subscriptions.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe Recurring Payments Mobile Money APIs allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                        ROLE\nMobile Money Providers   - To understand how to implement the Mobile Money API to     API Provider\n                         receive recurring payment requests from service providers.\n                         - To understand how to implement the Mobile Money API to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nService Providers        To understand how to implement the Mobile Money API to       API Consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nStart developing\n\n\n# Introduction\n\nThe Bill Payments Mobile Money APIs allow service providers to accept bill payments from mobile money customers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                         ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to make   API Consumer\n                         bill payments to service providers.\nService Providers        To understand how to implement the Mobile Money API to        API Provider\n                         accept bill payments from Mobile Money Providers.\n\nStart developing\n\n\n# Succeed case study\n\nThe third party provides inclusive insurance services to multiple countries within the Sub-Saharan region. Services available include health, life, funeral and property insurance. The insurance provider is currently directly integrated with five MMPs, and working on expanding integrations with other MMPs. Working with MMPs, is expanding the reach of the insurance provider as the MMPs’ distributions tend to be higher, enabling the insurer to distribute services to consumers that have been traditionally excluded. The drawback for the third-party insurance provider when dealing with multiple MMP integrations has included maintenance, costs and speed of integrations as the expectations tend to vary on a partner basis. To continue reaching low income people, the insurance provider would benefit from integrating with a larger range of MMPs, enabling higher distribution. In addition, offering insurance as part of a bundle package can also increase mobile money usage as MMPs can cross-sell other services. Currently, there is no Standardised API available for the Insurance Provider; however, having access to one will enable it to offer inclusive insurance to a wider range of users, particularly those in remote areas. Inclusivity Insurance Provider\n\nBill Payments\n\nRecurring Payments\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}",normalizedContent:"fintech companies that provide services such as insurance and other digital financial services can use the gsma api specification to enable their customer to make one-off bill payments or set up recurring payments for services such as subscriptions.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe recurring payments mobile money apis allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                        role\nmobile money providers   - to understand how to implement the mobile money api to     api provider\n                         receive recurring payment requests from service providers.\n                         - to understand how to implement the mobile money api to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nservice providers        to understand how to implement the mobile money api to       api consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nstart developing\n\n\n# introduction\n\nthe bill payments mobile money apis allow service providers to accept bill payments from mobile money customers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                         role\nmobile money providers   to understand how to implement the mobile money api to make   api consumer\n                         bill payments to service providers.\nservice providers        to understand how to implement the mobile money api to        api provider\n                         accept bill payments from mobile money providers.\n\nstart developing\n\n\n# succeed case study\n\nthe third party provides inclusive insurance services to multiple countries within the sub-saharan region. services available include health, life, funeral and property insurance. the insurance provider is currently directly integrated with five mmps, and working on expanding integrations with other mmps. working with mmps, is expanding the reach of the insurance provider as the mmps’ distributions tend to be higher, enabling the insurer to distribute services to consumers that have been traditionally excluded. the drawback for the third-party insurance provider when dealing with multiple mmp integrations has included maintenance, costs and speed of integrations as the expectations tend to vary on a partner basis. to continue reaching low income people, the insurance provider would benefit from integrating with a larger range of mmps, enabling higher distribution. in addition, offering insurance as part of a bundle package can also increase mobile money usage as mmps can cross-sell other services. currently, there is no standardised api available for the insurance provider; however, having access to one will enable it to offer inclusive insurance to a wider range of users, particularly those in remote areas. inclusivity insurance provider\n\nbill payments\n\nrecurring payments\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}",charsets:{}},{frontmatter:{pageClass:"auth-page"},regularPath:"/forgot-password/confirmation.html",relativePath:"forgot-password/confirmation.md",key:"v-347ddf46",path:"/forgot-password/confirmation.html",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{pageClass:"auth-page"},regularPath:"/forgot-password/",relativePath:"forgot-password/index.md",key:"v-ad15e4de",path:"/forgot-password/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Glossary",frontmatter:{pageClass:"glossary-page custom",title:"Glossary"},regularPath:"/glossary/",relativePath:"glossary/index.md",key:"v-cf98898a",path:"/glossary/",headers:[{level:5,title:"ATM",slug:"atm",normalizedTitle:"atm",charIndex:104},{level:5,title:"Agent",slug:"agent",normalizedTitle:"agent",charIndex:392},{level:5,title:"API Service",slug:"api-service",normalizedTitle:"api service",charIndex:681},{level:5,title:"Application Programming Interfaces (APIs)",slug:"application-programming-interfaces-apis",normalizedTitle:"application programming interfaces (apis)",charIndex:882},{level:5,title:"Authentication",slug:"authentication",normalizedTitle:"authentication",charIndex:1180},{level:5,title:"Authorisation",slug:"authorisation",normalizedTitle:"authorisation",charIndex:1396},{level:5,title:"Business",slug:"business",normalizedTitle:"business",charIndex:1692},{level:5,title:"Client",slug:"client",normalizedTitle:"client",charIndex:1888},{level:5,title:"GUID",slug:"guid",normalizedTitle:"guid",charIndex:2041},{level:5,title:"HTTP",slug:"http",normalizedTitle:"http",charIndex:2199},{level:5,title:"ISO",slug:"iso",normalizedTitle:"iso",charIndex:2375},{level:5,title:"ITU",slug:"itu",normalizedTitle:"itu",charIndex:2493},{level:5,title:"JSON",slug:"json",normalizedTitle:"json",charIndex:2614},{level:5,title:"Merchant",slug:"merchant",normalizedTitle:"merchant",charIndex:2857},{level:5,title:"MSISDN",slug:"msisdn",normalizedTitle:"msisdn",charIndex:2976},{level:5,title:"Object",slug:"object",normalizedTitle:"object",charIndex:3105},{level:5,title:"Organisation",slug:"organisation",normalizedTitle:"organisation",charIndex:3241},{level:5,title:"Provider",slug:"provider",normalizedTitle:"provider",charIndex:3452},{level:5,title:"Resource",slug:"resource",normalizedTitle:"resource",charIndex:3517},{level:5,title:"REST-based API",slug:"rest-based-api",normalizedTitle:"rest-based api",charIndex:3705},{level:5,title:"URI",slug:"uri",normalizedTitle:"uri",charIndex:4456},{level:5,title:"Wallet",slug:"wallet",normalizedTitle:"wallet",charIndex:4711}],headersStr:"ATM Agent API Service Application Programming Interfaces (APIs) Authentication Authorisation Business Client GUID HTTP ISO ITU JSON Merchant MSISDN Object Organisation Provider Resource REST-based API URI Wallet",content:"Glossary Browse our glossary to find specific words.\n * {{ letter }}\n\n{{ letter }}\n\n\nNo results found.\n\n# ATM\n\nAutomated Teller Machine. Enables customer to be able to perform financial transactions without the need for a human cashier. For mobile money, the ATM machine can be considered as an automated agent, allowing withdrawals and some case deposits from and to the customer’s wallet.\n\n# Agent\n\nA person or business that is contracted to facilitate transactions for users. The most important of these are cash-in and cash-out (i.e. loading value into the mobile money system, and then converting it back to cash again); in many instances, agents register new customers too.\n\n# API Service\n\nAn API Service comprises of a URI which when combined with a HTTP Operation (GET, PATCH, POST) enables a specified operation to be conducted on a specific resource or set of resources.\n\n# Application Programming Interfaces (APIs)\n\nIn computer programming, an application programming interface (API) is a set of routines, protocols, and tools for building software applications. An API expresses a software component in terms of its operations, inputs, outputs, and underlying types.\n\n# Authentication\n\nConfirms the identity of the entity that is requesting the service by verifying supplied credential(s). In this document, the requesting entity is typically referred to as the initiator or sender.\n\n# Authorisation\n\nAuthorisation provides an authenticated identity with access to the system resources/services to which they are entitled. In the context of this document, the requesting entity (initiator) is provided with a defined set of services and functions that they can perform over API.\n\n# Business\n\nDescribes an entity such as a public limited or limited company that uses mobile money as a service. This includes taking bill payments, making bill payments and disbursing salaries.\n\n# Client\n\nDescribes the calling system/party that initiates and interacts with the API service. The Client may or may not be the debit or credit party.\n\n# GUID\n\nGlobally Unique Identifier. GUIDs are usually stored as 128-bit values and are used for as the datatype for correlation IDs in the mobile money API.\n\n# HTTP\n\nAcronym for Hyper Text Transfer Protocol. HTTP is the foundation of data communication for the World Wide Web. HTTP is the protocol to exchange or transfer hypertext.\n\n# ISO\n\nInternational Organisation for Standardisation. A number of ISO standards are used with the mobile money API.\n\n# ITU\n\nInternational Telecommunications Agency. ITU MSISDN format standards have been adopted for the mobile money API.\n\n# JSON\n\nAcronym for JavaScript Object Notation. Used to transmit data objects containing attribute/value pairs. One of two protocols (the other being XML) considered as the basis for a Data Exchange format for mobile money API harmonisation.\n\n# Merchant\n\nA retail merchant that accepts e-Money from mobile money customers in exchange for goods and/or services.\n\n# MSISDN\n\nA number uniquely identifying a subscription in a GSM or a UMTS mobile network. Analogous with a mobile phone number.\n\n# Object\n\nAn object holds a set of properties. Objects can be combined or used in isolation to provide a representation of a resource.\n\n# Organisation\n\nDescribes a non-business entity such as a charity or government department that uses mobile money as a service. This includes taking bill payments, making bill payments and disbursing salaries.\n\n# Provider\n\nHosts the Mobile Money API services (or subset of).\n\n# Resource\n\nA resource is the target for an API operation as identified in the API request. Resources are conceptually different from the representations that are returned to the client.\n\n# REST-based API\n\nIn computing, Representational State Transfer (REST) is the software architectural style adopted by many organisations that offer APIs. REST stipulates that interacting systems exhibit the following characteristics: Client-Server. Responsibilities between clients and servers are explicitly defined. Stateless. No context is stored between client and server during communication. Cacheable. As on the World Wide Web, clients and intermediaries can cache responses Layered System. A client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. Uniform Interface. A uniform interface simplifies and decouples the architecture, which enables each part to evolve independently.\n\n# URI\n\nAcronym for Uniform Resource Identifier. The URI is a string of characters used to identify a resource (such as an account, for example). In APIs a URI is represented in the form of a URL which is generally used to identify the service to invoke.\n\n# Wallet\n\nTerm used in this document to describe the store of value that identities (customers, agents, merchants and businesses) use to store e-Money. In general, the document uses the term Account in place of Wallet.",normalizedContent:"glossary browse our glossary to find specific words.\n * {{ letter }}\n\n{{ letter }}\n\n\nno results found.\n\n# atm\n\nautomated teller machine. enables customer to be able to perform financial transactions without the need for a human cashier. for mobile money, the atm machine can be considered as an automated agent, allowing withdrawals and some case deposits from and to the customer’s wallet.\n\n# agent\n\na person or business that is contracted to facilitate transactions for users. the most important of these are cash-in and cash-out (i.e. loading value into the mobile money system, and then converting it back to cash again); in many instances, agents register new customers too.\n\n# api service\n\nan api service comprises of a uri which when combined with a http operation (get, patch, post) enables a specified operation to be conducted on a specific resource or set of resources.\n\n# application programming interfaces (apis)\n\nin computer programming, an application programming interface (api) is a set of routines, protocols, and tools for building software applications. an api expresses a software component in terms of its operations, inputs, outputs, and underlying types.\n\n# authentication\n\nconfirms the identity of the entity that is requesting the service by verifying supplied credential(s). in this document, the requesting entity is typically referred to as the initiator or sender.\n\n# authorisation\n\nauthorisation provides an authenticated identity with access to the system resources/services to which they are entitled. in the context of this document, the requesting entity (initiator) is provided with a defined set of services and functions that they can perform over api.\n\n# business\n\ndescribes an entity such as a public limited or limited company that uses mobile money as a service. this includes taking bill payments, making bill payments and disbursing salaries.\n\n# client\n\ndescribes the calling system/party that initiates and interacts with the api service. the client may or may not be the debit or credit party.\n\n# guid\n\nglobally unique identifier. guids are usually stored as 128-bit values and are used for as the datatype for correlation ids in the mobile money api.\n\n# http\n\nacronym for hyper text transfer protocol. http is the foundation of data communication for the world wide web. http is the protocol to exchange or transfer hypertext.\n\n# iso\n\ninternational organisation for standardisation. a number of iso standards are used with the mobile money api.\n\n# itu\n\ninternational telecommunications agency. itu msisdn format standards have been adopted for the mobile money api.\n\n# json\n\nacronym for javascript object notation. used to transmit data objects containing attribute/value pairs. one of two protocols (the other being xml) considered as the basis for a data exchange format for mobile money api harmonisation.\n\n# merchant\n\na retail merchant that accepts e-money from mobile money customers in exchange for goods and/or services.\n\n# msisdn\n\na number uniquely identifying a subscription in a gsm or a umts mobile network. analogous with a mobile phone number.\n\n# object\n\nan object holds a set of properties. objects can be combined or used in isolation to provide a representation of a resource.\n\n# organisation\n\ndescribes a non-business entity such as a charity or government department that uses mobile money as a service. this includes taking bill payments, making bill payments and disbursing salaries.\n\n# provider\n\nhosts the mobile money api services (or subset of).\n\n# resource\n\na resource is the target for an api operation as identified in the api request. resources are conceptually different from the representations that are returned to the client.\n\n# rest-based api\n\nin computing, representational state transfer (rest) is the software architectural style adopted by many organisations that offer apis. rest stipulates that interacting systems exhibit the following characteristics: client-server. responsibilities between clients and servers are explicitly defined. stateless. no context is stored between client and server during communication. cacheable. as on the world wide web, clients and intermediaries can cache responses layered system. a client cannot ordinarily tell whether it is connected directly to the end server, or to an intermediary along the way. uniform interface. a uniform interface simplifies and decouples the architecture, which enables each part to evolve independently.\n\n# uri\n\nacronym for uniform resource identifier. the uri is a string of characters used to identify a resource (such as an account, for example). in apis a uri is represented in the form of a url which is generally used to identify the service to invoke.\n\n# wallet\n\nterm used in this document to describe the store of value that identities (customers, agents, merchants and businesses) use to store e-money. in general, the document uses the term account in place of wallet.",charsets:{}},{title:"Governments",frontmatter:{pageClass:"industry-page custom",title:"Governments"},regularPath:"/governments/",relativePath:"governments/index.md",key:"v-b972491e",path:"/governments/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:329},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:354},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:354},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:7558},{level:2,title:"Introduction",slug:"introduction-3",normalizedTitle:"introduction",charIndex:354},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:7558},{level:2,title:"Testimonials",slug:"testimonials",normalizedTitle:"testimonials",charIndex:9362},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:9752}],headersStr:"Use cases Introduction Introduction Intended Audience Introduction Intended Audience Testimonials Ready to explore?",content:'Government agencies can use the GSMA API specification to facilitate government to person (G2P) cash disbursement for social welfare programmes and make bulk payments to pay employee salaries.\n\nDisbursing payments through Mobile Money platforms has been shown to be more efficient and cost effective compared to other methods.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here\n\nStart developing\n\n\n# Introduction\n\nThe Disbursement Mobile Money APIs allow organisations to disburse funds to mobile money recipients.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         organisations to disburse payments in singular and in bulk.\nNGOs                     To understand how to implement the Mobile Money API to         API Consumer\n                         provide aid payments to mobile money recipients.\nGovernment Departments   To understand how to implement the Mobile Money API to         API Consumer\n                         provide social credit payments to mobile money recipients.\nEmployers                To understand how to implement the Mobile Money API to         API Consumer\n                         provide salary payments to mobile money recipients.\n\nStart developing\n\n\n# Introduction\n\nThe Bill Payments Mobile Money APIs allow service providers to accept bill payments from mobile money customers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                         ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to make   API Consumer\n                         bill payments to service providers.\nService Providers        To understand how to implement the Mobile Money API to        API Provider\n                         accept bill payments from Mobile Money Providers.\n\nStart developing\n\n\n# Testimonials\n\nMobile money is revolutionising the way citizens in our country are making payments. As a government authority, we are benefiting from direct API Integrations with MMPs as they enable users to make fast, efficient and secure payments for government services; while lessening the use of cash. URA Government / Government Agency\n\nDisbursements\n\nBill Payments\n\nP2P transfers\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}',normalizedContent:'government agencies can use the gsma api specification to facilitate government to person (g2p) cash disbursement for social welfare programmes and make bulk payments to pay employee salaries.\n\ndisbursing payments through mobile money platforms has been shown to be more efficient and cost effective compared to other methods.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here\n\nstart developing\n\n\n# introduction\n\nthe disbursement mobile money apis allow organisations to disburse funds to mobile money recipients.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         organisations to disburse payments in singular and in bulk.\nngos                     to understand how to implement the mobile money api to         api consumer\n                         provide aid payments to mobile money recipients.\ngovernment departments   to understand how to implement the mobile money api to         api consumer\n                         provide social credit payments to mobile money recipients.\nemployers                to understand how to implement the mobile money api to         api consumer\n                         provide salary payments to mobile money recipients.\n\nstart developing\n\n\n# introduction\n\nthe bill payments mobile money apis allow service providers to accept bill payments from mobile money customers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                         role\nmobile money providers   to understand how to implement the mobile money api to make   api consumer\n                         bill payments to service providers.\nservice providers        to understand how to implement the mobile money api to        api provider\n                         accept bill payments from mobile money providers.\n\nstart developing\n\n\n# testimonials\n\nmobile money is revolutionising the way citizens in our country are making payments. as a government authority, we are benefiting from direct api integrations with mmps as they enable users to make fast, efficient and secure payments for government services; while lessening the use of cash. ura government / government agency\n\ndisbursements\n\nbill payments\n\np2p transfers\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}',charsets:{}},{title:"Home",frontmatter:{pageClass:"home-page custom",title:"Home"},regularPath:"/",relativePath:"index.md",key:"v-03130251",path:"/",headers:[{level:2,title:"What you’ll get",slug:"what-you-ll-get",normalizedTitle:"what you’ll get",charIndex:301},{level:2,title:"Benefits and objectives",slug:"benefits-and-objectives",normalizedTitle:"benefits and objectives",charIndex:499},{level:2,title:"Mobile Money Metrics",slug:"mobile-money-metrics",normalizedTitle:"mobile money metrics",charIndex:1096},{level:2,title:"Explore what’s possible",slug:"explore-what-s-possible",normalizedTitle:"explore what’s possible",charIndex:1255},{level:2,title:"Explore use cases",slug:"explore-use-cases",normalizedTitle:"explore use cases",charIndex:3339},{level:2,title:"Compliance platform",slug:"compliance-platform",normalizedTitle:"compliance platform",charIndex:4225},{level:2,title:"Collaboration platform",slug:"collaboration-platform",normalizedTitle:"collaboration platform",charIndex:4430},{level:2,title:"Get Started with Development",slug:"get-started-with-development",normalizedTitle:"get started with development",charIndex:4638},{level:2,title:"Testimonials",slug:"testimonials",normalizedTitle:"testimonials",charIndex:4805}],headersStr:"What you’ll get Benefits and objectives Mobile Money Metrics Explore what’s possible Explore use cases Compliance platform Collaboration platform Get Started with Development Testimonials",content:"Welcome to the GSMA Mobile Money API Developer Portal. The Mobile Money API is an initiative developed through collaboration between the mobile money industry and the GSMA, which provides a harmonized API Specification for all the common mobile money use cases which is both easy to use and secure.\n\n\n# What you’ll get\n\nWe provide access to harmonized API Specification for all the common mobile money use cases which is both easy to use and secure.\n * API Docs\n * API Use Cases\n * GSMA Simulator\n\n\n# Benefits and objectives\n\nLobortis porta aliquam morbi eget. Duis in vitae sed eleifend hendrerit justo, vestibulum, proin.\n\nFor API providers\n\n * Lobortis porta aliquam morbi eget. Duis in vitae sed eleifend hendrerit justo, vestibulum, proin.\n * Dictumst vel velit augue vitae, eu rhoncus quis.\n * Massa platea nunc metus vestibulum turpis lorem eu purus sed.\n\nFor API consumers\n\n * Aliquet sem ullamcorper metus, fames vivamus viverra varius ac aliquet.\n * Orci sodales sit aliquam enim non convallis. Pharetra, nulla sed consectetur eu suscipit diam.\n * Porta aenean a iaculis donec purus.\n\n\n# Mobile Money Metrics\n\nExplore our interactive tool that provides a comprehensive set of global metrics by combining unique data sources.\n\nDownload dataset\n\n\n# Explore what’s possible\n\nBibendum integer quam sem purus donec. Morbi volutpat euismod cras convallis quam.\n\nMobile Money Provider\n\nInteger pulvinar risus nisi tristique. Molestie dictumst ac in pulvinar et natoque semper vitae convallis.\nLearn more\n\n\nMobile Money Provider\n\nInteger pulvinar risus nisi tristique. Molestie dictumst ac in pulvinar et natoque semper vitae convallis.\nLearn more\n\nMerchants & Service Providers\n\nEuismod pulvinar mattis laoreet mauris neque egestas lorem enim. At scelerisque nisl eros, nunc, eu urna, nisl viverra non.\nLearn more\n\nGovernments\n\nRisus, ligula facilisis viverra placerat a neque sed. Sagittis, sit nunc consectetur amet feugiat ornare.\nLearn more\n\nHumanitarian Agencies\n\nTempor, pellentesque volutpat id ipsum ornare vestibulum, velit sed. Ut hendrerit commodo scelerisque ipsum vel.\nLearn more\n\nInternational Transfer Organisations\n\nFringilla egestas ut sit odio hendrerit in quis purus in. Molestie euismod cras dis neque eget urna eget amet enim.\nLearn more\n\nPayment Service Providers & Payment Aggregators\n\nAt et tristique vulputate est elementum aliquet. Odio magna semper mauris magna erat dolor justo condimentum.\nLearn more\n\nBanks & Microfinance Institutions\n\nAt et tristique vulputate est elementum aliquet. Odio magna semper mauris magna erat dolor justo condimentum.\nLearn more\n\nFinTech Providers (Insurance Savings Loans)\n\nEt vel tincidunt ipsum eleifend nisi. Ipsum sapien neque pellentesque nec nibh tellus scelerisque ut lectus.\nLearn more\n\nEmployers\n\nInteger pulvinar risus nisi tristique. Molestie dictumst ac in pulvinar et natoque semper vitae convallis.\nLearn more\n\nEnergy & Utilities & AgriTech\n\nEuismod pulvinar mattis laoreet mauris neque egestas lorem enim. At scelerisque nisl eros, nunc, eu urna, nisl viverra non.\nLearn more\n\nEducation & Health\n\nRisus, ligula facilisis viverra placerat a neque sed. Sagittis, sit nunc consectetur amet feugiat ornare.\nLearn more\n\nMobile Money Agents\n\nTempor, pellentesque volutpat id ipsum ornare vestibulum, velit sed. Ut hendrerit commodo scelerisque ipsum vel.\nLearn more\n\n\n# Explore use cases\n\nBibendum integer quam sem purus donec. Morbi volutpat euismod cras convallis quam.\nMerchant payments Ut hendrerit nunc id amet mollis. Cras urna dolor nibh a ut cursus ut.\nDisbursements Facilisis rutrum diam imperdiet euismod tincidunt id volutpat egestas. Fermentum ornare blandit.\nInternational transfers Facilisis rutrum diam imperdiet euismod tincidunt id volutpat egestas. Fermentum ornare blandit.\nP2P transfers Facilisis rutrum diam imperdiet euismod tincidunt id volutpat egestas. Fermentum ornare blandit.\nRecurring payments Ut hendrerit nunc id amet mollis. Cras urna dolor nibh a ut cursus ut.\nAccount linking Ut hendrerit nunc id amet mollis. Cras urna dolor nibh a ut cursus ut.\nBill payments Ut hendrerit nunc id amet mollis. Cras urna dolor nibh a ut cursus ut.\nAgent Services Ut hendrerit nunc id amet mollis. Cras urna dolor nibh a ut cursus ut.\n\n\n# Compliance platform\n\nDictumst habitasse ultrices elementum, consequat ultrices purus volutpat. Posuere amet amet, cum justo bibendum morbi. Auctor interdum morbi non platea justo, et neque.\nLearn more\n\n\n# Collaboration platform\n\nDictumst habitasse ultrices elementum, consequat ultrices purus volutpat. Posuere amet amet, cum justo bibendum morbi. Auctor interdum morbi non platea justo, et neque.\nLearn more\n\n\n# Get Started with Development\n\nWe offers a powerful and easy to use tools to take full advantage of the Mobile Money API Specification.\nLearn more Start developing\n\n\n# Testimonials\n\nAs a payment service provider that is directly integrated with over 35 MNO partners, we understand the importance of Standardised APIs to save time on development work, resources and keeping integrations up to date.\n\nCellulant\n\nPayment Service Provider\n\nMerchant Payments\n\nInternational Transfers\n\nP2P transfers\n\nMobile money is revolutionising the way citizens in our country are making payments. As a government authority, we are benefiting from direct API Integrations with MMPs as they enable users to make fast, efficient and secure payments for government services; while lessening the use of cash.\n\nUganda Revenue\n\nAuthority Government / Government Agency\n\nDisbursements\n\nBill Payments\n\nP2P transfers\n\nAs a platform that offers educational content through mobile money, we appreciate the importance of being integrated with MMPs using APIs. It enables our consumers to easily purchase desired content. As we continue to expand our services and customer base, we hope to have access to a Standard API in the future, which will enable us to reach a wider base of users in remote areas.\n\nEneza Education\n\nEducation Service Provider\n\nP2P Transfers\n\nRecurring Payments\n\nBill Payments\n\nOur mission is to extend affordable health services to users in remote areas, by using methods that are available to them such as mobile phones. By being integrated with MMPs, customers are able to easily make payments and subscribe to our services. Currently, we are integrated with 5 MMPs, and are looking to expand in the future, hopefully with the aid of a Standard API.\n\nBaobab Circle\n\nHealthcare Service Provider\n\nBill Payments\n\nRecurring Payments\n\nAs a financial service provider operating in a country where the majority of the population have access to banking services through their mobile phones, establishing partnerships and integrating with MMPs has benefited us when extending services to the financially exclude\n\nMusoni\n\nBanks and MFIs\n\nAccount Linking\n\nRecurring Payments",normalizedContent:"welcome to the gsma mobile money api developer portal. the mobile money api is an initiative developed through collaboration between the mobile money industry and the gsma, which provides a harmonized api specification for all the common mobile money use cases which is both easy to use and secure.\n\n\n# what you’ll get\n\nwe provide access to harmonized api specification for all the common mobile money use cases which is both easy to use and secure.\n * api docs\n * api use cases\n * gsma simulator\n\n\n# benefits and objectives\n\nlobortis porta aliquam morbi eget. duis in vitae sed eleifend hendrerit justo, vestibulum, proin.\n\nfor api providers\n\n * lobortis porta aliquam morbi eget. duis in vitae sed eleifend hendrerit justo, vestibulum, proin.\n * dictumst vel velit augue vitae, eu rhoncus quis.\n * massa platea nunc metus vestibulum turpis lorem eu purus sed.\n\nfor api consumers\n\n * aliquet sem ullamcorper metus, fames vivamus viverra varius ac aliquet.\n * orci sodales sit aliquam enim non convallis. pharetra, nulla sed consectetur eu suscipit diam.\n * porta aenean a iaculis donec purus.\n\n\n# mobile money metrics\n\nexplore our interactive tool that provides a comprehensive set of global metrics by combining unique data sources.\n\ndownload dataset\n\n\n# explore what’s possible\n\nbibendum integer quam sem purus donec. morbi volutpat euismod cras convallis quam.\n\nmobile money provider\n\ninteger pulvinar risus nisi tristique. molestie dictumst ac in pulvinar et natoque semper vitae convallis.\nlearn more\n\n\nmobile money provider\n\ninteger pulvinar risus nisi tristique. molestie dictumst ac in pulvinar et natoque semper vitae convallis.\nlearn more\n\nmerchants & service providers\n\neuismod pulvinar mattis laoreet mauris neque egestas lorem enim. at scelerisque nisl eros, nunc, eu urna, nisl viverra non.\nlearn more\n\ngovernments\n\nrisus, ligula facilisis viverra placerat a neque sed. sagittis, sit nunc consectetur amet feugiat ornare.\nlearn more\n\nhumanitarian agencies\n\ntempor, pellentesque volutpat id ipsum ornare vestibulum, velit sed. ut hendrerit commodo scelerisque ipsum vel.\nlearn more\n\ninternational transfer organisations\n\nfringilla egestas ut sit odio hendrerit in quis purus in. molestie euismod cras dis neque eget urna eget amet enim.\nlearn more\n\npayment service providers & payment aggregators\n\nat et tristique vulputate est elementum aliquet. odio magna semper mauris magna erat dolor justo condimentum.\nlearn more\n\nbanks & microfinance institutions\n\nat et tristique vulputate est elementum aliquet. odio magna semper mauris magna erat dolor justo condimentum.\nlearn more\n\nfintech providers (insurance savings loans)\n\net vel tincidunt ipsum eleifend nisi. ipsum sapien neque pellentesque nec nibh tellus scelerisque ut lectus.\nlearn more\n\nemployers\n\ninteger pulvinar risus nisi tristique. molestie dictumst ac in pulvinar et natoque semper vitae convallis.\nlearn more\n\nenergy & utilities & agritech\n\neuismod pulvinar mattis laoreet mauris neque egestas lorem enim. at scelerisque nisl eros, nunc, eu urna, nisl viverra non.\nlearn more\n\neducation & health\n\nrisus, ligula facilisis viverra placerat a neque sed. sagittis, sit nunc consectetur amet feugiat ornare.\nlearn more\n\nmobile money agents\n\ntempor, pellentesque volutpat id ipsum ornare vestibulum, velit sed. ut hendrerit commodo scelerisque ipsum vel.\nlearn more\n\n\n# explore use cases\n\nbibendum integer quam sem purus donec. morbi volutpat euismod cras convallis quam.\nmerchant payments ut hendrerit nunc id amet mollis. cras urna dolor nibh a ut cursus ut.\ndisbursements facilisis rutrum diam imperdiet euismod tincidunt id volutpat egestas. fermentum ornare blandit.\ninternational transfers facilisis rutrum diam imperdiet euismod tincidunt id volutpat egestas. fermentum ornare blandit.\np2p transfers facilisis rutrum diam imperdiet euismod tincidunt id volutpat egestas. fermentum ornare blandit.\nrecurring payments ut hendrerit nunc id amet mollis. cras urna dolor nibh a ut cursus ut.\naccount linking ut hendrerit nunc id amet mollis. cras urna dolor nibh a ut cursus ut.\nbill payments ut hendrerit nunc id amet mollis. cras urna dolor nibh a ut cursus ut.\nagent services ut hendrerit nunc id amet mollis. cras urna dolor nibh a ut cursus ut.\n\n\n# compliance platform\n\ndictumst habitasse ultrices elementum, consequat ultrices purus volutpat. posuere amet amet, cum justo bibendum morbi. auctor interdum morbi non platea justo, et neque.\nlearn more\n\n\n# collaboration platform\n\ndictumst habitasse ultrices elementum, consequat ultrices purus volutpat. posuere amet amet, cum justo bibendum morbi. auctor interdum morbi non platea justo, et neque.\nlearn more\n\n\n# get started with development\n\nwe offers a powerful and easy to use tools to take full advantage of the mobile money api specification.\nlearn more start developing\n\n\n# testimonials\n\nas a payment service provider that is directly integrated with over 35 mno partners, we understand the importance of standardised apis to save time on development work, resources and keeping integrations up to date.\n\ncellulant\n\npayment service provider\n\nmerchant payments\n\ninternational transfers\n\np2p transfers\n\nmobile money is revolutionising the way citizens in our country are making payments. as a government authority, we are benefiting from direct api integrations with mmps as they enable users to make fast, efficient and secure payments for government services; while lessening the use of cash.\n\nuganda revenue\n\nauthority government / government agency\n\ndisbursements\n\nbill payments\n\np2p transfers\n\nas a platform that offers educational content through mobile money, we appreciate the importance of being integrated with mmps using apis. it enables our consumers to easily purchase desired content. as we continue to expand our services and customer base, we hope to have access to a standard api in the future, which will enable us to reach a wider base of users in remote areas.\n\neneza education\n\neducation service provider\n\np2p transfers\n\nrecurring payments\n\nbill payments\n\nour mission is to extend affordable health services to users in remote areas, by using methods that are available to them such as mobile phones. by being integrated with mmps, customers are able to easily make payments and subscribe to our services. currently, we are integrated with 5 mmps, and are looking to expand in the future, hopefully with the aid of a standard api.\n\nbaobab circle\n\nhealthcare service provider\n\nbill payments\n\nrecurring payments\n\nas a financial service provider operating in a country where the majority of the population have access to banking services through their mobile phones, establishing partnerships and integrating with mmps has benefited us when extending services to the financially exclude\n\nmusoni\n\nbanks and mfis\n\naccount linking\n\nrecurring payments",charsets:{}},{title:"International Transfer Organisations",frontmatter:{pageClass:"industry-page custom",title:"International Transfer Organisations"},regularPath:"/international-transfer-organisations/",relativePath:"international-transfer-organisations/index.md",key:"v-8017e46a",path:"/international-transfer-organisations/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:361},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:386},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:900},{level:2,title:"Succeed case study",slug:"succeed-case-study",normalizedTitle:"succeed case study",charIndex:2397},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:3352}],headersStr:"Use cases Introduction Intended Audience Succeed case study Ready to explore?",content:"Organisations involved in transferring money across international borders such as remittance service providers rely on partnerships with mobile money providers.\n\nThe GSMA Mobile Money Specification can be used by international transfer organisations to integrate with mobile money wallets for a quick and easy pay-out channel for their customer’s recipients.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe International Transfer Mobile Money APIs allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                       USAGE                                                       ROLE\nFSP - Mobile Money Providers                   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive International transfers from other FSPs.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international transfers to other FSPs.\nFSP – International Remittance Organisations   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive international remittances from Mobile Money\n                                               Providers.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international remittances to Mobile Money Providers.\nInternational Transfer Hubs                    - To understand how to implement the Mobile Money APIs to   API Provider\n                                               receive international transfers from FSPs.\n                                               - To understand how to implement the Mobile Money APIs to   API Consumer\n                                               send international transfers to FSPs.\n\nStart developing\n\n\n# Succeed case study\n\nThe remittance provider completed its first direct integration with an MNO six years ago, and now currently integrated with multiple MNO partners. According to the provider, the direct API Integrations offer a higher level of convenience as the recipients do not have to go to physical locations to cash out. During the pandemic, it was difficult for some to access agents or banks and direct integrations speeded remittance transactions to end users. The organisation is currently looking to increase its MNO integration partners; however, some challenges are slowing down the speed of expansion. Recently, it experienced a length integration with a provider, taking nearly two years to complete. Integrating with more providers will increase the reach of users. A Standardised API would be beneficial for the organisation as it will allow integrations with multiple MMPs in a seamless manner. Mama Money\n\nInternational Transfers\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}",normalizedContent:"organisations involved in transferring money across international borders such as remittance service providers rely on partnerships with mobile money providers.\n\nthe gsma mobile money specification can be used by international transfer organisations to integrate with mobile money wallets for a quick and easy pay-out channel for their customer’s recipients.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe international transfer mobile money apis allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                       usage                                                       role\nfsp - mobile money providers                   - to understand how to implement the mobile money api to    api provider\n                                               receive international transfers from other fsps.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international transfers to other fsps.\nfsp – international remittance organisations   - to understand how to implement the mobile money api to    api provider\n                                               receive international remittances from mobile money\n                                               providers.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international remittances to mobile money providers.\ninternational transfer hubs                    - to understand how to implement the mobile money apis to   api provider\n                                               receive international transfers from fsps.\n                                               - to understand how to implement the mobile money apis to   api consumer\n                                               send international transfers to fsps.\n\nstart developing\n\n\n# succeed case study\n\nthe remittance provider completed its first direct integration with an mno six years ago, and now currently integrated with multiple mno partners. according to the provider, the direct api integrations offer a higher level of convenience as the recipients do not have to go to physical locations to cash out. during the pandemic, it was difficult for some to access agents or banks and direct integrations speeded remittance transactions to end users. the organisation is currently looking to increase its mno integration partners; however, some challenges are slowing down the speed of expansion. recently, it experienced a length integration with a provider, taking nearly two years to complete. integrating with more providers will increase the reach of users. a standardised api would be beneficial for the organisation as it will allow integrations with multiple mmps in a seamless manner. mama money\n\ninternational transfers\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}",charsets:{}},{title:"Humanitarian Agencies",frontmatter:{pageClass:"industry-page custom",title:"Humanitarian Agencies"},regularPath:"/humanitarian-agencies/",relativePath:"humanitarian-agencies/index.md",key:"v-ab347f5e",path:"/humanitarian-agencies/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:226},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:251},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:251},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:7455},{level:2,title:"Succeed case study",slug:"succeed-case-study",normalizedTitle:"succeed case study",charIndex:8313},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:9829}],headersStr:"Use cases Introduction Introduction Intended Audience Succeed case study Ready to explore?",content:'Humanitarian agencies such as non-governmental organisations (NGOs) can use the GSMA Mobile Money API specification to increase the speed, efficiency, accountability and transparency on how cash disbursements are delivered.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here\n\nStart developing\n\n\n# Introduction\n\nThe Disbursement Mobile Money APIs allow organisations to disburse funds to mobile money recipients.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         organisations to disburse payments in singular and in bulk.\nNGOs                     To understand how to implement the Mobile Money API to         API Consumer\n                         provide aid payments to mobile money recipients.\nGovernment Departments   To understand how to implement the Mobile Money API to         API Consumer\n                         provide social credit payments to mobile money recipients.\nEmployers                To understand how to implement the Mobile Money API to         API Consumer\n                         provide salary payments to mobile money recipients.\n\nStart developing\n\n\n# Succeed case study\n\nThe disbursement process has to be efficient and being directly integrated with the MNOs results in faster and more successful outreach. A lot of humanitarian work will be in non-urban areas, which might be more difficult to reach physically. Being able to distribute money via mobile wallets, which can be easily facilitated through integrations with MNOs, offers lot of convenience to the organisation’s disbursement process. The organisation is currently directly integrated with over 30 MNOs in various regions, mainly in the Sub-Saharan African region. As an organisation, it works with two types of beneficiaries, those that receive a large chunk of money as a response to a disaster, and those that receive recurring payments, such as supplementary income. The pandemic intensified the need for MNO integrations, for instance, it was easier to disburse money to women in slums in East Africa. Additionally, the advantages of disbursing directly to mobile wallets has been felt particularly when dealing with vulnerable women, who can access funds discreetly. Overall, the process is fast and secure. The organisation favours API integrations is it feels it lowers the security risk associated with physical distribution, for both the beneficiary and the humanitarian worker. As an organisation that response to global crises, it would benefit from a Standard API which can allow it to connect to more MNOs in various regions globally. Humanitarian Agency\n\nDisbursements\n\nP2P transfers\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}',normalizedContent:'humanitarian agencies such as non-governmental organisations (ngos) can use the gsma mobile money api specification to increase the speed, efficiency, accountability and transparency on how cash disbursements are delivered.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here\n\nstart developing\n\n\n# introduction\n\nthe disbursement mobile money apis allow organisations to disburse funds to mobile money recipients.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         organisations to disburse payments in singular and in bulk.\nngos                     to understand how to implement the mobile money api to         api consumer\n                         provide aid payments to mobile money recipients.\ngovernment departments   to understand how to implement the mobile money api to         api consumer\n                         provide social credit payments to mobile money recipients.\nemployers                to understand how to implement the mobile money api to         api consumer\n                         provide salary payments to mobile money recipients.\n\nstart developing\n\n\n# succeed case study\n\nthe disbursement process has to be efficient and being directly integrated with the mnos results in faster and more successful outreach. a lot of humanitarian work will be in non-urban areas, which might be more difficult to reach physically. being able to distribute money via mobile wallets, which can be easily facilitated through integrations with mnos, offers lot of convenience to the organisation’s disbursement process. the organisation is currently directly integrated with over 30 mnos in various regions, mainly in the sub-saharan african region. as an organisation, it works with two types of beneficiaries, those that receive a large chunk of money as a response to a disaster, and those that receive recurring payments, such as supplementary income. the pandemic intensified the need for mno integrations, for instance, it was easier to disburse money to women in slums in east africa. additionally, the advantages of disbursing directly to mobile wallets has been felt particularly when dealing with vulnerable women, who can access funds discreetly. overall, the process is fast and secure. the organisation favours api integrations is it feels it lowers the security risk associated with physical distribution, for both the beneficiary and the humanitarian worker. as an organisation that response to global crises, it would benefit from a standard api which can allow it to connect to more mnos in various regions globally. humanitarian agency\n\ndisbursements\n\np2p transfers\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}',charsets:{}},{frontmatter:{pageClass:"auth-page"},regularPath:"/login/",relativePath:"login/index.md",key:"v-6f863d11",path:"/login/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Merchants & Service Providers",frontmatter:{pageClass:"industry-page custom",title:"Merchants & Service Providers"},regularPath:"/merchants-and-service-providers/",relativePath:"merchants-and-service-providers/index.md",key:"v-ff4aea1e",path:"/merchants-and-service-providers/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:315},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:340},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:1669},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:340},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:1669},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:3451}],headersStr:"Use cases Introduction Intended Audience Introduction Intended Audience Ready to explore?",content:"Merchants are typically stores selling products or services in a physical location or online.\n\nMerchants can use the GSMA API specification to accept online payments from customers using Mobile Money as a payment method. As well as one-off payments, furthermore, there is the option to set up recurring payments.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe Merchant Payment Mobile Money APIs allow merchants to accept payments from mobile money customers. Supported payment mechanisms include:\n\n * Payee-initiated merchant payment. The merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * Payer-initiated merchant payment. The payer initiates the payment by specifying the merchant that is to be paid.\n * Merchant payment via pre-authorised payment code. The payer generates a payment authorisation code up to a maximum payment amount. The merchant then enters or scans (if rendered as a QR code) the payer’s code to perform the payment.\n\nClosed loop and open-loop merchant payments are supported by the Mobile Money API. Closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. Open loop payments occur where the payer and payee accounts reside with different mobile money providers. For further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                    ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to   API Provider\n                         receive payments from merchants.\nMerchants                To understand how to implement the Mobile Money API to   API Consumer\n                         accept mobile money payments.\n\nStart developing\n\n\n# Introduction\n\nThe Recurring Payments Mobile Money APIs allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                        ROLE\nMobile Money Providers   - To understand how to implement the Mobile Money API to     API Provider\n                         receive recurring payment requests from service providers.\n                         - To understand how to implement the Mobile Money API to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nService Providers        To understand how to implement the Mobile Money API to       API Consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nStart developing\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}",normalizedContent:"merchants are typically stores selling products or services in a physical location or online.\n\nmerchants can use the gsma api specification to accept online payments from customers using mobile money as a payment method. as well as one-off payments, furthermore, there is the option to set up recurring payments.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe merchant payment mobile money apis allow merchants to accept payments from mobile money customers. supported payment mechanisms include:\n\n * payee-initiated merchant payment. the merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * payer-initiated merchant payment. the payer initiates the payment by specifying the merchant that is to be paid.\n * merchant payment via pre-authorised payment code. the payer generates a payment authorisation code up to a maximum payment amount. the merchant then enters or scans (if rendered as a qr code) the payer’s code to perform the payment.\n\nclosed loop and open-loop merchant payments are supported by the mobile money api. closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. open loop payments occur where the payer and payee accounts reside with different mobile money providers. for further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                    role\nmobile money providers   to understand how to implement the mobile money api to   api provider\n                         receive payments from merchants.\nmerchants                to understand how to implement the mobile money api to   api consumer\n                         accept mobile money payments.\n\nstart developing\n\n\n# introduction\n\nthe recurring payments mobile money apis allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                        role\nmobile money providers   - to understand how to implement the mobile money api to     api provider\n                         receive recurring payment requests from service providers.\n                         - to understand how to implement the mobile money api to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nservice providers        to understand how to implement the mobile money api to       api consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nstart developing\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}",charsets:{}},{title:"Mobile Money Agents",frontmatter:{pageClass:"industry-page custom",title:"Mobile Money Agents"},regularPath:"/mobile-money-agents/",relativePath:"mobile-money-agents/index.md",key:"v-1f7e901e",path:"/mobile-money-agents/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:228},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:253},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:1967},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:2647}],headersStr:"Use cases Introduction Intended Audience Ready to explore?",content:"Mobile money agents are the primary point of contact for mobile money account holders. Agents provide a support service where account holders can register for the mobile money service, cash-in and cash-out from their account.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nAgent Services comprises of the following:\n\n\n\nCash-in and Cash-out Services\n\n * Agent-initiated Cash-out. The agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * Customer-initiated Cash-out. The mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * Cash-out via Authorisation Code. The customer generates an authorisation code up to a maximum amount. The agent then enters or scans (if rendered as a QR code) the code to perform the withdrawal.\n * Cash-in. The agent initiates the cash-in by entering the customer account identifier(s).\n\nClosed loop and open-loop agent cash-in and cash-out are supported by the Mobile Money API. Closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. Open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nAgents can be physical agents, i.e. customers that are serviced by an human, or can be an ATM.\n\n\n\nCustomer Account Services\n\n * Customer Registration. Agents can register new customers for mobile money.\n * KYC Verification. Agents that provide KYC verification services can confirm that they have verified customer KYC.\n   \n   \n\nFurther Reading\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer KYC verification services on behalf of mobile\n                         money customers.\nAgents                   To understand how to implement the Mobile Money API to         API Consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and KYC verification.\n\nStart developing\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}",normalizedContent:"mobile money agents are the primary point of contact for mobile money account holders. agents provide a support service where account holders can register for the mobile money service, cash-in and cash-out from their account.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nagent services comprises of the following:\n\n\n\ncash-in and cash-out services\n\n * agent-initiated cash-out. the agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * customer-initiated cash-out. the mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * cash-out via authorisation code. the customer generates an authorisation code up to a maximum amount. the agent then enters or scans (if rendered as a qr code) the code to perform the withdrawal.\n * cash-in. the agent initiates the cash-in by entering the customer account identifier(s).\n\nclosed loop and open-loop agent cash-in and cash-out are supported by the mobile money api. closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nagents can be physical agents, i.e. customers that are serviced by an human, or can be an atm.\n\n\n\ncustomer account services\n\n * customer registration. agents can register new customers for mobile money.\n * kyc verification. agents that provide kyc verification services can confirm that they have verified customer kyc.\n   \n   \n\nfurther reading\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer kyc verification services on behalf of mobile\n                         money customers.\nagents                   to understand how to implement the mobile money api to         api consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and kyc verification.\n\nstart developing\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}",charsets:{}},{title:"Payment Service Providers & Payment Aggregators",frontmatter:{pageClass:"industry-page custom",title:"Payment Service Providers & Payment Aggregators"},regularPath:"/payment-service-providers-and-payment-aggregators/",relativePath:"payment-service-providers-and-payment-aggregators/index.md",key:"v-15153551",path:"/payment-service-providers-and-payment-aggregators/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:359},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:384},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:384},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:7637},{level:2,title:"Introduction",slug:"introduction-3",normalizedTitle:"introduction",charIndex:384},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:7637},{level:2,title:"Testimonials",slug:"testimonials",normalizedTitle:"testimonials",charIndex:10894},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:11222}],headersStr:"Use cases Introduction Introduction Intended Audience Introduction Intended Audience Testimonials Ready to explore?",content:'Providers of payment services such as aggregators and hub that act as mediators. They help connect organisations with many other organisations using a single connection point.\n\nThe GSMA API Specification can be used by payment aggregators and hubs to speed up the integration time and simplify the complexity when working at large scale with multiple APIs.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here\n\nStart developing\n\n\n# Introduction\n\nThe International Transfer Mobile Money APIs allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                       USAGE                                                       ROLE\nFSP - Mobile Money Providers                   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive International transfers from other FSPs.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international transfers to other FSPs.\nFSP – International Remittance Organisations   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive international remittances from Mobile Money\n                                               Providers.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international remittances to Mobile Money Providers.\nInternational Transfer Hubs                    - To understand how to implement the Mobile Money APIs to   API Provider\n                                               receive international transfers from FSPs.\n                                               - To understand how to implement the Mobile Money APIs to   API Consumer\n                                               send international transfers to FSPs.\n\nStart developing\n\n\n# Introduction\n\nThe Merchant Payment Mobile Money APIs allow merchants to accept payments from mobile money customers. Supported payment mechanisms include:\n\n * Payee-initiated merchant payment. The merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * Payer-initiated merchant payment. The payer initiates the payment by specifying the merchant that is to be paid.\n * Merchant payment via pre-authorised payment code. The payer generates a payment authorisation code up to a maximum payment amount. The merchant then enters or scans (if rendered as a QR code) the payer’s code to perform the payment.\n\nClosed loop and open-loop merchant payments are supported by the Mobile Money API. Closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. Open loop payments occur where the payer and payee accounts reside with different mobile money providers. For further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                    ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to   API Provider\n                         receive payments from merchants.\nMerchants                To understand how to implement the Mobile Money API to   API Consumer\n                         accept mobile money payments.\n\nStart developing\n\n\n# Testimonials\n\nAs a payment service provider that is directly integrated with over 35 MNO partners, we understand the importance of Standardised APIs to save time on development work, resources and keeping integrations up to date. Cellulant Payment Service Provider\n\nMerchant Payments\n\nInternational Transfers\n\nP2P transfers\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}',normalizedContent:'providers of payment services such as aggregators and hub that act as mediators. they help connect organisations with many other organisations using a single connection point.\n\nthe gsma api specification can be used by payment aggregators and hubs to speed up the integration time and simplify the complexity when working at large scale with multiple apis.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here\n\nstart developing\n\n\n# introduction\n\nthe international transfer mobile money apis allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                       usage                                                       role\nfsp - mobile money providers                   - to understand how to implement the mobile money api to    api provider\n                                               receive international transfers from other fsps.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international transfers to other fsps.\nfsp – international remittance organisations   - to understand how to implement the mobile money api to    api provider\n                                               receive international remittances from mobile money\n                                               providers.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international remittances to mobile money providers.\ninternational transfer hubs                    - to understand how to implement the mobile money apis to   api provider\n                                               receive international transfers from fsps.\n                                               - to understand how to implement the mobile money apis to   api consumer\n                                               send international transfers to fsps.\n\nstart developing\n\n\n# introduction\n\nthe merchant payment mobile money apis allow merchants to accept payments from mobile money customers. supported payment mechanisms include:\n\n * payee-initiated merchant payment. the merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * payer-initiated merchant payment. the payer initiates the payment by specifying the merchant that is to be paid.\n * merchant payment via pre-authorised payment code. the payer generates a payment authorisation code up to a maximum payment amount. the merchant then enters or scans (if rendered as a qr code) the payer’s code to perform the payment.\n\nclosed loop and open-loop merchant payments are supported by the mobile money api. closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. open loop payments occur where the payer and payee accounts reside with different mobile money providers. for further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                    role\nmobile money providers   to understand how to implement the mobile money api to   api provider\n                         receive payments from merchants.\nmerchants                to understand how to implement the mobile money api to   api consumer\n                         accept mobile money payments.\n\nstart developing\n\n\n# testimonials\n\nas a payment service provider that is directly integrated with over 35 mno partners, we understand the importance of standardised apis to save time on development work, resources and keeping integrations up to date. cellulant payment service provider\n\nmerchant payments\n\ninternational transfers\n\np2p transfers\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}',charsets:{}},{title:"Mobile Money Providers",frontmatter:{pageClass:"industry-page custom",title:"Mobile Money Providers"},regularPath:"/mobile-money-providers/",relativePath:"mobile-money-providers/index.md",key:"v-1f241ee3",path:"/mobile-money-providers/",headers:[{level:2,title:"Use cases",slug:"use-cases",normalizedTitle:"use cases",charIndex:344},{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Introduction",slug:"introduction-2",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Introduction",slug:"introduction-3",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience-2",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Introduction",slug:"introduction-4",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience-3",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Introduction",slug:"introduction-5",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience-4",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Introduction",slug:"introduction-6",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience-5",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Introduction",slug:"introduction-7",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience-6",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Introduction",slug:"introduction-8",normalizedTitle:"introduction",charIndex:369},{level:2,title:"Intended Audience",slug:"intended-audience-7",normalizedTitle:"intended audience",charIndex:8437},{level:2,title:"Ready to explore?",slug:"ready-to-explore",normalizedTitle:"ready to explore?",charIndex:18715}],headersStr:"Use cases Introduction Introduction Intended Audience Introduction Intended Audience Introduction Intended Audience Introduction Intended Audience Introduction Intended Audience Introduction Intended Audience Introduction Intended Audience Ready to explore?",content:'Mobile Money providers are companies that operate an electronic wallet which allows users to send, receive and store money using their mobile phone.\n\nMobile Money providers can use the GSMA API specification to simplify the integration process and to connect with many third party service providers at scale enabling further revenue streams.\n\n\n# Use cases\n\n{{ tab }}\n\n\n# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here\n\nStart developing\n\n\n# Introduction\n\nThe Merchant Payment Mobile Money APIs allow merchants to accept payments from mobile money customers. Supported payment mechanisms include:\n\n * Payee-initiated merchant payment. The merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * Payer-initiated merchant payment. The payer initiates the payment by specifying the merchant that is to be paid.\n * Merchant payment via pre-authorised payment code. The payer generates a payment authorisation code up to a maximum payment amount. The merchant then enters or scans (if rendered as a QR code) the payer’s code to perform the payment.\n\nClosed loop and open-loop merchant payments are supported by the Mobile Money API. Closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. Open loop payments occur where the payer and payee accounts reside with different mobile money providers. For further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                    ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to   API Provider\n                         receive payments from merchants.\nMerchants                To understand how to implement the Mobile Money API to   API Consumer\n                         accept mobile money payments.\n\nStart developing\n\n\n# Introduction\n\nThe Disbursement Mobile Money APIs allow organisations to disburse funds to mobile money recipients.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         organisations to disburse payments in singular and in bulk.\nNGOs                     To understand how to implement the Mobile Money API to         API Consumer\n                         provide aid payments to mobile money recipients.\nGovernment Departments   To understand how to implement the Mobile Money API to         API Consumer\n                         provide social credit payments to mobile money recipients.\nEmployers                To understand how to implement the Mobile Money API to         API Consumer\n                         provide salary payments to mobile money recipients.\n\nStart developing\n\n\n# Introduction\n\nThe International Transfer Mobile Money APIs allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                       USAGE                                                       ROLE\nFSP - Mobile Money Providers                   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive International transfers from other FSPs.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international transfers to other FSPs.\nFSP – International Remittance Organisations   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive international remittances from Mobile Money\n                                               Providers.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international remittances to Mobile Money Providers.\nInternational Transfer Hubs                    - To understand how to implement the Mobile Money APIs to   API Provider\n                                               receive international transfers from FSPs.\n                                               - To understand how to implement the Mobile Money APIs to   API Consumer\n                                               send international transfers to FSPs.\n\nStart developing\n\n\n# Introduction\n\nThe Recurring Payments Mobile Money APIs allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                        ROLE\nMobile Money Providers   - To understand how to implement the Mobile Money API to     API Provider\n                         receive recurring payment requests from service providers.\n                         - To understand how to implement the Mobile Money API to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nService Providers        To understand how to implement the Mobile Money API to       API Consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nStart developing\n\n\n# Introduction\n\nThe Account Linking Mobile Money APIs allow financial service providers to link customer accounts to mobile money accounts, thus allowing their customers to push funds to and pull funds from mobile money. Conversely, mobile money providers can use the APIs to link their customers mobile money accounts to financial service providers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations. All documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                  USAGE                                                          ROLE\nFSP - Mobile Money Providers              - To understand how to implement the Mobile Money API to       API Provider\n                                          accept account linking requests from other financial service\n                                          providers.\n                                          - To understand how to implement the Mobile Money API to       API Consumer\n                                          request linking of accounts to other financial service\n                                          providers.\nFSP Banks and Microfinance Institutions   - To understand how to implement the Mobile Money API to       API Provider\n                                          accept account linking requests mobile money providers.\n                                          - To understand how to implement the Mobile Money API to       API Consumer\n                                          request linking of accounts to mobile money providers.\n\nStart developing\n\n\n# Introduction\n\nThe Bill Payments Mobile Money APIs allow service providers to accept bill payments from mobile money customers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                         ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to make   API Consumer\n                         bill payments to service providers.\nService Providers        To understand how to implement the Mobile Money API to        API Provider\n                         accept bill payments from Mobile Money Providers.\n\nStart developing\n\n\n# Introduction\n\nAgent Services comprises of the following:\n\n\n\nCash-in and Cash-out Services\n\n * Agent-initiated Cash-out. The agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * Customer-initiated Cash-out. The mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * Cash-out via Authorisation Code. The customer generates an authorisation code up to a maximum amount. The agent then enters or scans (if rendered as a QR code) the code to perform the withdrawal.\n * Cash-in. The agent initiates the cash-in by entering the customer account identifier(s).\n\nClosed loop and open-loop agent cash-in and cash-out are supported by the Mobile Money API. Closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. Open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nAgents can be physical agents, i.e. customers that are serviced by an human, or can be an ATM.\n\n\n\nCustomer Account Services\n\n * Customer Registration. Agents can register new customers for mobile money.\n * KYC Verification. Agents that provide KYC verification services can confirm that they have verified customer KYC.\n   \n   \n\nFurther Reading\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer KYC verification services on behalf of mobile\n                         money customers.\nAgents                   To understand how to implement the Mobile Money API to         API Consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and KYC verification.\n\nStart developing\n\n\n# Ready to explore?\n\nFind our latest API documentation.\n{{ borderedLink.text }} {{ accentLink.text }}',normalizedContent:'mobile money providers are companies that operate an electronic wallet which allows users to send, receive and store money using their mobile phone.\n\nmobile money providers can use the gsma api specification to simplify the integration process and to connect with many third party service providers at scale enabling further revenue streams.\n\n\n# use cases\n\n{{ tab }}\n\n\n# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here\n\nstart developing\n\n\n# introduction\n\nthe merchant payment mobile money apis allow merchants to accept payments from mobile money customers. supported payment mechanisms include:\n\n * payee-initiated merchant payment. the merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * payer-initiated merchant payment. the payer initiates the payment by specifying the merchant that is to be paid.\n * merchant payment via pre-authorised payment code. the payer generates a payment authorisation code up to a maximum payment amount. the merchant then enters or scans (if rendered as a qr code) the payer’s code to perform the payment.\n\nclosed loop and open-loop merchant payments are supported by the mobile money api. closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. open loop payments occur where the payer and payee accounts reside with different mobile money providers. for further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                    role\nmobile money providers   to understand how to implement the mobile money api to   api provider\n                         receive payments from merchants.\nmerchants                to understand how to implement the mobile money api to   api consumer\n                         accept mobile money payments.\n\nstart developing\n\n\n# introduction\n\nthe disbursement mobile money apis allow organisations to disburse funds to mobile money recipients.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         organisations to disburse payments in singular and in bulk.\nngos                     to understand how to implement the mobile money api to         api consumer\n                         provide aid payments to mobile money recipients.\ngovernment departments   to understand how to implement the mobile money api to         api consumer\n                         provide social credit payments to mobile money recipients.\nemployers                to understand how to implement the mobile money api to         api consumer\n                         provide salary payments to mobile money recipients.\n\nstart developing\n\n\n# introduction\n\nthe international transfer mobile money apis allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                       usage                                                       role\nfsp - mobile money providers                   - to understand how to implement the mobile money api to    api provider\n                                               receive international transfers from other fsps.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international transfers to other fsps.\nfsp – international remittance organisations   - to understand how to implement the mobile money api to    api provider\n                                               receive international remittances from mobile money\n                                               providers.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international remittances to mobile money providers.\ninternational transfer hubs                    - to understand how to implement the mobile money apis to   api provider\n                                               receive international transfers from fsps.\n                                               - to understand how to implement the mobile money apis to   api consumer\n                                               send international transfers to fsps.\n\nstart developing\n\n\n# introduction\n\nthe recurring payments mobile money apis allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                        role\nmobile money providers   - to understand how to implement the mobile money api to     api provider\n                         receive recurring payment requests from service providers.\n                         - to understand how to implement the mobile money api to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nservice providers        to understand how to implement the mobile money api to       api consumer\n                         request recurring payment mandates against mobile money\n                         accounts.\n\nstart developing\n\n\n# introduction\n\nthe account linking mobile money apis allow financial service providers to link customer accounts to mobile money accounts, thus allowing their customers to push funds to and pull funds from mobile money. conversely, mobile money providers can use the apis to link their customers mobile money accounts to financial service providers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations. all documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                  usage                                                          role\nfsp - mobile money providers              - to understand how to implement the mobile money api to       api provider\n                                          accept account linking requests from other financial service\n                                          providers.\n                                          - to understand how to implement the mobile money api to       api consumer\n                                          request linking of accounts to other financial service\n                                          providers.\nfsp banks and microfinance institutions   - to understand how to implement the mobile money api to       api provider\n                                          accept account linking requests mobile money providers.\n                                          - to understand how to implement the mobile money api to       api consumer\n                                          request linking of accounts to mobile money providers.\n\nstart developing\n\n\n# introduction\n\nthe bill payments mobile money apis allow service providers to accept bill payments from mobile money customers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                         role\nmobile money providers   to understand how to implement the mobile money api to make   api consumer\n                         bill payments to service providers.\nservice providers        to understand how to implement the mobile money api to        api provider\n                         accept bill payments from mobile money providers.\n\nstart developing\n\n\n# introduction\n\nagent services comprises of the following:\n\n\n\ncash-in and cash-out services\n\n * agent-initiated cash-out. the agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * customer-initiated cash-out. the mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * cash-out via authorisation code. the customer generates an authorisation code up to a maximum amount. the agent then enters or scans (if rendered as a qr code) the code to perform the withdrawal.\n * cash-in. the agent initiates the cash-in by entering the customer account identifier(s).\n\nclosed loop and open-loop agent cash-in and cash-out are supported by the mobile money api. closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nagents can be physical agents, i.e. customers that are serviced by an human, or can be an atm.\n\n\n\ncustomer account services\n\n * customer registration. agents can register new customers for mobile money.\n * kyc verification. agents that provide kyc verification services can confirm that they have verified customer kyc.\n   \n   \n\nfurther reading\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer kyc verification services on behalf of mobile\n                         money customers.\nagents                   to understand how to implement the mobile money api to         api consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and kyc verification.\n\nstart developing\n\n\n# ready to explore?\n\nfind our latest api documentation.\n{{ borderedlink.text }} {{ accentlink.text }}',charsets:{}},{title:"Github",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Github"},regularPath:"/sdks/android/github.html",relativePath:"sdks/android/github.md",key:"v-6bb205b8",path:"/sdks/android/github.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Downloads",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Downloads"},regularPath:"/sdks/android/downloads.html",relativePath:"sdks/android/downloads.md",key:"v-6a2d969a",path:"/sdks/android/downloads.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:2255},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:2885},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:3812},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:4214},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:4539},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:5287},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:6131},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:6727},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:7658},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:7822}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\nGet information Download\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\nget information download\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Introduction",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Introduction"},regularPath:"/sdks/android/introduction.html",relativePath:"sdks/android/introduction.md",key:"v-d8cb96d0",path:"/sdks/android/introduction.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"System requirements",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"System requirements"},regularPath:"/sdks/android/system-requirements.html",relativePath:"sdks/android/system-requirements.md",key:"v-64d2a214",path:"/sdks/android/system-requirements.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"API Authorization",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"API Authorization"},regularPath:"/sdks/auth/api-authorization.html",relativePath:"sdks/auth/api-authorization.md",key:"v-47209790",path:"/sdks/auth/api-authorization.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Test diagram",slug:"test-diagram",normalizedTitle:"test diagram",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:4375},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:5302},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5704},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:6029},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6777},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7621},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:8217},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:9148},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:9312}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Test diagram Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Test diagram\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>+Mobile Money Provider: POST /transactions/type/merchantpay important link Note right of Mobile Money Provider: (1) The merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is "pending". Mobile Money Provider--\x3e>-Merchant: HTTP 202 (Request State Object) Mobile Money Provider->>+Payer: Obtain Customer Authorisation Note right of Payer: (2) The Payer is requested by the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer\nauthorisation. Payer--\x3e>-Mobile Money Provider: (Authorised) Mobile Money Provider->>+Merchant: PUT (Callback URL) (transctions Object) Note right of Mobile Money Provider: (3) The MMP informs the Merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Merchant--\x3e>-Mobile Money Provider: HTTP 204\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# test diagram\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>+mobile money provider: post /transactions/type/merchantpay important link note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is "pending". mobile money provider--\x3e>-merchant: http 202 (request state object) mobile money provider->>+payer: obtain customer authorisation note right of payer: (2) the payer is requested by the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer\nauthorisation. payer--\x3e>-mobile money provider: (authorised) mobile money provider->>+merchant: put (callback url) (transctions object) note right of mobile money provider: (3) the mmp informs the merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. merchant--\x3e>-mobile money provider: http 204\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"SDK Initialization",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"SDK Initialization"},regularPath:"/sdks/android/sdk-initialization.html",relativePath:"sdks/android/sdk-initialization.md",key:"v-23694f90",path:"/sdks/android/sdk-initialization.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Client authentication",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Client authentication"},regularPath:"/sdks/auth/client-authentication.html",relativePath:"sdks/auth/client-authentication.md",key:"v-b2df5790",path:"/sdks/auth/client-authentication.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Test diagram",slug:"test-diagram",normalizedTitle:"test diagram",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:4375},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:5302},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5704},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:6029},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6777},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7621},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:8217},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:9148},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:9312}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Test diagram Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Test diagram\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>+Mobile Money Provider: POST /transactions/type/merchantpay important link Note right of Mobile Money Provider: (1) The merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is "pending". Mobile Money Provider--\x3e>-Merchant: HTTP 202 (Request State Object) Mobile Money Provider->>+Payer: Obtain Customer Authorisation Note right of Payer: (2) The Payer is requested by the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer\nauthorisation. Payer--\x3e>-Mobile Money Provider: (Authorised) Mobile Money Provider->>+Merchant: PUT (Callback URL) (transctions Object) Note right of Mobile Money Provider: (3) The MMP informs the Merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Merchant--\x3e>-Mobile Money Provider: HTTP 204\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# test diagram\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>+mobile money provider: post /transactions/type/merchantpay important link note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is "pending". mobile money provider--\x3e>-merchant: http 202 (request state object) mobile money provider->>+payer: obtain customer authorisation note right of payer: (2) the payer is requested by the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer\nauthorisation. payer--\x3e>-mobile money provider: (authorised) mobile money provider->>+merchant: put (callback url) (transctions object) note right of mobile money provider: (3) the mmp informs the merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. merchant--\x3e>-mobile money provider: http 204\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Introduction",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Introduction"},regularPath:"/sdks/getting-started/introduction.html",relativePath:"sdks/getting-started/introduction.md",key:"v-111e5a38",path:"/sdks/getting-started/introduction.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Test diagram",slug:"test-diagram",normalizedTitle:"test diagram",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3316},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3946},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4873},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5275},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5600},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6348},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7192},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7788},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8719},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8883}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Test diagram Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Test diagram\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>+Mobile Money Provider: POST /transactions/type/merchantpay important link Note right of Mobile Money Provider: (1) The merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is "pending". Mobile Money Provider--\x3e>-Merchant: HTTP 202 (Request State Object) Mobile Money Provider->>+Payer: Obtain Customer Authorisation Note right of Payer: (2) The Payer is requested by the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer\nauthorisation. Payer--\x3e>-Mobile Money Provider: (Authorised) Mobile Money Provider->>+Merchant: PUT (Callback URL) (transctions Object) Note right of Mobile Money Provider: (3) The MMP informs the Merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Merchant--\x3e>-Mobile Money Provider: HTTP 204\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# test diagram\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>+mobile money provider: post /transactions/type/merchantpay important link note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is "pending". mobile money provider--\x3e>-merchant: http 202 (request state object) mobile money provider->>+payer: obtain customer authorisation note right of payer: (2) the payer is requested by the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer\nauthorisation. payer--\x3e>-mobile money provider: (authorised) mobile money provider->>+merchant: put (callback url) (transctions object) note right of mobile money provider: (3) the mmp informs the merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. merchant--\x3e>-mobile money provider: http 204\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"SDKs",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"SDKs"},regularPath:"/sdks/getting-started/sdks.html",relativePath:"sdks/getting-started/sdks.md",key:"v-30bc70d8",path:"/sdks/getting-started/sdks.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{frontmatter:{},regularPath:"/sdks/",relativePath:"sdks/index.md",key:"v-7a35ca05",path:"/sdks/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Downloads",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Downloads"},regularPath:"/sdks/java/downloads.html",relativePath:"sdks/java/downloads.md",key:"v-696c4c18",path:"/sdks/java/downloads.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3314},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4241},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:4643},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:4968},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:5716},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:6560},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7156},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8087},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8251}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\nGet information Download\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\nget information download\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Github",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Github"},regularPath:"/sdks/java/github.html",relativePath:"sdks/java/github.md",key:"v-53778f60",path:"/sdks/java/github.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Introduction",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Introduction"},regularPath:"/sdks/java/introduction.html",relativePath:"sdks/java/introduction.md",key:"v-c0047d3c",path:"/sdks/java/introduction.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"SDK Initialization",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"SDK Initialization"},regularPath:"/sdks/java/sdk-initialization.html",relativePath:"sdks/java/sdk-initialization.md",key:"v-bbe02a20",path:"/sdks/java/sdk-initialization.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Github",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Github"},regularPath:"/sdks/javascript/github.html",relativePath:"sdks/javascript/github.md",key:"v-66efdeb4",path:"/sdks/javascript/github.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Introduction",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Introduction"},regularPath:"/sdks/javascript/introduction.html",relativePath:"sdks/javascript/introduction.md",key:"v-d4f60b90",path:"/sdks/javascript/introduction.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"SDK Initialization",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"SDK Initialization"},regularPath:"/sdks/javascript/sdk-initialization.html",relativePath:"sdks/javascript/sdk-initialization.md",key:"v-10f7ddc6",path:"/sdks/javascript/sdk-initialization.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"System requirements",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"System requirements"},regularPath:"/sdks/javascript/system-requirements.html",relativePath:"sdks/javascript/system-requirements.md",key:"v-275a07d8",path:"/sdks/javascript/system-requirements.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Github",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Github"},regularPath:"/sdks/nodejs/github.html",relativePath:"sdks/nodejs/github.md",key:"v-73b81562",path:"/sdks/nodejs/github.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Downloads",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Downloads"},regularPath:"/sdks/nodejs/downloads.html",relativePath:"sdks/nodejs/downloads.md",key:"v-1ab93410",path:"/sdks/nodejs/downloads.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:2255},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:2885},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:3812},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:4214},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:4539},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:5287},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:6131},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:6727},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:7658},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:7822}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\nGet information Download\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\nget information download\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Downloads",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Downloads"},regularPath:"/sdks/javascript/downloads.html",relativePath:"sdks/javascript/downloads.md",key:"v-2d074238",path:"/sdks/javascript/downloads.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3314},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4241},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:4643},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:4968},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:5716},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:6560},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7156},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8087},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8251}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\nGet information Download\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\nget information download\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Introduction",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Introduction"},regularPath:"/sdks/nodejs/introduction.html",relativePath:"sdks/nodejs/introduction.md",key:"v-a5b20018",path:"/sdks/nodejs/introduction.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"SDK Initialization",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"SDK Initialization"},regularPath:"/sdks/nodejs/sdk-initialization.html",relativePath:"sdks/nodejs/sdk-initialization.md",key:"v-01a97382",path:"/sdks/nodejs/sdk-initialization.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Downloads",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Downloads"},regularPath:"/sdks/php/downloads.html",relativePath:"sdks/php/downloads.md",key:"v-ad4ffaf0",path:"/sdks/php/downloads.html",headers:[{level:2,title:"Buttons",slug:"buttons",normalizedTitle:"buttons",charIndex:0}],headersStr:"Buttons",content:"# Buttons\n\nGet information Download",normalizedContent:"# buttons\n\nget information download",charsets:{}},{title:"Github",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Github"},regularPath:"/sdks/php/github.html",relativePath:"sdks/php/github.md",key:"v-f43024d0",path:"/sdks/php/github.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"System requirements",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"System requirements"},regularPath:"/sdks/java/system-requirements.html",relativePath:"sdks/java/system-requirements.md",key:"v-7625d9b8",path:"/sdks/java/system-requirements.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"Introduction",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"Introduction"},regularPath:"/sdks/php/introduction.html",relativePath:"sdks/php/introduction.md",key:"v-678ebab8",path:"/sdks/php/introduction.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"SDK Initialization",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"SDK Initialization"},regularPath:"/sdks/php/sdk-initialization.html",relativePath:"sdks/php/sdk-initialization.md",key:"v-1c327d98",path:"/sdks/php/sdk-initialization.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"System requirements",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"System requirements"},regularPath:"/sdks/nodejs/system-requirements.html",relativePath:"sdks/nodejs/system-requirements.md",key:"v-2be03798",path:"/sdks/nodejs/system-requirements.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{title:"System requirements",frontmatter:{sidebarDepth:2,pageClass:"api-page",title:"System requirements"},regularPath:"/sdks/php/system-requirements.html",relativePath:"sdks/php/system-requirements.md",key:"v-3eca9242",path:"/sdks/php/system-requirements.html",headers:[{level:2,title:"Transaction Status Update",slug:"transaction-status-update",normalizedTitle:"transaction status update",charIndex:0},{level:2,title:"Bill Payment Without Bill Reference",slug:"bill-payment-without-bill-reference",normalizedTitle:"bill payment without bill reference",charIndex:960},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:1241},{level:2,title:"Retrieval of Multiple Authorisation Codes",slug:"retrieval-of-multiple-authorisation-codes",normalizedTitle:"retrieval of multiple authorisation codes",charIndex:2229},{level:2,title:"Mobile Money Customer Account Creation",slug:"mobile-money-customer-account-creation",normalizedTitle:"mobile money customer account creation",charIndex:3288},{level:2,title:"Mobile Money Customer Account Modification",slug:"mobile-money-customer-account-modification",normalizedTitle:"mobile money customer account modification",charIndex:3918},{level:2,title:"Addition of Custom Data Array",slug:"addition-of-custom-data-array",normalizedTitle:"addition of custom data array",charIndex:4845},{level:2,title:"Debit Mandate Identification",slug:"debit-mandate-identification",normalizedTitle:"debit mandate identification",charIndex:5247},{level:2,title:"Apply Consistent Usage of Date Fields",slug:"apply-consistent-usage-of-date-fields",normalizedTitle:"apply consistent usage of date fields",charIndex:5572},{level:2,title:"Add Cursor Mechanism for Bills Retrieval",slug:"add-cursor-mechanism-for-bills-retrieval",normalizedTitle:"add cursor mechanism for bills retrieval",charIndex:6320},{level:2,title:"Add Country Information to Quotations",slug:"add-country-information-to-quotations",normalizedTitle:"add country information to quotations",charIndex:7164},{level:2,title:"Add Requesting Organisation to Transactions and Quotations",slug:"add-requesting-organisation-to-transactions-and-quotations",normalizedTitle:"add requesting organisation to transactions and quotations",charIndex:7760},{level:2,title:"Code Lifetime Minimum Value for Authorisation Codes",slug:"code-lifetime-minimum-value-for-authorisation-codes",normalizedTitle:"code lifetime minimum value for authorisation codes",charIndex:8691},{level:2,title:"Miscellaneous Changes",slug:"miscellaneous-changes",normalizedTitle:"miscellaneous changes",charIndex:8855}],headersStr:"Transaction Status Update Bill Payment Without Bill Reference Retrieval of Bill Payments Retrieval of Multiple Authorisation Codes Mobile Money Customer Account Creation Mobile Money Customer Account Modification Addition of Custom Data Array Debit Mandate Identification Apply Consistent Usage of Date Fields Add Cursor Mechanism for Bills Retrieval Add Country Information to Quotations Add Requesting Organisation to Transactions and Quotations Code Lifetime Minimum Value for Authorisation Codes Miscellaneous Changes",content:'# Transaction Status Update\n\nIntroduced the ability to update the transactionStatus of mobile money transactions through a new API - PATCH /transactions/{transactionReference}. This supports a number of scenarios including:\n\n * Resolution of doubt transactions. Some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. This may then require a subsequent API request from the client to inform the provider of the final outcome to the transaction.\n * Two stage transaction processing. Some systems require two steps to create a transaction:\n\n 1. The client submits the request to the provider to create the transaction. The provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. The client then must provide an explicit request to ‘confirm’ the transaction. Upon receiving the request, the provider will complete the transaction.\n\n\n# Bill Payment Without Bill Reference\n\nNew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * POST /accounts/{identifierType}/{identifier}/bills/payments.\n * POST /accounts/{Account Identifiers}/bills/payments.\n\n\n# Retrieval of Bill Payments\n\nAdded new endpoints to allow API clients to retrieve a bill payment:\n\n * GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments.\n * GET /accounts/{Account Identifiers}/bills/{billReference}/payments.\n\nStandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range based on creationDate.\n * todatetime query string. Used by the client to return records within a date range based on creationDate.\n\n\n# Retrieval of Multiple Authorisation Codes\n\nAllows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * GET /accounts/{identifierType}/{identifier}/authorisationcodes.\n * GET /accounts/{Account Identifiers}/authorisationcodes.\n\nStandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nAlso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# Mobile Money Customer Account Creation\n\nAdded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * POST /accounts/{identityType}. Allows for account creation. The identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * GET /accounts/{accountIdentifierType}/{identifier}. Allows for a specific account and associated identities to be retrieved for a given account.\n * GET /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n\n\n# Mobile Money Customer Account Modification\n\nAdded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * PATCH /accounts/{identifierType}/{identifier}. Allows account modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}. As per above, but supports identification of the account using one, two or three identifiers.\n * PATCH /accounts/{identifierType}/{identifier}/identities/{identityId}. Allows identity modification for a given account identifier/type.\n * PATCH /accounts/{Account Identifiers}/identities/{identityId}. As per above, but supports identification of the account using one, two or three identifiers.\n\nThe following fields are modifiable:\n\n * Account Fields\n\n * accountStatus\n\n * accountSubstatus\n\n * Account Identity Fields\n\n * identityStatus\n\n * kycVerificationStatus\n\n * kycVerificationEntity\n\n * kycLevel\n\n\n# Addition of Custom Data Array\n\nAdded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nThe following objects have been modified to accept customData:\n\n * Transaction\n * Reversal\n * Batch Transaction\n * Batch Rejection\n * Batch Completion\n * Statement Entry\n * Bill\n * Bill Payment\n * Debit Mandate\n * Link\n * Authorisation Code\n * Quotation\n * Account\n\n\n# Debit Mandate Identification\n\nThe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nThe payer (subject of the mandate) will always be identified in the path.\n\n\n# Apply Consistent Usage of Date Fields\n\nAdded the following missing fields to the following objects to provide consistency across objects.\n\nOBJECT               REQUESTDATE   CREATIONDATE   MODIFICATIONDATE\nBatch Transaction    Add                          Add\nBill Payment         Add           Add            Add\nLink                 Add           Add            Add\nAuthorisation Code                 Add            Add\n\nrequestDate is optional on request and response.\n\ncreationDate is not applicable on request and optional on response.\n\nmodificationDate is not applicable on request and optional on response.\n\nModified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/APIs.\n\n\n# Add Cursor Mechanism for Bills Retrieval\n\nApplied standard MM API response headers and query strings on the accounts/{accountId}/bills and /accounts/{identifierType}/{identifier}/bills endpoints:\n\n * X-Records-Available-Count response header. Informs the client the number of records that can be returned.\n * X-Records-Returned-Count response header. Informs the client how many records have been returned.\n * limit query string. Used by the client to constrain the number of records returned.\n * offset query string. Used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. Used by the client to return records within a date range.\n * todatetime query string. Used by the client to return records within a date range.\n\nThe creationDate field has also been added to the bills object.\n\n\n# Add Country Information to Quotations\n\nAdded originCountry and receivingCountry to the Quotation object so that they can be populated when using the /quotations endpoints. receivingCountry and originCountry are optional in the request and response as they only apply to international quotations.\n\nTo clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingServiceProviderCountry and added this to the Quotation Object and the International Transfer Information object.\n\n\n# Add Requesting Organisation to Transactions and Quotations\n\nAdded requestingOrganisation to all objects that can be created or updated for complete consistency. For clarity these are:\n\n * Transaction\n * Batch Transaction\n * Reversal\n * Quotation.\n * Link\n * Debit Mandate\n * Authorisation Code\n\nNote that requestingOrganisation already exists on Bill Payment and is unchanged.\n\nThe new requestingOrganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationIdentifierType (can be swiftbic, lei, or organisationid)\n * requestingorganisationIdentifier\n\nAs a result of the inclusion of the requestingOrganisation field and also the introduction of X-Account-Holding-Institution-Identifier in v1.1, there is no longer a need for requestingLei and receivingLei fields in the transaction object. As such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# Code Lifetime Minimum Value for Authorisation Codes\n\nAdded minimum value to ensure that codeLifetime is greater than zero when supplied on /debitmandates APIs.\n\n\n# Miscellaneous Changes\n\n * The /transactions API has been marked as deprecated and will be removed in the next major release. Use /transactions/type/{type} instead.\n * Request and Response fields have been reordered for readability.\n * Regular expression for account identifier verification has been simplified. This change also removes issues when using a YAML parser to verify the OAS specification.\n * Reconstructed the conditionality of debitParty and creditParty in the transactions OAS objects to make correct use of the allOf and anyOf OAS keywords.\n * Added additional textual information to OAS schema fields and APIs to align with the document version more closely.',normalizedContent:'# transaction status update\n\nintroduced the ability to update the transactionstatus of mobile money transactions through a new api - patch /transactions/{transactionreference}. this supports a number of scenarios including:\n\n * resolution of doubt transactions. some mobile money providers will put transactions into ‘doubt’ where communication is interrupted. this may then require a subsequent api request from the client to inform the provider of the final outcome to the transaction.\n * two stage transaction processing. some systems require two steps to create a transaction:\n\n 1. the client submits the request to the provider to create the transaction. the provider then performs necessary checks on the transaction and returns a response indicating that the transaction is pending confirmation.\n 2. the client then must provide an explicit request to ‘confirm’ the transaction. upon receiving the request, the provider will complete the transaction.\n\n\n# bill payment without bill reference\n\nnew endpoints have been created to allow a bill payment to be accepted by a service provider without a bill reference:\n\n * post /accounts/{identifiertype}/{identifier}/bills/payments.\n * post /accounts/{account identifiers}/bills/payments.\n\n\n# retrieval of bill payments\n\nadded new endpoints to allow api clients to retrieve a bill payment:\n\n * get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments.\n * get /accounts/{account identifiers}/bills/{billreference}/payments.\n\nstandard query string parameters and response headers have been included to enabled filtering of bill payments:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range based on creationdate.\n * todatetime query string. used by the client to return records within a date range based on creationdate.\n\n\n# retrieval of multiple authorisation codes\n\nallows multiple authorisation codes to be retrieved for a given account via the following new endpoints:\n\n * get /accounts/{identifiertype}/{identifier}/authorisationcodes.\n * get /accounts/{account identifiers}/authorisationcodes.\n\nstandard query string parameters and response headers have been included to enabled filtering of authorisation codes:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nalso added a ‘codestate’ filter to return authorisation codes for a given state.\n\n\n# mobile money customer account creation\n\nadded new endpoints and associated objects to allow account creation for mobile money customers:\n\n * post /accounts/{identitytype}. allows for account creation. the identity type initially supports ‘individual’ only, but in future could be extended to support creation of other types such as ‘merchant’.\n * get /accounts/{accountidentifiertype}/{identifier}. allows for a specific account and associated identities to be retrieved for a given account.\n * get /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n\n\n# mobile money customer account modification\n\nadded new endpoints to enable the update of customer mobile money account and associated account identity information:\n\n * patch /accounts/{identifiertype}/{identifier}. allows account modification for a given account identifier/type.\n * patch /accounts/{account identifiers}. as per above, but supports identification of the account using one, two or three identifiers.\n * patch /accounts/{identifiertype}/{identifier}/identities/{identityid}. allows identity modification for a given account identifier/type.\n * patch /accounts/{account identifiers}/identities/{identityid}. as per above, but supports identification of the account using one, two or three identifiers.\n\nthe following fields are modifiable:\n\n * account fields\n\n * accountstatus\n\n * accountsubstatus\n\n * account identity fields\n\n * identitystatus\n\n * kycverificationstatus\n\n * kycverificationentity\n\n * kyclevel\n\n\n# addition of custom data array\n\nadded a key/value array that can accept and return provider-specific data to all relevant endpoints:\n\nthe following objects have been modified to accept customdata:\n\n * transaction\n * reversal\n * batch transaction\n * batch rejection\n * batch completion\n * statement entry\n * bill\n * bill payment\n * debit mandate\n * link\n * authorisation code\n * quotation\n * account\n\n\n# debit mandate identification\n\nthe /debitmandates endpoints have been modified to explicitly identify the payee for a debit mandate as per the following example:\n\n  "payee": [\n    {\n      "key": "msisdn",\n      "value": "+33555123456"\n    }\n  ],\n\n\nthe payer (subject of the mandate) will always be identified in the path.\n\n\n# apply consistent usage of date fields\n\nadded the following missing fields to the following objects to provide consistency across objects.\n\nobject               requestdate   creationdate   modificationdate\nbatch transaction    add                          add\nbill payment         add           add            add\nlink                 add           add            add\nauthorisation code                 add            add\n\nrequestdate is optional on request and response.\n\ncreationdate is not applicable on request and optional on response.\n\nmodificationdate is not applicable on request and optional on response.\n\nmodified all object implementations of the above fields to ensure optionality is correct and consistent across all objects/apis.\n\n\n# add cursor mechanism for bills retrieval\n\napplied standard mm api response headers and query strings on the accounts/{accountid}/bills and /accounts/{identifiertype}/{identifier}/bills endpoints:\n\n * x-records-available-count response header. informs the client the number of records that can be returned.\n * x-records-returned-count response header. informs the client how many records have been returned.\n * limit query string. used by the client to constrain the number of records returned.\n * offset query string. used by the client to indicate the position from where records are to be returned.\n * fromdatetime query string. used by the client to return records within a date range.\n * todatetime query string. used by the client to return records within a date range.\n\nthe creationdate field has also been added to the bills object.\n\n\n# add country information to quotations\n\nadded origincountry and receivingcountry to the quotation object so that they can be populated when using the /quotations endpoints. receivingcountry and origincountry are optional in the request and response as they only apply to international quotations.\n\nto clearly differentiate between the country in which the transaction originated and the country in which the sending service provider resides, created a new optional field – sendingserviceprovidercountry and added this to the quotation object and the international transfer information object.\n\n\n# add requesting organisation to transactions and quotations\n\nadded requestingorganisation to all objects that can be created or updated for complete consistency. for clarity these are:\n\n * transaction\n * batch transaction\n * reversal\n * quotation.\n * link\n * debit mandate\n * authorisation code\n\nnote that requestingorganisation already exists on bill payment and is unchanged.\n\nthe new requestingorganisation field is an object and consists of the following sub-fields:\n\n * requestingorganisationidentifiertype (can be swiftbic, lei, or organisationid)\n * requestingorganisationidentifier\n\nas a result of the inclusion of the requestingorganisation field and also the introduction of x-account-holding-institution-identifier in v1.1, there is no longer a need for requestinglei and receivinglei fields in the transaction object. as such, these fields have been marked as deprecated for final removal in the next major release.\n\n\n# code lifetime minimum value for authorisation codes\n\nadded minimum value to ensure that codelifetime is greater than zero when supplied on /debitmandates apis.\n\n\n# miscellaneous changes\n\n * the /transactions api has been marked as deprecated and will be removed in the next major release. use /transactions/type/{type} instead.\n * request and response fields have been reordered for readability.\n * regular expression for account identifier verification has been simplified. this change also removes issues when using a yaml parser to verify the oas specification.\n * reconstructed the conditionality of debitparty and creditparty in the transactions oas objects to make correct use of the allof and anyof oas keywords.\n * added additional textual information to oas schema fields and apis to align with the document version more closely.',charsets:{}},{frontmatter:{pageClass:"dashboard-page"},regularPath:"/signup/set-new-password.html",relativePath:"signup/set-new-password.md",key:"v-16de81d8",path:"/signup/set-new-password.html",headersStr:null,content:"",normalizedContent:"",charsets:{}},{frontmatter:{pageClass:"auth-page"},regularPath:"/signup/",relativePath:"signup/index.md",key:"v-6e91a8f2",path:"/signup/",headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Support",frontmatter:{pageClass:"contact-us-page custom",title:"Support"},regularPath:"/support/",relativePath:"support/index.md",key:"v-2c57b75e",path:"/support/",headersStr:null,content:"Contact us. If you have any comments or you have found any issues please let us know by filling in the fields below.",normalizedContent:"contact us. if you have any comments or you have found any issues please let us know by filling in the fields below.",charsets:{}},{title:"Using Vue in Markdown",frontmatter:{pageClass:"api-page"},regularPath:"/test/",relativePath:"test/index.md",key:"v-736185d3",path:"/test/",headers:[{level:2,title:"Browser API Access Restrictions",slug:"browser-api-access-restrictions",normalizedTitle:"browser api access restrictions",charIndex:26},{level:2,title:"",slug:"",normalizedTitle:"",charIndex:0}],headersStr:"Browser API Access Restrictions ",content:"# Using Vue in Markdown\n\n\n# Browser API Access Restrictions\n\nBecause VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the universal code requirements. In short, make sure to only access Browser / DOM APIs in beforeMount or mounted hooks.\n\nIf you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <ClientOnly> component:\n\n\n#",normalizedContent:"# using vue in markdown\n\n\n# browser api access restrictions\n\nbecause vuepress applications are server-rendered in node.js when generating static builds, any vue usage must conform to the universal code requirements. in short, make sure to only access browser / dom apis in beforemount or mounted hooks.\n\nif you are using or demoing components that are not ssr friendly (for example containing custom directives), you can wrap them inside the built-in <clientonly> component:\n\n\n#",charsets:{}},{title:"Security",frontmatter:{pageClass:"security-page api-page",title:"Security"},regularPath:"/security/",relativePath:"security/index.md",key:"v-aec34412",path:"/security/",headersStr:null,content:"# Security\n\nAlongside the GSMA Mobile Money API definitions to standardize the connection between API Clients and the Mobile Money Platforms, the GSMA have also produced complimentary security implementation guidelines. This security design provides the following guidance:\n\n * The security methods to be implemented for the connection between the API client and the API Gateway.\n * The security methods to be implemented for securely authenticating end user to the Mobile Money platform.\n * Best practices for API design.\n\nThis security design document for the GSMA Mobile Money APIs is to ensure that:\n\n 1. Applicable security measures and best practices are applied to the connection between the API Client and the API Gateway.\n 2. Applicable security measures and best practices are applied to authenticating end user to the Mobile Money platform.\n\nDownload PDF",normalizedContent:"# security\n\nalongside the gsma mobile money api definitions to standardize the connection between api clients and the mobile money platforms, the gsma have also produced complimentary security implementation guidelines. this security design provides the following guidance:\n\n * the security methods to be implemented for the connection between the api client and the api gateway.\n * the security methods to be implemented for securely authenticating end user to the mobile money platform.\n * best practices for api design.\n\nthis security design document for the gsma mobile money apis is to ensure that:\n\n 1. applicable security measures and best practices are applied to the connection between the api client and the api gateway.\n 2. applicable security measures and best practices are applied to authenticating end user to the mobile money platform.\n\ndownload pdf",charsets:{}},{title:"Account Linking - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Account Linking - Open OAS UI"},regularPath:"/use-cases/account-linking/account-linking-open-oas-ui.html",relativePath:"use-cases/account-linking/account-linking-open-oas-ui.md",key:"v-dc10ee10",path:"/use-cases/account-linking/account-linking-open-oas-ui.html",headers:[{level:2,title:"Account Linking - Open OAS UI",slug:"account-linking-open-oas-ui",normalizedTitle:"account linking - open oas ui",charIndex:0}],headersStr:"Account Linking - Open OAS UI",content:"# Account Linking - Open OAS UI",normalizedContent:"# account linking - open oas ui",charsets:{}},{title:"Account Linking - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"Account Linking - API Service Definition"},regularPath:"/use-cases/account-linking/api-service-definition.html",relativePath:"use-cases/account-linking/api-service-definition.md",key:"v-12932556",path:"/use-cases/account-linking/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2237},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2618},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:11807},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:12831},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:13203},{level:3,title:"Accounts APIs",slug:"accounts-apis",normalizedTitle:"accounts apis",charIndex:21600},{level:4,title:"Identifying an FSP Account",slug:"identifying-an-fsp-account",normalizedTitle:"identifying an fsp account",charIndex:21749},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:21904},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:22089},{level:3,title:"Retrieving Transactions for an Account",slug:"retrieving-transactions-for-an-account",normalizedTitle:"retrieving transactions for an account",charIndex:22588},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:24720},{level:3,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:25195},{level:4,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:25548},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:25681},{level:3,title:"Links API",slug:"links-api",normalizedTitle:"links api",charIndex:28205},{level:4,title:"Link UML Class Diagram",slug:"link-uml-class-diagram",normalizedTitle:"link uml class diagram",charIndex:29634},{level:4,title:"Link Object Definition",slug:"link-object-definition",normalizedTitle:"link object definition",charIndex:29862},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:33034},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:33057},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:33966},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:34809},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:35626},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:36532},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:37424},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:37441},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:37818},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:33057}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Accounts APIs Identifying an FSP Account Single Identifier Method Multiple Identifiers Method Retrieving Transactions for an Account Account Transaction UML Class Diagram Account Balances API Account Balance UML Class Diagram Account Balance Object Definition Links API Link UML Class Diagram Link Object Definition Supporting Objects Account Identifiers Object Metadata Object Custom Data Object Fees Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types Account Identifiers",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nThe transaction API can be used by FSPs to make a transfer for a linked account. Prior to making the transfer, a link must have been established between the debit and credit accounts.\n\nThe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Transaction Party "1..2" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction classDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                              \nName                                         Type        Description                                                           Reference                        Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                     \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers              creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                     debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers              debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                     If creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                     Enumeration = Transaction Types\n                                                         the URL)                                                       ← M\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                     \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                     Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                     Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                     \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                     \n                                                         was initiated.                                                 ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                     \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                         Provider                                                       ← O\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                                     \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                         populate additional transaction fields.                        ← O\n\n\n# Reversals API\n\nThe Reversals API is used to reverse, adjust or refund a financial transaction. The originating transaction reference must be provided in the path in order to identify the transfer to be reversed. For a partial reversal, the amount needs to be supplied. It should be noted that some API Providers do not support partial reversals and will return an error if a partial amount is supplied.\n\nFor viewing reversals, the Transactions API should be used. For performing a reversal without the original transaction reference, use the Transactions API.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Transaction Party "1..2" --* "1" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction classDiagram Credit Party Identifier "0..10" --* "1" Reversal Debit Party Identifier "0..10" --* "1" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                          TYPE        DESCRIPTION                                                         REFERENCE                        VALIDATION\ntransactionReference                          string      Unique reference for the transaction. This is returned in      NA                                    \n                                                          the response by API provider.                                  M\nrequesting OrganisationTransactionReference   string      A reference provided by the requesting organisation that is    O                                     \n                                                          to be associated with the transaction.                         O\noriginalTransactionReference                  string      For reversals and refunds, this field indicates the            NA                                    \n                                                          transaction which is the subject of the reversal.              M\ncreditParty                                   array       A series of key/value pairs that enable the credit party to    O    Account Identifiers              \n                                                          be identified. Keys include MSISDN and Wallet Identifier.      O\ndebitParty                                    array       A collection of key/value pairs that enable the debit party    O    Account Identifiers              \n                                                          to be identified. Keys include MSISDN and Wallet Identifier.   O\ntype                                          string      The harmonised Transaction Type                                M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                         M                                     Refunds (adjustments) are supported.\nsubType                                       string      A non-harmonised sub-classification of the type of             O                                     \n                                                          transaction. Values are not fixed, and usage will vary         O\n                                                          according to Provider.\ntransactionStatus                             string      Indicates the status of the transaction as stored by the API   NA                                    \n                                                          provider.                                                      M\namount                                        string      The transaction Amount.                                        O                                     Please refer to API Fundamentals document for amount\n                                                                                                                         O                                     validation rules.\ncurrency                                      string      Currency of the transaction amount.                            O                                     Enumeration = ISO Currency Codes\n                                                                                                                         O\ndescriptionText                               string      Free format text description of the transaction provided by    O                                     \n                                                          the client. This can be provided as a reference for the        O\n                                                          receiver on a notification SMS and on an account statement.\nfees                                          array       Allows the passing and/or returning of all fees pertaining     O    Fees Object                      \n                                                          to the transaction.                                            O\ngeoCode                                       string      Indicates the geographic location from where the transaction   O                                     \n                                                          was initiated.                                                 O\nrequestingOrganisation                        object      The originating organisation of the request.                   O    Requesting Organisation Object   \n                                                                                                                         O\nservicingIdentity                             string      The field is used to identify the servicing identity for       O                                     \n                                                          transactions, e.g. till, POS ID, assistant ID.                 O\ntransactionReceipt                            string      Transaction receipt number as notified to the parties. This    NA                                    \n                                                          may differ from the Transaction Reference.                     O\ncreationDate                                  date-time   Date and time when the transaction was created by the API      NA                                    \n                                                          Provider.                                                      O\nmodificationDate                              date-time   Date and time when the transaction was modified by the API     NA                                    \n                                                          Provider.                                                      O\nrequestDate                                   date-time   The date and time of the transaction request as supplied by    O                                     \n                                                          the client.                                                    O\ncustomData                                    string      A collection of key/value pairs that can be used for           O    Custom Data Object               \n                                                          provider specific fields.                                      O\nmetadata                                      array       A collection of key/value pairs. These can be used to          O    Metadata                         \n                                                          populate additional properties that describe administrative    O\n                                                          information regarding the transaction.\n\n\n# Accounts APIs\n\nUsing the mobile money APIs, financial service providers can:\n\n * View transfers for their account.\n * View their account balance.\n\n# Identifying an FSP Account\n\nTwo methods are provided for identifying an FSP account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifierType}/{identifier}.\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3}.\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Retrieving Transactions for an Account\n\nAn FSP should use this API to return a list of transfers against their account. One of the following paths can be used:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram Transaction Party "1..2" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account classDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2‑3 Account Transaction UML Class Diagram\n\n\n# Account Balances API\n\nUsing the Account Balances API, an FSP can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the FSP account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram Account Balance "1" --* "1" Account\n\nFigure 2‑4 Account Balance UML Class Diagram\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                         REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                NA               Please refer to API Fundamentals document for amount\n                                                                                           O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 O                validation rules.\ncurrency           string   Currency for all returned balances.                            NA               Enumeration = ISO Currency Codes\n                                                                                           O\n\n\n# Links API\n\nThe Links APIs are used to establish a link between two separate accounts between financial service providers. The API can be used for example to link a mobile wallet account to a microfinance institution account or a bank account. The link object does not mandate the processes to verify and authenticate a link request - this depends upon the use case. A link needs to be associated with a mode of operation:\n\n * pull. The link can be used by the client to debit the target account held by the provider.\n\n * push. The link can be used by the client to credit the target account held by the provider.\n\n * both. The link can be used for Push and Pull requests.\n\nTo identify the accounts that are to be linked, the target account is specified in the path whereas the source account is specified in the link object.\n\nThe permitted paths are as follows:\n\n * Creation: POST /accounts/{identifierType}/{identifier}/links or POST /accounts/{ Account Identifiers}/links.\n\n * Update of status and/or mode fields: PATCH /accounts/{identifierType}/{identifier}/links/{linkReference} or PATCH /accounts/{Account Identifiers}/links/{linkReference}.\n\n * Read. GET /accounts/{identifierType}/{identifier}/links/{linkReference} or GET /accounts/{Account Identifiers}/links/{linkReference}.\n\nSynchronous and asynchronous modes are supported for POST and PATCH methods whereas only synchronous mode is supported for the GET method.\n\n# Link UML Class Diagram\n\nclassDiagram Link Source Account "1" --* "1" Link Link "0..*" --* "1" Account classDiagram Source Account Identifier "1..10" --* "1" Link Link "0..*" --* "1" Account\n\nFigure 2-5 Link UML Class Diagram\n\n# Link Object Definition\n\n{\n  "linkReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "sourceAccountIdentifiers": [\n    {\n      "key":"MSISDN",\n      "value":"+1234567890"\n    }\n  ],\n  "mode": "both",\n  "status": "inactive",\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nLINK OBJECT                                                                                                                           \nName                       Type        Description                                                          Reference                 Validation\nlinkReference              string      Indicates the Link reference. This enables a linked account   → NA                             \n                                       to be uniquely identified.                                    ← M\nsourceAccountIdentifiers   array       A series of key/value pairs that identify the source          → M    Account Identifiers       \n                                       account. Keys include MSISDN and Wallet Identifier.           ← M\nmode                       string      Indicates the mode of operation for the Link.                 → M                              Enumeration = push, pull, both\n                                                                                                     ← M\nstatus                     string      Indicates the status of the Link.                             → M                              Enumeration = active, inactive\n                                                                                                     ← M\nrequestingOrganisation     object      The originating organisation of the request.                  → O    Requesting Organisation   \n                                                                                                     ← O\ncreationDate               date-time   Indicates when the link was created as recorded by the API    → NA                             \n                                       provider.                                                     ← O\nmodificationDate           date-time   Indicates when the link was modified as recorded by the API   → NA                             \n                                       provider.                                                     ← O\nrequestDate                date-time   The date and time of the link request as supplied by the      → O                              \n                                       client.                                                       ← O\ncustomData                 string      Contains provider specific fields.                            → O    Custom Data Object        \n                                                                                                     ← O\n\n\n# Supporting Objects\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                       REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         M               Enumeration = Account Identifiers\n                                                               M\nvalue   string   Provides the account identifier type value.   M               \n                                                               M\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                   REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  M               \n                                                                 M\nfeeAmount     string   Defines the amount of the fee.            M               Please refer to API Fundamentals document for amount\n                                                                 M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   M               Enumeration = ISO Currency Codes\n                                                                 M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE       DESCRIPTION\ntransfer   Transfer of funds between mobile money provider and another\n           provider or financial institution in the same country.\nreversal   Reversal of a prior transaction to return funds to the\n           payer.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\nthe transaction api can be used by fsps to make a transfer for a linked account. prior to making the transfer, a link must have been established between the debit and credit accounts.\n\nthe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram transaction party "1..2" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction classdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                              \nname                                         type        description                                                           reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                    \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                     \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers              creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                     debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers              debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                     if creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                     enumeration = transaction types\n                                                         the url)                                                       ← m\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                     \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                    \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                     please refer to api fundamentals document for amount\n                                                                                                                        ← m                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                     enumeration = iso currency codes\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                     \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                     \n                                                         was initiated.                                                 ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                     \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                    \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                    \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                    \n                                                         provider                                                       ← o\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                                     \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                         populate additional transaction fields.                        ← o\n\n\n# reversals api\n\nthe reversals api is used to reverse, adjust or refund a financial transaction. the originating transaction reference must be provided in the path in order to identify the transfer to be reversed. for a partial reversal, the amount needs to be supplied. it should be noted that some api providers do not support partial reversals and will return an error if a partial amount is supplied.\n\nfor viewing reversals, the transactions api should be used. for performing a reversal without the original transaction reference, use the transactions api.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram transaction party "1..2" --* "1" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction classdiagram credit party identifier "0..10" --* "1" reversal debit party identifier "0..10" --* "1" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                          type        description                                                         reference                        validation\ntransactionreference                          string      unique reference for the transaction. this is returned in      na                                    \n                                                          the response by api provider.                                  m\nrequesting organisationtransactionreference   string      a reference provided by the requesting organisation that is    o                                     \n                                                          to be associated with the transaction.                         o\noriginaltransactionreference                  string      for reversals and refunds, this field indicates the            na                                    \n                                                          transaction which is the subject of the reversal.              m\ncreditparty                                   array       a series of key/value pairs that enable the credit party to    o    account identifiers              \n                                                          be identified. keys include msisdn and wallet identifier.      o\ndebitparty                                    array       a collection of key/value pairs that enable the debit party    o    account identifiers              \n                                                          to be identified. keys include msisdn and wallet identifier.   o\ntype                                          string      the harmonised transaction type                                m                                     enumeration = transaction types note that only reversals and\n                                                                                                                         m                                     refunds (adjustments) are supported.\nsubtype                                       string      a non-harmonised sub-classification of the type of             o                                     \n                                                          transaction. values are not fixed, and usage will vary         o\n                                                          according to provider.\ntransactionstatus                             string      indicates the status of the transaction as stored by the api   na                                    \n                                                          provider.                                                      m\namount                                        string      the transaction amount.                                        o                                     please refer to api fundamentals document for amount\n                                                                                                                         o                                     validation rules.\ncurrency                                      string      currency of the transaction amount.                            o                                     enumeration = iso currency codes\n                                                                                                                         o\ndescriptiontext                               string      free format text description of the transaction provided by    o                                     \n                                                          the client. this can be provided as a reference for the        o\n                                                          receiver on a notification sms and on an account statement.\nfees                                          array       allows the passing and/or returning of all fees pertaining     o    fees object                      \n                                                          to the transaction.                                            o\ngeocode                                       string      indicates the geographic location from where the transaction   o                                     \n                                                          was initiated.                                                 o\nrequestingorganisation                        object      the originating organisation of the request.                   o    requesting organisation object   \n                                                                                                                         o\nservicingidentity                             string      the field is used to identify the servicing identity for       o                                     \n                                                          transactions, e.g. till, pos id, assistant id.                 o\ntransactionreceipt                            string      transaction receipt number as notified to the parties. this    na                                    \n                                                          may differ from the transaction reference.                     o\ncreationdate                                  date-time   date and time when the transaction was created by the api      na                                    \n                                                          provider.                                                      o\nmodificationdate                              date-time   date and time when the transaction was modified by the api     na                                    \n                                                          provider.                                                      o\nrequestdate                                   date-time   the date and time of the transaction request as supplied by    o                                     \n                                                          the client.                                                    o\ncustomdata                                    string      a collection of key/value pairs that can be used for           o    custom data object               \n                                                          provider specific fields.                                      o\nmetadata                                      array       a collection of key/value pairs. these can be used to          o    metadata                         \n                                                          populate additional properties that describe administrative    o\n                                                          information regarding the transaction.\n\n\n# accounts apis\n\nusing the mobile money apis, financial service providers can:\n\n * view transfers for their account.\n * view their account balance.\n\n# identifying an fsp account\n\ntwo methods are provided for identifying an fsp account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifiertype}/{identifier}.\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3}.\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# retrieving transactions for an account\n\nan fsp should use this api to return a list of transfers against their account. one of the following paths can be used:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram transaction party "1..2" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account classdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2‑3 account transaction uml class diagram\n\n\n# account balances api\n\nusing the account balances api, an fsp can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the fsp account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram account balance "1" --* "1" account\n\nfigure 2‑4 account balance uml class diagram\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                         reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                na               please refer to api fundamentals document for amount\n                                                                                           o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 o                validation rules.\ncurrency           string   currency for all returned balances.                            na               enumeration = iso currency codes\n                                                                                           o\n\n\n# links api\n\nthe links apis are used to establish a link between two separate accounts between financial service providers. the api can be used for example to link a mobile wallet account to a microfinance institution account or a bank account. the link object does not mandate the processes to verify and authenticate a link request - this depends upon the use case. a link needs to be associated with a mode of operation:\n\n * pull. the link can be used by the client to debit the target account held by the provider.\n\n * push. the link can be used by the client to credit the target account held by the provider.\n\n * both. the link can be used for push and pull requests.\n\nto identify the accounts that are to be linked, the target account is specified in the path whereas the source account is specified in the link object.\n\nthe permitted paths are as follows:\n\n * creation: post /accounts/{identifiertype}/{identifier}/links or post /accounts/{ account identifiers}/links.\n\n * update of status and/or mode fields: patch /accounts/{identifiertype}/{identifier}/links/{linkreference} or patch /accounts/{account identifiers}/links/{linkreference}.\n\n * read. get /accounts/{identifiertype}/{identifier}/links/{linkreference} or get /accounts/{account identifiers}/links/{linkreference}.\n\nsynchronous and asynchronous modes are supported for post and patch methods whereas only synchronous mode is supported for the get method.\n\n# link uml class diagram\n\nclassdiagram link source account "1" --* "1" link link "0..*" --* "1" account classdiagram source account identifier "1..10" --* "1" link link "0..*" --* "1" account\n\nfigure 2-5 link uml class diagram\n\n# link object definition\n\n{\n  "linkreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "sourceaccountidentifiers": [\n    {\n      "key":"msisdn",\n      "value":"+1234567890"\n    }\n  ],\n  "mode": "both",\n  "status": "inactive",\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nlink object                                                                                                                           \nname                       type        description                                                          reference                 validation\nlinkreference              string      indicates the link reference. this enables a linked account   → na                             \n                                       to be uniquely identified.                                    ← m\nsourceaccountidentifiers   array       a series of key/value pairs that identify the source          → m    account identifiers       \n                                       account. keys include msisdn and wallet identifier.           ← m\nmode                       string      indicates the mode of operation for the link.                 → m                              enumeration = push, pull, both\n                                                                                                     ← m\nstatus                     string      indicates the status of the link.                             → m                              enumeration = active, inactive\n                                                                                                     ← m\nrequestingorganisation     object      the originating organisation of the request.                  → o    requesting organisation   \n                                                                                                     ← o\ncreationdate               date-time   indicates when the link was created as recorded by the api    → na                             \n                                       provider.                                                     ← o\nmodificationdate           date-time   indicates when the link was modified as recorded by the api   → na                             \n                                       provider.                                                     ← o\nrequestdate                date-time   the date and time of the link request as supplied by the      → o                              \n                                       client.                                                       ← o\ncustomdata                 string      contains provider specific fields.                            → o    custom data object        \n                                                                                                     ← o\n\n\n# supporting objects\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                       reference   validation\nkey     string   provides the account identifier type.         m               enumeration = account identifiers\n                                                               m\nvalue   string   provides the account identifier type value.   m               \n                                                               m\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                   reference   validation\nfeetype       string   defines the type of fee.                  m               \n                                                                 m\nfeeamount     string   defines the amount of the fee.            m               please refer to api fundamentals document for amount\n                                                                 m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   m               enumeration = iso currency codes\n                                                                 m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode       description\ntransfer   transfer of funds between mobile money provider and another\n           provider or financial institution in the same country.\nreversal   reversal of a prior transaction to return funds to the\n           payer.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.',charsets:{}},{title:"Agent Services - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Agent Services - Open OAS UI"},regularPath:"/use-cases/agent-services/agent-services-open-oas-ui.html",relativePath:"use-cases/agent-services/agent-services-open-oas-ui.md",key:"v-51ac86f8",path:"/use-cases/agent-services/agent-services-open-oas-ui.html",headers:[{level:2,title:"Agent Services - Open OAS UI",slug:"agent-services-open-oas-ui",normalizedTitle:"agent services - open oas ui",charIndex:0}],headersStr:"Agent Services - Open OAS UI",content:"# Agent Services - Open OAS UI",normalizedContent:"# agent services - open oas ui",charsets:{}},{title:"Account Linking - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"Account Linking - Use Case Scenarios"},regularPath:"/use-cases/account-linking/scenarios/scenarios.html",relativePath:"use-cases/account-linking/scenarios/scenarios.md",key:"v-15d08cd8",path:"/use-cases/account-linking/scenarios/scenarios.html",headers:[{level:2,title:"Setup an Account Link",slug:"setup-an-account-link",normalizedTitle:"setup an account link",charIndex:599},{level:2,title:"Setup an Account Link Failure",slug:"setup-an-account-link-failure",normalizedTitle:"setup an account link failure",charIndex:2800},{level:2,title:"Perform a Transfer for a Linked Account",slug:"perform-a-transfer-for-a-linked-account",normalizedTitle:"perform a transfer for a linked account",charIndex:3940},{level:2,title:"Perform a Transfer for a Linked Account - Failure",slug:"perform-a-transfer-for-a-linked-account-failure",normalizedTitle:"perform a transfer for a linked account - failure",charIndex:5572},{level:2,title:"Perform a Transfer using an Account Link via the Polling Method",slug:"perform-a-transfer-using-an-account-link-via-the-polling-method",normalizedTitle:"perform a transfer using an account link via the polling method",charIndex:6599},{level:2,title:"Perform a Transfer Reversal",slug:"perform-a-transfer-reversal",normalizedTitle:"perform a transfer reversal",charIndex:8862},{level:2,title:"Obtain a Financial Service Provider Balance",slug:"obtain-a-financial-service-provider-balance",normalizedTitle:"obtain a financial service provider balance",charIndex:10308},{level:2,title:"Retrieve Transfers for a Financial Service Provider",slug:"retrieve-transfers-for-a-financial-service-provider",normalizedTitle:"retrieve transfers for a financial service provider",charIndex:10865},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:12170},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:12950}],headersStr:"Setup an Account Link Setup an Account Link Failure Perform a Transfer for a Linked Account Perform a Transfer for a Linked Account - Failure Perform a Transfer using an Account Link via the Polling Method Perform a Transfer Reversal Obtain a Financial Service Provider Balance Retrieve Transfers for a Financial Service Provider Check for Service Availability Retrieve a Missing API Response",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# Setup an Account Link\n\nThis diagram illustrates the setting-up of an account link. The requesting FSP initiates the request which is authorised by the account holding customer. In this diagram, an asynchronous flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/2000/links\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "sourceAccountIdentifiers": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "status": "active",\n    "mode": "both",\n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "12345"\n  }                 \n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FPS participant FSP participant Account Holder Requesting FPS->>FSP: POST /accounts/{identifierType}/{identifier}/links activate Requesting FPS activate FSP Note right of FSP: (1) The requesting FPS submits the debit mandate request for\nprocessing to the FSP. The FSP will return the Request\nState object to indicate that the request is \'pending\'. FSP--\x3e>Requesting FPS: HTTP 202 (Request State Object) FSP->>Account Holder: Obtain Customer Authorisation activate Account Holder Note right of Account Holder: (2) The account holder is requested by the\nFSP to authorise the link. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used to secure\ncustomer authorisation. Account Holder--\x3e>FSP: (Authorised) deactivate Account Holder FSP->>Requesting FPS: PUT {Callback URL} (Debit Mandates Object) Note right of FSP: (3) The FSP informs the requesting FPS that the\nlink has been successfully created by\nreturning the final representation of the link. Requesting FPS--\x3e>FSP: HTTP 204 deactivate Requesting FPS deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Setup an Account Link Failure\n\nIn this diagram, the account holder declines to provide authorisation to setup the account link. The requesting FSP receives a callback containing an error object detailing the reason for failure.\n\nsequenceDiagram participant Requesting FPS participant FSP participant Account Holder Requesting FPS->>FSP: POST /accounts/{identifierType}/{identifier}/links activate Requesting FPS activate FSP Note right of FSP: (1) The requesting FPS submits the debit mandate request for\nprocessing to the FSP. The FSP will return the Request\nState object to indicate that the request is \'pending\'. FSP--\x3e>Requesting FPS: HTTP 202 (Request State Object) FSP->>Account Holder: Obtain Customer Authorisation activate Account Holder Note right of Account Holder: (2) The account holder declines the link\nrequest. Account Holder--\x3e>FSP: (Declined) deactivate Account Holder FSP->>Requesting FPS: PUT {Callback URL} (Error Object) Note right of FSP: (3) The FSP informs the requesting FPS that the\nlink has been declined by returning an error\nobject. Requesting FPS--\x3e>FSP: HTTP 204 deactivate Requesting FPS deactivate FSP\n\n\n# Perform a Transfer for a Linked Account\n\nIn this diagram, the requesting FSP initiates a transfer to the FSP using an established link.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/transfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "creditParty": [\n        {\n            "key": "linkref",\n            "value": "Place your Link Reference here"\n        }\n    ],\n    "currency": "RWF",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ]\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: POST /transactions/type/transfer activate Requesting FSP activate FSP Note right of FSP: (1) The requesting FSP submits the transfer request for\nprocessing to the FSP, ensuring that a link reference\nis provided for the transfer. The FSP will return the Request\nState object to indicate that the request is \'pending\'. FSP--\x3e>Requesting FSP: HTTP 202 (Request State Object) deactivate Requesting FSP FSP->>Requesting FSP: PUT {Callback URL} (Transactions Object) activate Requesting FSP Note right of FSP: (2) The FSP informs the requesting FSP that the\ntransfer has been successfully completed by\nreturning the final representation of the\ntransaction. Requesting FSP--\x3e>FSP: HTTP 204 deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Perform a Transfer for a Linked Account - Failure\n\nIn this diagram, the requesting FSP initiates a transfer to the FSP using an established link. The FSP is unable to process the transfer and returns a callback containing the error object.\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: POST /transactions/type/transfer activate Requesting FSP activate FSP Note right of FSP: (1) The requesting FSP submits the transfer request for\nprocessing to the FSP, ensuring that a link reference is\nprovided for the transfer. The FSP will return the Request\nState object to indicate that the request is \'pending\'. FSP--\x3e>Requesting FSP: HTTP 202 (Request State Object) deactivate Requesting FSP FSP->>Requesting FSP: PUT {Callback URL} (Error Object) activate Requesting FSP Note right of FSP: (2) The FSP informs the requesting FSP that the\ntransfer has failed and returns the error object\ndetailing the reason for failure. Requesting FSP--\x3e>FSP: HTTP 204 deactivate Requesting FSP deactivate FSP\n\n\n# Perform a Transfer using an Account Link via the Polling Method\n\nIn this example, an asynchronous flow is used with the polling method. The client polls against the request state object to determine the outcome of the transfer request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/transfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "creditParty": [\n        {\n            "key": "linkref",\n            "value": "Place your Link Reference here"\n        }\n    ],\n    "currency": "RWF",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ]\n}\n\n\n \n\n\nGET .../requeststates/Place the Server Correlation Id here\n\n\n \n\n\nGET .../transactions/Place Transaction Reference here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: POST /transactions/type/transfer activate Requesting FSP activate FSP Note right of FSP: (1) The requesting FSP submits the transfer request for\nprocessing to the FSP, ensuring that a link reference is\nprovided for the transfer. The FSP will return the Request\nState object to indicate that the request is \'pending\'. FSP--\x3e>Requesting FSP: HTTP 202 (Request State Object) deactivate Requesting FSP loop activate Requesting FSP Requesting FSP->>FSP: GET /requeststates/{serverCorrelationId} Note right of FSP: (2) The requesting FSP polls the FSP for the Request State\nuntil the transaction is authorised or declied or until the\npolling limit is reached. FSP--\x3e>Requesting FSP: HTTP 200 (Request State Object) end deactivate FSP opt activate FSP Requesting FSP->>FSP: GET /transactions/transactionReference Note right of FSP: (3) The requesting FSP can use the objectReference returned in\nthe Request State to retrieve a representation of the\ncompleted transfer. FSP--\x3e>Requesting FSP: HTTP 200 (Transactions Object) end deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Perform a Transfer Reversal\n\nIn some failure scenarios, a requesting FSP may need to reverse a transaction. This diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: POST /transactions/{original transaction reference}/reversals activate Requesting FSP activate FSP Note right of FSP: (1) The requesting FSP submits the reversal request for\nprocessing to the FSP - passing the reference of the\ntransaction that is to be reversed. The FSP will return the\nRequest State object to indicate that the request is\n\'pending\'. FSP--\x3e>Requesting FSP: HTTP 202 (Request State Object) FSP->>Requesting FSP: PUT {Callback URL} (Reversal Object) Note right of FSP: (2) The FSP informs the Requesting FSP that the\nreversal has been successfully completed by\nreturning the final representation of the\nreversal transaction. Requesting FSP--\x3e>FSP: HTTP 204 deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain a Financial Service Provider Balance\n\n \n\n\nGET .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /accounts/{identifierType}/{identifier}/balance activate Requesting FSP activate FSP Note right of FSP: (1) Obtain the balance of the\nrequested account. FSP--\x3e>Requesting FSP: HTTP 200 (Balance Object) deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Transfers for a Financial Service Provider\n\nThis diagram illustrates use of a cursor mechanism to retrieve all transfers for a financial service provider via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Requesting FSP activate FSP Note right of FSP: (1) The requesting FSP requests\nup to 20 transactions for the\naccount from the FSP. FSP--\x3e>Requesting FSP: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of FSP: (2) The FSP returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. Requesting FSP->>FSP: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of FSP: (3) The requesting FSP requests\nthe remaining transactions for\nthe account from the FSP. FSP--\x3e>Requesting FSP: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the FSP is in a state that enables a client to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /heartbeat activate Requesting FSP activate FSP Note right of FSP: (1) The requesting FSP requests the\navailability of the service from the FSP. FSP--\x3e>Requesting FSP: HTTP 200 (Heartbeat Object) Note right of FSP: (2) The FSP returns the availability of\nthe service - available, unavailable\nor degraded. deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the requesting FSP to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the FSP.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /responses{clientCorrelationId} activate Requesting FSP activate FSP Note right of FSP: (1) Using the requesting FSP\'s\nclientCorrelationId, a request for the\nmissing API response is sent. FSP--\x3e>Requesting FSP: HTTP 200 (Responses Object) Note right of FSP: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Requesting FSP->>FSP: GET /{link} Note right of FSP: (3) The requesting FSP uses the link to\nobtain a representation of the missing\nresource. FSP--\x3e>Requesting FSP: HTTP 200 (Requested Object) deactivate FSP deactivate Requesting FSP\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# setup an account link\n\nthis diagram illustrates the setting-up of an account link. the requesting fsp initiates the request which is authorised by the account holding customer. in this diagram, an asynchronous flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/2000/links\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "sourceaccountidentifiers": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "status": "active",\n    "mode": "both",\n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "12345"\n  }                 \n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fps participant fsp participant account holder requesting fps->>fsp: post /accounts/{identifiertype}/{identifier}/links activate requesting fps activate fsp note right of fsp: (1) the requesting fps submits the debit mandate request for\nprocessing to the fsp. the fsp will return the request\nstate object to indicate that the request is \'pending\'. fsp--\x3e>requesting fps: http 202 (request state object) fsp->>account holder: obtain customer authorisation activate account holder note right of account holder: (2) the account holder is requested by the\nfsp to authorise the link. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used to secure\ncustomer authorisation. account holder--\x3e>fsp: (authorised) deactivate account holder fsp->>requesting fps: put {callback url} (debit mandates object) note right of fsp: (3) the fsp informs the requesting fps that the\nlink has been successfully created by\nreturning the final representation of the link. requesting fps--\x3e>fsp: http 204 deactivate requesting fps deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# setup an account link failure\n\nin this diagram, the account holder declines to provide authorisation to setup the account link. the requesting fsp receives a callback containing an error object detailing the reason for failure.\n\nsequencediagram participant requesting fps participant fsp participant account holder requesting fps->>fsp: post /accounts/{identifiertype}/{identifier}/links activate requesting fps activate fsp note right of fsp: (1) the requesting fps submits the debit mandate request for\nprocessing to the fsp. the fsp will return the request\nstate object to indicate that the request is \'pending\'. fsp--\x3e>requesting fps: http 202 (request state object) fsp->>account holder: obtain customer authorisation activate account holder note right of account holder: (2) the account holder declines the link\nrequest. account holder--\x3e>fsp: (declined) deactivate account holder fsp->>requesting fps: put {callback url} (error object) note right of fsp: (3) the fsp informs the requesting fps that the\nlink has been declined by returning an error\nobject. requesting fps--\x3e>fsp: http 204 deactivate requesting fps deactivate fsp\n\n\n# perform a transfer for a linked account\n\nin this diagram, the requesting fsp initiates a transfer to the fsp using an established link.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/transfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "creditparty": [\n        {\n            "key": "linkref",\n            "value": "place your link reference here"\n        }\n    ],\n    "currency": "rwf",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ]\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: post /transactions/type/transfer activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp submits the transfer request for\nprocessing to the fsp, ensuring that a link reference\nis provided for the transfer. the fsp will return the request\nstate object to indicate that the request is \'pending\'. fsp--\x3e>requesting fsp: http 202 (request state object) deactivate requesting fsp fsp->>requesting fsp: put {callback url} (transactions object) activate requesting fsp note right of fsp: (2) the fsp informs the requesting fsp that the\ntransfer has been successfully completed by\nreturning the final representation of the\ntransaction. requesting fsp--\x3e>fsp: http 204 deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# perform a transfer for a linked account - failure\n\nin this diagram, the requesting fsp initiates a transfer to the fsp using an established link. the fsp is unable to process the transfer and returns a callback containing the error object.\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: post /transactions/type/transfer activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp submits the transfer request for\nprocessing to the fsp, ensuring that a link reference is\nprovided for the transfer. the fsp will return the request\nstate object to indicate that the request is \'pending\'. fsp--\x3e>requesting fsp: http 202 (request state object) deactivate requesting fsp fsp->>requesting fsp: put {callback url} (error object) activate requesting fsp note right of fsp: (2) the fsp informs the requesting fsp that the\ntransfer has failed and returns the error object\ndetailing the reason for failure. requesting fsp--\x3e>fsp: http 204 deactivate requesting fsp deactivate fsp\n\n\n# perform a transfer using an account link via the polling method\n\nin this example, an asynchronous flow is used with the polling method. the client polls against the request state object to determine the outcome of the transfer request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/transfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "creditparty": [\n        {\n            "key": "linkref",\n            "value": "place your link reference here"\n        }\n    ],\n    "currency": "rwf",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ]\n}\n\n\n \n\n\nget .../requeststates/place the server correlation id here\n\n\n \n\n\nget .../transactions/place transaction reference here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: post /transactions/type/transfer activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp submits the transfer request for\nprocessing to the fsp, ensuring that a link reference is\nprovided for the transfer. the fsp will return the request\nstate object to indicate that the request is \'pending\'. fsp--\x3e>requesting fsp: http 202 (request state object) deactivate requesting fsp loop activate requesting fsp requesting fsp->>fsp: get /requeststates/{servercorrelationid} note right of fsp: (2) the requesting fsp polls the fsp for the request state\nuntil the transaction is authorised or declied or until the\npolling limit is reached. fsp--\x3e>requesting fsp: http 200 (request state object) end deactivate fsp opt activate fsp requesting fsp->>fsp: get /transactions/transactionreference note right of fsp: (3) the requesting fsp can use the objectreference returned in\nthe request state to retrieve a representation of the\ncompleted transfer. fsp--\x3e>requesting fsp: http 200 (transactions object) end deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# perform a transfer reversal\n\nin some failure scenarios, a requesting fsp may need to reverse a transaction. this diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: post /transactions/{original transaction reference}/reversals activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp submits the reversal request for\nprocessing to the fsp - passing the reference of the\ntransaction that is to be reversed. the fsp will return the\nrequest state object to indicate that the request is\n\'pending\'. fsp--\x3e>requesting fsp: http 202 (request state object) fsp->>requesting fsp: put {callback url} (reversal object) note right of fsp: (2) the fsp informs the requesting fsp that the\nreversal has been successfully completed by\nreturning the final representation of the\nreversal transaction. requesting fsp--\x3e>fsp: http 204 deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# obtain a financial service provider balance\n\n \n\n\nget .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /accounts/{identifiertype}/{identifier}/balance activate requesting fsp activate fsp note right of fsp: (1) obtain the balance of the\nrequested account. fsp--\x3e>requesting fsp: http 200 (balance object) deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# retrieve transfers for a financial service provider\n\nthis diagram illustrates use of a cursor mechanism to retrieve all transfers for a financial service provider via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp requests\nup to 20 transactions for the\naccount from the fsp. fsp--\x3e>requesting fsp: http 200 (transactions array) (x-records-available-count=40) note right of fsp: (2) the fsp returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. requesting fsp->>fsp: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of fsp: (3) the requesting fsp requests\nthe remaining transactions for\nthe account from the fsp. fsp--\x3e>requesting fsp: http 200 (transactions array) (x-records-available-count=40) deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the fsp is in a state that enables a client to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /heartbeat activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp requests the\navailability of the service from the fsp. fsp--\x3e>requesting fsp: http 200 (heartbeat object) note right of fsp: (2) the fsp returns the availability of\nthe service - available, unavailable\nor degraded. deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the requesting fsp to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the fsp.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /responses{clientcorrelationid} activate requesting fsp activate fsp note right of fsp: (1) using the requesting fsp\'s\nclientcorrelationid, a request for the\nmissing api response is sent. fsp--\x3e>requesting fsp: http 200 (responses object) note right of fsp: (2) a responses object is returned\ncontaining a link to the missing\nresource. requesting fsp->>fsp: get /{link} note right of fsp: (3) the requesting fsp uses the link to\nobtain a representation of the missing\nresource. fsp--\x3e>requesting fsp: http 200 (requested object) deactivate fsp deactivate requesting fsp\nopen postman collection open postman collection with authentication',charsets:{}},{title:"Agent Services - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"Agent Services - API Service Definition"},regularPath:"/use-cases/agent-services/api-service-definition.html",relativePath:"use-cases/agent-services/api-service-definition.md",key:"v-7d83edb8",path:"/use-cases/agent-services/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2157},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2545},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:11734},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:12134},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:12545},{level:3,title:"Agent Accounts APIs",slug:"agent-accounts-apis",normalizedTitle:"agent accounts apis",charIndex:20942},{level:4,title:"Identifying an Agent Account",slug:"identifying-an-agent-account",normalizedTitle:"identifying an agent account",charIndex:21188},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:21346},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:21532},{level:3,title:"Customer Account Services",slug:"customer-account-services",normalizedTitle:"customer account services",charIndex:22032},{level:4,title:"Register a Customer Mobile Money Account",slug:"register-a-customer-mobile-money-account",normalizedTitle:"register a customer mobile money account",charIndex:22061},{level:4,title:"Verify a Customer’s KYC",slug:"verify-a-customer-s-kyc",normalizedTitle:"verify a customer’s kyc",charIndex:22515},{level:5,title:"Retrieve Customer KYC Details from the Mobile Money Provider",slug:"retrieve-customer-kyc-details-from-the-mobile-money-provider",normalizedTitle:"retrieve customer kyc details from the mobile money provider",charIndex:23155},{level:5,title:"Provide Customer KYC Verification Update to the Mobile Money Provider",slug:"provide-customer-kyc-verification-update-to-the-mobile-money-provider",normalizedTitle:"provide customer kyc verification update to the mobile money provider",charIndex:23570},{level:4,title:"Account UML Diagram",slug:"account-uml-diagram",normalizedTitle:"account uml diagram",charIndex:25480},{level:4,title:"Account Object Definition",slug:"account-object-definition",normalizedTitle:"account object definition",charIndex:25859},{level:3,title:"View Transactions for an Agent",slug:"view-transactions-for-an-agent",normalizedTitle:"view transactions for an agent",charIndex:31868},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:34104},{level:3,title:"View an Agent’s Account Balance",slug:"view-an-agent-s-account-balance",normalizedTitle:"view an agent’s account balance",charIndex:34579},{level:4,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:34943},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:35076},{level:3,title:"Account Holder Name API",slug:"account-holder-name-api",normalizedTitle:"account holder name api",charIndex:37600},{level:4,title:"Account Holder Name UML Class Diagram",slug:"account-holder-name-uml-class-diagram",normalizedTitle:"account holder name uml class diagram",charIndex:37917},{level:4,title:"Account Holder Name Object Definition",slug:"account-holder-name-object-definition",normalizedTitle:"account holder name object definition",charIndex:38062},{level:3,title:"Authorisation Codes API",slug:"authorisation-codes-api",normalizedTitle:"authorisation codes api",charIndex:38631},{level:4,title:"Authorisation Code UML Class Diagram",slug:"authorisation-code-uml-class-diagram",normalizedTitle:"authorisation code uml class diagram",charIndex:41856},{level:4,title:"Authorisation Code Object Definition",slug:"authorisation-code-object-definition",normalizedTitle:"authorisation code object definition",charIndex:42491},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:48326},{level:3,title:"Name Object",slug:"name-object",normalizedTitle:"name object",charIndex:48349},{level:3,title:"Account Identifier Object",slug:"account-identifier-object",normalizedTitle:"account identifier object",charIndex:49899},{level:3,title:"Identity Object",slug:"identity-object",normalizedTitle:"identity object",charIndex:50807},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:53820},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:54663},{level:3,title:"Transaction Type Object",slug:"transaction-type-object",normalizedTitle:"transaction type object",charIndex:55490},{level:3,title:"Channel Type Object",slug:"channel-type-object",normalizedTitle:"channel type object",charIndex:56405},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:56984},{level:3,title:"Commission Object",slug:"commission-object",normalizedTitle:"commission object",charIndex:57890},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:58982},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:59874},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:59891},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:60268},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:60794}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Agent Accounts APIs Identifying an Agent Account Single Identifier Method Multiple Identifiers Method Customer Account Services Register a Customer Mobile Money Account Verify a Customer’s KYC Retrieve Customer KYC Details from the Mobile Money Provider Provide Customer KYC Verification Update to the Mobile Money Provider Account UML Diagram Account Object Definition View Transactions for an Agent Account Transaction UML Class Diagram View an Agent’s Account Balance Account Balance UML Class Diagram Account Balance Object Definition Account Holder Name API Account Holder Name UML Class Diagram Account Holder Name Object Definition Authorisation Codes API Authorisation Code UML Class Diagram Authorisation Code Object Definition Supporting Objects Name Object Account Identifier Object Identity Object Metadata Object Custom Data Object Transaction Type Object Channel Type Object Fees Object Commission Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types Account Identifiers",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nCustomer cash-in and cash-out transactions can be created, updated, and viewed using Transactions APIs.\n\nThe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Transaction Party "1..2" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction classDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction\n\nFigure 2‑1 Transaction UML Class Diagram\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                              \nName                                         Type        Description                                                           Reference                        Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                     \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers              creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                     debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers              debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                     If creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                     Enumeration = Transaction Types\n                                                         the URL)                                                       ← M\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                     \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                     Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                     Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                     \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                     \n                                                         was initiated.                                                 ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                     \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                         Provider                                                       ← O\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                                     \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                         populate additional transaction fields.                        ← O\n\n\n# Reversals API\n\nThe Reversals API is used to reverse a cash-in or cash-out. The originating transaction reference must be provided in the path in order to identify the transaction to be reversed. For a partial reversal, the amount needs to be supplied.\n\nFor viewing reversals, the Transactions API should be used.\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Transaction Party "1..2" --* "1" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction classDiagram Credit Party Identifier "0..10" --* "1" Reversal Debit Party Identifier "0..10" --* "1" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\nFigure 2-2 Reversal UML Class Diagram\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                          TYPE        DESCRIPTION                                                         REFERENCE                        VALIDATION\ntransactionReference                          string      Unique reference for the transaction. This is returned in      NA                                    \n                                                          the response by API provider.                                  M\nrequesting OrganisationTransactionReference   string      A reference provided by the requesting organisation that is    O                                     \n                                                          to be associated with the transaction.                         O\noriginalTransactionReference                  string      For reversals and refunds, this field indicates the            NA                                    \n                                                          transaction which is the subject of the reversal.              M\ncreditParty                                   array       A series of key/value pairs that enable the credit party to    O    Account Identifiers              \n                                                          be identified. Keys include MSISDN and Wallet Identifier.      O\ndebitParty                                    array       A collection of key/value pairs that enable the debit party    O    Account Identifiers              \n                                                          to be identified. Keys include MSISDN and Wallet Identifier.   O\ntype                                          string      The harmonised Transaction Type                                M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                         M                                     Refunds (adjustments) are supported.\nsubType                                       string      A non-harmonised sub-classification of the type of             O                                     \n                                                          transaction. Values are not fixed, and usage will vary         O\n                                                          according to Provider.\ntransactionStatus                             string      Indicates the status of the transaction as stored by the API   NA                                    \n                                                          provider.                                                      M\namount                                        string      The transaction Amount.                                        O                                     Please refer to API Fundamentals document for amount\n                                                                                                                         O                                     validation rules.\ncurrency                                      string      Currency of the transaction amount.                            O                                     Enumeration = ISO Currency Codes\n                                                                                                                         O\ndescriptionText                               string      Free format text description of the transaction provided by    O                                     \n                                                          the client. This can be provided as a reference for the        O\n                                                          receiver on a notification SMS and on an account statement.\nfees                                          array       Allows the passing and/or returning of all fees pertaining     O    Fees Object                      \n                                                          to the transaction.                                            O\ngeoCode                                       string      Indicates the geographic location from where the transaction   O                                     \n                                                          was initiated.                                                 O\nrequestingOrganisation                        object      The originating organisation of the request.                   O    Requesting Organisation Object   \n                                                                                                                         O\nservicingIdentity                             string      The field is used to identify the servicing identity for       O                                     \n                                                          transactions, e.g. till, POS ID, assistant ID.                 O\ntransactionReceipt                            string      Transaction receipt number as notified to the parties. This    NA                                    \n                                                          may differ from the Transaction Reference.                     O\ncreationDate                                  date-time   Date and time when the transaction was created by the API      NA                                    \n                                                          Provider.                                                      O\nmodificationDate                              date-time   Date and time when the transaction was modified by the API     NA                                    \n                                                          Provider.                                                      O\nrequestDate                                   date-time   The date and time of the transaction request as supplied by    O                                     \n                                                          the client.                                                    O\ncustomData                                    string      A collection of key/value pairs that can be used for           O    Custom Data Object               \n                                                          provider specific fields.                                      O\nmetadata                                      array       A collection of key/value pairs. These can be used to          O    Metadata                         \n                                                          populate additional properties that describe administrative    O\n                                                          information regarding the transaction.\n\n\n# Agent Accounts APIs\n\nUsing the mobile money Account APIs, agents can:\n\n * Register a new customer mobile money account.\n * Perform KYC verification services for a customer.\n * View transactions for their account.\n * View their account balance\n\n# Identifying an Agent Account\n\nTwo methods are provided for identifying an agent account, the single identifier method, and the multiple identifiers method\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifierType}/{identifier} .\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3} .\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Customer Account Services\n\n# Register a Customer Mobile Money Account\n\nThe Mobile Money API allows account creation for customers who are classified as individuals. Upon registration, new customers are generally provided with account and transaction limits based upon the level of KYC information they have provided and whether their KYC information has been physically verified.\n\nTo create an account, use POST /accounts/{identityType}, supplying individual as the identityType.\n\n# Verify a Customer’s KYC\n\nIn some markets, customers are able self-register for a mobile money account but have limited access to services until they have physically verified their KYC documentation with an authorised mobile money agent. The agent will compare the physical KYC against the details held by the mobile money provider. Agents can use the mobile money API to notify the outcome of the KYC verification to the mobile money provider. The steps are as follows:\n\n 1. Retrieve the KYC details for the customer from the mobile money provider.\n 2. Inform the mobile money provider as to whether the KYC verification was successful.\n\n# Retrieve Customer KYC Details from the Mobile Money Provider\n\nKYC details for a customer(s) associated with an account can be retrieved via the following paths:\n\nGET /accounts/{accountIdentifierType}/{identifier} OR\n\nGET /accounts/{Account Identifiers}\n\nThe identityId of the customer will also be returned in the response which must then be used to identify the customer in the subsequent verification request.\n\n# Provide Customer KYC Verification Update to the Mobile Money Provider\n\nTo verify a customer’s KYC, use one of the following paths:\n\nPATCH /accounts/{identifierType}/{identifier}/identities/{identityId} OR\n\nPATCH /accounts/{Account Identifiers}/identities/{identityId}\n\nThe following identity fields can be updated:\n\n{\n  "identity.kycVerificationStatus": {\n    "op": "replace", \n    "path": "/kycVerificationStatus", \n    "value": "string"\n  },\n  "identity.kycVerificationEntity": {\n    "op": "replace", \n    "path": "/kycVerificationEntity", \n    "value": "string"\n  },\n  "identity.kycLevel": {\n    "op": "replace", \n    "path": "/kycLevel", \n    "value": "string"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nFIELD                            PATCH BODY                                                    DESCRIPTION\nidentity.kycVerificationStatus   "op": "replace", "path": "/kycVerificationStatus", "value":   Use to change the KYC verification status of an identity\n(required)                       “string”                                                      associated with an account. The values that can be set will\n                                                                                               be provided by the mobile money provider.\nidentity.kycVerificationEntity   "op": "replace", "path": "/kycVerificationEntity", "value":   Use to indicate the agent that performed the verification.\n(optional)                       “string”\nidentity.kycLevel                "op": "replace", "path": "/kycLevel", "value": “integer”      Use to modify the KYC level of an identity associated with\n(optional)                                                                                     an account. Valid KYC levels will be provided by the mobile\n                                                                                               money provider.\n\n# Account UML Diagram\n\nclassDiagram ID Document "0..10" --* "1" KYC Information Address "0..1" --* "1" KYC Information Name "0..1" --* "1" KYC Information KYC Information "1" --* "1" Identity Account Identifier "1..10" --* "1" Account Identity "1..20" --* "1" Account Fee "1..20" --* "1" Account Commission "1..20" --* "1" Account\n\nFigure 2‑3 Account Creation UML Class Diagram\n\n# Account Object Definition\n\n{\n  "accountIdentifiers": [\n    {\n      "key": "myCustomKey",\n      "value": "myCustomValue"\n    }\n  ],\n  "identity": [\n    {\n      "identityId": "12345",\n      "identityType": "individual",\n      "identityKyc": {\n        "dateOfBirth": "2000-11-20",\n        "birthCountry": "GB",\n        "contactPhone": "+1234567890"\n      },\n      "accountRelationship": "accountholder"\n    }\n  ],\n  "accountType": "seller",\n  "accountSubStatus": "api",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "commissionEarned": {\n    "commissionType": "transfer",\n    "commissionAmount": "2.50",\n    "commissionCurrency": "GBP"\n  },\n  "registeringEntity": "My FSP",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nACCOUNT OBJECT                                                                                                               \nName                 Type        Description                                                           Reference             Validation\naccountIdentifiers   array       A series of key/value pairs that enable the account to be      → O    Account Identifiers   \n                                 identified. Identifiers are assigned by the API Provider       ← M\n                                 during creation.\nidentity             array       An account must be associated with one or more identities.     → M    Identity Object       \n                                                                                                ← M\naccountType          string      A non-harmonised field that indicates the type of the          → O                          \n                                 account.                                                       ← O\naccountStatus        string      Indicates a simplified representation of the account status.   → NA                         \n                                 This will be shown as ‘available’ or ‘unavailable’. A state    ← M\n                                 of ‘unavailable’ means that the account is in a state that\n                                 does not allow posting of transactions.\naccountSubStatus     string      Field can be used to return a provider-specific status for     → NA                         \n                                 the account.                                                   ← O\ncurrentBalance       string      The current outstanding balance on the account.                → NA                         Please refer to API Fundamentals document for amount\n                                                                                                ← O                          validation rules.\navailableBalance     string      Indicates the balance that is able to be debited for an        → NA                         Please refer to API Fundamentals document for amount\n                                 account. This balance is only provided on some API provider    ← O                          validation rules.\n                                 systems.\nreservedBalance      string      Indicates the portion of the balance that is reserved, i.e.    → NA                         Please refer to API Fundamentals document for amount\n                                 intended to be debited. This balance is only provided on       ← O                          validation rules.\n                                 some API provider systems.\nunClearedBalance     string      Indicates the sum of uncleared funds in an account, i.e.       → NA                         Please refer to API Fundamentals document for amount\n                                 those that are awaiting a credit confirmation.                 ← O                          validation rules.\ncurrency             string      Currency of the account.                                       → NA                         Enumeration = ISO Currency Codes\n                                                                                                ← O\ncustomData           string      A collection of key/value pairs that can be used for           → O    Custom Data Object    \n                                 provider specific fields.                                      ← O\nfees                 string      Returns all fees related to the creation of the account.       → O    Fees Object           \n                                                                                                ← O\ncommissionEarned     string      Returns all commission earned by the registering entity for    → NA   Commission Object     \n                                 the creation of the account.                                   ← O\nregisteringEntity    string      The entity that registered the account, for example, a         → O                          \n                                 mobile money agent.                                            ← O\ncreationDate         date-time   Indicates when the account was created as recorded by the      → NA                         \n                                 API provider.                                                  ← O\nmodificationDate     date-time   Indicates when the account was modified as recorded by the     → NA                         \n                                 API provider.                                                  ← O\nrequestDate          date-time   The date and time of the account request as supplied by the    → O                          \n                                 client.                                                        ← O\n\n\n# View Transactions for an Agent\n\nAn agent should use this API to return a list of transactions against their account. One of the following paths can be used:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned. This\n                                          can be ‘deposit’, ‘withdrawal’, ‘reversal’ or ‘adjustment’.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram Transaction Party "1..2" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account classDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2‑4 Account Transaction UML Class Diagram\n\n\n# View an Agent’s Account Balance\n\nUsing the Account Balances API, an FSP can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the FSP account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram Account Balance "1" --* "1" Account\n\nFigure 2‑5 Account Balance UML Class Diagram\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                         REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                NA               Please refer to API Fundamentals document for amount\n                                                                                           O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 O                validation rules.\ncurrency           string   Currency for all returned balances.                            NA               Enumeration = ISO Currency Codes\n                                                                                           O\n\n\n# Account Holder Name API\n\nUsing the Account Holder Name API, an agent can retrieve the name of the depositing customer to confirm the name is correct prior to authorising the request.\n\nPermitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/accountname\n\nor GET /accounts/{Account Identifiers}/accountname\n\n# Account Holder Name UML Class Diagram\n\nclassDiagram Account Holder Name "1" --* "1" Account\n\nFigure 2‑6 Account Holder Name UML Class Diagram\n\n# Account Holder Name Object Definition\n\n{\n  "name": {\n    "title": "Mr",\n    "firstName": "John",\n    "middleName": "Alan",\n    "lastName": "Doe",\n    "fullName": "John Alan Doe",\n    "nativeName": "John Doe"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME   TYPE        DESCRIPTION                                                     REFERENCE   VALIDATION\nname   Reference   A collection of fields detailing the name of the primary   NA   Name        \n                   account holder.                                            O\n\n\n# Authorisation Codes API\n\nThe Authorisation Codes API allows a withdrawing customer to generate a code which when presented to the agent, can be redeemed for an amount set by the withdrawing customer. The code can then be presented to the agent in the form of a digital code or QR code displayed on an app. The agent enters the digital code or scans the QR code via their POS.\n\nAuthorisation codes can be set to expire. Note that expiry time can be specified via the API, however the mobile money provider may mandate a common expiry period for all codes.\n\nThe following paths are permitted:\n\n * Generate an Authorisation Code. POST /accounts/{identifierType}/{identifier}/authorisationcodes or POST /accounts/{Account Identifiers}/authorisationcodes\n * Cancel an Authorisation Code (codeState = ‘cancelled’). PATCH /accounts/{identifierType}/{identifier}/authorisationcodes/{authorisationCode} or PATCH /accounts/{Account Identifiers}/authorisationcodes/{authorisationCode}.\n * View An Authorisation Code for a given account. GET /accounts/{identifierType}/{identifier}/authorisationcodes/{authorisationCode} or GET /accounts/{Requestor Account Identifiers}/authorisationcodes/{authorisationCode}.\n * View all Authorisation Codes for a given account. GET /accounts/{identifierType}/{identifier}/authorisationcodes or GET /accounts/{Requestor Account Identifiers}/authorisationcodes.\n\nWhen retrieving authorisation codes, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "codeState": "active"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\ncodeState      string    string      Allows filtering on the state of the authorisation code.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the authorisation codes are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\nSynchronous and asynchronous modes are supported for the POST and PATCH methods whereas only synchronous mode is supported for the GET method.\n\n# Authorisation Code UML Class Diagram\n\nclassDiagram Redemption Party "1" --* "1" Authorisation Code Metadata "0..20" --* "1" Authorisation Code Redemption Channel "0..50" --* "1" Authorisation Code Redemption Transaction Type "0..50" --* "1" Authorisation Code Authorisation Code "0..*" --* "1" Account classDiagram Redemption Account Identifier "0..10" --* "1" Authorisation Code Metadata "0..20" --* "1" Authorisation Code Redemption Channel "0..50" --* "1" Authorisation Code Redemption Transaction Type "0..50" --* "1" Authorisation Code Authorisation Code "0..*" --* "1" Account\n\nFigure 2-7 Authorisation Code UML Class Diagram\n\n# Authorisation Code Object Definition\n\n{\n  "authorisationCode": "12345",\n  "codeState": "expired",\n  "amount": "123.45",\n  "currency": "GBP",\n  "amountType": "exact",\n  "codeLifetime": 30000,\n  "holdFundsIndicator": true,\n  "redemptionAccountIdentifiers": [\n    {\n      "key":"MSISDN",\n      "value":"+1234567890"\n    }\n  ],\n  "redemptionChannels": "ATM",\n  "redemptionTransactionTypes": {\n    "transactionStatus": "completed",\n    "transactionType": "merchantpay"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nAUTHORISATION CODES OBJECT                                                                                                                  \nName                           Type        Description                                                           Reference                  Validation\nauthorisationCode              string      The code that will be presented to the other party for         → NA                              \n                                           redemption.                                                    ← M\ncodeState                      string      Indicates the state of the Authorisation Code                  → NA                              Enumeration = ‘active’, ‘expired’, ‘cancelled’\n                                                                                                          ← M\namount                         string      Indicates the amount associated with the authorisation code.   → O                               Please refer to API Fundamentals document for amount\n                                           Typically, this is set by the client.                          ← O                               validation rules.\ncurrency                       string      Indicates the amount currency. Must be supplied when an        → O                               Enumeration = ISO Currency Codes\n                                           amount is supplied.                                            ← O\namountType                     string      The amount for the authorisation can be an exact amount or     → O                               Enumeration = ‘exact’, ‘maximum’\n                                           can be a maximum amount, i.e. redemption up to but not         ← O\n                                           higher than the amount specified.\ncodeLifetime                   integer     Indicates the expiry time in seconds of the code. Depending    → O                               If supplied, then must be 1 second or greater.\n                                           upon the use case, this can be set by the client or server.    ← O\nholdFundsIndicator             boolean     Indicates whether funds should be reserved against the         → O                               \n                                           payer’s account where the payer is the requestor.              ← O\nredemptionAccountIdentifiers   array       A series of key/value pairs that identify the account where    → O    Account Identifiers        \n                                           the code must be redeemed. Only needed if the redemption       ← O\n                                           account needs to be explicitly stated.\nredemptionChannels             string      Indicates the channel(s) that the code can be redeemed         → O    Channel Types Object       \n                                           against, e.g. ATM, Merchant, etc..                             ← O\nredemptionTransactionTypes     string      Indicates the Transaction Types(s) that the code can be        → O    Transaction Types Object   \n                                           redeemed against.                                              ← O\nrequestingOrganisation         object      The originating organisation of the request.                   → O    Requesting Organisation    \n                                                                                                          ← O\ncreationDate                   date-time   Indicates when the link was created as recorded by the API     → NA                              \n                                           provider.                                                      ← O\nmodificationDate               date-time   Indicates when the link was modified as recorded by the API    → NA                              \n                                           provider.                                                      ← O\nrequestDate                    date-time   The date and time of the request as provided by the client.    → O                               \n                                                                                                          ← O\ncustomData                     string      A collection of key/value pairs that can be used for           → O    Custom Data Object         \n                                           provider specific fields.                                      ← O\nmetadata                       array       A collection of key/value pairs. These can be used to          → O    Metadata                   \n                                           populate additional properties that describe administrative    ← O\n                                           information regarding the authorisation code\n\n\n# Supporting Objects\n\n\n# Name Object\n\nThe name object identifies the name details for the subject identity.\n\n{\n  "title": "Mr",\n  "firstName": "John",\n  "middleName": "Alan",\n  "lastName": "Doe",\n  "fullName": "John Alan Doe",\n  "nativeName": "John Doe"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME         TYPE     DESCRIPTION                                                        REFERENCE   VALIDATION\ntitle        string   The given title of the KYC subject, e.g. Mr, Mrs, Dr.          O               \n                                                                                     O\nfirstName    string   First name (also referred to as given name) of the KYC         O               \n                      subject.                                                       O\nmiddleName   string   Middle Name of the KYC subject.                                O               \n                                                                                     O\nlastName     string   Surname (also referred to as last or family name) of the KYC   O               \n                      subject.                                                       O\nfullName     string   The full name of the KYC subject.                              O               \n                                                                                     O\nnativeName   string   The full name expressed as in the native language.             O               \n                                                                                     O\n\n\n# Account Identifier Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                       REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         M               Enumeration = Account Identifiers\n                                                               M\nvalue   string   Provides the account identifier type value.   M               \n                                                               M\n\n\n# Identity Object\n\nThe Identity object defines the information for an identity associated with an account. Between one and twenty identities can be associated with an account.\n\n{\n  "identityId": "12345",\n  "identityType": "individual",\n  "identityStatus": "Completed",\n  "identityKyc": {\n    "dateOfBirth": "2000-11-20",\n    "birthCountry": "GB",\n    "contactPhone": "+1234567890"\n  },\n  "accountRelationship": "accountholder",\n  "kycVerificationStatus": "verified",\n  "kycVerificationEntity": "123456789",\n  "kycLevel": "Regular",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nIDENTITY OBJECT                                                                                                          \nName                    Type      Description                                                          Reference         Validation\nidentityId              string    A unique id for the identity as assigned by the API           → NA                     \n                                  Provider.                                                     ← M\nidentityType            string    Indicates the type of the identity. Currently, only           → NA                     ‘individual’\n                                  ‘individual’ is supported.                                    ← M\nidentityStatus          string    A non-harmonised field describing the status of the           → NA                     \n                                  identity.                                                     ← O\nidentityKyc             object    A collection of fields detailing the KYC held for the         → M    KYC Information   \n                                  identity.                                                     ← M\naccountRelationship     string    Describes the relationship that the identity holds with the   → M                      ‘accountholder’\n                                  account.                                                      ← M\nkycVerificationStatus   string    Indicates the status of the identity’s KYC verification.      → O                      ‘verified’, ‘unverified’, ‘rejected’\n                                                                                                ← O\nkycVerificationEntity   string    Indicates the entity (e.g. mobile money agent) that has       → O                      \n                                  verified the KYC of the identity.                             ← O\nkycLevel                integer   Indicates the KYC level that the identity is associated       → O                      \n                                  with.                                                         ← O\ncustomData              array     A collection of key/value pairs that can be used for          → O                      \n                                  provider specific fields.                                     ← O\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Transaction Type Object\n\nThis object enables multiple transaction types to be specified along with paired sub-types. This object is used where multiple transaction types need to be passed in an API.\n\n{\n  "transactionType": "merchantpay",\n  "transactionSubType": "local",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION TYPE OBJECT                                                                     \nName                      Type     Description                                  Reference   Validation\ntransactionType           string   Identifies the Transaction Type.       → M               Enumeration = Transaction Types\n                                                                          ← M\ntransactionSubType        string   Identifies the Transaction Sub-Type.   → O               \n                                                                          ← O\n\n\n# Channel Type Object\n\nThis object enables multiple channel types to be specified. This object is used where multiple channel types need to be passed in an API.\n\n{\n  "channelType": "ATM"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCHANNEL TYPE OBJECT                                                             \nName                  Type     Description                          Reference   Validation\nchannelType           string   Identifies the Channel Type.   → M               \n                                                              ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                   REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  M               \n                                                                 M\nfeeAmount     string   Defines the amount of the fee.            M               Please refer to API Fundamentals document for amount\n                                                                 M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   M               Enumeration = ISO Currency Codes\n                                                                 M\n\n\n# Commission Object\n\nAn object that enables earned commission that is calculated by the API provider to be returned.\n\n{\n  "commissionType": "surcharge",\n  "commissionAmount": "2",\n  "commissionCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCOMMISSION OBJECT                                                                         \nName                 Type     Description                                     Reference   Validation\ncommissionType       string   Defines the type of commission.           → M               \n                                                                        ← M\ncommissionAmount     string   Defines the amount of the commission.     → M               Please refer to API Fundamentals document for amount\n                                                                        ← M               validation rules.\ncommissionCurrency   string   Defines the currency of the commission.   → M               Enumeration = ISO Currency Codes\n                                                                        ← M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE         DESCRIPTION\ndeposit      Exchange of cash in return for e-Money at a physical agent\n             or via ATM (cash-in).\nadjustment   General adjustments to an account via an adjustment\n             transaction (e.g. refunds).\nreversal     Reversal of a prior transaction to return funds to the\n             payer.\nwithdrawal   Exchange of e-Money in return for cash at a physical agent\n             or via ATM (cash-out).\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\ncustomer cash-in and cash-out transactions can be created, updated, and viewed using transactions apis.\n\nthe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram transaction party "1..2" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction classdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction\n\nfigure 2‑1 transaction uml class diagram\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                              \nname                                         type        description                                                           reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                    \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                     \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers              creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                     debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers              debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                     if creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                     enumeration = transaction types\n                                                         the url)                                                       ← m\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                     \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                    \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                     please refer to api fundamentals document for amount\n                                                                                                                        ← m                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                     enumeration = iso currency codes\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                     \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                     \n                                                         was initiated.                                                 ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                     \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                    \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                    \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                    \n                                                         provider                                                       ← o\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                                     \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                         populate additional transaction fields.                        ← o\n\n\n# reversals api\n\nthe reversals api is used to reverse a cash-in or cash-out. the originating transaction reference must be provided in the path in order to identify the transaction to be reversed. for a partial reversal, the amount needs to be supplied.\n\nfor viewing reversals, the transactions api should be used.\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram transaction party "1..2" --* "1" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction classdiagram credit party identifier "0..10" --* "1" reversal debit party identifier "0..10" --* "1" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\nfigure 2-2 reversal uml class diagram\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                          type        description                                                         reference                        validation\ntransactionreference                          string      unique reference for the transaction. this is returned in      na                                    \n                                                          the response by api provider.                                  m\nrequesting organisationtransactionreference   string      a reference provided by the requesting organisation that is    o                                     \n                                                          to be associated with the transaction.                         o\noriginaltransactionreference                  string      for reversals and refunds, this field indicates the            na                                    \n                                                          transaction which is the subject of the reversal.              m\ncreditparty                                   array       a series of key/value pairs that enable the credit party to    o    account identifiers              \n                                                          be identified. keys include msisdn and wallet identifier.      o\ndebitparty                                    array       a collection of key/value pairs that enable the debit party    o    account identifiers              \n                                                          to be identified. keys include msisdn and wallet identifier.   o\ntype                                          string      the harmonised transaction type                                m                                     enumeration = transaction types note that only reversals and\n                                                                                                                         m                                     refunds (adjustments) are supported.\nsubtype                                       string      a non-harmonised sub-classification of the type of             o                                     \n                                                          transaction. values are not fixed, and usage will vary         o\n                                                          according to provider.\ntransactionstatus                             string      indicates the status of the transaction as stored by the api   na                                    \n                                                          provider.                                                      m\namount                                        string      the transaction amount.                                        o                                     please refer to api fundamentals document for amount\n                                                                                                                         o                                     validation rules.\ncurrency                                      string      currency of the transaction amount.                            o                                     enumeration = iso currency codes\n                                                                                                                         o\ndescriptiontext                               string      free format text description of the transaction provided by    o                                     \n                                                          the client. this can be provided as a reference for the        o\n                                                          receiver on a notification sms and on an account statement.\nfees                                          array       allows the passing and/or returning of all fees pertaining     o    fees object                      \n                                                          to the transaction.                                            o\ngeocode                                       string      indicates the geographic location from where the transaction   o                                     \n                                                          was initiated.                                                 o\nrequestingorganisation                        object      the originating organisation of the request.                   o    requesting organisation object   \n                                                                                                                         o\nservicingidentity                             string      the field is used to identify the servicing identity for       o                                     \n                                                          transactions, e.g. till, pos id, assistant id.                 o\ntransactionreceipt                            string      transaction receipt number as notified to the parties. this    na                                    \n                                                          may differ from the transaction reference.                     o\ncreationdate                                  date-time   date and time when the transaction was created by the api      na                                    \n                                                          provider.                                                      o\nmodificationdate                              date-time   date and time when the transaction was modified by the api     na                                    \n                                                          provider.                                                      o\nrequestdate                                   date-time   the date and time of the transaction request as supplied by    o                                     \n                                                          the client.                                                    o\ncustomdata                                    string      a collection of key/value pairs that can be used for           o    custom data object               \n                                                          provider specific fields.                                      o\nmetadata                                      array       a collection of key/value pairs. these can be used to          o    metadata                         \n                                                          populate additional properties that describe administrative    o\n                                                          information regarding the transaction.\n\n\n# agent accounts apis\n\nusing the mobile money account apis, agents can:\n\n * register a new customer mobile money account.\n * perform kyc verification services for a customer.\n * view transactions for their account.\n * view their account balance\n\n# identifying an agent account\n\ntwo methods are provided for identifying an agent account, the single identifier method, and the multiple identifiers method\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifiertype}/{identifier} .\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3} .\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# customer account services\n\n# register a customer mobile money account\n\nthe mobile money api allows account creation for customers who are classified as individuals. upon registration, new customers are generally provided with account and transaction limits based upon the level of kyc information they have provided and whether their kyc information has been physically verified.\n\nto create an account, use post /accounts/{identitytype}, supplying individual as the identitytype.\n\n# verify a customer’s kyc\n\nin some markets, customers are able self-register for a mobile money account but have limited access to services until they have physically verified their kyc documentation with an authorised mobile money agent. the agent will compare the physical kyc against the details held by the mobile money provider. agents can use the mobile money api to notify the outcome of the kyc verification to the mobile money provider. the steps are as follows:\n\n 1. retrieve the kyc details for the customer from the mobile money provider.\n 2. inform the mobile money provider as to whether the kyc verification was successful.\n\n# retrieve customer kyc details from the mobile money provider\n\nkyc details for a customer(s) associated with an account can be retrieved via the following paths:\n\nget /accounts/{accountidentifiertype}/{identifier} or\n\nget /accounts/{account identifiers}\n\nthe identityid of the customer will also be returned in the response which must then be used to identify the customer in the subsequent verification request.\n\n# provide customer kyc verification update to the mobile money provider\n\nto verify a customer’s kyc, use one of the following paths:\n\npatch /accounts/{identifiertype}/{identifier}/identities/{identityid} or\n\npatch /accounts/{account identifiers}/identities/{identityid}\n\nthe following identity fields can be updated:\n\n{\n  "identity.kycverificationstatus": {\n    "op": "replace", \n    "path": "/kycverificationstatus", \n    "value": "string"\n  },\n  "identity.kycverificationentity": {\n    "op": "replace", \n    "path": "/kycverificationentity", \n    "value": "string"\n  },\n  "identity.kyclevel": {\n    "op": "replace", \n    "path": "/kyclevel", \n    "value": "string"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nfield                            patch body                                                    description\nidentity.kycverificationstatus   "op": "replace", "path": "/kycverificationstatus", "value":   use to change the kyc verification status of an identity\n(required)                       “string”                                                      associated with an account. the values that can be set will\n                                                                                               be provided by the mobile money provider.\nidentity.kycverificationentity   "op": "replace", "path": "/kycverificationentity", "value":   use to indicate the agent that performed the verification.\n(optional)                       “string”\nidentity.kyclevel                "op": "replace", "path": "/kyclevel", "value": “integer”      use to modify the kyc level of an identity associated with\n(optional)                                                                                     an account. valid kyc levels will be provided by the mobile\n                                                                                               money provider.\n\n# account uml diagram\n\nclassdiagram id document "0..10" --* "1" kyc information address "0..1" --* "1" kyc information name "0..1" --* "1" kyc information kyc information "1" --* "1" identity account identifier "1..10" --* "1" account identity "1..20" --* "1" account fee "1..20" --* "1" account commission "1..20" --* "1" account\n\nfigure 2‑3 account creation uml class diagram\n\n# account object definition\n\n{\n  "accountidentifiers": [\n    {\n      "key": "mycustomkey",\n      "value": "mycustomvalue"\n    }\n  ],\n  "identity": [\n    {\n      "identityid": "12345",\n      "identitytype": "individual",\n      "identitykyc": {\n        "dateofbirth": "2000-11-20",\n        "birthcountry": "gb",\n        "contactphone": "+1234567890"\n      },\n      "accountrelationship": "accountholder"\n    }\n  ],\n  "accounttype": "seller",\n  "accountsubstatus": "api",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "commissionearned": {\n    "commissiontype": "transfer",\n    "commissionamount": "2.50",\n    "commissioncurrency": "gbp"\n  },\n  "registeringentity": "my fsp",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\naccount object                                                                                                               \nname                 type        description                                                           reference             validation\naccountidentifiers   array       a series of key/value pairs that enable the account to be      → o    account identifiers   \n                                 identified. identifiers are assigned by the api provider       ← m\n                                 during creation.\nidentity             array       an account must be associated with one or more identities.     → m    identity object       \n                                                                                                ← m\naccounttype          string      a non-harmonised field that indicates the type of the          → o                          \n                                 account.                                                       ← o\naccountstatus        string      indicates a simplified representation of the account status.   → na                         \n                                 this will be shown as ‘available’ or ‘unavailable’. a state    ← m\n                                 of ‘unavailable’ means that the account is in a state that\n                                 does not allow posting of transactions.\naccountsubstatus     string      field can be used to return a provider-specific status for     → na                         \n                                 the account.                                                   ← o\ncurrentbalance       string      the current outstanding balance on the account.                → na                         please refer to api fundamentals document for amount\n                                                                                                ← o                          validation rules.\navailablebalance     string      indicates the balance that is able to be debited for an        → na                         please refer to api fundamentals document for amount\n                                 account. this balance is only provided on some api provider    ← o                          validation rules.\n                                 systems.\nreservedbalance      string      indicates the portion of the balance that is reserved, i.e.    → na                         please refer to api fundamentals document for amount\n                                 intended to be debited. this balance is only provided on       ← o                          validation rules.\n                                 some api provider systems.\nunclearedbalance     string      indicates the sum of uncleared funds in an account, i.e.       → na                         please refer to api fundamentals document for amount\n                                 those that are awaiting a credit confirmation.                 ← o                          validation rules.\ncurrency             string      currency of the account.                                       → na                         enumeration = iso currency codes\n                                                                                                ← o\ncustomdata           string      a collection of key/value pairs that can be used for           → o    custom data object    \n                                 provider specific fields.                                      ← o\nfees                 string      returns all fees related to the creation of the account.       → o    fees object           \n                                                                                                ← o\ncommissionearned     string      returns all commission earned by the registering entity for    → na   commission object     \n                                 the creation of the account.                                   ← o\nregisteringentity    string      the entity that registered the account, for example, a         → o                          \n                                 mobile money agent.                                            ← o\ncreationdate         date-time   indicates when the account was created as recorded by the      → na                         \n                                 api provider.                                                  ← o\nmodificationdate     date-time   indicates when the account was modified as recorded by the     → na                         \n                                 api provider.                                                  ← o\nrequestdate          date-time   the date and time of the account request as supplied by the    → o                          \n                                 client.                                                        ← o\n\n\n# view transactions for an agent\n\nan agent should use this api to return a list of transactions against their account. one of the following paths can be used:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned. this\n                                          can be ‘deposit’, ‘withdrawal’, ‘reversal’ or ‘adjustment’.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram transaction party "1..2" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account classdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2‑4 account transaction uml class diagram\n\n\n# view an agent’s account balance\n\nusing the account balances api, an fsp can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the fsp account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram account balance "1" --* "1" account\n\nfigure 2‑5 account balance uml class diagram\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                         reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                na               please refer to api fundamentals document for amount\n                                                                                           o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 o                validation rules.\ncurrency           string   currency for all returned balances.                            na               enumeration = iso currency codes\n                                                                                           o\n\n\n# account holder name api\n\nusing the account holder name api, an agent can retrieve the name of the depositing customer to confirm the name is correct prior to authorising the request.\n\npermitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/accountname\n\nor get /accounts/{account identifiers}/accountname\n\n# account holder name uml class diagram\n\nclassdiagram account holder name "1" --* "1" account\n\nfigure 2‑6 account holder name uml class diagram\n\n# account holder name object definition\n\n{\n  "name": {\n    "title": "mr",\n    "firstname": "john",\n    "middlename": "alan",\n    "lastname": "doe",\n    "fullname": "john alan doe",\n    "nativename": "john doe"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname   type        description                                                     reference   validation\nname   reference   a collection of fields detailing the name of the primary   na   name        \n                   account holder.                                            o\n\n\n# authorisation codes api\n\nthe authorisation codes api allows a withdrawing customer to generate a code which when presented to the agent, can be redeemed for an amount set by the withdrawing customer. the code can then be presented to the agent in the form of a digital code or qr code displayed on an app. the agent enters the digital code or scans the qr code via their pos.\n\nauthorisation codes can be set to expire. note that expiry time can be specified via the api, however the mobile money provider may mandate a common expiry period for all codes.\n\nthe following paths are permitted:\n\n * generate an authorisation code. post /accounts/{identifiertype}/{identifier}/authorisationcodes or post /accounts/{account identifiers}/authorisationcodes\n * cancel an authorisation code (codestate = ‘cancelled’). patch /accounts/{identifiertype}/{identifier}/authorisationcodes/{authorisationcode} or patch /accounts/{account identifiers}/authorisationcodes/{authorisationcode}.\n * view an authorisation code for a given account. get /accounts/{identifiertype}/{identifier}/authorisationcodes/{authorisationcode} or get /accounts/{requestor account identifiers}/authorisationcodes/{authorisationcode}.\n * view all authorisation codes for a given account. get /accounts/{identifiertype}/{identifier}/authorisationcodes or get /accounts/{requestor account identifiers}/authorisationcodes.\n\nwhen retrieving authorisation codes, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "codestate": "active"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\ncodestate      string    string      allows filtering on the state of the authorisation code.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the authorisation codes are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\nsynchronous and asynchronous modes are supported for the post and patch methods whereas only synchronous mode is supported for the get method.\n\n# authorisation code uml class diagram\n\nclassdiagram redemption party "1" --* "1" authorisation code metadata "0..20" --* "1" authorisation code redemption channel "0..50" --* "1" authorisation code redemption transaction type "0..50" --* "1" authorisation code authorisation code "0..*" --* "1" account classdiagram redemption account identifier "0..10" --* "1" authorisation code metadata "0..20" --* "1" authorisation code redemption channel "0..50" --* "1" authorisation code redemption transaction type "0..50" --* "1" authorisation code authorisation code "0..*" --* "1" account\n\nfigure 2-7 authorisation code uml class diagram\n\n# authorisation code object definition\n\n{\n  "authorisationcode": "12345",\n  "codestate": "expired",\n  "amount": "123.45",\n  "currency": "gbp",\n  "amounttype": "exact",\n  "codelifetime": 30000,\n  "holdfundsindicator": true,\n  "redemptionaccountidentifiers": [\n    {\n      "key":"msisdn",\n      "value":"+1234567890"\n    }\n  ],\n  "redemptionchannels": "atm",\n  "redemptiontransactiontypes": {\n    "transactionstatus": "completed",\n    "transactiontype": "merchantpay"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nauthorisation codes object                                                                                                                  \nname                           type        description                                                           reference                  validation\nauthorisationcode              string      the code that will be presented to the other party for         → na                              \n                                           redemption.                                                    ← m\ncodestate                      string      indicates the state of the authorisation code                  → na                              enumeration = ‘active’, ‘expired’, ‘cancelled’\n                                                                                                          ← m\namount                         string      indicates the amount associated with the authorisation code.   → o                               please refer to api fundamentals document for amount\n                                           typically, this is set by the client.                          ← o                               validation rules.\ncurrency                       string      indicates the amount currency. must be supplied when an        → o                               enumeration = iso currency codes\n                                           amount is supplied.                                            ← o\namounttype                     string      the amount for the authorisation can be an exact amount or     → o                               enumeration = ‘exact’, ‘maximum’\n                                           can be a maximum amount, i.e. redemption up to but not         ← o\n                                           higher than the amount specified.\ncodelifetime                   integer     indicates the expiry time in seconds of the code. depending    → o                               if supplied, then must be 1 second or greater.\n                                           upon the use case, this can be set by the client or server.    ← o\nholdfundsindicator             boolean     indicates whether funds should be reserved against the         → o                               \n                                           payer’s account where the payer is the requestor.              ← o\nredemptionaccountidentifiers   array       a series of key/value pairs that identify the account where    → o    account identifiers        \n                                           the code must be redeemed. only needed if the redemption       ← o\n                                           account needs to be explicitly stated.\nredemptionchannels             string      indicates the channel(s) that the code can be redeemed         → o    channel types object       \n                                           against, e.g. atm, merchant, etc..                             ← o\nredemptiontransactiontypes     string      indicates the transaction types(s) that the code can be        → o    transaction types object   \n                                           redeemed against.                                              ← o\nrequestingorganisation         object      the originating organisation of the request.                   → o    requesting organisation    \n                                                                                                          ← o\ncreationdate                   date-time   indicates when the link was created as recorded by the api     → na                              \n                                           provider.                                                      ← o\nmodificationdate               date-time   indicates when the link was modified as recorded by the api    → na                              \n                                           provider.                                                      ← o\nrequestdate                    date-time   the date and time of the request as provided by the client.    → o                               \n                                                                                                          ← o\ncustomdata                     string      a collection of key/value pairs that can be used for           → o    custom data object         \n                                           provider specific fields.                                      ← o\nmetadata                       array       a collection of key/value pairs. these can be used to          → o    metadata                   \n                                           populate additional properties that describe administrative    ← o\n                                           information regarding the authorisation code\n\n\n# supporting objects\n\n\n# name object\n\nthe name object identifies the name details for the subject identity.\n\n{\n  "title": "mr",\n  "firstname": "john",\n  "middlename": "alan",\n  "lastname": "doe",\n  "fullname": "john alan doe",\n  "nativename": "john doe"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname         type     description                                                        reference   validation\ntitle        string   the given title of the kyc subject, e.g. mr, mrs, dr.          o               \n                                                                                     o\nfirstname    string   first name (also referred to as given name) of the kyc         o               \n                      subject.                                                       o\nmiddlename   string   middle name of the kyc subject.                                o               \n                                                                                     o\nlastname     string   surname (also referred to as last or family name) of the kyc   o               \n                      subject.                                                       o\nfullname     string   the full name of the kyc subject.                              o               \n                                                                                     o\nnativename   string   the full name expressed as in the native language.             o               \n                                                                                     o\n\n\n# account identifier object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                       reference   validation\nkey     string   provides the account identifier type.         m               enumeration = account identifiers\n                                                               m\nvalue   string   provides the account identifier type value.   m               \n                                                               m\n\n\n# identity object\n\nthe identity object defines the information for an identity associated with an account. between one and twenty identities can be associated with an account.\n\n{\n  "identityid": "12345",\n  "identitytype": "individual",\n  "identitystatus": "completed",\n  "identitykyc": {\n    "dateofbirth": "2000-11-20",\n    "birthcountry": "gb",\n    "contactphone": "+1234567890"\n  },\n  "accountrelationship": "accountholder",\n  "kycverificationstatus": "verified",\n  "kycverificationentity": "123456789",\n  "kyclevel": "regular",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nidentity object                                                                                                          \nname                    type      description                                                          reference         validation\nidentityid              string    a unique id for the identity as assigned by the api           → na                     \n                                  provider.                                                     ← m\nidentitytype            string    indicates the type of the identity. currently, only           → na                     ‘individual’\n                                  ‘individual’ is supported.                                    ← m\nidentitystatus          string    a non-harmonised field describing the status of the           → na                     \n                                  identity.                                                     ← o\nidentitykyc             object    a collection of fields detailing the kyc held for the         → m    kyc information   \n                                  identity.                                                     ← m\naccountrelationship     string    describes the relationship that the identity holds with the   → m                      ‘accountholder’\n                                  account.                                                      ← m\nkycverificationstatus   string    indicates the status of the identity’s kyc verification.      → o                      ‘verified’, ‘unverified’, ‘rejected’\n                                                                                                ← o\nkycverificationentity   string    indicates the entity (e.g. mobile money agent) that has       → o                      \n                                  verified the kyc of the identity.                             ← o\nkyclevel                integer   indicates the kyc level that the identity is associated       → o                      \n                                  with.                                                         ← o\ncustomdata              array     a collection of key/value pairs that can be used for          → o                      \n                                  provider specific fields.                                     ← o\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# transaction type object\n\nthis object enables multiple transaction types to be specified along with paired sub-types. this object is used where multiple transaction types need to be passed in an api.\n\n{\n  "transactiontype": "merchantpay",\n  "transactionsubtype": "local",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction type object                                                                     \nname                      type     description                                  reference   validation\ntransactiontype           string   identifies the transaction type.       → m               enumeration = transaction types\n                                                                          ← m\ntransactionsubtype        string   identifies the transaction sub-type.   → o               \n                                                                          ← o\n\n\n# channel type object\n\nthis object enables multiple channel types to be specified. this object is used where multiple channel types need to be passed in an api.\n\n{\n  "channeltype": "atm"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nchannel type object                                                             \nname                  type     description                          reference   validation\nchanneltype           string   identifies the channel type.   → m               \n                                                              ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                   reference   validation\nfeetype       string   defines the type of fee.                  m               \n                                                                 m\nfeeamount     string   defines the amount of the fee.            m               please refer to api fundamentals document for amount\n                                                                 m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   m               enumeration = iso currency codes\n                                                                 m\n\n\n# commission object\n\nan object that enables earned commission that is calculated by the api provider to be returned.\n\n{\n  "commissiontype": "surcharge",\n  "commissionamount": "2",\n  "commissioncurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncommission object                                                                         \nname                 type     description                                     reference   validation\ncommissiontype       string   defines the type of commission.           → m               \n                                                                        ← m\ncommissionamount     string   defines the amount of the commission.     → m               please refer to api fundamentals document for amount\n                                                                        ← m               validation rules.\ncommissioncurrency   string   defines the currency of the commission.   → m               enumeration = iso currency codes\n                                                                        ← m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode         description\ndeposit      exchange of cash in return for e-money at a physical agent\n             or via atm (cash-in).\nadjustment   general adjustments to an account via an adjustment\n             transaction (e.g. refunds).\nreversal     reversal of a prior transaction to return funds to the\n             payer.\nwithdrawal   exchange of e-money in return for cash at a physical agent\n             or via atm (cash-out).\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.',charsets:{}},{title:"Agent Services",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Agent Services"},regularPath:"/use-cases/agent-services/",relativePath:"use-cases/agent-services/index.md",key:"v-13461887",path:"/use-cases/agent-services/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:1714}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nAgent Services comprises of the following:\n\n\n\nCash-in and Cash-out Services\n\n * Agent-initiated Cash-out. The agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * Customer-initiated Cash-out. The mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * Cash-out via Authorisation Code. The customer generates an authorisation code up to a maximum amount. The agent then enters or scans (if rendered as a QR code) the code to perform the withdrawal.\n * Cash-in. The agent initiates the cash-in by entering the customer account identifier(s).\n\nClosed loop and open-loop agent cash-in and cash-out are supported by the Mobile Money API. Closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. Open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nAgents can be physical agents, i.e. customers that are serviced by an human, or can be an ATM.\n\n\n\nCustomer Account Services\n\n * Customer Registration. Agents can register new customers for mobile money.\n * KYC Verification. Agents that provide KYC verification services can confirm that they have verified customer KYC.\n   \n   \n\nFurther Reading\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer KYC verification services on behalf of mobile\n                         money customers.\nAgents                   To understand how to implement the Mobile Money API to         API Consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and KYC verification.",normalizedContent:"# introduction\n\nagent services comprises of the following:\n\n\n\ncash-in and cash-out services\n\n * agent-initiated cash-out. the agent initiates the cash-out and the mobile money customer is requested to authenticate the cash-out by the mobile money provider.\n * customer-initiated cash-out. the mobile money customer initiates the payment by specifying the agent that is to be performing the cash-out.\n * cash-out via authorisation code. the customer generates an authorisation code up to a maximum amount. the agent then enters or scans (if rendered as a qr code) the code to perform the withdrawal.\n * cash-in. the agent initiates the cash-in by entering the customer account identifier(s).\n\nclosed loop and open-loop agent cash-in and cash-out are supported by the mobile money api. closed loop cash-in/cash-out occurs where the agent and customer accounts reside with the same mobile money provider. open loop cash-in/cash-out occurs where the agent and customer accounts reside with different mobile money providers.\n\nagents can be physical agents, i.e. customers that are serviced by an human, or can be an atm.\n\n\n\ncustomer account services\n\n * customer registration. agents can register new customers for mobile money.\n * kyc verification. agents that provide kyc verification services can confirm that they have verified customer kyc.\n   \n   \n\nfurther reading\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         agents to perform cash-in, cash-out, customer registration\n                         and customer kyc verification services on behalf of mobile\n                         money customers.\nagents                   to understand how to implement the mobile money api to         api consumer\n                         service customer requests for cash-in, cash-out,\n                         registration and kyc verification.",charsets:{}},{title:"Agent Services - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"Agent Services - Use Case Scenarios"},regularPath:"/use-cases/agent-services/scenarios/scenarios.html",relativePath:"use-cases/agent-services/scenarios/scenarios.md",key:"v-95b8cb78",path:"/use-cases/agent-services/scenarios/scenarios.html",headers:[{level:2,title:"Agent-initiated Cash-out",slug:"agent-initiated-cash-out",normalizedTitle:"agent-initiated cash-out",charIndex:599},{level:2,title:"Agent-initiated Cash-out Failure",slug:"agent-initiated-cash-out-failure",normalizedTitle:"agent-initiated cash-out failure",charIndex:2581},{level:2,title:"Agent-initiated Cash-out using the Polling Method",slug:"agent-initiated-cash-out-using-the-polling-method",normalizedTitle:"agent-initiated cash-out using the polling method",charIndex:3853},{level:2,title:"Customer-initiated Cash-out",slug:"customer-initiated-cash-out",normalizedTitle:"customer-initiated cash-out",charIndex:6614},{level:2,title:"Customer-initiated Cash-out Failure",slug:"customer-initiated-cash-out-failure",normalizedTitle:"customer-initiated cash-out failure",charIndex:8463},{level:2,title:"Customer Cash-out at an ATM using an Authorisation Code",slug:"customer-cash-out-at-an-atm-using-an-authorisation-code",normalizedTitle:"customer cash-out at an atm using an authorisation code",charIndex:9653},{level:2,title:"Agent-initiated Customer Cash-in",slug:"agent-initiated-customer-cash-in",normalizedTitle:"agent-initiated customer cash-in",charIndex:12975},{level:2,title:"Cash-out Reversal",slug:"cash-out-reversal",normalizedTitle:"cash-out reversal",charIndex:15271},{level:2,title:"Register a Customer Mobile Money Account",slug:"register-a-customer-mobile-money-account",normalizedTitle:"register a customer mobile money account",charIndex:16780},{level:2,title:"Verify a Customer’s KYC",slug:"verify-a-customer-s-kyc",normalizedTitle:"verify a customer’s kyc",charIndex:19932},{level:2,title:"Obtain an Agent Balance",slug:"obtain-an-agent-balance",normalizedTitle:"obtain an agent balance",charIndex:21714},{level:2,title:"Retrieve Transactions for an Agent",slug:"retrieve-transactions-for-an-agent",normalizedTitle:"retrieve transactions for an agent",charIndex:22314},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:23684},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:24554}],headersStr:"Agent-initiated Cash-out Agent-initiated Cash-out Failure Agent-initiated Cash-out using the Polling Method Customer-initiated Cash-out Customer-initiated Cash-out Failure Customer Cash-out at an ATM using an Authorisation Code Agent-initiated Customer Cash-in Cash-out Reversal Register a Customer Mobile Money Account Verify a Customer’s KYC Obtain an Agent Balance Retrieve Transactions for an Agent Check for Service Availability Retrieve a Missing API Response",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# Agent-initiated Cash-out\n\nIn this example, an asynchronous cash-out flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/withdrawal\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider participant Customer Agent->>Mobile Money Provider: POST /transactions/type/withdrawal activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Agent submits the payment request for processing to\nthe MMP. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) deactivate Agent Mobile Money Provider->>Customer: Obtain Customer Authorisation activate Customer Note right of Customer: (2) The customer is requested by the MMP to\nauthorise the cash-out. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for cash-out\nauthorisation. Customer--\x3e>Mobile Money Provider: (Authorised) deactivate Customer Mobile Money Provider->>Agent: PUT {Callback URL} (Transactions Object) activate Agent Note right of Mobile Money Provider: (3) The MMP informs the agent that the cash-out\nhas been successfully completed by returning\nthe final representation of the transaction. Agent--\x3e>Mobile Money Provider: HTTP 204 deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Agent-initiated Cash-out Failure\n\nIn this example, an asynchronous cash-out flow is used with a final callback that contains the reason for failure.\n\nsequenceDiagram participant Agent participant Mobile Money Provider participant Customer Agent->>Mobile Money Provider: POST /transactions/type/withdrawal activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Agent submits the payment request for processing to\nthe MMP. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) deactivate Agent Mobile Money Provider->>Customer: Obtain Customer Authorisation activate Customer Note right of Customer: (2) The customer is requested by the MMP to\nauthorise the cash-out. The customer\ndeclines the request or the request times-\nout. Customer--\x3e>Mobile Money Provider: (Declined or Timeout) deactivate Customer Mobile Money Provider->>Agent: PUT {Callback URL} (Error Object) activate Agent Note right of Mobile Money Provider: (3) The MMP informs the agent that the cash-out\nhas failed and returns the error object detailing\nthe reason for failure. Agent--\x3e>Mobile Money Provider: HTTP 204 deactivate Agent deactivate Mobile Money Provider\n\n\n# Agent-initiated Cash-out using the Polling Method\n\nIn this example, an asynchronous cash-out flow is used with the polling method. The client polls against the request state object to determine the outcome of the cash-out request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/withdrawal\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n \n\n\nGET .../requeststates/Place the Server Correlation Id here\n\n\n \n\n\nGET .../transactions/Place Transaction Reference here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider participant Customer Agent->>Mobile Money Provider: POST /transactions/type/withdrawal activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent submits the cash-out request for processing to\nthe MMP. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) deactivate Agent par loop activate Agent Agent->>Mobile Money Provider: GET /requeststates/{serverCorrelationId} Note right of Mobile Money Provider: (2) The agent polls the MMP for the Request State until the\ntransaction is authorised or declined or until the polling limit\nis reached. Mobile Money Provider--\x3e>Agent: HTTP 200 (Request State Object) end and Mobile Money Provider->>Customer: Obtain Customer Authorisation activate Customer Note right of Customer: (3) The Customer is requested to the MMP to\nauthorise the cash-out. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for cash-out\nauthorisation. Customer--\x3e>Mobile Money Provider: (Authorised) end deactivate Agent deactivate Customer deactivate Mobile Money Provider opt activate Mobile Money Provider activate Agent Agent->>Mobile Money Provider: GET /transactions/transactionsReference Note right of Mobile Money Provider: (4) The agent can use the objectReference returned in the\nRequest State to retrieve a representation of the complete\ncash-out transaction. Mobile Money Provider--\x3e>Agent: HTTP 200 (Transactions Object) end deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Customer-initiated Cash-out\n\nIn this example, an asynchronous cash-out flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/withdrawal\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Customer participant Mobile Money Provider participant Agent Customer->>Mobile Money Provider: POST /transactions/type/withdrawal activate Customer activate Mobile Money Provider Note right of Mobile Money Provider: (1) The customer\'s channel (e.g. Mobile Money App) submits\nthe cash-out request for processing to the MMP. The MMP\nwill return the Request State object to indicate that the\nrequest is \'pending\'. Mobile Money Provider--\x3e>Customer: HTTP 202 (Request State Object) deactivate Customer Mobile Money Provider->>Customer: PUT {Callback URL} (Transactions Object) activate Customer Note right of Mobile Money Provider: (2) The MMP informs the customer\'s channel that\nthe cash-out has been successfully completed\nby returning the final representation of the\ntransaction. Customer--\x3e>Mobile Money Provider: HTTP 204 deactivate Customer activate Agent Mobile Money Provider->>Agent: Notify Note right of Agent: (3) The MMP notifies the agent tha the cash-\nout has successfully compeleted. deactivate Mobile Money Provider deactivate Agent\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Customer-initiated Cash-out Failure\n\nIn this example, an asynchronous cash-out flow is used with a final callback that contains the reason for failure.\n\nsequenceDiagram participant Customer participant Mobile Money Provider participant Agent Customer->>Mobile Money Provider: POST /transactions/type/withdrawal activate Customer activate Mobile Money Provider Note right of Mobile Money Provider: (1) The customer\'s channel (e.g. Mobile Money App) submits\nthe cash-out request for processing to the MMP. The MMP\nwill return the Request State object to indicate that the\nrequest is \'pending\'. Mobile Money Provider--\x3e>Customer: HTTP 202 (Request State Object) deactivate Customer Mobile Money Provider->>Customer: PUT {Callback URL} (Error Object) activate Customer Note right of Mobile Money Provider: (2) The MMP informs the customer\'s channel that\nthe cash-out has failed and returns the error\nobject detailing the reason for failure. Customer--\x3e>Mobile Money Provider: HTTP 204 deactivate Customer activate Agent Mobile Money Provider->>Agent: Notify Note right of Agent: (3) The MMP notifies the agent tha the cash-\nout has failed. deactivate Mobile Money Provider deactivate Agent\n\n\n# Customer Cash-out at an ATM using an Authorisation Code\n\nIn this example the /authorisationcodes API is used to obtain a pre-authorised code. This in turn is presented by the withdrawing customer to the ATM which then initiates the cash-out request. Both flows in the diagram result in a callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/2000/authorisationcodes\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "requestDate": "2017-07-21T17:32:28Z",\n    "currency": "GBP",\n    "amount": "1000.00"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/withdrawal\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "type": "transfer",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF",\n    "oneTimeCode": "Place your Authorisation Code here"\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Customer participant ATM participant Mobile Money Provider Customer->>Mobile Money Provider: POST /accounts/{identifierType}/{identifier}/authorisationcodes activate Customer activate Mobile Money Provider Note right of Mobile Money Provider: (1) The customer\'s channel (e.g. Mobile Money App)\nsubmits the request to generate an authorisation code\nto the MMP. The MMP will return the Request State\nobject to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Customer: HTTP 202 (Request State Object) Mobile Money Provider->>Customer: PUT {Callback URL} (Authorisation Codes Object) Note right of Mobile Money Provider: (2) The MMP informs the customer\'s channel that\nthe request has been successfully completed by\nreturing the final representation of the\nauthorisation code. Customer--\x3e>Mobile Money Provider: HTTP 204 deactivate Customer deactivate Mobile Money Provider Note right of Customer: (3) The customer enters the code into the ATM. Customer->>ATM: Code Entry activate Customer activate ATM activate Mobile Money Provider ATM->>Mobile Money Provider: POST /transactions/type/withdrawal Note right of Mobile Money Provider: (4) The ATM submits the cash-out request for processing\nto the MMP. The request will contain the authorisation\ncode. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>ATM: HTTP 202 (Request State Object) deactivate ATM Mobile Money Provider->>ATM: PUT {Callback URL} (Transactions Object) activate ATM Note right of Mobile Money Provider: (5) The MMP informs the ATM that the cash-out\nhas been successfully completed by returning\nthe final representation of the transaction. ATM--\x3e>Mobile Money Provider: HTTP 204 deactivate Mobile Money Provider ATM->>Customer: Notify deactivate Customer deactivate ATM\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Agent-initiated Customer Cash-in\n\nIn this diagram, the agent firstly checks that the depositing customer’s name is correct and will then submit the cash-in request. The final result is returned in the callback.\n\n \n\n\nGET .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/deposit\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider participant Customer Agent->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/accountname activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent retrieves the name of the depositing customer\nand will check that the name is correct. Mobile Money Provider--\x3e>Agent: HTTP 200 (Account Holder Name Object) Agent->>Mobile Money Provider: POST /transactions/type/deposit Note right of Mobile Money Provider: (2) The agent submits the cash-in request for processing to\nthe MMP. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) deactivate Agent Mobile Money Provider->>Agent: PUT {Callback URL} (Transactions Object) activate Agent Note right of Mobile Money Provider: (3) The MMP informs the agent that the cash-in\nhas been successfully completed by returning\nthe final representation of the transaction. Agent--\x3e>Mobile Money Provider: HTTP 204 deactivate Agent activate Customer Mobile Money Provider->>Customer: Notify Note right of Customer: (4) The MMP notifies the customer that the\ncash-in has successfully compeleted. deactivate Mobile Money Provider deactivate Customer\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Cash-out Reversal\n\nIn some failure scenarios, an agent may need to reverse a transaction. This diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: POST /transactions/{original transaction reference}/reversals activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent submits the reversal request for processing to\nthe MMP - passing the reference of the transaction that is\nto be reversed. The MMP will return the Request State\nobject to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) Mobile Money Provider->>Agent: PUT {Callback URL} (Reversal Object) Note right of Mobile Money Provider: (2) The MMP informs the Agent that the reversal\nhas been successfully completed by returning\nthe final representation of the reversal\ntransaction. Agent--\x3e>Mobile Money Provider: HTTP 204 deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Register a Customer Mobile Money Account\n\nIn this diagram, an agent registers a new mobile money customer on behalf of a mobile money provider.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/individual\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n  "accountIdentifiers": [\n    {\n      "key": "msisdn",\n      "value": "Place a valid Mobile Number here"\n    }\n  ],\n  "identity": [\n    {\n      "identityKyc": {\n        "birthCountry": "AD",\n        "contactPhone": "+447777777777",\n        "dateOfBirth": "2000-11-20",\n        "emailAddress": "xyz@xyz.com",\n        "employerName": "string",\n        "gender": "m",\n        "idDocument": [\n          {\n            "idType": "passport",\n            "idNumber": "111111",\n            "issueDate": "2018-11-20",\n            "expiryDate": "2018-11-20",\n            "issuer": "ABC",\n            "issuerPlace": "DEF",\n            "issuerCountry": "AD"\n          }\n        ],\n        "nationality": "AD",\n        "occupation": "Miner",\n        "postalAddress": {\n          "addressLine1": "37",\n          "addressLine2": "ABC Drive",\n          "addressLine3": "string",\n          "city": "Berlin",\n          "stateProvince": "string",\n          "postalCode": "AF1234",\n          "country": "AD"\n        },\n        "subjectName": {\n          "title": "Mr",\n          "firstName": "H",\n          "middleName": "I",\n          "lastName": "J",\n          "fullName": "H I J",\n          "nativeName": "string"\n        }\n      },\n      "accountRelationship": "accountholder",\n      "kycVerificationStatus": "verified",\n      "kycVerificationEntity": "ABC Agent",\n      "kycLevel": 1,\n      "customData": [\n        {\n          "key": "test",\n          "value": "custom"\n        }\n      ]\n    }\n  ],\n  "accountType": "string",\n  "customData": [\n    {\n      "key": "test",\n      "value": "custom1"\n    }\n  ],\n  "fees": [\n    {\n      "feeType": "string",\n      "feeAmount": "5.46",\n      "feeCurrency": "AED"\n    }\n  ],\n  "registeringEntity": "ABC Agent",\n  "requestDate": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: POST /accounts/individual activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent submits the account\nregistration request for processing\nto the MMP. The MMP will return\nthe Request State object to\nindicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) Mobile Money Provider->>Agent: PUT {Callback URL} (Account Object) Note right of Mobile Money Provider: (2) The MMP informs the agent that\nthe reversal has been successfully\nregistered by returning the final\nrepresentation of the account. Agent--\x3e>Mobile Money Provider: HTTP 204 deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Verify a Customer’s KYC\n\nIn this diagram, an agent verifies the physical KYC provided by the customer against details held by the mobile money provider and informs the provider that the KYC has been successfully verified.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPATCH .../accounts/accountid/2000/identities/105\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n  [\n    {\n        "op": "replace",\n        "path": "/kycVerificationStatus",\n        "value": "verified"\n    }\n  ]\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier} activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent retrieves account\ninformation from the MMP which\nincludes the customer\'s KYC\ndetails. Mobile Money Provider--\x3e>Agent: HTTP 200 (Account Object) Agent->>Mobile Money Provider: PATCH /accounts/{identifierType}/{identifier}/identities/{identityId} Note right of Mobile Money Provider: (2) The agent submits the KYC\nverification request for processing\nto the MMP. The MMP will return\nthe Request State object to\nindicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Agent: HTTP 202 (Request State Object) Mobile Money Provider->>Agent: PUT {Callback URL} (Success) Note right of Mobile Money Provider: (3) The MMP informs the agent that\nthe verification request has been\nsuccessfully processed. Agent--\x3e>Mobile Money Provider: HTTP 204 deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain an Agent Balance\n\n \n\n\nGET .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/balance activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) Obtain the balance of the\nrequested account. Mobile Money Provider--\x3e>Agent: HTTP 200 (Balance Object) deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Transactions for an Agent\n\nThis diagram illustrates use of a cursor mechanism to retrieve all transactions for an agent via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent requests up to 20\ntransactions for the account\nfrom the MMP. Mobile Money Provider--\x3e>Agent: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of Mobile Money Provider: (2) The MMP returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. Agent->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of Mobile Money Provider: (3) The agent requests the\nremaining transactions for\nthe account from the MMP. Mobile Money Provider--\x3e>Agent: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the mobile money provider is in a state that enables a client to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: GET /heartbeat activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) The agent requests the availability\nof the service from the MMP. Mobile Money Provider--\x3e>Agent: HTTP 200 (Heartbeat Object) Note right of Mobile Money Provider: (2) The MMP returns the availability of\nthe service - available, unavailable\nor degraded. deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the agent to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the mobile money provider.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Agent participant Mobile Money Provider Agent->>Mobile Money Provider: GET /responses{clientCorrelationId} activate Agent activate Mobile Money Provider Note right of Mobile Money Provider: (1) Using the agent\'s\nclientCorrelationId, a request for the\nmissing API response is sent. Mobile Money Provider--\x3e>Agent: HTTP 200 (Responses Object) Note right of Mobile Money Provider: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Agent->>Mobile Money Provider: GET /{link} Note right of Mobile Money Provider: (3) The Agent uses the link to obtain\na representation of the missing\nresource. Mobile Money Provider--\x3e>Agent: HTTP 200 (Requested Object) deactivate Agent deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# agent-initiated cash-out\n\nin this example, an asynchronous cash-out flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/withdrawal\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider participant customer agent->>mobile money provider: post /transactions/type/withdrawal activate agent activate mobile money provider note right of mobile money provider: (1) the agent submits the payment request for processing to\nthe mmp. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) deactivate agent mobile money provider->>customer: obtain customer authorisation activate customer note right of customer: (2) the customer is requested by the mmp to\nauthorise the cash-out. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for cash-out\nauthorisation. customer--\x3e>mobile money provider: (authorised) deactivate customer mobile money provider->>agent: put {callback url} (transactions object) activate agent note right of mobile money provider: (3) the mmp informs the agent that the cash-out\nhas been successfully completed by returning\nthe final representation of the transaction. agent--\x3e>mobile money provider: http 204 deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# agent-initiated cash-out failure\n\nin this example, an asynchronous cash-out flow is used with a final callback that contains the reason for failure.\n\nsequencediagram participant agent participant mobile money provider participant customer agent->>mobile money provider: post /transactions/type/withdrawal activate agent activate mobile money provider note right of mobile money provider: (1) the agent submits the payment request for processing to\nthe mmp. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) deactivate agent mobile money provider->>customer: obtain customer authorisation activate customer note right of customer: (2) the customer is requested by the mmp to\nauthorise the cash-out. the customer\ndeclines the request or the request times-\nout. customer--\x3e>mobile money provider: (declined or timeout) deactivate customer mobile money provider->>agent: put {callback url} (error object) activate agent note right of mobile money provider: (3) the mmp informs the agent that the cash-out\nhas failed and returns the error object detailing\nthe reason for failure. agent--\x3e>mobile money provider: http 204 deactivate agent deactivate mobile money provider\n\n\n# agent-initiated cash-out using the polling method\n\nin this example, an asynchronous cash-out flow is used with the polling method. the client polls against the request state object to determine the outcome of the cash-out request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/withdrawal\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n \n\n\nget .../requeststates/place the server correlation id here\n\n\n \n\n\nget .../transactions/place transaction reference here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider participant customer agent->>mobile money provider: post /transactions/type/withdrawal activate agent activate mobile money provider note right of mobile money provider: (1) the agent submits the cash-out request for processing to\nthe mmp. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) deactivate agent par loop activate agent agent->>mobile money provider: get /requeststates/{servercorrelationid} note right of mobile money provider: (2) the agent polls the mmp for the request state until the\ntransaction is authorised or declined or until the polling limit\nis reached. mobile money provider--\x3e>agent: http 200 (request state object) end and mobile money provider->>customer: obtain customer authorisation activate customer note right of customer: (3) the customer is requested to the mmp to\nauthorise the cash-out. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for cash-out\nauthorisation. customer--\x3e>mobile money provider: (authorised) end deactivate agent deactivate customer deactivate mobile money provider opt activate mobile money provider activate agent agent->>mobile money provider: get /transactions/transactionsreference note right of mobile money provider: (4) the agent can use the objectreference returned in the\nrequest state to retrieve a representation of the complete\ncash-out transaction. mobile money provider--\x3e>agent: http 200 (transactions object) end deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# customer-initiated cash-out\n\nin this example, an asynchronous cash-out flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/withdrawal\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant customer participant mobile money provider participant agent customer->>mobile money provider: post /transactions/type/withdrawal activate customer activate mobile money provider note right of mobile money provider: (1) the customer\'s channel (e.g. mobile money app) submits\nthe cash-out request for processing to the mmp. the mmp\nwill return the request state object to indicate that the\nrequest is \'pending\'. mobile money provider--\x3e>customer: http 202 (request state object) deactivate customer mobile money provider->>customer: put {callback url} (transactions object) activate customer note right of mobile money provider: (2) the mmp informs the customer\'s channel that\nthe cash-out has been successfully completed\nby returning the final representation of the\ntransaction. customer--\x3e>mobile money provider: http 204 deactivate customer activate agent mobile money provider->>agent: notify note right of agent: (3) the mmp notifies the agent tha the cash-\nout has successfully compeleted. deactivate mobile money provider deactivate agent\nopen postman collection open postman collection with authentication\n\n\n# customer-initiated cash-out failure\n\nin this example, an asynchronous cash-out flow is used with a final callback that contains the reason for failure.\n\nsequencediagram participant customer participant mobile money provider participant agent customer->>mobile money provider: post /transactions/type/withdrawal activate customer activate mobile money provider note right of mobile money provider: (1) the customer\'s channel (e.g. mobile money app) submits\nthe cash-out request for processing to the mmp. the mmp\nwill return the request state object to indicate that the\nrequest is \'pending\'. mobile money provider--\x3e>customer: http 202 (request state object) deactivate customer mobile money provider->>customer: put {callback url} (error object) activate customer note right of mobile money provider: (2) the mmp informs the customer\'s channel that\nthe cash-out has failed and returns the error\nobject detailing the reason for failure. customer--\x3e>mobile money provider: http 204 deactivate customer activate agent mobile money provider->>agent: notify note right of agent: (3) the mmp notifies the agent tha the cash-\nout has failed. deactivate mobile money provider deactivate agent\n\n\n# customer cash-out at an atm using an authorisation code\n\nin this example the /authorisationcodes api is used to obtain a pre-authorised code. this in turn is presented by the withdrawing customer to the atm which then initiates the cash-out request. both flows in the diagram result in a callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/2000/authorisationcodes\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "requestdate": "2017-07-21t17:32:28z",\n    "currency": "gbp",\n    "amount": "1000.00"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/withdrawal\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "type": "transfer",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf",\n    "onetimecode": "place your authorisation code here"\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant customer participant atm participant mobile money provider customer->>mobile money provider: post /accounts/{identifiertype}/{identifier}/authorisationcodes activate customer activate mobile money provider note right of mobile money provider: (1) the customer\'s channel (e.g. mobile money app)\nsubmits the request to generate an authorisation code\nto the mmp. the mmp will return the request state\nobject to indicate that the request is \'pending\'. mobile money provider--\x3e>customer: http 202 (request state object) mobile money provider->>customer: put {callback url} (authorisation codes object) note right of mobile money provider: (2) the mmp informs the customer\'s channel that\nthe request has been successfully completed by\nreturing the final representation of the\nauthorisation code. customer--\x3e>mobile money provider: http 204 deactivate customer deactivate mobile money provider note right of customer: (3) the customer enters the code into the atm. customer->>atm: code entry activate customer activate atm activate mobile money provider atm->>mobile money provider: post /transactions/type/withdrawal note right of mobile money provider: (4) the atm submits the cash-out request for processing\nto the mmp. the request will contain the authorisation\ncode. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>atm: http 202 (request state object) deactivate atm mobile money provider->>atm: put {callback url} (transactions object) activate atm note right of mobile money provider: (5) the mmp informs the atm that the cash-out\nhas been successfully completed by returning\nthe final representation of the transaction. atm--\x3e>mobile money provider: http 204 deactivate mobile money provider atm->>customer: notify deactivate customer deactivate atm\nopen postman collection open postman collection with authentication\n\n\n# agent-initiated customer cash-in\n\nin this diagram, the agent firstly checks that the depositing customer’s name is correct and will then submit the cash-in request. the final result is returned in the callback.\n\n \n\n\nget .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/deposit\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider participant customer agent->>mobile money provider: get /accounts/{identifiertype}/{identifier}/accountname activate agent activate mobile money provider note right of mobile money provider: (1) the agent retrieves the name of the depositing customer\nand will check that the name is correct. mobile money provider--\x3e>agent: http 200 (account holder name object) agent->>mobile money provider: post /transactions/type/deposit note right of mobile money provider: (2) the agent submits the cash-in request for processing to\nthe mmp. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) deactivate agent mobile money provider->>agent: put {callback url} (transactions object) activate agent note right of mobile money provider: (3) the mmp informs the agent that the cash-in\nhas been successfully completed by returning\nthe final representation of the transaction. agent--\x3e>mobile money provider: http 204 deactivate agent activate customer mobile money provider->>customer: notify note right of customer: (4) the mmp notifies the customer that the\ncash-in has successfully compeleted. deactivate mobile money provider deactivate customer\nopen postman collection open postman collection with authentication\n\n\n# cash-out reversal\n\nin some failure scenarios, an agent may need to reverse a transaction. this diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: post /transactions/{original transaction reference}/reversals activate agent activate mobile money provider note right of mobile money provider: (1) the agent submits the reversal request for processing to\nthe mmp - passing the reference of the transaction that is\nto be reversed. the mmp will return the request state\nobject to indicate that the request is \'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) mobile money provider->>agent: put {callback url} (reversal object) note right of mobile money provider: (2) the mmp informs the agent that the reversal\nhas been successfully completed by returning\nthe final representation of the reversal\ntransaction. agent--\x3e>mobile money provider: http 204 deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# register a customer mobile money account\n\nin this diagram, an agent registers a new mobile money customer on behalf of a mobile money provider.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/individual\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n  "accountidentifiers": [\n    {\n      "key": "msisdn",\n      "value": "place a valid mobile number here"\n    }\n  ],\n  "identity": [\n    {\n      "identitykyc": {\n        "birthcountry": "ad",\n        "contactphone": "+447777777777",\n        "dateofbirth": "2000-11-20",\n        "emailaddress": "xyz@xyz.com",\n        "employername": "string",\n        "gender": "m",\n        "iddocument": [\n          {\n            "idtype": "passport",\n            "idnumber": "111111",\n            "issuedate": "2018-11-20",\n            "expirydate": "2018-11-20",\n            "issuer": "abc",\n            "issuerplace": "def",\n            "issuercountry": "ad"\n          }\n        ],\n        "nationality": "ad",\n        "occupation": "miner",\n        "postaladdress": {\n          "addressline1": "37",\n          "addressline2": "abc drive",\n          "addressline3": "string",\n          "city": "berlin",\n          "stateprovince": "string",\n          "postalcode": "af1234",\n          "country": "ad"\n        },\n        "subjectname": {\n          "title": "mr",\n          "firstname": "h",\n          "middlename": "i",\n          "lastname": "j",\n          "fullname": "h i j",\n          "nativename": "string"\n        }\n      },\n      "accountrelationship": "accountholder",\n      "kycverificationstatus": "verified",\n      "kycverificationentity": "abc agent",\n      "kyclevel": 1,\n      "customdata": [\n        {\n          "key": "test",\n          "value": "custom"\n        }\n      ]\n    }\n  ],\n  "accounttype": "string",\n  "customdata": [\n    {\n      "key": "test",\n      "value": "custom1"\n    }\n  ],\n  "fees": [\n    {\n      "feetype": "string",\n      "feeamount": "5.46",\n      "feecurrency": "aed"\n    }\n  ],\n  "registeringentity": "abc agent",\n  "requestdate": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: post /accounts/individual activate agent activate mobile money provider note right of mobile money provider: (1) the agent submits the account\nregistration request for processing\nto the mmp. the mmp will return\nthe request state object to\nindicate that the request is\n\'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) mobile money provider->>agent: put {callback url} (account object) note right of mobile money provider: (2) the mmp informs the agent that\nthe reversal has been successfully\nregistered by returning the final\nrepresentation of the account. agent--\x3e>mobile money provider: http 204 deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# verify a customer’s kyc\n\nin this diagram, an agent verifies the physical kyc provided by the customer against details held by the mobile money provider and informs the provider that the kyc has been successfully verified.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatch .../accounts/accountid/2000/identities/105\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n  [\n    {\n        "op": "replace",\n        "path": "/kycverificationstatus",\n        "value": "verified"\n    }\n  ]\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: get /accounts/{identifiertype}/{identifier} activate agent activate mobile money provider note right of mobile money provider: (1) the agent retrieves account\ninformation from the mmp which\nincludes the customer\'s kyc\ndetails. mobile money provider--\x3e>agent: http 200 (account object) agent->>mobile money provider: patch /accounts/{identifiertype}/{identifier}/identities/{identityid} note right of mobile money provider: (2) the agent submits the kyc\nverification request for processing\nto the mmp. the mmp will return\nthe request state object to\nindicate that the request is\n\'pending\'. mobile money provider--\x3e>agent: http 202 (request state object) mobile money provider->>agent: put {callback url} (success) note right of mobile money provider: (3) the mmp informs the agent that\nthe verification request has been\nsuccessfully processed. agent--\x3e>mobile money provider: http 204 deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# obtain an agent balance\n\n \n\n\nget .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: get /accounts/{identifiertype}/{identifier}/balance activate agent activate mobile money provider note right of mobile money provider: (1) obtain the balance of the\nrequested account. mobile money provider--\x3e>agent: http 200 (balance object) deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve transactions for an agent\n\nthis diagram illustrates use of a cursor mechanism to retrieve all transactions for an agent via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate agent activate mobile money provider note right of mobile money provider: (1) the agent requests up to 20\ntransactions for the account\nfrom the mmp. mobile money provider--\x3e>agent: http 200 (transactions array) (x-records-available-count=40) note right of mobile money provider: (2) the mmp returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. agent->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of mobile money provider: (3) the agent requests the\nremaining transactions for\nthe account from the mmp. mobile money provider--\x3e>agent: http 200 (transactions array) (x-records-available-count=40) deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the mobile money provider is in a state that enables a client to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: get /heartbeat activate agent activate mobile money provider note right of mobile money provider: (1) the agent requests the availability\nof the service from the mmp. mobile money provider--\x3e>agent: http 200 (heartbeat object) note right of mobile money provider: (2) the mmp returns the availability of\nthe service - available, unavailable\nor degraded. deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the agent to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the mobile money provider.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant agent participant mobile money provider agent->>mobile money provider: get /responses{clientcorrelationid} activate agent activate mobile money provider note right of mobile money provider: (1) using the agent\'s\nclientcorrelationid, a request for the\nmissing api response is sent. mobile money provider--\x3e>agent: http 200 (responses object) note right of mobile money provider: (2) a responses object is returned\ncontaining a link to the missing\nresource. agent->>mobile money provider: get /{link} note right of mobile money provider: (3) the agent uses the link to obtain\na representation of the missing\nresource. mobile money provider--\x3e>agent: http 200 (requested object) deactivate agent deactivate mobile money provider\nopen postman collection open postman collection with authentication',charsets:{}},{title:"Bill Payments - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"Bill Payments - API Service Definition"},regularPath:"/use-cases/bill-payments/api-service-definition.html",relativePath:"use-cases/bill-payments/api-service-definition.md",key:"v-7eff6d2c",path:"/use-cases/bill-payments/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Identifying a Target Account",slug:"identifying-a-target-account",normalizedTitle:"identifying a target account",charIndex:817},{level:4,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:1007},{level:4,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:1190},{level:3,title:"Bills API",slug:"bills-api",normalizedTitle:"bills api",charIndex:1688},{level:4,title:"Bill UML Class Diagram",slug:"bill-uml-class-diagram",normalizedTitle:"bill uml class diagram",charIndex:3614},{level:4,title:"Bill Object Definition",slug:"bill-object-definition",normalizedTitle:"bill object definition",charIndex:3747},{level:3,title:"Bill Payments API",slug:"bill-payments-api",normalizedTitle:"bill payments api",charIndex:7358},{level:4,title:"Bill Payment UML Class Diagram",slug:"bill-payment-uml-class-diagram",normalizedTitle:"bill payment uml class diagram",charIndex:10086},{level:4,title:"Bill Payment Object Definition",slug:"bill-payment-object-definition",normalizedTitle:"bill payment object definition",charIndex:10475},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:16775},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:16798},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:17707},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:18550},{level:3,title:"Supplementary Bill Reference Object",slug:"supplementary-bill-reference-object",normalizedTitle:"supplementary bill reference object",charIndex:19377},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:20533},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:20550},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:16798},{level:3,title:"ISO Country Codes",slug:"iso-country-codes",normalizedTitle:"iso country codes",charIndex:22511}],headersStr:"API Endpoints Identifying a Target Account Single Identifier Method Multiple Identifiers Method Bills API Bill UML Class Diagram Bill Object Definition Bill Payments API Bill Payment UML Class Diagram Bill Payment Object Definition Supporting Objects Account Identifiers Object Metadata Object Custom Data Object Supplementary Bill Reference Object Enumerations ISO Currency Codes Account Identifiers ISO Country Codes",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Identifying a Target Account\n\nTwo methods are provided for identifying an account on all bills and bill payments APIs - the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used: /accounts/{identifierType}/{identifier}.\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used: /accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3}.\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Bills API\n\nThe Bills API are used to return all outstanding bills associated with an account. The main purpose of the API is to support Bill Presentment, i.e. presenting all applicable bills for a payer to view and select for payment. To pay a bill, the Bill Payments API is used. Permitted paths are GET /accounts/{identifierType}/{identifier}/bills or GET /accounts/{Account Identifiers}/bills.\n\nTo filter the number of records returned, the following query string parameters can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the bills are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Bill UML Class Diagram\n\nclassDiagram Metadata "0..20" --* "1" Bill Bill "0..*" --* "1" Account\n\nFigure 2-1 Bill UML Class Diagram\n\n# Bill Object Definition\n\n{\n  "billReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "billStatus": "partialpaid",\n  "amountDue": "123.45",\n  "billDescription": "My custom description...",\n  "currency": "GBP",\n  "dueDate": "2018-11-20",\n  "minimumAmountDue": "23.45",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBILL OBJECT                                                                                                              \nName               Type        Description                                                          Reference            Validation\nbillReference      string      Reference number for the Bill that the payer can use when     → NA                        \n                               making a payment.                                             ← O\nbillStatus         string      Identifies the status of the Bill.                            → NA                        ‘paid’, ‘unpaid’, ‘partialpaid’\n                                                                                             ← O\namountDue          string      Amount outstanding on the bill to be paid.                    → NA                        Please refer to API Fundamentals document for amount\n                                                                                             ← O                         validation rules.\nbillDescription    string      Description of the bill that is to be paid.                   → NA                        \n                                                                                             ← O\ncurrency           string      Currency of the bill to be paid.                              → NA                        Enumeration = ISO Currency Codes\n                                                                                             ← O\ndueDate            date        Date on which the Bill is due to be paid.                     → NA                        \n                                                                                             ← O\nminimumAmountDue   string      The minimum amount that is outstanding on the bill to be      → NA                        Please refer to API Fundamentals document for amount\n                               paid.                                                         ← O                         validation rules.\ncreationDate       date-time   Indicates when the bill was created by the API provider.      → NA                        \n                                                                                             ← O\nmodificationDate   date-time   Indicates when the bill was modified by the API provider.     → NA                        \n                                                                                             ← O\ncustomData         string      A collection of key/value pairs that can be used for          → O    Custom Data Object   \n                               provider specific fields.                                     ← O\nmetadata           array       A collection of key/value pairs. These can be used to         → NA   Metadata             \n                               populate additional properties that describe administrative   ← O\n                               information regarding the bill.\n\n\n# Bill Payments API\n\nThe Bill Payments API is used to pay a specific bill associated with an account held with a service provider.\n\nPATH                                                                     USAGE\n/accounts/{identifierType}/{identifier}/bills/{billReference}/payments   Use when a single identifier suffices to identify the bill\n                                                                         account.\n/accounts/{Account                                                       Use when two or three identifiers are required to identify\nIdentifiers}/bills/{billReference}/payments                              an account.\n/bills/{billReference}/payments                                          Use when a bill payment is not associated with a service\n                                                                         provider account.\n/accounts/{identifierType}/{identifier}/bills/payments* OR               Use when a bill does not have a bill reference\n/accounts/{Account Identifiers}/bills/payments\n\nAs per MM API standards, POST is used to create a bill payment whereas GET is used to retrieve all payments associated with a bill.\n\nWhen retrieving bill payments, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the bill payments are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Bill Payment UML Class Diagram\n\nBill payment - No Account\n\nclassDiagram Supplementary Bill Reference "0..20" --* "1" Bill Payment Metadata "0..20" --* "1" Bill Payment\n\nBill payment - With Account\n\nclassDiagram Supplementary Bill Reference "0..20" --* "1" Bill Payment Metadata "0..20" --* "1" Bill Payment Bill Payment "0..*" --* "1" Account\n\nFigure 2-2 Bill Payment UML Class Diagram\n\n# Bill Payment Object Definition\n\n{\n  "serviceProviderPaymentReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "paymentType": "fullpayment",\n  "billPaymentStatus": "approved",\n  "amountPaid": "123.45",\n  "currency": "GBP",\n  "customerReference": "Customer reference text...",\n  "requestingOrganisation": "creditFSP",\n  "supplementaryBillReferenceDetails": [\n    {\n      "paymentReferenceType": "paymentReferenceValue"\n    }\n  ],\n  "serviceProviderComment": "This is SP comment...",\n  "serviceProviderNotification": "This is SP notification...",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBILL PAYMENT OBJECT                                                                                                                                 \nName                                         Type        Description                                                           Reference            Validation\nserviceProviderPaymentReference              string      Reference for the payment generated by the service provider.   → O                         \n                                                                                                                        ← O\nrequestingOrganisationTransactionReference   string      The mobile money provider’s (or Financial Institution’s)       → O                         \n                                                         transaction reference used to debit the customer and credit    ← O\n                                                         the service provider.\npaymentType                                  string      Describes the type of Bill Payment, i.e. whether a full or     → O                         Enumeration = ‘fullpayment’, ‘partialpayment’\n                                                         partial payment.                                               ← O\nbillPaymentStatus                            string      Indicates the status of the bill payment as stored by the      → NA                        \n                                                         API provider.                                                  ← M\namountPaid                                   string      Amount that is being paid.                                     → M                         Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                         validation rules.\ncurrency                                     string      Currency of the amount that is being paid.                     → M                         Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ncustomerReference                            string      Textual reference provided by the customer paying the bill.    → O                         \n                                                                                                                        ← O\nrequestingOrganisation                       string      The originating mobile money provider or financial             → O                         \n                                                         institution that holds the wallet/account of the payer.        ← O\nsupplementaryBillReferenceDetails            array       In some cases, a single reference is not sufficient to         → C    Bill References      Not applicable if billReference is no passed in the path.\n                                                         identify a bill. This key-value collection enables further     ← C\n                                                         reference information to be supplied.\nserviceProviderComment                       string      Allows the Service Provider to include specific information    → NA                        \n                                                         regarding the bill payment.                                    ← O\nserviceProviderNotification                  string      Allows the Service Provider to include specific information    → NA                        \n                                                         that will be included on the notification to the customer by   ← O\n                                                         the mobile money provider.\ncreationDate                                 date-time   Indicates when the bill payment was created as recorded by     → NA                        \n                                                         the API provider.                                              ← O\nmodificationDate                             date-time   Indicates when the bill payment was modified as recorded by    → NA                        \n                                                         the API provider.                                              ← O\nrequestDate                                  date-time   The date and time of the bill payment request as supplied by   → O                         \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object   \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata             \n                                                         populate additional properties that describe administrative    ← O\n                                                         information regarding the bill payment.\n\n\n# Supporting Objects\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                       REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         M               Enumeration = Account Identifiers\n                                                               M\nvalue   string   Provides the account identifier type value.   M               \n                                                               M\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Supplementary Bill Reference Object\n\nThis object enables additional payment references to be specified for a bill payment in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "paymentReferenceType": "paymentReferenceValue"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nSUPPLEMENTARY BILL REFERENCE OBJECT                                                                                          \nName                                  Type     Description                                                       Reference   Validation\npaymentReferenceType                  string   Identifies the type of the additional payment reference.    → M               \n                                                                                                           ← M\npaymentReferenceValue                 string   Identifies the value of the additional payment reference.   → M               \n                                                                                                           ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "emailaddress":"example@email.com",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE              SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountid         Account Holder Identity           string   Identifier for the account holder.\nmsisdn            MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                             First character can contain a ‘+’ or digit\n                                                             Can contain spaces.\norganisationid    Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                             be made.\nusername          Username                          string   Used to identify target account via an associated username.\nconsumerno        Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider   Service Provider                  String   Provides a reference for a Service Provider.\nemailaddress      Email Address                     String   emailaddress of the party.\n\n\n# ISO Country Codes\n\nThe two-character alphabetic code for country as defined by ISO 3166 is to be used for all fields specifying a country or nationality. The full list of codes is maintained by the International Organisation for Standardisation. The list can be obtained via the following website - http://www.iso.org/iso/country_codes.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# identifying a target account\n\ntwo methods are provided for identifying an account on all bills and bill payments apis - the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used: /accounts/{identifiertype}/{identifier}.\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used: /accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3}.\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# bills api\n\nthe bills api are used to return all outstanding bills associated with an account. the main purpose of the api is to support bill presentment, i.e. presenting all applicable bills for a payer to view and select for payment. to pay a bill, the bill payments api is used. permitted paths are get /accounts/{identifiertype}/{identifier}/bills or get /accounts/{account identifiers}/bills.\n\nto filter the number of records returned, the following query string parameters can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the bills are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# bill uml class diagram\n\nclassdiagram metadata "0..20" --* "1" bill bill "0..*" --* "1" account\n\nfigure 2-1 bill uml class diagram\n\n# bill object definition\n\n{\n  "billreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "billstatus": "partialpaid",\n  "amountdue": "123.45",\n  "billdescription": "my custom description...",\n  "currency": "gbp",\n  "duedate": "2018-11-20",\n  "minimumamountdue": "23.45",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbill object                                                                                                              \nname               type        description                                                          reference            validation\nbillreference      string      reference number for the bill that the payer can use when     → na                        \n                               making a payment.                                             ← o\nbillstatus         string      identifies the status of the bill.                            → na                        ‘paid’, ‘unpaid’, ‘partialpaid’\n                                                                                             ← o\namountdue          string      amount outstanding on the bill to be paid.                    → na                        please refer to api fundamentals document for amount\n                                                                                             ← o                         validation rules.\nbilldescription    string      description of the bill that is to be paid.                   → na                        \n                                                                                             ← o\ncurrency           string      currency of the bill to be paid.                              → na                        enumeration = iso currency codes\n                                                                                             ← o\nduedate            date        date on which the bill is due to be paid.                     → na                        \n                                                                                             ← o\nminimumamountdue   string      the minimum amount that is outstanding on the bill to be      → na                        please refer to api fundamentals document for amount\n                               paid.                                                         ← o                         validation rules.\ncreationdate       date-time   indicates when the bill was created by the api provider.      → na                        \n                                                                                             ← o\nmodificationdate   date-time   indicates when the bill was modified by the api provider.     → na                        \n                                                                                             ← o\ncustomdata         string      a collection of key/value pairs that can be used for          → o    custom data object   \n                               provider specific fields.                                     ← o\nmetadata           array       a collection of key/value pairs. these can be used to         → na   metadata             \n                               populate additional properties that describe administrative   ← o\n                               information regarding the bill.\n\n\n# bill payments api\n\nthe bill payments api is used to pay a specific bill associated with an account held with a service provider.\n\npath                                                                     usage\n/accounts/{identifiertype}/{identifier}/bills/{billreference}/payments   use when a single identifier suffices to identify the bill\n                                                                         account.\n/accounts/{account                                                       use when two or three identifiers are required to identify\nidentifiers}/bills/{billreference}/payments                              an account.\n/bills/{billreference}/payments                                          use when a bill payment is not associated with a service\n                                                                         provider account.\n/accounts/{identifiertype}/{identifier}/bills/payments* or               use when a bill does not have a bill reference\n/accounts/{account identifiers}/bills/payments\n\nas per mm api standards, post is used to create a bill payment whereas get is used to retrieve all payments associated with a bill.\n\nwhen retrieving bill payments, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the bill payments are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# bill payment uml class diagram\n\nbill payment - no account\n\nclassdiagram supplementary bill reference "0..20" --* "1" bill payment metadata "0..20" --* "1" bill payment\n\nbill payment - with account\n\nclassdiagram supplementary bill reference "0..20" --* "1" bill payment metadata "0..20" --* "1" bill payment bill payment "0..*" --* "1" account\n\nfigure 2-2 bill payment uml class diagram\n\n# bill payment object definition\n\n{\n  "serviceproviderpaymentreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "paymenttype": "fullpayment",\n  "billpaymentstatus": "approved",\n  "amountpaid": "123.45",\n  "currency": "gbp",\n  "customerreference": "customer reference text...",\n  "requestingorganisation": "creditfsp",\n  "supplementarybillreferencedetails": [\n    {\n      "paymentreferencetype": "paymentreferencevalue"\n    }\n  ],\n  "serviceprovidercomment": "this is sp comment...",\n  "serviceprovidernotification": "this is sp notification...",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbill payment object                                                                                                                                 \nname                                         type        description                                                           reference            validation\nserviceproviderpaymentreference              string      reference for the payment generated by the service provider.   → o                         \n                                                                                                                        ← o\nrequestingorganisationtransactionreference   string      the mobile money provider’s (or financial institution’s)       → o                         \n                                                         transaction reference used to debit the customer and credit    ← o\n                                                         the service provider.\npaymenttype                                  string      describes the type of bill payment, i.e. whether a full or     → o                         enumeration = ‘fullpayment’, ‘partialpayment’\n                                                         partial payment.                                               ← o\nbillpaymentstatus                            string      indicates the status of the bill payment as stored by the      → na                        \n                                                         api provider.                                                  ← m\namountpaid                                   string      amount that is being paid.                                     → m                         please refer to api fundamentals document for amount\n                                                                                                                        ← m                         validation rules.\ncurrency                                     string      currency of the amount that is being paid.                     → m                         enumeration = iso currency codes\n                                                                                                                        ← m\ncustomerreference                            string      textual reference provided by the customer paying the bill.    → o                         \n                                                                                                                        ← o\nrequestingorganisation                       string      the originating mobile money provider or financial             → o                         \n                                                         institution that holds the wallet/account of the payer.        ← o\nsupplementarybillreferencedetails            array       in some cases, a single reference is not sufficient to         → c    bill references      not applicable if billreference is no passed in the path.\n                                                         identify a bill. this key-value collection enables further     ← c\n                                                         reference information to be supplied.\nserviceprovidercomment                       string      allows the service provider to include specific information    → na                        \n                                                         regarding the bill payment.                                    ← o\nserviceprovidernotification                  string      allows the service provider to include specific information    → na                        \n                                                         that will be included on the notification to the customer by   ← o\n                                                         the mobile money provider.\ncreationdate                                 date-time   indicates when the bill payment was created as recorded by     → na                        \n                                                         the api provider.                                              ← o\nmodificationdate                             date-time   indicates when the bill payment was modified as recorded by    → na                        \n                                                         the api provider.                                              ← o\nrequestdate                                  date-time   the date and time of the bill payment request as supplied by   → o                         \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object   \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata             \n                                                         populate additional properties that describe administrative    ← o\n                                                         information regarding the bill payment.\n\n\n# supporting objects\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                       reference   validation\nkey     string   provides the account identifier type.         m               enumeration = account identifiers\n                                                               m\nvalue   string   provides the account identifier type value.   m               \n                                                               m\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# supplementary bill reference object\n\nthis object enables additional payment references to be specified for a bill payment in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "paymentreferencetype": "paymentreferencevalue"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nsupplementary bill reference object                                                                                          \nname                                  type     description                                                       reference   validation\npaymentreferencetype                  string   identifies the type of the additional payment reference.    → m               \n                                                                                                           ← m\npaymentreferencevalue                 string   identifies the value of the additional payment reference.   → m               \n                                                                                                           ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "emailaddress":"example@email.com",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode              short description                 type     description\naccountid         account holder identity           string   identifier for the account holder.\nmsisdn            msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                             first character can contain a ‘+’ or digit\n                                                             can contain spaces.\norganisationid    organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                             be made.\nusername          username                          string   used to identify target account via an associated username.\nconsumerno        consumer number                   string   identifies the consumer associated with the account.\nserviceprovider   service provider                  string   provides a reference for a service provider.\nemailaddress      email address                     string   emailaddress of the party.\n\n\n# iso country codes\n\nthe two-character alphabetic code for country as defined by iso 3166 is to be used for all fields specifying a country or nationality. the full list of codes is maintained by the international organisation for standardisation. the list can be obtained via the following website - http://www.iso.org/iso/country_codes.',charsets:{}},{title:"Bill Payments - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Bill Payments - Open OAS UI"},regularPath:"/use-cases/bill-payments/bill-payments-open-oas-ui.html",relativePath:"use-cases/bill-payments/bill-payments-open-oas-ui.md",key:"v-f2258890",path:"/use-cases/bill-payments/bill-payments-open-oas-ui.html",headers:[{level:2,title:"Bill Payments - Open OAS UI",slug:"bill-payments-open-oas-ui",normalizedTitle:"bill payments - open oas ui",charIndex:0}],headersStr:"Bill Payments - Open OAS UI",content:"# Bill Payments - Open OAS UI",normalizedContent:"# bill payments - open oas ui",charsets:{}},{title:"Account Linking",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Account Linking"},regularPath:"/use-cases/account-linking/",relativePath:"use-cases/account-linking/index.md",key:"v-db14a79e",path:"/use-cases/account-linking/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:698}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nThe Account Linking Mobile Money APIs allow financial service providers to link customer accounts to mobile money accounts, thus allowing their customers to push funds to and pull funds from mobile money. Conversely, mobile money providers can use the APIs to link their customers mobile money accounts to financial service providers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations. All documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                  USAGE                                                          ROLE\nFSP - Mobile Money Providers              - To understand how to implement the Mobile Money API to       API Provider\n                                          accept account linking requests from other financial service\n                                          providers.\n                                          - To understand how to implement the Mobile Money API to       API Consumer\n                                          request linking of accounts to other financial service\n                                          providers.\nFSP Banks and Microfinance Institutions   - To understand how to implement the Mobile Money API to       API Provider\n                                          accept account linking requests mobile money providers.\n                                          - To understand how to implement the Mobile Money API to       API Consumer\n                                          request linking of accounts to mobile money providers.",normalizedContent:"# introduction\n\nthe account linking mobile money apis allow financial service providers to link customer accounts to mobile money accounts, thus allowing their customers to push funds to and pull funds from mobile money. conversely, mobile money providers can use the apis to link their customers mobile money accounts to financial service providers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations. all documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                  usage                                                          role\nfsp - mobile money providers              - to understand how to implement the mobile money api to       api provider\n                                          accept account linking requests from other financial service\n                                          providers.\n                                          - to understand how to implement the mobile money api to       api consumer\n                                          request linking of accounts to other financial service\n                                          providers.\nfsp banks and microfinance institutions   - to understand how to implement the mobile money api to       api provider\n                                          accept account linking requests mobile money providers.\n                                          - to understand how to implement the mobile money api to       api consumer\n                                          request linking of accounts to mobile money providers.",charsets:{}},{title:"Bill Payments",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Bill Payments"},regularPath:"/use-cases/bill-payments/",relativePath:"use-cases/bill-payments/index.md",key:"v-519aee11",path:"/use-cases/bill-payments/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:477}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nThe Bill Payments Mobile Money APIs allow service providers to accept bill payments from mobile money customers.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                         ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to make   API Consumer\n                         bill payments to service providers.\nService Providers        To understand how to implement the Mobile Money API to        API Provider\n                         accept bill payments from Mobile Money Providers.",normalizedContent:"# introduction\n\nthe bill payments mobile money apis allow service providers to accept bill payments from mobile money customers.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                         role\nmobile money providers   to understand how to implement the mobile money api to make   api consumer\n                         bill payments to service providers.\nservice providers        to understand how to implement the mobile money api to        api provider\n                         accept bill payments from mobile money providers.",charsets:{}},{title:"Bill Payments - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"Bill Payments - Use Case Scenarios"},regularPath:"/use-cases/bill-payments/scenarios/scenarios.html",relativePath:"use-cases/bill-payments/scenarios/scenarios.md",key:"v-41d3ccb8",path:"/use-cases/bill-payments/scenarios/scenarios.html",headers:[{level:2,title:"Successful Retrieval of Bills",slug:"successful-retrieval-of-bills",normalizedTitle:"successful retrieval of bills",charIndex:599},{level:2,title:"Unsuccessful Retrieval of Bills",slug:"unsuccessful-retrieval-of-bills",normalizedTitle:"unsuccessful retrieval of bills",charIndex:1444},{level:2,title:"Make a Successful Bill Payment with Callback",slug:"make-a-successful-bill-payment-with-callback",normalizedTitle:"make a successful bill payment with callback",charIndex:2159},{level:2,title:"Make an Unsuccessful Bill Payment with Callback",slug:"make-an-unsuccessful-bill-payment-with-callback",normalizedTitle:"make an unsuccessful bill payment with callback",charIndex:4831},{level:2,title:"Make a Bill Payment with Polling",slug:"make-a-bill-payment-with-polling",normalizedTitle:"make a bill payment with polling",charIndex:5954},{level:2,title:"Retrieval of Bill Payments",slug:"retrieval-of-bill-payments",normalizedTitle:"retrieval of bill payments",charIndex:7925},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:9462}],headersStr:"Successful Retrieval of Bills Unsuccessful Retrieval of Bills Make a Successful Bill Payment with Callback Make an Unsuccessful Bill Payment with Callback Make a Bill Payment with Polling Retrieval of Bill Payments Check for Service Availability",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# Successful Retrieval of Bills\n\nThis diagram illustrates how a mobile money provider can retrieve bills for a given service provider customer account.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/1/bills?offset=0&limit=20\n---\nParams: \n{\n  "offset": 0,\n  "limit": 20                \n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Mobile Money Provider participant Service Provider Mobile Money Provider->>Service Provider: GET /accounts/{identifierType}/{identifier}/bills activate Mobile Money Provider activate Service Provider Note right of Service Provider: (1) Obtain all bills of a given account. Service Provider--\x3e>Mobile Money Provider: HTTP 200 (Bills Object) deactivate Mobile Money Provider deactivate Service Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Unsuccessful Retrieval of Bills\n\nThis diagram illustrates the return of an error object where a service provider is unable to return bill details to a mobile money provider.\n\nsequenceDiagram participant Mobile Money Provider participant Service Provider Mobile Money Provider->>Service Provider: GET /accounts/{identifierType}/{identifier}/bills activate Mobile Money Provider activate Service Provider Note right of Service Provider: (1) Retrieve all bills for a given account. Service Provider--\x3e>Mobile Money Provider: HTTP 4xx/5xx (Error Object) Note right of Service Provider: (2) Return the error object providing\ndetais of the failure reason. deactivate Mobile Money Provider deactivate Service Provider\n\n\n# Make a Successful Bill Payment with Callback\n\nThis diagram illustrates how a mobile money provider can make a bill payment to a service provider using the asynchronous callback method. To illustrate the end to end flow, a leg has been added to describe how a third payment provider can initiate a bill payment request to a mobile money provider.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/1/bills/REF-000001/payments\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "currency": "GBP",\n    "amountPaid": "5.30"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Third Party Payment Provider participant Mobile Money Provider participant Service Provider Note right of Third Party Payment Provider: (1) The provider that enables the payer to pay\nbills submits a payment request to the MMP. Third Party Payment Provider->>Mobile Money Provider: POST /transactions/type/billpay activate Third Party Payment Provider activate Mobile Money Provider Mobile Money Provider--\x3e>Third Party Payment Provider: HTTP 202 (Request State Object) deactivate Third Party Payment Provider Mobile Money Provider->>Service Provider: POST /accounts/{identifierType}/{identifier}/bills/{billReference}/payments activate Service Provider Note right of Service Provider: (2) The MMP submits the bill payment request\nfor processing to the Service Provider. The\nService Provider will return the Request State\nobject to indicate that the request is \'pending\'. Service Provider--\x3e>Mobile Money Provider: HTTP 202 (Request State Object) deactivate Mobile Money Provider Service Provider->>Mobile Money Provider: PUT {Callback URL} (Bill Payments Object) activate Mobile Money Provider Note right of Service Provider: (3) The Service Provider informs the MMP\nthat the request has been succesfully\ncompleted by returning the final\nrepresentation of the bill payment. Mobile Money Provider--\x3e>Service Provider: HTTP 204 deactivate Service Provider Note right of Third Party Payment Provider: (4) The MMP informs the third party payment provider that the\nrequest has been succesfully completed by returning the\nfinal representation of the transactions object. Mobile Money Provider->>Third Party Payment Provider: PUT {Callback URL} (Transactions Object) activate Third Party Payment Provider Third Party Payment Provider--\x3e> Mobile Money Provider: HTTP 204 deactivate Mobile Money Provider deactivate Third Party Payment Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Make an Unsuccessful Bill Payment with Callback\n\nThis diagram illustrates the return of an error object where a service provider fails to process a bill payment request.\n\nsequenceDiagram participant Mobile Money Provider participant Service Provider Mobile Money Provider->>Service Provider: POST /accounts/{identifierType}/{identifier}/bills/{billReference}/payments activate Service Provider activate Mobile Money Provider Note right of Service Provider: (1) The MMP submits the bill payment request\nfor processing to the Service Provider. The\nService Provider will return the Request State\nobject to indicate that the request is \'pending\'. Service Provider--\x3e>Mobile Money Provider: HTTP 202 (Request State Object) deactivate Mobile Money Provider Service Provider->>Mobile Money Provider: PUT {Callback URL} (Error Object) activate Mobile Money Provider Note right of Service Provider: (2) The Service Provider informs the MMP\nthat the request failed by returning a\nrepresentation of the error object. Mobile Money Provider--\x3e>Service Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\n\n\n# Make a Bill Payment with Polling\n\nThis diagram illustrates how a mobile money provider can make a bill payment to a service provider using the asynchronous polling method.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/1/bills/REF-000001/payments\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "currency": "GBP",\n    "amountPaid": "5.30"\n}\n\n\n \n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/bills/REF-000001/payments?limit=5\n---\nParams:\n{\n  "limit": 5\n}\n\n\n \n\n\nGET .../requestStates/Place the Server Correlation Id here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Mobile Money Provider participant Service Provider Mobile Money Provider->>Service Provider: POST /accounts/{identifierType}/{identifier}/bills/{billReference}/payments activate Service Provider activate Mobile Money Provider Note right of Service Provider: (1) The MMP submits the bill payment request for processing\nto the Service Provider. The Service Provider will return\nthe Request State object to indicate that the request is\n\'pending\'. Service Provider--\x3e>Mobile Money Provider: HTTP 202 (Request State Object) deactivate Mobile Money Provider loop activate Mobile Money Provider Mobile Money Provider->>Service Provider: GET /requeststates/{serverCorrelationId} Note right of Service Provider: (2) The MMP polls the Service Provider for the Request State\nuntil the bill payment is processed or until the polling limit is\nreached. The request state will return the final status of the\nrequired, i.e. completed or failed. Service Provider--\x3e>Mobile Money Provider: HTTP 200 (Request State Object) end deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieval of Bill Payments\n\nThis diagram illustrates how a mobile money provider can retrieve payments against a given bill for a given service provider customer account.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/1/bills/REF-000001/payments?offset=0&limit=20\n---\nParams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Mobile Money Provider participant Service Provider Mobile Money Provider->>Service Provider: GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments?offset=0&limit=10 activate Mobile Money Provider activate Service Provider Note right of Service Provider: (1) The MMP requests up to 10 bill\npayments for the account from the\nService Provider. Service Provider--\x3e>Mobile Money Provider: HTTP 200 (Bill Payments Array) (X-Records-Available-Count=20) Note right of Service Provider: (2) The Service Provider returns an array\nof 10 bill payments and indicates via a\nresponse header that there are 20\nrecords available in total. Mobile Money Provider->>Service Provider: GET /accounts/{identifierType}/{identifier}/bills/{billReference}/payments?offset=10&limit=10 Note right of Service Provider: (3) The MMP requests the remaining\nbill payments for the account\nfrom the Service Provider. Service Provider--\x3e>Mobile Money Provider: HTTP 200 (Bill Payments Array) (X-Records-Available-Count=20) deactivate Mobile Money Provider deactivate Service Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the Service Provider is in a state that enables an FSP to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Mobile Money Provider participant Service Provider Mobile Money Provider->>Service Provider: GET /heartbeat activate Mobile Money Provider activate Service Provider Note right of Service Provider: (1) The MMP requests the availability of the\nservice from the Service Provider. Service Provider--\x3e>Mobile Money Provider: HTTP 200 (Heartbeat Object) Note right of Service Provider: (2) The Service Provider returns the\navailability of the service - available,\nunavailable or degraded. deactivate Mobile Money Provider deactivate Service Provider\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# successful retrieval of bills\n\nthis diagram illustrates how a mobile money provider can retrieve bills for a given service provider customer account.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/1/bills?offset=0&limit=20\n---\nparams: \n{\n  "offset": 0,\n  "limit": 20                \n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant mobile money provider participant service provider mobile money provider->>service provider: get /accounts/{identifiertype}/{identifier}/bills activate mobile money provider activate service provider note right of service provider: (1) obtain all bills of a given account. service provider--\x3e>mobile money provider: http 200 (bills object) deactivate mobile money provider deactivate service provider\nopen postman collection open postman collection with authentication\n\n\n# unsuccessful retrieval of bills\n\nthis diagram illustrates the return of an error object where a service provider is unable to return bill details to a mobile money provider.\n\nsequencediagram participant mobile money provider participant service provider mobile money provider->>service provider: get /accounts/{identifiertype}/{identifier}/bills activate mobile money provider activate service provider note right of service provider: (1) retrieve all bills for a given account. service provider--\x3e>mobile money provider: http 4xx/5xx (error object) note right of service provider: (2) return the error object providing\ndetais of the failure reason. deactivate mobile money provider deactivate service provider\n\n\n# make a successful bill payment with callback\n\nthis diagram illustrates how a mobile money provider can make a bill payment to a service provider using the asynchronous callback method. to illustrate the end to end flow, a leg has been added to describe how a third payment provider can initiate a bill payment request to a mobile money provider.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/1/bills/ref-000001/payments\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "currency": "gbp",\n    "amountpaid": "5.30"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant third party payment provider participant mobile money provider participant service provider note right of third party payment provider: (1) the provider that enables the payer to pay\nbills submits a payment request to the mmp. third party payment provider->>mobile money provider: post /transactions/type/billpay activate third party payment provider activate mobile money provider mobile money provider--\x3e>third party payment provider: http 202 (request state object) deactivate third party payment provider mobile money provider->>service provider: post /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments activate service provider note right of service provider: (2) the mmp submits the bill payment request\nfor processing to the service provider. the\nservice provider will return the request state\nobject to indicate that the request is \'pending\'. service provider--\x3e>mobile money provider: http 202 (request state object) deactivate mobile money provider service provider->>mobile money provider: put {callback url} (bill payments object) activate mobile money provider note right of service provider: (3) the service provider informs the mmp\nthat the request has been succesfully\ncompleted by returning the final\nrepresentation of the bill payment. mobile money provider--\x3e>service provider: http 204 deactivate service provider note right of third party payment provider: (4) the mmp informs the third party payment provider that the\nrequest has been succesfully completed by returning the\nfinal representation of the transactions object. mobile money provider->>third party payment provider: put {callback url} (transactions object) activate third party payment provider third party payment provider--\x3e> mobile money provider: http 204 deactivate mobile money provider deactivate third party payment provider\nopen postman collection open postman collection with authentication\n\n\n# make an unsuccessful bill payment with callback\n\nthis diagram illustrates the return of an error object where a service provider fails to process a bill payment request.\n\nsequencediagram participant mobile money provider participant service provider mobile money provider->>service provider: post /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments activate service provider activate mobile money provider note right of service provider: (1) the mmp submits the bill payment request\nfor processing to the service provider. the\nservice provider will return the request state\nobject to indicate that the request is \'pending\'. service provider--\x3e>mobile money provider: http 202 (request state object) deactivate mobile money provider service provider->>mobile money provider: put {callback url} (error object) activate mobile money provider note right of service provider: (2) the service provider informs the mmp\nthat the request failed by returning a\nrepresentation of the error object. mobile money provider--\x3e>service provider: http 204 deactivate service provider deactivate mobile money provider\n\n\n# make a bill payment with polling\n\nthis diagram illustrates how a mobile money provider can make a bill payment to a service provider using the asynchronous polling method.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/1/bills/ref-000001/payments\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "currency": "gbp",\n    "amountpaid": "5.30"\n}\n\n\n \n\n\n\n\n\n\n\nget .../accounts/accountid/2000/bills/ref-000001/payments?limit=5\n---\nparams:\n{\n  "limit": 5\n}\n\n\n \n\n\nget .../requeststates/place the server correlation id here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant mobile money provider participant service provider mobile money provider->>service provider: post /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments activate service provider activate mobile money provider note right of service provider: (1) the mmp submits the bill payment request for processing\nto the service provider. the service provider will return\nthe request state object to indicate that the request is\n\'pending\'. service provider--\x3e>mobile money provider: http 202 (request state object) deactivate mobile money provider loop activate mobile money provider mobile money provider->>service provider: get /requeststates/{servercorrelationid} note right of service provider: (2) the mmp polls the service provider for the request state\nuntil the bill payment is processed or until the polling limit is\nreached. the request state will return the final status of the\nrequired, i.e. completed or failed. service provider--\x3e>mobile money provider: http 200 (request state object) end deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieval of bill payments\n\nthis diagram illustrates how a mobile money provider can retrieve payments against a given bill for a given service provider customer account.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/1/bills/ref-000001/payments?offset=0&limit=20\n---\nparams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant mobile money provider participant service provider mobile money provider->>service provider: get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments?offset=0&limit=10 activate mobile money provider activate service provider note right of service provider: (1) the mmp requests up to 10 bill\npayments for the account from the\nservice provider. service provider--\x3e>mobile money provider: http 200 (bill payments array) (x-records-available-count=20) note right of service provider: (2) the service provider returns an array\nof 10 bill payments and indicates via a\nresponse header that there are 20\nrecords available in total. mobile money provider->>service provider: get /accounts/{identifiertype}/{identifier}/bills/{billreference}/payments?offset=10&limit=10 note right of service provider: (3) the mmp requests the remaining\nbill payments for the account\nfrom the service provider. service provider--\x3e>mobile money provider: http 200 (bill payments array) (x-records-available-count=20) deactivate mobile money provider deactivate service provider\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the service provider is in a state that enables an fsp to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant mobile money provider participant service provider mobile money provider->>service provider: get /heartbeat activate mobile money provider activate service provider note right of service provider: (1) the mmp requests the availability of the\nservice from the service provider. service provider--\x3e>mobile money provider: http 200 (heartbeat object) note right of service provider: (2) the service provider returns the\navailability of the service - available,\nunavailable or degraded. deactivate mobile money provider deactivate service provider\nopen postman collection open postman collection with authentication',charsets:{}},{title:"Disbursements - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Disbursements - Open OAS UI"},regularPath:"/use-cases/disbursements/disbursements-open-oas-ui.html",relativePath:"use-cases/disbursements/disbursements-open-oas-ui.md",key:"v-5a8d68f8",path:"/use-cases/disbursements/disbursements-open-oas-ui.html",headers:[{level:2,title:"Disbursements - Open OAS UI",slug:"disbursements-open-oas-ui",normalizedTitle:"disbursements - open oas ui",charIndex:0}],headersStr:"Disbursements - Open OAS UI",content:"# Disbursements - Open OAS UI",normalizedContent:"# disbursements - open oas ui",charsets:{}},{title:"Disbursements - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"Disbursements - Use Case Scenarios"},regularPath:"/use-cases/disbursements/scenarios/scenarios.html",relativePath:"use-cases/disbursements/scenarios/scenarios.md",key:"v-30ac8ad0",path:"/use-cases/disbursements/scenarios/scenarios.html",headers:[{level:2,title:"Individual Disbursement",slug:"individual-disbursement",normalizedTitle:"individual disbursement",charIndex:599},{level:2,title:"Individual Disbursement Failure",slug:"individual-disbursement-failure",normalizedTitle:"individual disbursement failure",charIndex:2454},{level:2,title:"Bulk Disbursement",slug:"bulk-disbursement",normalizedTitle:"bulk disbursement",charIndex:4206},{level:2,title:"Bulk Disbursement Failure",slug:"bulk-disbursement-failure",normalizedTitle:"bulk disbursement failure",charIndex:8219},{level:2,title:"Bulk Disbursement with Maker / Checker",slug:"bulk-disbursement-with-maker-checker",normalizedTitle:"bulk disbursement with maker / checker",charIndex:10741},{level:2,title:"Individual Disbursement Using the Polling Method",slug:"individual-disbursement-using-the-polling-method",normalizedTitle:"individual disbursement using the polling method",charIndex:14780},{level:2,title:"Disbursement Reversal",slug:"disbursement-reversal",normalizedTitle:"disbursement reversal",charIndex:17374},{level:2,title:"Obtain a Disbursement Organisation Balance",slug:"obtain-a-disbursement-organisation-balance",normalizedTitle:"obtain a disbursement organisation balance",charIndex:19100},{level:2,title:"Retrieve Transactions for a Disbursement Organisation",slug:"retrieve-transactions-for-a-disbursement-organisation",normalizedTitle:"retrieve transactions for a disbursement organisation",charIndex:19820},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:21413},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:22407}],headersStr:"Individual Disbursement Individual Disbursement Failure Bulk Disbursement Bulk Disbursement Failure Bulk Disbursement with Maker / Checker Individual Disbursement Using the Polling Method Disbursement Reversal Obtain a Disbursement Organisation Balance Retrieve Transactions for a Disbursement Organisation Check for Service Availability Retrieve a Missing API Response",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# Individual Disbursement\n\nThis diagram illustrates an individual disbursement using an asynchronous flow with the notification provided via a callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/disbursement\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: POST /transactions/type/disbursement activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation submits the refund request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 202 (Request State Object) deactivate Disbursement Organisation Mobile Money Provider->>Disbursement Organisation: PUT {Callback URL} (Transactions Object) activate Disbursement Organisation Note right of Mobile Money Provider: (2) The MMP informs the disbursement\norganisation that the disbursement has been\nsuccessfully completed by returning the final\nrepresentation of the transaction. Disbursement Organisation--\x3e>Mobile Money Provider: HTTP 204 deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Individual Disbursement Failure\n\nIn this example, an asynchronous flow is used with a final callback that contains the reason for failure.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/disbursement\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: POST /transactions/type/disbursement activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation submits the refund request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 202 (Request State Object) deactivate Disbursement Organisation Mobile Money Provider->>Disbursement Organisation: PUT {Callback URL} (Error Object) activate Disbursement Organisation Note right of Mobile Money Provider: (2) The MMP informs the disbursement\norganisation that the disbursement has failed\nand returns the error object datailing the\nreason for failure. Disbursement Organisation--\x3e>Mobile Money Provider: HTTP 204 deactivate Disbursement Organisation deactivate Mobile Money Provider\n\n\n# Bulk Disbursement\n\nThis diagram illustrates the flow for a ‘one-shot’ bulk disbursement.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../batchtransactions\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchTitle": "Batch_Test",\n    "batchDescription": "Testing a Batch",\n    "scheduledStartDate": "2017-07-21T17:32:28Z"\n}\n\n\n \n\n\nGET .../batchtransactions/Place your Batch Id here/completions\n\n\n \n\n\nGET .../batchtransactions/Place your Batch Id here/rejections\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: POST /batchtransactions activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation submits the batch of\ntransactions for processing to the MMP. The MMP will\nreturn the Request State object to indicate that the batch\nrequest is \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 202 (Request State Object) deactivate Disbursement Organisation Mobile Money Provider->>Disbursement Organisation: PUT {Callback URL} (Batch Transactions Object) activate Disbursement Organisation Note right of Mobile Money Provider: (2) The MMP informs the disbursement organisation that\nthe request has been processed by returning the\nrepresentation of the batch. Disbursement Organisation--\x3e>Mobile Money Provider: HTTP 204 deactivate Disbursement Organisation deactivate Mobile Money Provider opt Disbursement Organisation->>Mobile Money Provider: GET /batchtransactions/{batchId} activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (3) The disbursement organisation can optionally retrieve a\nrepresentation of the batch transactions object that will\nconfirm the overall success of the approval request. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Batch Transactions Object) Disbursement Organisation->>Mobile Money Provider: GET /batchtransactions/{batchId}/completions Note right of Mobile Money Provider: (4) The disbursement organisation can optionally request\ndetails of all transactions in the batch that have been\ncompleted. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Batch Completions Object) Disbursement Organisation->>Mobile Money Provider: GET /batchtransactions/{batchId}/rejections Note right of Mobile Money Provider: (5) The disbursement organisation can optionally request\ndetails of all transactions in the batch that have been\nrejected. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Batch Rejections Object) end deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Bulk Disbursement Failure\n\nIn this example, an asynchronous flow is used with a final callback that contains the reason for failure to process the bulk request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../batchtransactions\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchTitle": "Batch_Test",\n    "batchDescription": "Testing a Batch",\n    "scheduledStartDate": "2017-07-21T17:32:28Z"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: POST /batchtransactions activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation submits the batch of\ntransactions for processing to the MMP. The MMP will\nreturn the Request State object to indicate that the batch\nrequest is \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 202 (Request State Object) deactivate Disbursement Organisation Mobile Money Provider->>Disbursement Organisation: PUT {Callback URL} (Error Object) activate Disbursement Organisation Note right of Mobile Money Provider: (2) The MMP informs the disbursement organisation that\nthe request has failed by returning the representation of\nthe error object. Disbursement Organisation--\x3e>Mobile Money Provider: HTTP 204 deactivate Disbursement Organisation deactivate Mobile Money Provider\n\n\n# Bulk Disbursement with Maker / Checker\n\nThis flow allows a bulk request to be processed in two steps. The first step involves the ‘maker’ system loading the request into the mobile money provider. The second step involves the ‘checker’ system approving the request.\n\nsequenceDiagram participant Disbursement Organisation Maker participant Disbursement Organisation Checker participant Mobile Money Provider Disbursement Organisation Maker->>Mobile Money Provider: POST /batchtransactions activate Disbursement Organisation Maker activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation maker submits the batch of\ntransactions for processing to the MMP. The MMP will\nreturn the Request State object to indicate that the batch\nrequest is \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation Maker: HTTP 202 (Request State Object) deactivate Disbursement Organisation Maker Mobile Money Provider->>Disbursement Organisation Maker: PUT {Callback URL} (Batch Transactions Object) activate Disbursement Organisation Maker Note right of Mobile Money Provider: (2) The MMP informs the disbursement organisation maker\nthat the request has been processed by returning the\nrepresentation of the batch. Disbursement Organisation Maker--\x3e>Mobile Money Provider: HTTP 204 opt Disbursement Organisation Maker->>Mobile Money Provider: GET /batchtransactions/{batchId}/rejections Note right of Mobile Money Provider: (3) The disbursement organisation maker can optionally\nrequest details of all transactions in the batch that have\nbeen rejected. Mobile Money Provider--\x3e>Disbursement Organisation Maker: HTTP 200 (Batch Rejections Object) end deactivate Disbursement Organisation Maker deactivate Mobile Money Provider Disbursement Organisation Checker->>Mobile Money Provider: PATCH /batchtransactions/{batchId} activate Disbursement Organisation Checker activate Mobile Money Provider Note right of Mobile Money Provider: (4) The disbursement organisation checker submits a request\nto approve the transaction batch. The MMP will return the\nRequest State object to indicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation Checker: HTTP 202 (Request State Object) deactivate Disbursement Organisation Checker Mobile Money Provider->>Disbursement Organisation Checker: PUT {Callback URL} (Success) activate Disbursement Organisation Checker Note right of Mobile Money Provider: (5) The MMP informs the disbursement organisation checker\nthat the request has been processed by returning the\nrepresentation of the batch. Disbursement Organisation Checker--\x3e>Mobile Money Provider: HTTP 204 deactivate Mobile Money Provider deactivate Disbursement Organisation Checker opt activate Mobile Money Provider activate Disbursement Organisation Checker Disbursement Organisation Checker->>Mobile Money Provider: GET /batchtransactions/{batchId} Note right of Mobile Money Provider: (6) The disbursement organisation checker can optionally\nretrieve a representation of the batch transactions object\nthat will confirm the overall success of the approval\nrequest. Mobile Money Provider--\x3e>Disbursement Organisation Checker: HTTP 200 (Batch Transactions Object) Disbursement Organisation Checker->>Mobile Money Provider: GET /batchtransactions/{batchId}/completions Note right of Mobile Money Provider: (7) The disbursement organisation checker can optionally\nrequest details of all transactions in the batch that have\nbeen completed. Mobile Money Provider--\x3e>Disbursement Organisation Checker: HTTP 200 (Batch Completions Object) Disbursement Organisation Checker->>Mobile Money Provider: GET /batchtransactions/{batchId}/rejections Note right of Mobile Money Provider: (8) The disbursement organisation checker can optionally\nrequest details of all transactions in the batch that have\nbeen rejected. Mobile Money Provider--\x3e>Disbursement Organisation Checker: HTTP 200 (Batch Rejections Object) end deactivate Disbursement Organisation Checker deactivate Mobile Money Provider\n\n\n# Individual Disbursement Using the Polling Method\n\nIn this diagram, an asynchronous flow is used with the polling method. The client polls against the request state object to determine the outcome of the individual disbursement request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/disbursement\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n \n\n\nGET .../requeststates/Place the Server Correlation Id here\n\n\n \n\n\nGET .../transactions/Place Transaction Reference here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: POST /transactions/type/disbursement activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation submits the refund request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 202 (Request State Object) deactivate Disbursement Organisation loop activate Disbursement Organisation Disbursement Organisation->>Mobile Money Provider: GET /requeststates/{serverCorrelationId} Note right of Mobile Money Provider: (2) The disbursement organisation polls the MMP for the\nRequest State until the transaction is authorised or declied\nor until the polling limit is reached. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Request State Object) end deactivate Mobile Money Provider opt activate Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: GET /transactions/transactionReference Note right of Mobile Money Provider: (3) The disbursement organisation can use the objectReference\nreturned in the Request State to retrieve a representation of\nthe completed disbursement. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Transactions Object) end deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Disbursement Reversal\n\nIn some failure scenarios, a organisation may need to reverse an individual disbursement transaction. This diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: POST /transactions/{original transaction reference}/reversals activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation submits the reversal\nrequest for processing to the MMP - passing the reference\nof the transaction that is to be reversed. The MMP will\nreturn the Request State object to indicate that the request\nis \'pending\'. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 202 (Request State Object) Mobile Money Provider->>Disbursement Organisation: PUT {Callback URL} (Reversal Object) Note right of Mobile Money Provider: (2) The MMP informs the The disbursement\norganisation that the reversal has been\nsuccessfully completed by returning the final\nrepresentation of the reversal transaction. Disbursement Organisation--\x3e>Mobile Money Provider: HTTP 204 deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain a Disbursement Organisation Balance\n\n \n\n\nPOST .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/balance activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) Obtain the balance of the\nrequested account. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Balance Object) deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Transactions for a Disbursement Organisation\n\nThis diagram illustrates use of a cursor mechanism to retrieve all transactions for a disbursement organisation via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams: \n{\n    "offset": 0,\n    "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement\norganisation requests up to\n20 transactions for the\naccount from the MMP. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of Mobile Money Provider: (2) The MMP returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. Disbursement Organisation->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of Mobile Money Provider: (3) The disbursement\norganisation requests the\nremaining transactions for\nthe account from the MMP. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the mobile money provider is in a state that enables a client to submit a request for processing.sts.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: GET /heartbeat activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) The disbursement organisation requests\nthe availability of the service from the MMP. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Heartbeat Object) Note right of Mobile Money Provider: (2) The MMP returns the availability of\nthe service - available, unavailable\nor degraded. deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the disbursement organisation to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the mobile money provider.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Disbursement Organisation participant Mobile Money Provider Disbursement Organisation->>Mobile Money Provider: GET /responses{clientCorrelationId} activate Disbursement Organisation activate Mobile Money Provider Note right of Mobile Money Provider: (1) Using the disbursement organisations\nclientCorrelationId, a request for the\nmissing API response is sent. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Responses Object) Note right of Mobile Money Provider: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Disbursement Organisation->>Mobile Money Provider: GET /{link} Note right of Mobile Money Provider: (3) The disbursement organisation uses\nthe link to obtain a representation of\nthe missing resource. Mobile Money Provider--\x3e>Disbursement Organisation: HTTP 200 (Requested Object) deactivate Disbursement Organisation deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# individual disbursement\n\nthis diagram illustrates an individual disbursement using an asynchronous flow with the notification provided via a callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/disbursement\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: post /transactions/type/disbursement activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation submits the refund request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>disbursement organisation: http 202 (request state object) deactivate disbursement organisation mobile money provider->>disbursement organisation: put {callback url} (transactions object) activate disbursement organisation note right of mobile money provider: (2) the mmp informs the disbursement\norganisation that the disbursement has been\nsuccessfully completed by returning the final\nrepresentation of the transaction. disbursement organisation--\x3e>mobile money provider: http 204 deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# individual disbursement failure\n\nin this example, an asynchronous flow is used with a final callback that contains the reason for failure.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/disbursement\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: post /transactions/type/disbursement activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation submits the refund request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>disbursement organisation: http 202 (request state object) deactivate disbursement organisation mobile money provider->>disbursement organisation: put {callback url} (error object) activate disbursement organisation note right of mobile money provider: (2) the mmp informs the disbursement\norganisation that the disbursement has failed\nand returns the error object datailing the\nreason for failure. disbursement organisation--\x3e>mobile money provider: http 204 deactivate disbursement organisation deactivate mobile money provider\n\n\n# bulk disbursement\n\nthis diagram illustrates the flow for a ‘one-shot’ bulk disbursement.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../batchtransactions\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchtitle": "batch_test",\n    "batchdescription": "testing a batch",\n    "scheduledstartdate": "2017-07-21t17:32:28z"\n}\n\n\n \n\n\nget .../batchtransactions/place your batch id here/completions\n\n\n \n\n\nget .../batchtransactions/place your batch id here/rejections\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: post /batchtransactions activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation submits the batch of\ntransactions for processing to the mmp. the mmp will\nreturn the request state object to indicate that the batch\nrequest is \'pending\'. mobile money provider--\x3e>disbursement organisation: http 202 (request state object) deactivate disbursement organisation mobile money provider->>disbursement organisation: put {callback url} (batch transactions object) activate disbursement organisation note right of mobile money provider: (2) the mmp informs the disbursement organisation that\nthe request has been processed by returning the\nrepresentation of the batch. disbursement organisation--\x3e>mobile money provider: http 204 deactivate disbursement organisation deactivate mobile money provider opt disbursement organisation->>mobile money provider: get /batchtransactions/{batchid} activate disbursement organisation activate mobile money provider note right of mobile money provider: (3) the disbursement organisation can optionally retrieve a\nrepresentation of the batch transactions object that will\nconfirm the overall success of the approval request. mobile money provider--\x3e>disbursement organisation: http 200 (batch transactions object) disbursement organisation->>mobile money provider: get /batchtransactions/{batchid}/completions note right of mobile money provider: (4) the disbursement organisation can optionally request\ndetails of all transactions in the batch that have been\ncompleted. mobile money provider--\x3e>disbursement organisation: http 200 (batch completions object) disbursement organisation->>mobile money provider: get /batchtransactions/{batchid}/rejections note right of mobile money provider: (5) the disbursement organisation can optionally request\ndetails of all transactions in the batch that have been\nrejected. mobile money provider--\x3e>disbursement organisation: http 200 (batch rejections object) end deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# bulk disbursement failure\n\nin this example, an asynchronous flow is used with a final callback that contains the reason for failure to process the bulk request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../batchtransactions\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchtitle": "batch_test",\n    "batchdescription": "testing a batch",\n    "scheduledstartdate": "2017-07-21t17:32:28z"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: post /batchtransactions activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation submits the batch of\ntransactions for processing to the mmp. the mmp will\nreturn the request state object to indicate that the batch\nrequest is \'pending\'. mobile money provider--\x3e>disbursement organisation: http 202 (request state object) deactivate disbursement organisation mobile money provider->>disbursement organisation: put {callback url} (error object) activate disbursement organisation note right of mobile money provider: (2) the mmp informs the disbursement organisation that\nthe request has failed by returning the representation of\nthe error object. disbursement organisation--\x3e>mobile money provider: http 204 deactivate disbursement organisation deactivate mobile money provider\n\n\n# bulk disbursement with maker / checker\n\nthis flow allows a bulk request to be processed in two steps. the first step involves the ‘maker’ system loading the request into the mobile money provider. the second step involves the ‘checker’ system approving the request.\n\nsequencediagram participant disbursement organisation maker participant disbursement organisation checker participant mobile money provider disbursement organisation maker->>mobile money provider: post /batchtransactions activate disbursement organisation maker activate mobile money provider note right of mobile money provider: (1) the disbursement organisation maker submits the batch of\ntransactions for processing to the mmp. the mmp will\nreturn the request state object to indicate that the batch\nrequest is \'pending\'. mobile money provider--\x3e>disbursement organisation maker: http 202 (request state object) deactivate disbursement organisation maker mobile money provider->>disbursement organisation maker: put {callback url} (batch transactions object) activate disbursement organisation maker note right of mobile money provider: (2) the mmp informs the disbursement organisation maker\nthat the request has been processed by returning the\nrepresentation of the batch. disbursement organisation maker--\x3e>mobile money provider: http 204 opt disbursement organisation maker->>mobile money provider: get /batchtransactions/{batchid}/rejections note right of mobile money provider: (3) the disbursement organisation maker can optionally\nrequest details of all transactions in the batch that have\nbeen rejected. mobile money provider--\x3e>disbursement organisation maker: http 200 (batch rejections object) end deactivate disbursement organisation maker deactivate mobile money provider disbursement organisation checker->>mobile money provider: patch /batchtransactions/{batchid} activate disbursement organisation checker activate mobile money provider note right of mobile money provider: (4) the disbursement organisation checker submits a request\nto approve the transaction batch. the mmp will return the\nrequest state object to indicate that the request is\n\'pending\'. mobile money provider--\x3e>disbursement organisation checker: http 202 (request state object) deactivate disbursement organisation checker mobile money provider->>disbursement organisation checker: put {callback url} (success) activate disbursement organisation checker note right of mobile money provider: (5) the mmp informs the disbursement organisation checker\nthat the request has been processed by returning the\nrepresentation of the batch. disbursement organisation checker--\x3e>mobile money provider: http 204 deactivate mobile money provider deactivate disbursement organisation checker opt activate mobile money provider activate disbursement organisation checker disbursement organisation checker->>mobile money provider: get /batchtransactions/{batchid} note right of mobile money provider: (6) the disbursement organisation checker can optionally\nretrieve a representation of the batch transactions object\nthat will confirm the overall success of the approval\nrequest. mobile money provider--\x3e>disbursement organisation checker: http 200 (batch transactions object) disbursement organisation checker->>mobile money provider: get /batchtransactions/{batchid}/completions note right of mobile money provider: (7) the disbursement organisation checker can optionally\nrequest details of all transactions in the batch that have\nbeen completed. mobile money provider--\x3e>disbursement organisation checker: http 200 (batch completions object) disbursement organisation checker->>mobile money provider: get /batchtransactions/{batchid}/rejections note right of mobile money provider: (8) the disbursement organisation checker can optionally\nrequest details of all transactions in the batch that have\nbeen rejected. mobile money provider--\x3e>disbursement organisation checker: http 200 (batch rejections object) end deactivate disbursement organisation checker deactivate mobile money provider\n\n\n# individual disbursement using the polling method\n\nin this diagram, an asynchronous flow is used with the polling method. the client polls against the request state object to determine the outcome of the individual disbursement request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/disbursement\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n \n\n\nget .../requeststates/place the server correlation id here\n\n\n \n\n\nget .../transactions/place transaction reference here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: post /transactions/type/disbursement activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation submits the refund request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>disbursement organisation: http 202 (request state object) deactivate disbursement organisation loop activate disbursement organisation disbursement organisation->>mobile money provider: get /requeststates/{servercorrelationid} note right of mobile money provider: (2) the disbursement organisation polls the mmp for the\nrequest state until the transaction is authorised or declied\nor until the polling limit is reached. mobile money provider--\x3e>disbursement organisation: http 200 (request state object) end deactivate mobile money provider opt activate mobile money provider disbursement organisation->>mobile money provider: get /transactions/transactionreference note right of mobile money provider: (3) the disbursement organisation can use the objectreference\nreturned in the request state to retrieve a representation of\nthe completed disbursement. mobile money provider--\x3e>disbursement organisation: http 200 (transactions object) end deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# disbursement reversal\n\nin some failure scenarios, a organisation may need to reverse an individual disbursement transaction. this diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: post /transactions/{original transaction reference}/reversals activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation submits the reversal\nrequest for processing to the mmp - passing the reference\nof the transaction that is to be reversed. the mmp will\nreturn the request state object to indicate that the request\nis \'pending\'. mobile money provider--\x3e>disbursement organisation: http 202 (request state object) mobile money provider->>disbursement organisation: put {callback url} (reversal object) note right of mobile money provider: (2) the mmp informs the the disbursement\norganisation that the reversal has been\nsuccessfully completed by returning the final\nrepresentation of the reversal transaction. disbursement organisation--\x3e>mobile money provider: http 204 deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# obtain a disbursement organisation balance\n\n \n\n\npost .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: get /accounts/{identifiertype}/{identifier}/balance activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) obtain the balance of the\nrequested account. mobile money provider--\x3e>disbursement organisation: http 200 (balance object) deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve transactions for a disbursement organisation\n\nthis diagram illustrates use of a cursor mechanism to retrieve all transactions for a disbursement organisation via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams: \n{\n    "offset": 0,\n    "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement\norganisation requests up to\n20 transactions for the\naccount from the mmp. mobile money provider--\x3e>disbursement organisation: http 200 (transactions array) (x-records-available-count=40) note right of mobile money provider: (2) the mmp returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. disbursement organisation->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of mobile money provider: (3) the disbursement\norganisation requests the\nremaining transactions for\nthe account from the mmp. mobile money provider--\x3e>disbursement organisation: http 200 (transactions array) (x-records-available-count=40) deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the mobile money provider is in a state that enables a client to submit a request for processing.sts.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: get /heartbeat activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) the disbursement organisation requests\nthe availability of the service from the mmp. mobile money provider--\x3e>disbursement organisation: http 200 (heartbeat object) note right of mobile money provider: (2) the mmp returns the availability of\nthe service - available, unavailable\nor degraded. deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the disbursement organisation to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the mobile money provider.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant disbursement organisation participant mobile money provider disbursement organisation->>mobile money provider: get /responses{clientcorrelationid} activate disbursement organisation activate mobile money provider note right of mobile money provider: (1) using the disbursement organisations\nclientcorrelationid, a request for the\nmissing api response is sent. mobile money provider--\x3e>disbursement organisation: http 200 (responses object) note right of mobile money provider: (2) a responses object is returned\ncontaining a link to the missing\nresource. disbursement organisation->>mobile money provider: get /{link} note right of mobile money provider: (3) the disbursement organisation uses\nthe link to obtain a representation of\nthe missing resource. mobile money provider--\x3e>disbursement organisation: http 200 (requested object) deactivate disbursement organisation deactivate mobile money provider\nopen postman collection open postman collection with authentication',charsets:{}},{title:"Disbursements",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Disbursements"},regularPath:"/use-cases/disbursements/",relativePath:"use-cases/disbursements/index.md",key:"v-acf0f39e",path:"/use-cases/disbursements/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:465}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nThe Disbursement Mobile Money APIs allow organisations to disburse funds to mobile money recipients.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                          ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to allow   API Provider\n                         organisations to disburse payments in singular and in bulk.\nNGOs                     To understand how to implement the Mobile Money API to         API Consumer\n                         provide aid payments to mobile money recipients.\nGovernment Departments   To understand how to implement the Mobile Money API to         API Consumer\n                         provide social credit payments to mobile money recipients.\nEmployers                To understand how to implement the Mobile Money API to         API Consumer\n                         provide salary payments to mobile money recipients.",normalizedContent:"# introduction\n\nthe disbursement mobile money apis allow organisations to disburse funds to mobile money recipients.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                          role\nmobile money providers   to understand how to implement the mobile money api to allow   api provider\n                         organisations to disburse payments in singular and in bulk.\nngos                     to understand how to implement the mobile money api to         api consumer\n                         provide aid payments to mobile money recipients.\ngovernment departments   to understand how to implement the mobile money api to         api consumer\n                         provide social credit payments to mobile money recipients.\nemployers                to understand how to implement the mobile money api to         api consumer\n                         provide salary payments to mobile money recipients.",charsets:{}},{title:"Disbursements - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"Disbursements - API Service Definition"},regularPath:"/use-cases/disbursements/api-service-definition.html",relativePath:"use-cases/disbursements/api-service-definition.md",key:"v-3268c0ea",path:"/use-cases/disbursements/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2194},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2490},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:11679},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:12436},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:12702},{level:3,title:"Batch Transactions",slug:"batch-transactions",normalizedTitle:"batch transactions",charIndex:21185},{level:4,title:"Batch Transactions Workflow",slug:"batch-transactions-workflow",normalizedTitle:"batch transactions workflow",charIndex:21691},{level:5,title:"One-Shot Batch Processing",slug:"one-shot-batch-processing",normalizedTitle:"one-shot batch processing",charIndex:23352},{level:5,title:"Batch Processing with Maker/Checker",slug:"batch-processing-with-maker-checker",normalizedTitle:"batch processing with maker/checker",charIndex:24450},{level:3,title:"Batch Transactions API",slug:"batch-transactions-api",normalizedTitle:"batch transactions api",charIndex:26500},{level:4,title:"Batch Transaction Object UML Diagram",slug:"batch-transaction-object-uml-diagram",normalizedTitle:"batch transaction object uml diagram",charIndex:27124},{level:4,title:"Batch Transaction Object Definition",slug:"batch-transaction-object-definition",normalizedTitle:"batch transaction object definition",charIndex:27442},{level:3,title:"Batch Rejections API",slug:"batch-rejections-api",normalizedTitle:"batch rejections api",charIndex:33008},{level:4,title:"Batch Rejection UML Class Diagram",slug:"batch-rejection-uml-class-diagram",normalizedTitle:"batch rejection uml class diagram",charIndex:34634},{level:4,title:"Batch Rejection Object Definition",slug:"batch-rejection-object-definition",normalizedTitle:"batch rejection object definition",charIndex:34891},{level:3,title:"Batch Completions API",slug:"batch-completions-api",normalizedTitle:"batch completions api",charIndex:37737},{level:4,title:"Batch Completion UML Class Diagram",slug:"batch-completion-uml-class-diagram",normalizedTitle:"batch completion uml class diagram",charIndex:39326},{level:4,title:"Batch Completion Object Definition",slug:"batch-completion-object-definition",normalizedTitle:"batch completion object definition",charIndex:39588},{level:3,title:"Disbursement Accounts APIs",slug:"disbursement-accounts-apis",normalizedTitle:"disbursement accounts apis",charIndex:42429},{level:4,title:"Identifying aDisbursement Organisation Account",slug:"identifying-adisbursement-organisation-account",normalizedTitle:"identifying adisbursement organisation account",charIndex:42593},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:42789},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:42972},{level:3,title:"Account Transactions API",slug:"account-transactions-api",normalizedTitle:"account transactions api",charIndex:43470},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:45611},{level:3,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:45924},{level:4,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:46307},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:46439},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:48989},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:49012},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:49931},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:50784},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:51611},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:52531},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:53423},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:53440},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:53817},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:49012}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Batch Transactions Batch Transactions Workflow One-Shot Batch Processing Batch Processing with Maker/Checker Batch Transactions API Batch Transaction Object UML Diagram Batch Transaction Object Definition Batch Rejections API Batch Rejection UML Class Diagram Batch Rejection Object Definition Batch Completions API Batch Completion UML Class Diagram Batch Completion Object Definition Disbursement Accounts APIs Identifying aDisbursement Organisation Account Single Identifier Method Multiple Identifiers Method Account Transactions API Account Transaction UML Class Diagram Account Balances API Account Balance UML Class Diagram Account Balance Object Definition Supporting Objects Account Identifiers Object Metadata Object Custom Data Object Fees Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types Account Identifiers",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nIndividual disbursements can be created and viewed using transactions APIs. The following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\nFor batches of disbursements, please refer to Bulk Disbursement.\n\n# Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2‑1 Transaction UML Class Diagram\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                              \nName                                         Type        Description                                                           Reference                        Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                     \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers              creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                     debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers              debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                     If creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                     Enumeration = Transaction Types\n                                                         the URL)                                                       ← M\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                     \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                     Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                     Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                     \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                     \n                                                         was initiated.                                                 ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                     \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                         Provider                                                       ← O\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                                     \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                         populate additional transaction fields.                        ← O\n\n\n# Reversals API\n\nThe Reversals API is used to reverse a P2P transfer. The originating transaction reference must be provided in the path to identify the payment to be reversed. For a partial reversal, the amount needs to be supplied.\n\nFor viewing reversals, the Transactions API should be used.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Credit Party Identifier "0..10" --* "" Reversal Debit Party Identifier "0..10" --* "" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\nFigure 2‑2 Reversal UML Class Diagram\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                          TYPE        DESCRIPTION                                                           REFERENCE                        VALIDATION\ntransactionReference                          string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                          the response by API provider.                                  ← M\nrequesting OrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                          to be associated with the transaction.                         ← O\noriginalTransactionReference                  string      For reversals and refunds, this field indicates the            → NA                                    \n                                                          transaction which is the subject of the reversal.              ← M\ncreditParty                                   array       A series of key/value pairs that enable the credit party to    → O    Account Identifiers              \n                                                          be identified. Keys include MSISDN and Wallet Identifier.      ← O\ndebitParty                                    array       A collection of key/value pairs that enable the debit party    → O    Account Identifiers              \n                                                          to be identified. Keys include MSISDN and Wallet Identifier.   ← O\ntype                                          string      The harmonised Transaction Type                                → M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                         ← M                                     Refunds (adjustments) are supported.\nsubType                                       string      A non-harmonised sub-classification of the type of             → O                                     \n                                                          transaction. Values are not fixed, and usage will vary         ← O\n                                                          according to Provider.\ntransactionStatus                             string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                          provider.                                                      ← M\namount                                        string      The transaction Amount.                                        → O                                     Please refer to API Fundamentals document for amount\n                                                                                                                         ← O                                     validation rules.\ncurrency                                      string      Currency of the transaction amount.                            → O                                     Enumeration = ISO Currency Codes\n                                                                                                                         ← O\ndescriptionText                               string      Free format text description of the transaction provided by    → O                                     \n                                                          the client. This can be provided as a reference for the        ← O\n                                                          receiver on a notification SMS and on an account statement.\nfees                                          array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                          to the transaction.                                            ← O\ngeoCode                                       string      Indicates the geographic location from where the transaction   → O                                     \n                                                          was initiated.                                                 ← O\nrequestingOrganisation                        object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                         ← O\nservicingIdentity                             string      The field is used to identify the servicing identity for       → O                                     \n                                                          transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                            string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                          may differ from the Transaction Reference.                     ← O\ncreationDate                                  date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                          Provider.                                                      ← O\nmodificationDate                              date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                          Provider.                                                      ← O\nrequestDate                                   date-time   The date and time of the transaction request as supplied by    → O                                     \n                                                          the client.                                                    ← O\ncustomData                                    string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                          provider specific fields.                                      ← O\nmetadata                                      array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                          populate additional properties that describe administrative    ← O\n                                                          information regarding the transaction.\n\n\n# Batch Transactions\n\nThe Mobile Money API allows organisations to submit, approve and view batches of disbursements. The following steps describe an end to end flow for processing batch disbursements. Two types of processing modes are supported:\n\n * One shot processing without an approver.\n * Maker/checker approval, i.e. transactions are not completed until approved via a second API request.\n\nThe individual APIs that are referenced in the steps below are fully documented in subsequent sub-sections.\n\n# Batch Transactions Workflow\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../batchtransactions\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditParty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "RWF",\n            "debitParty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchTitle": "Batch_Test",\n    "batchDescription": "Testing a Batch",\n    "scheduledStartDate": "2017-07-21T17:32:28Z"\n}\n\n\n \n\n\nGET .../batchtransactions/Place your Batch Id here/completions\n\n\n \n\n\nGET .../batchtransactions/Place your Batch Id here/rejections\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n# One-Shot Batch Processing\n\nCreating a Batch\n\n 1. Client submits the batch for processing via POST /batchtransactions.\n\n 2. The client will return the requestState object indicating whether a callback will be provided or polling is required.\n\n 3. The API provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. Once parsing has completed, the API provider will set the batch status in the batchTransactions object to ‘completed’.\n\nVerifying a Batch\n\n 1. The client will be able to retrieve the batch transaction object by invoking GET /batchtransactions using the object reference provided by the requestState object. Alternatively, if Callback is specified, the client will receive the representation of the batchTransactions object to their nominated URL set in the X-Callback-URL header.\n\n 2. If errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via GET /batchtransactions/rejections. Successfully completed transactions can be viewed via GET /batchtransactions/completions.\n\n# Batch Processing with Maker/Checker\n\nCreating a Batch\n\n 1. Client submits the batch for processing via POST /batchtransactions.\n\n 2. The client will return the requestState object indicating whether a callback will be provided or polling is required.\n\n 3. The API provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. Once parsing has completed, the API provider will set the batch status in the batchTransactions object to ‘created’.\n\nVerifying a Batch\n\n 1. The client will be able to retrieve the batch transaction object by invoking GET /batchtransactions using the object reference provided by the requestState object. Alternatively, if Callback is specified, the client will receive the representation of the batchTransactions object to their nominated URL set in the X-Callback-URL header.\n\n 2. If errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via GET /batchtransactions/rejections.\n\nApproving a Batch\n\n 1. A client can approve the batch for posting by issuing a PATCH /batchtransactions in order to update the status to ‘approved’.\n\n 2. As per step 2, a requestState object will be returned indicating whether a callback will be provided or polling is required.\n\n 3. The API provider will then post the transactions in the batch considering any scheduling considerations.\n\n 4. Once posting is completed, the API provider will set the batch status in the batchTransactions object to ‘completed’.\n\n 5. The client will be able to retrieve the batchTransactions object by invoking GET /batchtransactions using the object reference provided by the requestState object. Alternatively, if Callback is specified, the client will receive the representation of the batchTransactions object to their nominated URL set in the X-Callback-URL header.\n\n 6. The client will also be able to retrieve a list of successful transaction completions /batchtransactions/completions and transaction failures /batchtransactions/rejections.\n\n\n# Batch Transactions API\n\nThis API enables clients to submit and approve a batch of transactions. The API allows transactions of multiple types to be included in a single batch. The following paths are permitted:\n\n- Submit a batch: POST /batchtransactions\n\n- Approve a batch: PATCH /bathtransactions/{batchID}. The Batch Status needs to be set to ‘approved’.\n\n- View details regarding batch processing: GET /batchtransactions/{batchID}\n\n\n\nOnly asynchronous mode is supported for the POST and PATCH methods. For the GET method, only synchronous mode is supported.\n\nThere is a limit of 999,999 transaction records per batch.\n\n# Batch Transaction Object UML Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0.." --* "1" Batch Transaction\n\nFigure 2-3 Batch Transaction UML Class Diagram\n\n# Batch Transaction Object Definition\n\n{\n  "batchID": "d24651c4-ef6f-4c5c-af0e-468f1dc53624",\n  "batchStatus": "approved",\n  "Transactions": [\n    {\n      //transaction 1 object...\n      },\n    {\n      //transaction 2 object...\n    }\n  ]\n  "approvalDate": "2017-07-21T17:32:28Z", \n  "completionDate": "2017-07-21T17:32:28Z",\n  "batchTitle": "Batch title...",\n  "batchDescription": "Batch description...",\n  "processingFlag": true,\n  "completedCount": 3,\n  "parsingSuccessCount": 2,\n  "rejectionCount": 1,\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "scheduledStartDate": "2017-07-21T17:32:28Z",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBATCH TRANSACTION OBJECT                                                                                                               \nName                       Type        Description                                                           Reference                 Validation\nbatchID                    string      Identifier for the Batch that is assigned by the API           → NA                             \n                                       provider. This ID is used by the client on subsequent GET or   ← M\n                                       PATCH methods.\nbatchStatus                string      Indicates the status of the batch.                             → O                              Enumeration = created, approved, completed\n                                                                                                      ← M\nTransactions               array       Collection of Transactions that are to be processed. Note      → M    Transactions              \n                                       that the representation of each completed transaction can be   ← NA\n                                       retrieved via the ‘/completions API.\napprovalDate               date-time   Indicates when the batch was approved as recorded by the API   → NA                             \n                                       provider.                                                      ← M\ncompletionDate             date-time   Indicates when the batch was completed as recorded by the      → NA                             \n                                       API provider.                                                  ← M\nbatchTitle                 string      Client-provided title for the batch.                           → O                              \n                                                                                                      ← O\nbatchDescription           string      Client-provided description of the batch.                      → O                              \n                                                                                                      ← O\nprocessingFlag             boolean     Indicates whether the batch is currently undergoing            → NA                             \n                                       processing by the API Provider.                                ← O\ncompletedCount             integer     Indicates the number of records that have been successfully    → NA                             \n                                       completed.                                                     ← O\nparsingSuccessCount        integer     Indicates the number of records that have been parsed          → NA                             \n                                       successfully.                                                  ← O\nrejectionCount             integer     Indicates the number of records that have been rejected,       → NA                             \n                                       either during parsing or during final processing.              ← O\nrequestingOrganisation     object      The originating organisation of the request.                   → O    Requesting Organisation   \n                                                                                                      ← O\nscheduledStartDate         date-time   If the batch has been scheduled, the expected start time is    → O                              \n                                       provided here.                                                 ← O\ncreationDate               date-time   Indicates when the batch was created as recorded by the API    → NA                             \n                                       provider.                                                      ← O\nmodificationDate           date-time   Indicates when the batch was modified as recorded by the API   → NA                             \n                                       provider.                                                      ← O\nrequestDate                date-time   The date and time of the batch request as supplied by the      → O                              \n                                       client.                                                        ← O\ncustomData                 string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                       provider specific fields.                                      ← O\n\n\n# Batch Rejections API\n\nThis API enables clients to retrieve information on all transactions that have either failed parsing or have failed to complete. Only the GET method is supported. The path is batchtransactions/{batchID}/rejections.\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Batch Rejection UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Batch Rejection Debit Party Identifier "1..10" --* "1" Batch Rejection Batch Rejection "0..*" --* "1" Batch Transaction\n\nFigure 2-4 Batch Rejection UML Class Diagram\n\n# Batch Rejection Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "rejectionReason": "Some rejection reason...",\n  "rejectionDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBATCH REJECTION OBJECT                                                                                                                               \nName                                         Type        Description                                                           Reference             Validation\ntransactionReference                         string      Transaction Reference as assigned by the API provider.         → NA                         \n                                                                                                                        ← O\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → NA                         \n                                                         to be associated with the transactions.                        ← O\ncreditParty                                  array       The credit party identifiers for the transaction as specific   → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\ndebitParty                                   array       The debit party identifiers for the transaction as specific    → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\nrejectionReason                              string      The reason for the transaction request as indicated by the     → NA                         \n                                                         API provider.                                                  ← M\nrejectionDate                                date-time   Date and time of the rejection.                                → NA                         \n                                                                                                                        ← M\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object    \n                                                         provider specific fields.                                      ← O\n\n\n# Batch Completions API\n\nThis API lists all transactions that have successfully completed for a given batch. Only the GET method is supported. The path format is batchtransactions/{batchID}/completions.\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\n\nTIP\n\nNote: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count)\n\n# Batch Completion UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Batch Completion Debit Party Identifier "1..10" --* "1" Batch Completion Batch Completion "0..*" --* "1" Batch Transaction\n\nFigure 2-5 Batch Completion UML Class Diagram\n\n# Batch Completion Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "completionDate": "2017-07-21T17:32:28Z",\n  "link": "https://application.com/uuid",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nBATCH COMPLETION OBJECT                                                                                                                              \nName                                         Type        Description                                                           Reference             Validation\ntransactionReference                         string      Transaction Reference as assigned by the API provider.         → NA                         \n                                                                                                                        ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → NA                         \n                                                         to be associated with the transactions.                        ← O\ncreditParty                                  array       The credit party identifiers for the transaction as specific   → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\ndebitParty                                   array       The debit party identifiers for the transaction as specific    → NA   Account Identifiers   \n                                                         in the batch request.                                          ← M\ncompletionDate                               date-time   Date and time indicating when the transaction was completed.   → NA                         \n                                                                                                                        ← M\nlink                                         string      Provides a URL to the transaction resource.                    → NA                         \n                                                                                                                        ← M\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object    \n                                                         provider specific fields.                                      ← O\n\n\n# Disbursement Accounts APIs\n\nUsing the mobile money APIs, disbursement organisations can:\n\n * View transactions for their account.\n * View their account balance.\n\n# Identifying aDisbursement Organisation Account\n\nTwo methods are provided for identifying a disbursement organisation account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n/accounts/{identifierType}/{identifier}.\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3}.\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Account Transactions API\n\nA disbursement organisation should use this API to return a list of transactions against their account. One of the following paths can be used\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2‑6 Account Transaction UML Class Diagram\n\n\n# Account Balances API\n\nUsing the Account Balances API, a disbursement organisation can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the organisation account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram AccountBalance "1" --* "1" Account\n\nFigure 2‑7 Account Balance UML Class Diagram\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                           REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    → NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    ← O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                → NA               Please refer to API Fundamentals document for amount\n                                                                                           ← O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        → NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    ← O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    → NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       ← O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       → NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← O                validation rules.\ncurrency           string   Currency for all returned balances.                            → NA               Enumeration = ISO Currency Codes\n                                                                                           ← O\n\n\n# Supporting Objects\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         → M               Enumeration = Account Identifiers\n                                                               ← M\nvalue   string   Provides the account identifier type value.   → M               \n                                                               ← M\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                     REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  → M               \n                                                                 ← M\nfeeAmount     string   Defines the amount of the fee.            → M               Please refer to API Fundamentals document for amount\n                                                                 ← M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   → M               Enumeration = ISO Currency Codes\n                                                                 ← M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE           DESCRIPTION\ndisbursement   Disbursement of funds (making payments from an organisation\n               (business, NGO, government entity) to a mobile money\n               recipient.\nreversal       Reversal of a prior transaction to return funds to the\n               payer.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\nindividual disbursements can be created and viewed using transactions apis. the following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\nfor batches of disbursements, please refer to bulk disbursement.\n\n# transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2‑1 transaction uml class diagram\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                              \nname                                         type        description                                                           reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                    \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                     \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers              creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                     debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers              debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                     if creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                     enumeration = transaction types\n                                                         the url)                                                       ← m\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                     \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                    \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                     please refer to api fundamentals document for amount\n                                                                                                                        ← m                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                     enumeration = iso currency codes\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                     \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                     \n                                                         was initiated.                                                 ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                     \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                    \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                    \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                    \n                                                         provider                                                       ← o\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                                     \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                         populate additional transaction fields.                        ← o\n\n\n# reversals api\n\nthe reversals api is used to reverse a p2p transfer. the originating transaction reference must be provided in the path to identify the payment to be reversed. for a partial reversal, the amount needs to be supplied.\n\nfor viewing reversals, the transactions api should be used.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram credit party identifier "0..10" --* "" reversal debit party identifier "0..10" --* "" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\nfigure 2‑2 reversal uml class diagram\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                          type        description                                                           reference                        validation\ntransactionreference                          string      unique reference for the transaction. this is returned in      → na                                    \n                                                          the response by api provider.                                  ← m\nrequesting organisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                          to be associated with the transaction.                         ← o\noriginaltransactionreference                  string      for reversals and refunds, this field indicates the            → na                                    \n                                                          transaction which is the subject of the reversal.              ← m\ncreditparty                                   array       a series of key/value pairs that enable the credit party to    → o    account identifiers              \n                                                          be identified. keys include msisdn and wallet identifier.      ← o\ndebitparty                                    array       a collection of key/value pairs that enable the debit party    → o    account identifiers              \n                                                          to be identified. keys include msisdn and wallet identifier.   ← o\ntype                                          string      the harmonised transaction type                                → m                                     enumeration = transaction types note that only reversals and\n                                                                                                                         ← m                                     refunds (adjustments) are supported.\nsubtype                                       string      a non-harmonised sub-classification of the type of             → o                                     \n                                                          transaction. values are not fixed, and usage will vary         ← o\n                                                          according to provider.\ntransactionstatus                             string      indicates the status of the transaction as stored by the api   → na                                    \n                                                          provider.                                                      ← m\namount                                        string      the transaction amount.                                        → o                                     please refer to api fundamentals document for amount\n                                                                                                                         ← o                                     validation rules.\ncurrency                                      string      currency of the transaction amount.                            → o                                     enumeration = iso currency codes\n                                                                                                                         ← o\ndescriptiontext                               string      free format text description of the transaction provided by    → o                                     \n                                                          the client. this can be provided as a reference for the        ← o\n                                                          receiver on a notification sms and on an account statement.\nfees                                          array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                          to the transaction.                                            ← o\ngeocode                                       string      indicates the geographic location from where the transaction   → o                                     \n                                                          was initiated.                                                 ← o\nrequestingorganisation                        object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                         ← o\nservicingidentity                             string      the field is used to identify the servicing identity for       → o                                     \n                                                          transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                            string      transaction receipt number as notified to the parties. this    → na                                    \n                                                          may differ from the transaction reference.                     ← o\ncreationdate                                  date-time   date and time when the transaction was created by the api      → na                                    \n                                                          provider.                                                      ← o\nmodificationdate                              date-time   date and time when the transaction was modified by the api     → na                                    \n                                                          provider.                                                      ← o\nrequestdate                                   date-time   the date and time of the transaction request as supplied by    → o                                     \n                                                          the client.                                                    ← o\ncustomdata                                    string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                          provider specific fields.                                      ← o\nmetadata                                      array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                          populate additional properties that describe administrative    ← o\n                                                          information regarding the transaction.\n\n\n# batch transactions\n\nthe mobile money api allows organisations to submit, approve and view batches of disbursements. the following steps describe an end to end flow for processing batch disbursements. two types of processing modes are supported:\n\n * one shot processing without an approver.\n * maker/checker approval, i.e. transactions are not completed until approved via a second api request.\n\nthe individual apis that are referenced in the steps below are fully documented in subsequent sub-sections.\n\n# batch transactions workflow\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../batchtransactions\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "transactions": [\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ]\n        },\n        {\n            "amount": "200.00",\n            "type": "transfer",\n            "creditparty": [\n                {\n                    "key": "accountid",\n                    "value": "2999"\n                }\n            ],\n            "currency": "rwf",\n            "debitparty": [\n                {\n                    "key": "accountid",\n                    "value": "2000"\n                }\n            ]\n        }        \n    ],\n    "batchtitle": "batch_test",\n    "batchdescription": "testing a batch",\n    "scheduledstartdate": "2017-07-21t17:32:28z"\n}\n\n\n \n\n\nget .../batchtransactions/place your batch id here/completions\n\n\n \n\n\nget .../batchtransactions/place your batch id here/rejections\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n# one-shot batch processing\n\ncreating a batch\n\n 1. client submits the batch for processing via post /batchtransactions.\n\n 2. the client will return the requeststate object indicating whether a callback will be provided or polling is required.\n\n 3. the api provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. once parsing has completed, the api provider will set the batch status in the batchtransactions object to ‘completed’.\n\nverifying a batch\n\n 1. the client will be able to retrieve the batch transaction object by invoking get /batchtransactions using the object reference provided by the requeststate object. alternatively, if callback is specified, the client will receive the representation of the batchtransactions object to their nominated url set in the x-callback-url header.\n\n 2. if errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via get /batchtransactions/rejections. successfully completed transactions can be viewed via get /batchtransactions/completions.\n\n# batch processing with maker/checker\n\ncreating a batch\n\n 1. client submits the batch for processing via post /batchtransactions.\n\n 2. the client will return the requeststate object indicating whether a callback will be provided or polling is required.\n\n 3. the api provider will parse the batch in order to determine whether the transactions are capable of being processed.\n\n 4. once parsing has completed, the api provider will set the batch status in the batchtransactions object to ‘created’.\n\nverifying a batch\n\n 1. the client will be able to retrieve the batch transaction object by invoking get /batchtransactions using the object reference provided by the requeststate object. alternatively, if callback is specified, the client will receive the representation of the batchtransactions object to their nominated url set in the x-callback-url header.\n\n 2. if errors are indicated, i.e. some of the transactions failed parsing, the client is able to retrieve the errors via get /batchtransactions/rejections.\n\napproving a batch\n\n 1. a client can approve the batch for posting by issuing a patch /batchtransactions in order to update the status to ‘approved’.\n\n 2. as per step 2, a requeststate object will be returned indicating whether a callback will be provided or polling is required.\n\n 3. the api provider will then post the transactions in the batch considering any scheduling considerations.\n\n 4. once posting is completed, the api provider will set the batch status in the batchtransactions object to ‘completed’.\n\n 5. the client will be able to retrieve the batchtransactions object by invoking get /batchtransactions using the object reference provided by the requeststate object. alternatively, if callback is specified, the client will receive the representation of the batchtransactions object to their nominated url set in the x-callback-url header.\n\n 6. the client will also be able to retrieve a list of successful transaction completions /batchtransactions/completions and transaction failures /batchtransactions/rejections.\n\n\n# batch transactions api\n\nthis api enables clients to submit and approve a batch of transactions. the api allows transactions of multiple types to be included in a single batch. the following paths are permitted:\n\n- submit a batch: post /batchtransactions\n\n- approve a batch: patch /bathtransactions/{batchid}. the batch status needs to be set to ‘approved’.\n\n- view details regarding batch processing: get /batchtransactions/{batchid}\n\n\n\nonly asynchronous mode is supported for the post and patch methods. for the get method, only synchronous mode is supported.\n\nthere is a limit of 999,999 transaction records per batch.\n\n# batch transaction object uml diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0.." --* "1" batch transaction\n\nfigure 2-3 batch transaction uml class diagram\n\n# batch transaction object definition\n\n{\n  "batchid": "d24651c4-ef6f-4c5c-af0e-468f1dc53624",\n  "batchstatus": "approved",\n  "transactions": [\n    {\n      //transaction 1 object...\n      },\n    {\n      //transaction 2 object...\n    }\n  ]\n  "approvaldate": "2017-07-21t17:32:28z", \n  "completiondate": "2017-07-21t17:32:28z",\n  "batchtitle": "batch title...",\n  "batchdescription": "batch description...",\n  "processingflag": true,\n  "completedcount": 3,\n  "parsingsuccesscount": 2,\n  "rejectioncount": 1,\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "scheduledstartdate": "2017-07-21t17:32:28z",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbatch transaction object                                                                                                               \nname                       type        description                                                           reference                 validation\nbatchid                    string      identifier for the batch that is assigned by the api           → na                             \n                                       provider. this id is used by the client on subsequent get or   ← m\n                                       patch methods.\nbatchstatus                string      indicates the status of the batch.                             → o                              enumeration = created, approved, completed\n                                                                                                      ← m\ntransactions               array       collection of transactions that are to be processed. note      → m    transactions              \n                                       that the representation of each completed transaction can be   ← na\n                                       retrieved via the ‘/completions api.\napprovaldate               date-time   indicates when the batch was approved as recorded by the api   → na                             \n                                       provider.                                                      ← m\ncompletiondate             date-time   indicates when the batch was completed as recorded by the      → na                             \n                                       api provider.                                                  ← m\nbatchtitle                 string      client-provided title for the batch.                           → o                              \n                                                                                                      ← o\nbatchdescription           string      client-provided description of the batch.                      → o                              \n                                                                                                      ← o\nprocessingflag             boolean     indicates whether the batch is currently undergoing            → na                             \n                                       processing by the api provider.                                ← o\ncompletedcount             integer     indicates the number of records that have been successfully    → na                             \n                                       completed.                                                     ← o\nparsingsuccesscount        integer     indicates the number of records that have been parsed          → na                             \n                                       successfully.                                                  ← o\nrejectioncount             integer     indicates the number of records that have been rejected,       → na                             \n                                       either during parsing or during final processing.              ← o\nrequestingorganisation     object      the originating organisation of the request.                   → o    requesting organisation   \n                                                                                                      ← o\nscheduledstartdate         date-time   if the batch has been scheduled, the expected start time is    → o                              \n                                       provided here.                                                 ← o\ncreationdate               date-time   indicates when the batch was created as recorded by the api    → na                             \n                                       provider.                                                      ← o\nmodificationdate           date-time   indicates when the batch was modified as recorded by the api   → na                             \n                                       provider.                                                      ← o\nrequestdate                date-time   the date and time of the batch request as supplied by the      → o                              \n                                       client.                                                        ← o\ncustomdata                 string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                       provider specific fields.                                      ← o\n\n\n# batch rejections api\n\nthis api enables clients to retrieve information on all transactions that have either failed parsing or have failed to complete. only the get method is supported. the path is batchtransactions/{batchid}/rejections.\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# batch rejection uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" batch rejection debit party identifier "1..10" --* "1" batch rejection batch rejection "0..*" --* "1" batch transaction\n\nfigure 2-4 batch rejection uml class diagram\n\n# batch rejection object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "rejectionreason": "some rejection reason...",\n  "rejectiondate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbatch rejection object                                                                                                                               \nname                                         type        description                                                           reference             validation\ntransactionreference                         string      transaction reference as assigned by the api provider.         → na                         \n                                                                                                                        ← o\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → na                         \n                                                         to be associated with the transactions.                        ← o\ncreditparty                                  array       the credit party identifiers for the transaction as specific   → na   account identifiers   \n                                                         in the batch request.                                          ← m\ndebitparty                                   array       the debit party identifiers for the transaction as specific    → na   account identifiers   \n                                                         in the batch request.                                          ← m\nrejectionreason                              string      the reason for the transaction request as indicated by the     → na                         \n                                                         api provider.                                                  ← m\nrejectiondate                                date-time   date and time of the rejection.                                → na                         \n                                                                                                                        ← m\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object    \n                                                         provider specific fields.                                      ← o\n\n\n# batch completions api\n\nthis api lists all transactions that have successfully completed for a given batch. only the get method is supported. the path format is batchtransactions/{batchid}/completions.\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\n\ntip\n\nnote: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count)\n\n# batch completion uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" batch completion debit party identifier "1..10" --* "1" batch completion batch completion "0..*" --* "1" batch transaction\n\nfigure 2-5 batch completion uml class diagram\n\n# batch completion object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "completiondate": "2017-07-21t17:32:28z",\n  "link": "https://application.com/uuid",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nbatch completion object                                                                                                                              \nname                                         type        description                                                           reference             validation\ntransactionreference                         string      transaction reference as assigned by the api provider.         → na                         \n                                                                                                                        ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → na                         \n                                                         to be associated with the transactions.                        ← o\ncreditparty                                  array       the credit party identifiers for the transaction as specific   → na   account identifiers   \n                                                         in the batch request.                                          ← m\ndebitparty                                   array       the debit party identifiers for the transaction as specific    → na   account identifiers   \n                                                         in the batch request.                                          ← m\ncompletiondate                               date-time   date and time indicating when the transaction was completed.   → na                         \n                                                                                                                        ← m\nlink                                         string      provides a url to the transaction resource.                    → na                         \n                                                                                                                        ← m\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object    \n                                                         provider specific fields.                                      ← o\n\n\n# disbursement accounts apis\n\nusing the mobile money apis, disbursement organisations can:\n\n * view transactions for their account.\n * view their account balance.\n\n# identifying adisbursement organisation account\n\ntwo methods are provided for identifying a disbursement organisation account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n/accounts/{identifiertype}/{identifier}.\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3}.\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# account transactions api\n\na disbursement organisation should use this api to return a list of transactions against their account. one of the following paths can be used\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2‑6 account transaction uml class diagram\n\n\n# account balances api\n\nusing the account balances api, a disbursement organisation can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the organisation account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram accountbalance "1" --* "1" account\n\nfigure 2‑7 account balance uml class diagram\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                           reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    → na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    ← o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                → na               please refer to api fundamentals document for amount\n                                                                                           ← o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        → na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    ← o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    → na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       ← o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       → na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← o                validation rules.\ncurrency           string   currency for all returned balances.                            → na               enumeration = iso currency codes\n                                                                                           ← o\n\n\n# supporting objects\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   provides the account identifier type.         → m               enumeration = account identifiers\n                                                               ← m\nvalue   string   provides the account identifier type value.   → m               \n                                                               ← m\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                     reference   validation\nfeetype       string   defines the type of fee.                  → m               \n                                                                 ← m\nfeeamount     string   defines the amount of the fee.            → m               please refer to api fundamentals document for amount\n                                                                 ← m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   → m               enumeration = iso currency codes\n                                                                 ← m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode           description\ndisbursement   disbursement of funds (making payments from an organisation\n               (business, ngo, government entity) to a mobile money\n               recipient.\nreversal       reversal of a prior transaction to return funds to the\n               payer.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.',charsets:{}},{title:"International Transfers - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"International Transfers - API Service Definition"},regularPath:"/use-cases/international-transfers/api-service-definition.html",relativePath:"use-cases/international-transfers/api-service-definition.md",key:"v-961caed0",path:"/use-cases/international-transfers/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2128},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2613},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:11802},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:12675},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:12941},{level:3,title:"Accounts APIs",slug:"accounts-apis",normalizedTitle:"accounts apis",charIndex:21424},{level:4,title:"Identifying an FSP Account",slug:"identifying-an-fsp-account",normalizedTitle:"identifying an fsp account",charIndex:21550},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:21705},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:21890},{level:3,title:"Account Transactions API",slug:"account-transactions-api",normalizedTitle:"account transactions api",charIndex:22389},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:24506},{level:3,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:25042},{level:4,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:25395},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:25528},{level:3,title:"Quotations API",slug:"quotations-api",normalizedTitle:"quotations api",charIndex:28078},{level:4,title:"Quotation UML Class Diagram",slug:"quotation-uml-class-diagram",normalizedTitle:"quotation uml class diagram",charIndex:28610},{level:4,title:"Quotation Object Definition",slug:"quotation-object-definition",normalizedTitle:"quotation object definition",charIndex:29046},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:37452},{level:3,title:"International Transfer Information Object",slug:"international-transfer-information-object",normalizedTitle:"international transfer information object",charIndex:37475},{level:3,title:"KYC Information Object",slug:"kyc-information-object",normalizedTitle:"kyc information object",charIndex:41031},{level:3,title:"Name Object",slug:"name-object",normalizedTitle:"name object",charIndex:44522},{level:3,title:"Id Document Object",slug:"id-document-object",normalizedTitle:"id document object",charIndex:46072},{level:3,title:"Address Object",slug:"address-object",normalizedTitle:"address object",charIndex:48394},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:49869},{level:3,title:"Quote Object",slug:"quote-object",normalizedTitle:"quote object",charIndex:50778},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:54321},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:55164},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:55991},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:56897},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:57789},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:57806},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:58183},{level:3,title:"ID Types",slug:"id-types",normalizedTitle:"id types",charIndex:58575},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:49869},{level:3,title:"ISO Country Codes",slug:"iso-country-codes",normalizedTitle:"iso country codes",charIndex:65472},{level:3,title:"Delivery Method Types",slug:"delivery-method-types",normalizedTitle:"delivery method types",charIndex:65813}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Accounts APIs Identifying an FSP Account Single Identifier Method Multiple Identifiers Method Account Transactions API Account Transaction UML Class Diagram Account Balances API Account Balance UML Class Diagram Account Balance Object Definition Quotations API Quotation UML Class Diagram Quotation Object Definition Supporting Objects International Transfer Information Object KYC Information Object Name Object Id Document Object Address Object Account Identifiers Object Quote Object Metadata Object Custom Data Object Fees Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types ID Types Account Identifiers ISO Country Codes Delivery Method Types",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nInternational Transfers can be created and viewed using transactions APIs.\n\nThe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Transaction "1" *-- "0..20" Metadata Transaction "1" *-- "0..2" KYC Information Transaction "1" *-- "0..1" International Transfer Information KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name\n\nFigure 2‑1 Transaction UML Class Diagram\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                              \nName                                         Type        Description                                                           Reference                        Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                     \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers              creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                     debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers              debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                     If creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                     Enumeration = Transaction Types\n                                                         the URL)                                                       ← M\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                     \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                     Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                     Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                     \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                     \n                                                         was initiated.                                                 ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                     \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                         Provider                                                       ← O\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                                     \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                         populate additional transaction fields.                        ← O\n\n\n# Reversals API\n\nThe Reversals API is used to reverse an international transfer. The originating transaction reference must be provided in the path in order to identify the payment to be reversed. For a partial reversal, the amount needs to be supplied.\n\nFor viewing reversals, the Transactions API should be used. For performing a reversal without the original transaction reference, use the Transactions API.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Credit Party Identifier "0..10" --* "" Reversal Debit Party Identifier "0..10" --* "" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\nFigure 2‑2 Reversal UML Class Diagram\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                          TYPE        DESCRIPTION                                                           REFERENCE                        VALIDATION\ntransactionReference                          string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                          the response by API provider.                                  ← M\nrequesting OrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                          to be associated with the transaction.                         ← O\noriginalTransactionReference                  string      For reversals and refunds, this field indicates the            → NA                                    \n                                                          transaction which is the subject of the reversal.              ← M\ncreditParty                                   array       A series of key/value pairs that enable the credit party to    → O    Account Identifiers              \n                                                          be identified. Keys include MSISDN and Wallet Identifier.      ← O\ndebitParty                                    array       A collection of key/value pairs that enable the debit party    → O    Account Identifiers              \n                                                          to be identified. Keys include MSISDN and Wallet Identifier.   ← O\ntype                                          string      The harmonised Transaction Type                                → M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                         ← M                                     Refunds (adjustments) are supported.\nsubType                                       string      A non-harmonised sub-classification of the type of             → O                                     \n                                                          transaction. Values are not fixed, and usage will vary         ← O\n                                                          according to Provider.\ntransactionStatus                             string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                          provider.                                                      ← M\namount                                        string      The transaction Amount.                                        → O                                     Please refer to API Fundamentals document for amount\n                                                                                                                         ← O                                     validation rules.\ncurrency                                      string      Currency of the transaction amount.                            → O                                     Enumeration = ISO Currency Codes\n                                                                                                                         ← O\ndescriptionText                               string      Free format text description of the transaction provided by    → O                                     \n                                                          the client. This can be provided as a reference for the        ← O\n                                                          receiver on a notification SMS and on an account statement.\nfees                                          array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                          to the transaction.                                            ← O\ngeoCode                                       string      Indicates the geographic location from where the transaction   → O                                     \n                                                          was initiated.                                                 ← O\nrequestingOrganisation                        object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                         ← O\nservicingIdentity                             string      The field is used to identify the servicing identity for       → O                                     \n                                                          transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                            string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                          may differ from the Transaction Reference.                     ← O\ncreationDate                                  date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                          Provider.                                                      ← O\nmodificationDate                              date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                          Provider.                                                      ← O\nrequestDate                                   date-time   The date and time of the transaction request as supplied by    → O                                     \n                                                          the client.                                                    ← O\ncustomData                                    string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                          provider specific fields.                                      ← O\nmetadata                                      array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                          populate additional properties that describe administrative    ← O\n                                                          information regarding the transaction.\n\n\n# Accounts APIs\n\nUsing account APIs, a sending FSP can:\n\n * View transfers for their account.\n * View their account balance.\n\n# Identifying an FSP Account\n\nTwo methods are provided for identifying an FSP account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifierType}/{identifier}.\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3}.\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Account Transactions API\n\nAn FSP should use this API to return a list of payments against their account. One of the following paths can be used:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram ID Document "0..10" --* "1" KYC Information Address "0..1" --* "1" KYC Information Name "0..1" --* "1" KYC Information Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction KYC Information "0..2" --* "1" Transaction Metadata "0..20" --* "1" Transaction International TransferInformation "0..1" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2‑3 Account Transaction UML Class Diagram\n\n\n# Account Balances API\n\nUsing the Account Balances API, an FSP can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the FSP account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram Account Balance "1" --* "1" Account\n\nFigure 2‑4 Account Balance UML Class Diagram\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                           REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    → NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    ← O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                → NA               Please refer to API Fundamentals document for amount\n                                                                                           ← O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        → NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    ← O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    → NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       ← O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       → NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← O                validation rules.\ncurrency           string   Currency for all returned balances.                            → NA               Enumeration = ISO Currency Codes\n                                                                                           ← O\n\n\n# Quotations API\n\nThe quotations APIs are used by the sending FSP to obtain an international transfer quotation from the receiving FSP. The generated quotation can include any fees that will be levied and will include the forex rate.\n\nWhere a sending FSP is connecting via a hub, the hub can generate and return a quotation containing multiple quotes for multiple potential receiving FSPs.\n\nThe following paths are permitted:\n\n * Creation of a quotation: POST /quotations\n * View a quotation: GET /quotations/{Quotation Reference}\n\n# Quotation UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Quotation Debit Party Identifier "1..10" --* "1" Quotation Metadata "0..20" --* "1" Quotation Quotation "1" *-- "0..2" KYC Information Quotation "1" *-- "0..1" Quote KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name Quote "1" *-- "0..20" Fee\n\nFigure 2‑5 Quotation UML Class Diagram\n\n# Quotation Object Definition\n\n{\n  "quotationReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "quotationStatus": "completed",\n  "requestAmount": "123.45",\n  "requestCurrency": "GBP",\n  "availableDeliveryMethod": "directtoaccount",\n  "chosenDeliveryMethod": "personaldelivery",\n  "originCountry": "GB",\n  "receivingCountry": "IE",\n  "quotes": [\n    {\n      "quoteId": "123456789",\n      "receivingAmount": "123.45",\n      "receivingCurrency": "GBP",\n      "sendingAmount": "123.45",\n      "sendingCurrency": "GBP"\n    }\n  ],\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "recipientBlockingReason": "No supported currency...",\n  "senderBlockingReason": "Not enough funds...",\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "sendingServiceProviderCountry": "GB",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nQUOTATION OBJECT DEFINITION                                                                                                                 \nName                            Type        Description                                                           Reference                 Validation\nquotationReference              string      Unique reference for the quotation as provided by the API      → NA                             \n                                            Provider.                                                      ← M\ncreditParty                     array       A series of key/value pairs that enable the credit party to    → M    Account Identifiers       \n                                            be identified. Keys include MSISDN and Wallet Identifier.      ← M\ndebitParty                      array       A collection of key/value pairs that enable the debit party    → M    Account Identifiers       \n                                            to be identified. Keys include MSISDN and Wallet Identifier.   ← M\ntype                            string      The transaction type that the quotation has been requested     → O                              Enumeration = Transaction Types\n                                            for.                                                           ← O\nsubtype                         string      The transaction sub-type that the quotation has been           → O                              \n                                            requested for.                                                 ← O\nquotationStatus                 string      Indicates the creation state of the quotation.                 → NA                             Enumeration = pending, rejected, completed\n                                                                                                           ← O\nrequestAmount                   string      Requested Quotation amount.                                    → M                              Please refer to API Fundamentals document for amount\n                                                                                                           ← M                              validation rules.\nrequestCurrency                 string      Currency of the requested quotation amount.                    → M                              Enumeration = ISO Currency Codes\n                                                                                                           ← M\navailableDeliveryMethod         string      Delivery Method that is possible for the intended recipient.   → NA                             Enumeration = Delivery Method\n                                                                                                           ← O\nchosenDeliveryMethod            string      The delivery method chosen by the sending end user as the      → O                              Enumeration = Delivery Method\n                                            specific delivery method to be used in the quotes received.    ← O\noriginCountry                   string      The originating country of the quotation request, i.e. the     → O                              \n                                            country where the request was initiated.                       ← O\nreceivingCountry                string      Destination country of the quotation request, i.e. the         → O                              \n                                            country that the sender wishes to send to.                     ← O\nquotes                          array       A collection of quotes. A quote can be received from a         → NA   Quotes                    \n                                            single receiving financial service provider or from multiple   ← O\n                                            providers.\nrecipientKyc                    object      A collection of fields detailing the KYC of the transaction    → O    KYC Information           \n                                            recipient, typically used for International Transfers.         ← O\nsenderKyc                       object      A collection of fields detailing the KYC of the transaction    → O    KYC Information           \n                                            sender, typically used for International Transfers.            ← O\nrecipientBlockingReason         string      The reason for blocking the quotation, based on AML checks     → NA                             \n                                            on the recipient.                                              ← O\nsenderBlockingReason            string      The reason for blocking the quotation, based on AML checks     → NA                             \n                                            on the sender.                                                 ← O\nrequestingOrganisation          object      The originating organisation of the request.                   → NA   Requesting Organisation   \n                                                                                                           ← O\nsendingServiceProviderCountry   string      The country of the sending service provider that holds the     → O                              \n                                            account of the sender.                                         ← O\ncreationDate                    date-time   Date and time when the quotation was created by the API        → NA                             \n                                            Provider.                                                      ← O\nmodificationDate                date-time   Date and time when the quotation was modified by the API       → NA                             \n                                            Provider.                                                      ← O\nrequestDate                     date-time   The date and time of the quotation request as supplied by      → O                              \n                                            the client.                                                    ← O\ncustomData                      string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                            provider specific fields.                                      ← O\nmetadata                        array       A collection of key/value pairs. These can be used to          → O    Metadata                  \n                                            populate additional properties that describe administrative    ← O\n                                            information regarding the quotation.\n\n\n# Supporting Objects\n\n\n# International Transfer Information Object\n\nThe International Transfer Information object contains details that are specific to international money transfers.\n\n{\n  "quotationReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "quoteId": "123456789",\n  "originCountry": "GB",\n  "deliveryMethod": "personaldelivery",\n  "receivingCountry": "IE",\n  "relationshipSender": "Household",\n  "recipientBlockingReason": "ID card is expired...",\n  "senderBlockingReason": "Address must be provided...",\n  "remittancePurpose": "Commission...",\n  "sendingServiceProviderCountry": "GB"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nINTERNATIONAL TRANSFER INFORMATION OBJECT                                                                                              \nName                                        Type     Description                                                           Reference   Validation\nquotationReference                          string   Reference for the quotation that was provided to the sender.   → O                \n                                                     (refer to Quotations API for more information).                ← O\nquoteId                                     string   The specific quote associated with the quotation (refer to     → O                \n                                                     Quotes object for more information).                           ← O\noriginCountry                               string   The originating country of the transaction, i.e. the country   → M                Enumeration = ISO Country Codes.\n                                                     where the transaction was initiated.                           ← M\ndeliveryMethod                              string   The recipient delivery method as chosen by the sender.         → O                Enumeration = Delivery Method Types\n                                                                                                                    ← O\nreceivingCountry                            string   Destination country of the international transfer.             → O                \n                                                                                                                    ← O\nrelationshipSender                          string   Indicates the relationship (if any) between the sender and     → O                \n                                                     the receiver.                                                  ← O\nrecipientBlockingReason                     string   The reason for blocking the transaction, based on AML checks   → NA               \n                                                     on the recipient.                                              ← O\nsenderBlockingReason                        string   The reason for blocking the transaction, based on AML checks   → NA               \n                                                     on the sender.                                                 ← O\nremittancePurpose                           string   field providing a description of the reason for the            → O                \n                                                     international transfer.                                        ← O\nsendingServiceProviderCountry               string   The country of the sending service provider that holds the     → O                \n                                                     account of the sender.                                         ← O\n\n\n# KYC Information Object\n\nKYC refers to ‘Know your Customer’. The KYC object contains a number of fields that enable the identity of subject to be verified. KYC is typically provided for international transfers for the sending identity and the receiving identity. There are no mandatory KYC object fields.\n\n{\n  "birthCountry": "GB",\n  "dateOfBirth": "2000-11-20",\n  "contactPhone": "+1234567890",\n  "emailAddress": "example@mail.com",\n  "employerName": "Employer LLC",\n  "gender": "m",\n  "idDocument": [\n    {\n      "idType": "passport",\n      "idNumber": "TEST123456"\n    }\n  ],\n  "nationality": "GB",\n  "postalAddress": {\n    "addressLine1": "33 Brow Rd",\n    "addressLine2": "Unit 200",\n    "addressLine3": "Paddock",\n    "city": "Huddersfield",\n    "stateProvince": "West Yorkshire",\n    "postalCode": "HD1 4TP",\n    "country": "GB"\n  },\n  "occupation": "Manager",\n  "subjectName": {\n    "title": "Mr",\n    "firstName": "John",\n    "middleName": "Alan",\n    "lastName": "Doe",\n    "fullName": "John Alan Doe",\n    "nativeName": "John Doe"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME            TYPE     DESCRIPTION                                                     REFERENCE     VALIDATION\nbirthCountry    string   The country of birth of the KYC subject.                    O                 Enumeration = ISO Country Codes\n                                                                                     O\ndateOfBirth     date     Birth date of the KYC subject.                              O                 \n                                                                                     O\ncontactPhone    string   Contact phone number (mobile or landline) of the KYC        O                 Must contain between 6 and 15 consecutive digits\n                         subject.                                                    O                 First character can contain a ‘+’ or digit\n                                                                                                       Can contain spaces.\nemailAddress    string   Email address of the KYC subject.                           O                 \n                                                                                     O\nemployerName    string   Employer name of the KYC subject.                           O                 \n                                                                                     O\ngender          string   Gender of the KYC Object.                                   O                 Length=1, Enumeration = (m)ale, (f)emale, (u)nspecified\n                                                                                     O\nidDocument      array    An array of fields containing the forms of identification   O   Id Document   \n                         that are associated with the subject.                       O\nnationality     string   Nationality of the KYC subject.                             O                 Enumeration = ISO Country Codes\n                                                                                     O\npostalAddress   object   A collection of fields that details the postal address of   O   Address       \n                         the KYC subject.                                            O\noccupation      string   Occupation of the KYC subject.                              O                 \n                                                                                     O\n\n\n# Name Object\n\nThe name object identifies the name details for the subject identity.\n\n{\n  "title": "Mr",\n  "firstName": "John",\n  "middleName": "Alan",\n  "lastName": "Doe",\n  "fullName": "John Alan Doe",\n  "nativeName": "John Doe"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME         TYPE     DESCRIPTION                                                        REFERENCE   VALIDATION\ntitle        string   The given title of the KYC subject, e.g. Mr, Mrs, Dr.          O               \n                                                                                     O\nfirstName    string   First name (also referred to as given name) of the KYC         O               \n                      subject.                                                       O\nmiddleName   string   Middle Name of the KYC subject.                                O               \n                                                                                     O\nlastName     string   Surname (also referred to as last or family name) of the KYC   O               \n                      subject.                                                       O\nfullName     string   The full name of the KYC subject.                              O               \n                                                                                     O\nnativeName   string   The full name expressed as in the native language.             O               \n                                                                                     O\n\n\n# Id Document Object\n\nAs part of KYC information, identification documentation is normally required. The Id Document Object enables documents pertaining to a subject’s identity to be described.\n\n{\n  "idType": "passport",\n  "idNumber": "TEST123456",\n  "issueDate": "2018-11-20",\n  "expiryDate ": "2018-11-20",\n  "issuer": "123456789",\n  "issuerPlace": "London",\n  "issuerCountry": "GB",\n  "otherIdDescription": "Other ID description..."\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                 TYPE     DESCRIPTION                                                        REFERENCE   VALIDATION\nidType               string   Indicates the type of identification for the KYC subject,      M               Enumeration = ID Types\n                              e.g. passport, driving licence etc.                            M\nidNumber             string   Reference pertaining to the type of identification for the     O               \n                              KYC subject.                                                   O\nissueDate            date     Date of issue for the identification document.                 O               \n                                                                                             O\nexpiryDate           date     Date of expiry for the identification document.                O               \n                                                                                             O\nissuer               string   Indicates the organisation/government entity that issued the   O               \n                              ID document.                                                   O\nissuerPlace          string   Place of issue for the identification type.                    O               \n                                                                                             O\nissuerCountry        string   Country where the identification type was issued.              O               Enumeration = ISO Country Codes\n                                                                                             O\notherIdDescription   string   Where an ID Type of ‘otherid’ is specified, a description of   O               \n                              the type of identification can be provided in this field.      O\n\n\n# Address Object\n\nThe address object holds the postal address of the subject. Due to variability of address information in a number of mobile money markets, only country is mandatory.\n\n{\n  "addressLine1": "33 Brow Rd",\n  "addressLine2": "Unit 200",\n  "addressLine3": "Paddock",\n  "city": "Huddersfield",\n  "stateProvince": "West Yorkshire",\n  "postalCode": "HD1 4TP",\n  "country": "GB"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME            TYPE     DESCRIPTION                       REFERENCE   VALIDATION\naddressLine1    string   First line of the address.    O               \n                                                       O\naddressLine2    string   Second line of the address.   O               \n                                                       O\naddressLine3    string   Third line of the address.    O               \n                                                       O\ncity            string   City/Town.                    O               \n                                                       O\nstateProvince   string   State or Province.            O               \n                                                       O\npostalCode      string   Postal Code.                  O               \n                                                       O\ncountry         string   Country                       M               Enumeration = ISO Country Codes\n                                                       M\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                       REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         M               Enumeration = Account Identifiers\n                                                               M\nvalue   string   Provides the account identifier type value.   M               \n                                                               M\n\n\n# Quote Object\n\nQuotations can consist of multiple quotes. The fields for a quote are defined in the object.\n\n{\n  "quoteId": "123456789",\n  "receivingAmount": "123.45",\n  "receivingCurrency": "GBP",\n  "sendingAmount": "123.45",\n  "sendingCurrency": "GBP",\n  "deliveryMethod": "personaldelivery",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "fxRate": "1.0000000000",\n  "quoteExpiryTime": "2017-07-21T17:32:28Z",\n  "receivingServiceProvider": "Receiving FSP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nQUOTE OBJECT                                                                                                               \nName                       Type        Description                                                           Reference     Validation\nquoteId                    string      The unique ID for this quote.                                  → NA                 \n                                                                                                      ← M\nreceivingAmount            string      The total amount as it will be received by the receiving end   → NA                 Please refer to API Fundamentals document for amount\n                                       user.                                                          ← M                  validation rules.\nreceivingCurrency          string      The currency of the quote.                                     → NA                 Enumeration = ISO Currency Codes\n                                                                                                      ← M\nsendingAmount              string      Requested quotation amount as supplied by the sender.          → NA                 Please refer to API Fundamentals document for amount\n                                                                                                      ← M                  validation rules.\nsendingCurrency            string      Currency of the requested quotation amount.                    → NA                 Enumeration = ISO Currency Codes\n                                                                                                      ← M\ndeliveryMethod             string      The delivery method that is applicable to the quotation.       → NA                 Enumeration = Delivery Method\n                                                                                                      ← O\nfees                       array       Returns all fees that are applicable to the quote.             → NA   Fees Object   \n                                                                                                      ← O\nfxRate                     string      The conversion rate applicable between the sending and the     → NA                 Please refer to API Fundamentals document for amount\n                                       receiving currency for the requested transaction.              ← O                  validation rules. Note 10 decimal places supported.\nquoteExpiryTime            date-time   The timestamp when the quote will expire.                      → NA                 \n                                                                                                      ← O\nreceivingServiceProvider   string      The name of the receiving service provider, i.e. the           → NA                 \n                                       provider that the quote is associated with.                    ← O\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                   REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  M               \n                                                                 M\nfeeAmount     string   Defines the amount of the fee.            M               Please refer to API Fundamentals document for amount\n                                                                 M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   M               Enumeration = ISO Currency Codes\n                                                                 M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE          DESCRIPTION\ninttransfer   Transfer of funds to a recipient in another country, either\n              directly to/from a mobile wallet or via an international\n              money transfer provider.\nreversal      Reversal of a prior transaction to return funds to the\n              payer.\n\n\n# ID Types\n\nThe ID Types enumeration contains accepted identification types. Due to the wide international variation in accepted types of identification, a catch-all type of ‘otherid’ is included.\n\nID TYPE                DESCRIPTION\npassport               Payment of bill from a business for goods and/or services.\nnationalregistration   National Registration Number.\nothered                Catch-all for IDs not on the list.\ndrivinglicence         Driving Licence Number.\nsocialsecurity         Social Security Number.\nalienregistration      Alien Registration ID.\nnationalidcard         National Identity Card.\nemployer               Employers Identification.\ntaxid                  Tax Identification Number.\nseniorcitizenscard     Senior Citizens ID Card.\nmarriagecertificate    Marriage Certificate.\nbirthcertificate       Birth Certificate.\nhealthcard             Health Card.\nvotersid               Voters Identification.\nvillageelderletter     Letter of confirmation from village elder.\npancard                Credit/debit card number (Primary Account Number).\nofficialletter         Official letter confirming identity.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.\n\n\n# ISO Country Codes\n\nThe two-character alphabetic code for country as defined by ISO 3166 is to be used for all fields specifying a country or nationality. The full list of codes is maintained by the International Organisation for Standardisation. The list can be obtained via the following website - http://www.iso.org/iso/country_codes.\n\n\n# Delivery Method Types\n\nWhen a customer requests a quotation they are able to specify their preferred method of delivery of the transfer to the recipient. Permitted delivery methods are provided below.\n\nDELIVERY METHOD    DESCRIPTION\ndirecttoaccount    The transfer is to be delivered into the account (wallet) of\n                   the recipient.\nagent              The recipient can visit an agent and get the transferred\n                   funds.\npersonaldelivery   a supplementary service where an authorised person can\n                   deliver the funds, in hand, to the receiving end user.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\ninternational transfers can be created and viewed using transactions apis.\n\nthe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction transaction "1" *-- "0..20" metadata transaction "1" *-- "0..2" kyc information transaction "1" *-- "0..1" international transfer information kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name\n\nfigure 2‑1 transaction uml class diagram\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                              \nname                                         type        description                                                           reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                    \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                     \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers              creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                     debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers              debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                     if creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                     enumeration = transaction types\n                                                         the url)                                                       ← m\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                     \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                    \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                     please refer to api fundamentals document for amount\n                                                                                                                        ← m                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                     enumeration = iso currency codes\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                     \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                     \n                                                         was initiated.                                                 ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                     \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                    \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                    \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                    \n                                                         provider                                                       ← o\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                                     \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                         populate additional transaction fields.                        ← o\n\n\n# reversals api\n\nthe reversals api is used to reverse an international transfer. the originating transaction reference must be provided in the path in order to identify the payment to be reversed. for a partial reversal, the amount needs to be supplied.\n\nfor viewing reversals, the transactions api should be used. for performing a reversal without the original transaction reference, use the transactions api.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram credit party identifier "0..10" --* "" reversal debit party identifier "0..10" --* "" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\nfigure 2‑2 reversal uml class diagram\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                          type        description                                                           reference                        validation\ntransactionreference                          string      unique reference for the transaction. this is returned in      → na                                    \n                                                          the response by api provider.                                  ← m\nrequesting organisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                          to be associated with the transaction.                         ← o\noriginaltransactionreference                  string      for reversals and refunds, this field indicates the            → na                                    \n                                                          transaction which is the subject of the reversal.              ← m\ncreditparty                                   array       a series of key/value pairs that enable the credit party to    → o    account identifiers              \n                                                          be identified. keys include msisdn and wallet identifier.      ← o\ndebitparty                                    array       a collection of key/value pairs that enable the debit party    → o    account identifiers              \n                                                          to be identified. keys include msisdn and wallet identifier.   ← o\ntype                                          string      the harmonised transaction type                                → m                                     enumeration = transaction types note that only reversals and\n                                                                                                                         ← m                                     refunds (adjustments) are supported.\nsubtype                                       string      a non-harmonised sub-classification of the type of             → o                                     \n                                                          transaction. values are not fixed, and usage will vary         ← o\n                                                          according to provider.\ntransactionstatus                             string      indicates the status of the transaction as stored by the api   → na                                    \n                                                          provider.                                                      ← m\namount                                        string      the transaction amount.                                        → o                                     please refer to api fundamentals document for amount\n                                                                                                                         ← o                                     validation rules.\ncurrency                                      string      currency of the transaction amount.                            → o                                     enumeration = iso currency codes\n                                                                                                                         ← o\ndescriptiontext                               string      free format text description of the transaction provided by    → o                                     \n                                                          the client. this can be provided as a reference for the        ← o\n                                                          receiver on a notification sms and on an account statement.\nfees                                          array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                          to the transaction.                                            ← o\ngeocode                                       string      indicates the geographic location from where the transaction   → o                                     \n                                                          was initiated.                                                 ← o\nrequestingorganisation                        object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                         ← o\nservicingidentity                             string      the field is used to identify the servicing identity for       → o                                     \n                                                          transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                            string      transaction receipt number as notified to the parties. this    → na                                    \n                                                          may differ from the transaction reference.                     ← o\ncreationdate                                  date-time   date and time when the transaction was created by the api      → na                                    \n                                                          provider.                                                      ← o\nmodificationdate                              date-time   date and time when the transaction was modified by the api     → na                                    \n                                                          provider.                                                      ← o\nrequestdate                                   date-time   the date and time of the transaction request as supplied by    → o                                     \n                                                          the client.                                                    ← o\ncustomdata                                    string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                          provider specific fields.                                      ← o\nmetadata                                      array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                          populate additional properties that describe administrative    ← o\n                                                          information regarding the transaction.\n\n\n# accounts apis\n\nusing account apis, a sending fsp can:\n\n * view transfers for their account.\n * view their account balance.\n\n# identifying an fsp account\n\ntwo methods are provided for identifying an fsp account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifiertype}/{identifier}.\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3}.\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# account transactions api\n\nan fsp should use this api to return a list of payments against their account. one of the following paths can be used:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram id document "0..10" --* "1" kyc information address "0..1" --* "1" kyc information name "0..1" --* "1" kyc information credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction kyc information "0..2" --* "1" transaction metadata "0..20" --* "1" transaction international transferinformation "0..1" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2‑3 account transaction uml class diagram\n\n\n# account balances api\n\nusing the account balances api, an fsp can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the fsp account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram account balance "1" --* "1" account\n\nfigure 2‑4 account balance uml class diagram\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                           reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    → na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    ← o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                → na               please refer to api fundamentals document for amount\n                                                                                           ← o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        → na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    ← o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    → na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       ← o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       → na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← o                validation rules.\ncurrency           string   currency for all returned balances.                            → na               enumeration = iso currency codes\n                                                                                           ← o\n\n\n# quotations api\n\nthe quotations apis are used by the sending fsp to obtain an international transfer quotation from the receiving fsp. the generated quotation can include any fees that will be levied and will include the forex rate.\n\nwhere a sending fsp is connecting via a hub, the hub can generate and return a quotation containing multiple quotes for multiple potential receiving fsps.\n\nthe following paths are permitted:\n\n * creation of a quotation: post /quotations\n * view a quotation: get /quotations/{quotation reference}\n\n# quotation uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" quotation debit party identifier "1..10" --* "1" quotation metadata "0..20" --* "1" quotation quotation "1" *-- "0..2" kyc information quotation "1" *-- "0..1" quote kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name quote "1" *-- "0..20" fee\n\nfigure 2‑5 quotation uml class diagram\n\n# quotation object definition\n\n{\n  "quotationreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "quotationstatus": "completed",\n  "requestamount": "123.45",\n  "requestcurrency": "gbp",\n  "availabledeliverymethod": "directtoaccount",\n  "chosendeliverymethod": "personaldelivery",\n  "origincountry": "gb",\n  "receivingcountry": "ie",\n  "quotes": [\n    {\n      "quoteid": "123456789",\n      "receivingamount": "123.45",\n      "receivingcurrency": "gbp",\n      "sendingamount": "123.45",\n      "sendingcurrency": "gbp"\n    }\n  ],\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "recipientblockingreason": "no supported currency...",\n  "senderblockingreason": "not enough funds...",\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "sendingserviceprovidercountry": "gb",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nquotation object definition                                                                                                                 \nname                            type        description                                                           reference                 validation\nquotationreference              string      unique reference for the quotation as provided by the api      → na                             \n                                            provider.                                                      ← m\ncreditparty                     array       a series of key/value pairs that enable the credit party to    → m    account identifiers       \n                                            be identified. keys include msisdn and wallet identifier.      ← m\ndebitparty                      array       a collection of key/value pairs that enable the debit party    → m    account identifiers       \n                                            to be identified. keys include msisdn and wallet identifier.   ← m\ntype                            string      the transaction type that the quotation has been requested     → o                              enumeration = transaction types\n                                            for.                                                           ← o\nsubtype                         string      the transaction sub-type that the quotation has been           → o                              \n                                            requested for.                                                 ← o\nquotationstatus                 string      indicates the creation state of the quotation.                 → na                             enumeration = pending, rejected, completed\n                                                                                                           ← o\nrequestamount                   string      requested quotation amount.                                    → m                              please refer to api fundamentals document for amount\n                                                                                                           ← m                              validation rules.\nrequestcurrency                 string      currency of the requested quotation amount.                    → m                              enumeration = iso currency codes\n                                                                                                           ← m\navailabledeliverymethod         string      delivery method that is possible for the intended recipient.   → na                             enumeration = delivery method\n                                                                                                           ← o\nchosendeliverymethod            string      the delivery method chosen by the sending end user as the      → o                              enumeration = delivery method\n                                            specific delivery method to be used in the quotes received.    ← o\norigincountry                   string      the originating country of the quotation request, i.e. the     → o                              \n                                            country where the request was initiated.                       ← o\nreceivingcountry                string      destination country of the quotation request, i.e. the         → o                              \n                                            country that the sender wishes to send to.                     ← o\nquotes                          array       a collection of quotes. a quote can be received from a         → na   quotes                    \n                                            single receiving financial service provider or from multiple   ← o\n                                            providers.\nrecipientkyc                    object      a collection of fields detailing the kyc of the transaction    → o    kyc information           \n                                            recipient, typically used for international transfers.         ← o\nsenderkyc                       object      a collection of fields detailing the kyc of the transaction    → o    kyc information           \n                                            sender, typically used for international transfers.            ← o\nrecipientblockingreason         string      the reason for blocking the quotation, based on aml checks     → na                             \n                                            on the recipient.                                              ← o\nsenderblockingreason            string      the reason for blocking the quotation, based on aml checks     → na                             \n                                            on the sender.                                                 ← o\nrequestingorganisation          object      the originating organisation of the request.                   → na   requesting organisation   \n                                                                                                           ← o\nsendingserviceprovidercountry   string      the country of the sending service provider that holds the     → o                              \n                                            account of the sender.                                         ← o\ncreationdate                    date-time   date and time when the quotation was created by the api        → na                             \n                                            provider.                                                      ← o\nmodificationdate                date-time   date and time when the quotation was modified by the api       → na                             \n                                            provider.                                                      ← o\nrequestdate                     date-time   the date and time of the quotation request as supplied by      → o                              \n                                            the client.                                                    ← o\ncustomdata                      string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                            provider specific fields.                                      ← o\nmetadata                        array       a collection of key/value pairs. these can be used to          → o    metadata                  \n                                            populate additional properties that describe administrative    ← o\n                                            information regarding the quotation.\n\n\n# supporting objects\n\n\n# international transfer information object\n\nthe international transfer information object contains details that are specific to international money transfers.\n\n{\n  "quotationreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "quoteid": "123456789",\n  "origincountry": "gb",\n  "deliverymethod": "personaldelivery",\n  "receivingcountry": "ie",\n  "relationshipsender": "household",\n  "recipientblockingreason": "id card is expired...",\n  "senderblockingreason": "address must be provided...",\n  "remittancepurpose": "commission...",\n  "sendingserviceprovidercountry": "gb"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ninternational transfer information object                                                                                              \nname                                        type     description                                                           reference   validation\nquotationreference                          string   reference for the quotation that was provided to the sender.   → o                \n                                                     (refer to quotations api for more information).                ← o\nquoteid                                     string   the specific quote associated with the quotation (refer to     → o                \n                                                     quotes object for more information).                           ← o\norigincountry                               string   the originating country of the transaction, i.e. the country   → m                enumeration = iso country codes.\n                                                     where the transaction was initiated.                           ← m\ndeliverymethod                              string   the recipient delivery method as chosen by the sender.         → o                enumeration = delivery method types\n                                                                                                                    ← o\nreceivingcountry                            string   destination country of the international transfer.             → o                \n                                                                                                                    ← o\nrelationshipsender                          string   indicates the relationship (if any) between the sender and     → o                \n                                                     the receiver.                                                  ← o\nrecipientblockingreason                     string   the reason for blocking the transaction, based on aml checks   → na               \n                                                     on the recipient.                                              ← o\nsenderblockingreason                        string   the reason for blocking the transaction, based on aml checks   → na               \n                                                     on the sender.                                                 ← o\nremittancepurpose                           string   field providing a description of the reason for the            → o                \n                                                     international transfer.                                        ← o\nsendingserviceprovidercountry               string   the country of the sending service provider that holds the     → o                \n                                                     account of the sender.                                         ← o\n\n\n# kyc information object\n\nkyc refers to ‘know your customer’. the kyc object contains a number of fields that enable the identity of subject to be verified. kyc is typically provided for international transfers for the sending identity and the receiving identity. there are no mandatory kyc object fields.\n\n{\n  "birthcountry": "gb",\n  "dateofbirth": "2000-11-20",\n  "contactphone": "+1234567890",\n  "emailaddress": "example@mail.com",\n  "employername": "employer llc",\n  "gender": "m",\n  "iddocument": [\n    {\n      "idtype": "passport",\n      "idnumber": "test123456"\n    }\n  ],\n  "nationality": "gb",\n  "postaladdress": {\n    "addressline1": "33 brow rd",\n    "addressline2": "unit 200",\n    "addressline3": "paddock",\n    "city": "huddersfield",\n    "stateprovince": "west yorkshire",\n    "postalcode": "hd1 4tp",\n    "country": "gb"\n  },\n  "occupation": "manager",\n  "subjectname": {\n    "title": "mr",\n    "firstname": "john",\n    "middlename": "alan",\n    "lastname": "doe",\n    "fullname": "john alan doe",\n    "nativename": "john doe"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname            type     description                                                     reference     validation\nbirthcountry    string   the country of birth of the kyc subject.                    o                 enumeration = iso country codes\n                                                                                     o\ndateofbirth     date     birth date of the kyc subject.                              o                 \n                                                                                     o\ncontactphone    string   contact phone number (mobile or landline) of the kyc        o                 must contain between 6 and 15 consecutive digits\n                         subject.                                                    o                 first character can contain a ‘+’ or digit\n                                                                                                       can contain spaces.\nemailaddress    string   email address of the kyc subject.                           o                 \n                                                                                     o\nemployername    string   employer name of the kyc subject.                           o                 \n                                                                                     o\ngender          string   gender of the kyc object.                                   o                 length=1, enumeration = (m)ale, (f)emale, (u)nspecified\n                                                                                     o\niddocument      array    an array of fields containing the forms of identification   o   id document   \n                         that are associated with the subject.                       o\nnationality     string   nationality of the kyc subject.                             o                 enumeration = iso country codes\n                                                                                     o\npostaladdress   object   a collection of fields that details the postal address of   o   address       \n                         the kyc subject.                                            o\noccupation      string   occupation of the kyc subject.                              o                 \n                                                                                     o\n\n\n# name object\n\nthe name object identifies the name details for the subject identity.\n\n{\n  "title": "mr",\n  "firstname": "john",\n  "middlename": "alan",\n  "lastname": "doe",\n  "fullname": "john alan doe",\n  "nativename": "john doe"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname         type     description                                                        reference   validation\ntitle        string   the given title of the kyc subject, e.g. mr, mrs, dr.          o               \n                                                                                     o\nfirstname    string   first name (also referred to as given name) of the kyc         o               \n                      subject.                                                       o\nmiddlename   string   middle name of the kyc subject.                                o               \n                                                                                     o\nlastname     string   surname (also referred to as last or family name) of the kyc   o               \n                      subject.                                                       o\nfullname     string   the full name of the kyc subject.                              o               \n                                                                                     o\nnativename   string   the full name expressed as in the native language.             o               \n                                                                                     o\n\n\n# id document object\n\nas part of kyc information, identification documentation is normally required. the id document object enables documents pertaining to a subject’s identity to be described.\n\n{\n  "idtype": "passport",\n  "idnumber": "test123456",\n  "issuedate": "2018-11-20",\n  "expirydate ": "2018-11-20",\n  "issuer": "123456789",\n  "issuerplace": "london",\n  "issuercountry": "gb",\n  "otheriddescription": "other id description..."\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                 type     description                                                        reference   validation\nidtype               string   indicates the type of identification for the kyc subject,      m               enumeration = id types\n                              e.g. passport, driving licence etc.                            m\nidnumber             string   reference pertaining to the type of identification for the     o               \n                              kyc subject.                                                   o\nissuedate            date     date of issue for the identification document.                 o               \n                                                                                             o\nexpirydate           date     date of expiry for the identification document.                o               \n                                                                                             o\nissuer               string   indicates the organisation/government entity that issued the   o               \n                              id document.                                                   o\nissuerplace          string   place of issue for the identification type.                    o               \n                                                                                             o\nissuercountry        string   country where the identification type was issued.              o               enumeration = iso country codes\n                                                                                             o\notheriddescription   string   where an id type of ‘otherid’ is specified, a description of   o               \n                              the type of identification can be provided in this field.      o\n\n\n# address object\n\nthe address object holds the postal address of the subject. due to variability of address information in a number of mobile money markets, only country is mandatory.\n\n{\n  "addressline1": "33 brow rd",\n  "addressline2": "unit 200",\n  "addressline3": "paddock",\n  "city": "huddersfield",\n  "stateprovince": "west yorkshire",\n  "postalcode": "hd1 4tp",\n  "country": "gb"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname            type     description                       reference   validation\naddressline1    string   first line of the address.    o               \n                                                       o\naddressline2    string   second line of the address.   o               \n                                                       o\naddressline3    string   third line of the address.    o               \n                                                       o\ncity            string   city/town.                    o               \n                                                       o\nstateprovince   string   state or province.            o               \n                                                       o\npostalcode      string   postal code.                  o               \n                                                       o\ncountry         string   country                       m               enumeration = iso country codes\n                                                       m\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                       reference   validation\nkey     string   provides the account identifier type.         m               enumeration = account identifiers\n                                                               m\nvalue   string   provides the account identifier type value.   m               \n                                                               m\n\n\n# quote object\n\nquotations can consist of multiple quotes. the fields for a quote are defined in the object.\n\n{\n  "quoteid": "123456789",\n  "receivingamount": "123.45",\n  "receivingcurrency": "gbp",\n  "sendingamount": "123.45",\n  "sendingcurrency": "gbp",\n  "deliverymethod": "personaldelivery",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "fxrate": "1.0000000000",\n  "quoteexpirytime": "2017-07-21t17:32:28z",\n  "receivingserviceprovider": "receiving fsp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nquote object                                                                                                               \nname                       type        description                                                           reference     validation\nquoteid                    string      the unique id for this quote.                                  → na                 \n                                                                                                      ← m\nreceivingamount            string      the total amount as it will be received by the receiving end   → na                 please refer to api fundamentals document for amount\n                                       user.                                                          ← m                  validation rules.\nreceivingcurrency          string      the currency of the quote.                                     → na                 enumeration = iso currency codes\n                                                                                                      ← m\nsendingamount              string      requested quotation amount as supplied by the sender.          → na                 please refer to api fundamentals document for amount\n                                                                                                      ← m                  validation rules.\nsendingcurrency            string      currency of the requested quotation amount.                    → na                 enumeration = iso currency codes\n                                                                                                      ← m\ndeliverymethod             string      the delivery method that is applicable to the quotation.       → na                 enumeration = delivery method\n                                                                                                      ← o\nfees                       array       returns all fees that are applicable to the quote.             → na   fees object   \n                                                                                                      ← o\nfxrate                     string      the conversion rate applicable between the sending and the     → na                 please refer to api fundamentals document for amount\n                                       receiving currency for the requested transaction.              ← o                  validation rules. note 10 decimal places supported.\nquoteexpirytime            date-time   the timestamp when the quote will expire.                      → na                 \n                                                                                                      ← o\nreceivingserviceprovider   string      the name of the receiving service provider, i.e. the           → na                 \n                                       provider that the quote is associated with.                    ← o\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                   reference   validation\nfeetype       string   defines the type of fee.                  m               \n                                                                 m\nfeeamount     string   defines the amount of the fee.            m               please refer to api fundamentals document for amount\n                                                                 m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   m               enumeration = iso currency codes\n                                                                 m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode          description\ninttransfer   transfer of funds to a recipient in another country, either\n              directly to/from a mobile wallet or via an international\n              money transfer provider.\nreversal      reversal of a prior transaction to return funds to the\n              payer.\n\n\n# id types\n\nthe id types enumeration contains accepted identification types. due to the wide international variation in accepted types of identification, a catch-all type of ‘otherid’ is included.\n\nid type                description\npassport               payment of bill from a business for goods and/or services.\nnationalregistration   national registration number.\nothered                catch-all for ids not on the list.\ndrivinglicence         driving licence number.\nsocialsecurity         social security number.\nalienregistration      alien registration id.\nnationalidcard         national identity card.\nemployer               employers identification.\ntaxid                  tax identification number.\nseniorcitizenscard     senior citizens id card.\nmarriagecertificate    marriage certificate.\nbirthcertificate       birth certificate.\nhealthcard             health card.\nvotersid               voters identification.\nvillageelderletter     letter of confirmation from village elder.\npancard                credit/debit card number (primary account number).\nofficialletter         official letter confirming identity.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.\n\n\n# iso country codes\n\nthe two-character alphabetic code for country as defined by iso 3166 is to be used for all fields specifying a country or nationality. the full list of codes is maintained by the international organisation for standardisation. the list can be obtained via the following website - http://www.iso.org/iso/country_codes.\n\n\n# delivery method types\n\nwhen a customer requests a quotation they are able to specify their preferred method of delivery of the transfer to the recipient. permitted delivery methods are provided below.\n\ndelivery method    description\ndirecttoaccount    the transfer is to be delivered into the account (wallet) of\n                   the recipient.\nagent              the recipient can visit an agent and get the transferred\n                   funds.\npersonaldelivery   a supplementary service where an authorised person can\n                   deliver the funds, in hand, to the receiving end user.',charsets:{}},{title:"International Transfers",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"International Transfers"},regularPath:"/use-cases/international-transfers/",relativePath:"use-cases/international-transfers/index.md",key:"v-28c6e45e",path:"/use-cases/international-transfers/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:514}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nThe International Transfer Mobile Money APIs allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                                       USAGE                                                       ROLE\nFSP - Mobile Money Providers                   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive International transfers from other FSPs.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international transfers to other FSPs.\nFSP – International Remittance Organisations   - To understand how to implement the Mobile Money API to    API Provider\n                                               receive international remittances from Mobile Money\n                                               Providers.\n                                               - To understand how to implement the Mobile Money API to    API Consumer\n                                               send international remittances to Mobile Money Providers.\nInternational Transfer Hubs                    - To understand how to implement the Mobile Money APIs to   API Provider\n                                               receive international transfers from FSPs.\n                                               - To understand how to implement the Mobile Money APIs to   API Consumer\n                                               send international transfers to FSPs.",normalizedContent:"# introduction\n\nthe international transfer mobile money apis allow financial service providers to perform cross-border mobile money transfers, including remittances.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                                       usage                                                       role\nfsp - mobile money providers                   - to understand how to implement the mobile money api to    api provider\n                                               receive international transfers from other fsps.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international transfers to other fsps.\nfsp – international remittance organisations   - to understand how to implement the mobile money api to    api provider\n                                               receive international remittances from mobile money\n                                               providers.\n                                               - to understand how to implement the mobile money api to    api consumer\n                                               send international remittances to mobile money providers.\ninternational transfer hubs                    - to understand how to implement the mobile money apis to   api provider\n                                               receive international transfers from fsps.\n                                               - to understand how to implement the mobile money apis to   api consumer\n                                               send international transfers to fsps.",charsets:{}},{title:"International Transfers - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"International Transfers - Open OAS UI"},regularPath:"/use-cases/international-transfers/international-transfers-open-oas-ui.html",relativePath:"use-cases/international-transfers/international-transfers-open-oas-ui.md",key:"v-53ba34b8",path:"/use-cases/international-transfers/international-transfers-open-oas-ui.html",headers:[{level:2,title:"International Transfers - Open OAS UI",slug:"international-transfers-open-oas-ui",normalizedTitle:"international transfers - open oas ui",charIndex:0}],headersStr:"International Transfers - Open OAS UI",content:"# International Transfers - Open OAS UI",normalizedContent:"# international transfers - open oas ui",charsets:{}},{title:"International Transfers - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"International Transfers - Use Case Scenarios"},regularPath:"/use-cases/international-transfers/scenarios/scenarios.html",relativePath:"use-cases/international-transfers/scenarios/scenarios.md",key:"v-413ebbb8",path:"/use-cases/international-transfers/scenarios/scenarios.html",headers:[{level:2,title:"International Transfer via Hub",slug:"international-transfer-via-hub",normalizedTitle:"international transfer via hub",charIndex:599},{level:2,title:"Bilateral International Transfer",slug:"bilateral-international-transfer",normalizedTitle:"bilateral international transfer",charIndex:8025},{level:2,title:"International Transfer Failure",slug:"international-transfer-failure",normalizedTitle:"international transfer failure",charIndex:14358},{level:2,title:"International Transfer Reversal",slug:"international-transfer-reversal",normalizedTitle:"international transfer reversal",charIndex:16089},{level:2,title:"Obtain an FSP Balance",slug:"obtain-an-fsp-balance",normalizedTitle:"obtain an fsp balance",charIndex:17612},{level:2,title:"Retrieve Transactions for an FSP",slug:"retrieve-transactions-for-an-fsp",normalizedTitle:"retrieve transactions for an fsp",charIndex:18219},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:19599},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:20451}],headersStr:"International Transfer via Hub Bilateral International Transfer International Transfer Failure International Transfer Reversal Obtain an FSP Balance Retrieve Transactions for an FSP Check for Service Availability Retrieve a Missing API Response",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# International Transfer via Hub\n\nIn this diagram, a hub is used by the sending FSP to obtain a quotation and perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return the quotation and the confirmation of the transfer.\n\nThis flow can also be used for bilateral international transfers.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../quotations\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestAmount": "75.30",\n    "requestCurrency": "RWF",\n  "requestDate": "2017-07-21T17:32:28Z",\n    "type": "inttransfer",\n    "subType": "abc",\n    "chosenDeliveryMethod": "agent",\n    "senderKyc": {\n        "nationality": "GB",\n        "dateOfBirth": "2000-11-20",\n        "occupation": "Manager",\n        "employerName": "MFX",\n        "contactPhone": "+447125588999",\n        "gender": "m",\n        "emailAddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthCountry": "GB",\n        "idDocument": [\n            {\n                "idType": "nationalidcard",\n                "idNumber": "1234567",\n                "issueDate": "2018-11-20",\n                "expiryDate": "2018-11-20",\n                "issuer": "UKPA",\n                "issuerPlace": "GB",\n                "issuerCountry": "GB",\n                "otherIdDescription": "test"\n            }\n        ],\n        "postalAddress": {\n            "country": "GB",\n            "addressLine1": "111 ABC Street",\n            "city": "New York",\n            "stateProvince": "New York",\n            "postalCode": "ABCD"\n        },\n        "subjectName": {\n            "title": "Mr",\n            "firstName": "Luke",\n            "middleName": "R",\n            "lastName": "Skywalker",\n            "fullName": "Luke R Skywalker",\n            "nativeName": "ABC"\n        }        \n    },    \n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],    \n  "sendingServiceProviderCountry": "AD",\n  "originCountry": "AD",\n  "receivingCountry": "AD"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/inttransfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "100.00",\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "GBP",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationalTransferInformation": {\n        "originCountry": "GB",\n        "quotationReference": "{{quotationReference}}",\n        "quoteId": "{{quoteId}}",\n        "receivingCountry": "RW",\n        "remittancePurpose": "personal",\n        "relationshipSender": "none",\n        "deliveryMethod": "agent",\n        "sendingServiceProviderCountry": "AD"           \n   },    \n    "senderKyc": {\n        "nationality": "GB",\n        "dateOfBirth": "2000-11-20",\n        "occupation": "Manager",\n        "employerName": "MFX",\n        "contactPhone": "+447125588999",\n        "gender": "m",\n        "emailAddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthCountry": "GB",\n        "idDocument": [\n            {\n                "idType": "nationalidcard",\n                "idNumber": "1234567",\n                "issueDate": "2018-11-20",\n                "expiryDate": "2018-11-20",\n                "issuer": "UKPA",\n                "issuerPlace": "GB",\n                "issuerCountry": "GB",\n                "otherIdDescription": "test"\n            }\n        ],\n        "postalAddress": {\n            "country": "GB",\n            "addressLine1": "111 ABC Street",\n            "city": "New York",\n            "stateProvince": "New York",\n            "postalCode": "ABCD"\n        },\n        "subjectName": {\n            "title": "Mr",\n            "firstName": "Luke",\n            "middleName": "R",\n            "lastName": "Skywalker",\n            "fullName": "Luke R Skywalker",\n            "nativeName": "ABC"\n        }        \n     },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "testorganisation"\n  }\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant International Transfer Hub participant Receiving FSP Sending FSP->>International Transfer Hub: POST /quotations activate Sending FSP activate International Transfer Hub activate Receiving FSP Note right of International Transfer Hub: (1) The Sending FSP submits a quotation request to\nthe International Remittance Hub. The Hub will return the\nRequest State object to indicate that the request\nis \'pending\'. International Transfer Hub--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP International Transfer Hub->>Sending FSP: PUT {Callback URL} (Quotations Object) activate Sending FSP Note right of International Transfer Hub: (2) The Hub returns the quotation to the Sending FSP. Sending FSP--\x3e>International Transfer Hub: HTTP 204 deactivate International Transfer Hub deactivate Sending FSP Sending FSP->>International Transfer Hub: POST /transactions/type/inttransfer activate International Transfer Hub activate Sending FSP activate Receiving FSP Note right of International Transfer Hub: (3) Subject to sender confirmation, the Sending FSP submits a transaction\nrequest to the International Remittance Hub. The Hub will return the\nRequest State object to indicate that the request is \'pending\'. International Transfer Hub->>Receiving FSP: POST /transactions/type/inttransfer Note right of Receiving FSP: (4) The Hub in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the\nRequest State object to indicate that the request is\n\'pending\'. Receiving FSP--\x3e>International Transfer Hub: HTTP 202 (Request State Object) International Transfer Hub--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate International Transfer Hub deactivate Sending FSP Receiving FSP->>International Transfer Hub: PUT {Callback URL} (Transactions Object) activate International Transfer Hub activate Sending FSP Note right of Receiving FSP: (5) The FSP informs the Hub that the transaction\nhas been successfully completed by returning\nthe final representation of the transaction. International Transfer Hub--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP International Transfer Hub->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of International Transfer Hub: (6) The Hub in turn informs the Sending FSP that the\ntransaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>International Transfer Hub: HTTP 204 deactivate International Transfer Hub deactivate Sending FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Bilateral International Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to obtain a quotation and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../quotations\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestAmount": "75.30",\n    "requestCurrency": "RWF",\n  "requestDate": "2017-07-21T17:32:28Z",\n    "type": "inttransfer",\n    "subType": "abc",\n    "chosenDeliveryMethod": "agent",\n    "senderKyc": {\n        "nationality": "GB",\n        "dateOfBirth": "2000-11-20",\n        "occupation": "Manager",\n        "employerName": "MFX",\n        "contactPhone": "+447125588999",\n        "gender": "m",\n        "emailAddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthCountry": "GB",\n        "idDocument": [\n            {\n                "idType": "nationalidcard",\n                "idNumber": "1234567",\n                "issueDate": "2018-11-20",\n                "expiryDate": "2018-11-20",\n                "issuer": "UKPA",\n                "issuerPlace": "GB",\n                "issuerCountry": "GB",\n                "otherIdDescription": "test"\n            }\n        ],\n        "postalAddress": {\n            "country": "GB",\n            "addressLine1": "111 ABC Street",\n            "city": "New York",\n            "stateProvince": "New York",\n            "postalCode": "ABCD"\n        },\n        "subjectName": {\n            "title": "Mr",\n            "firstName": "Luke",\n            "middleName": "R",\n            "lastName": "Skywalker",\n            "fullName": "Luke R Skywalker",\n            "nativeName": "ABC"\n        }        \n    },    \n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],    \n  "sendingServiceProviderCountry": "AD",\n  "originCountry": "AD",\n  "receivingCountry": "AD"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/inttransfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "100.00",\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "GBP",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationalTransferInformation": {\n        "originCountry": "GB",\n        "quotationReference": "{{quotationReference}}",\n        "quoteId": "{{quoteId}}",\n        "receivingCountry": "RW",\n        "remittancePurpose": "personal",\n        "relationshipSender": "none",\n        "deliveryMethod": "agent",\n        "sendingServiceProviderCountry": "AD"           \n   },    \n    "senderKyc": {\n        "nationality": "GB",\n        "dateOfBirth": "2000-11-20",\n        "occupation": "Manager",\n        "employerName": "MFX",\n        "contactPhone": "+447125588999",\n        "gender": "m",\n        "emailAddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthCountry": "GB",\n        "idDocument": [\n            {\n                "idType": "nationalidcard",\n                "idNumber": "1234567",\n                "issueDate": "2018-11-20",\n                "expiryDate": "2018-11-20",\n                "issuer": "UKPA",\n                "issuerPlace": "GB",\n                "issuerCountry": "GB",\n                "otherIdDescription": "test"\n            }\n        ],\n        "postalAddress": {\n            "country": "GB",\n            "addressLine1": "111 ABC Street",\n            "city": "New York",\n            "stateProvince": "New York",\n            "postalCode": "ABCD"\n        },\n        "subjectName": {\n            "title": "Mr",\n            "firstName": "Luke",\n            "middleName": "R",\n            "lastName": "Skywalker",\n            "fullName": "Luke R Skywalker",\n            "nativeName": "ABC"\n        }        \n     },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "testorganisation"\n  }\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: POST /quotations activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP submits a quotation request to the\nReceiving FSP. The Receiving FSP will return the Request\nState object to indicate that the request is \'pending\'. Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Quotations Object) activate Sending FSP Note right of Receiving FSP: (2) The Receiving FSP returns the quotation to the Sending\nFSP. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/inttransfer activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) Subject to sender confirmation, the Sending FSP submits a transaction\nrequest to the Receiving FSP. The Receiving FSP will return the Request\nState object to indicate that the request is \'pending\'. Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transactions Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (4) The FSP in turn informs the Sending FSP that the\ntransation has been successfully completed by\nreturning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# International Transfer Failure\n\nThe failure of a transfer is reflected by the return of an error object in the callback from the receiving FSP. The same pattern would also apply to a quotation failure.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: POST /quotations activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP submits a quotation request to the\nReceiving FSP. The Receiving FSP will return the Request\nState object to indicate that the request is \'pending\'. Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Quotations Object) activate Sending FSP Note right of Receiving FSP: (2) The Receiving FSP returns the quotation to the Sending\nFSP. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/inttransfer activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) Subject to sender confirmation, the Sending FSP submits a transaction\nrequest to the Receiving FSP. The Receiving FSP will return the Request\nState object to indicate that the request is \'pending\'. Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Error Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (4) The FSP in turn informs the Sending FSP that the\ntransation has been failed by returning an Error\nobject containing the reason for failure. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP\n\n\n# International Transfer Reversal\n\nIn some failure scenarios, a transfer may need to be reversed. This diagram illustrates an reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/{original transaction reference}/reversals activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP submits the reversal request for\nprocessing to the Receiving FSP - passing the reference of\nthe transaction that is to be reversed. The Receiving FSP\nwill return the Request State object to indicate the the\nrequest is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) Receiving FSP->>Sending FSP: PUT {Callback URL} (Reversal Object) Note right of Receiving FSP: (2) The Receiving FSP informs the Sending FSP\nthat the reversal has been successully\ncompleted by returning the final representation\nof the reversal transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain an FSP Balance\n\n \n\n\nGET .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/balance activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) Obtain the balance of the\nReceiving FSP\'s account with\nthe Sending FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Balance Object) deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Transactions for an FSP\n\nThis diagram illustrates use of a cursor mechanism to retrieve all transactions for a sending FSP via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP requests up to 20\ntransactions for their account from\nthe Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of Receiving FSP: (2) The Receiving FSP returns an array\nof 20 transactions and indicates via a\nresponse header that there are 40\nrecords available in total. Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of Receiving FSP: (3) The Sending FSP requests the\nremaining transactions from the\naccount from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the FSP is in a state that enables a client to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /heartbeat activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP requests the\navailability of the service from the\nReceiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Heartbeat Object) Note right of Receiving FSP: (2) The Receiving FSP returns the\navailability of the service - available,\nunavailable or degraded. deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the sending FSP to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the receiving FSP.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /responses{clientCorrelationId} activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) Using the Sending FSP\'s\nclientCorrelationId, a request for the\nmissing API response is sent. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Responses Object) Note right of Receiving FSP: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Sending FSP->>Receiving FSP: GET /{link} Note right of Receiving FSP: (3) The Sending FSP uses the link to\nobtain a representation of the missing\nresource. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Requested Object) deactivate Receiving FSP deactivate Sending FSP\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# international transfer via hub\n\nin this diagram, a hub is used by the sending fsp to obtain a quotation and perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return the quotation and the confirmation of the transfer.\n\nthis flow can also be used for bilateral international transfers.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../quotations\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestamount": "75.30",\n    "requestcurrency": "rwf",\n  "requestdate": "2017-07-21t17:32:28z",\n    "type": "inttransfer",\n    "subtype": "abc",\n    "chosendeliverymethod": "agent",\n    "senderkyc": {\n        "nationality": "gb",\n        "dateofbirth": "2000-11-20",\n        "occupation": "manager",\n        "employername": "mfx",\n        "contactphone": "+447125588999",\n        "gender": "m",\n        "emailaddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthcountry": "gb",\n        "iddocument": [\n            {\n                "idtype": "nationalidcard",\n                "idnumber": "1234567",\n                "issuedate": "2018-11-20",\n                "expirydate": "2018-11-20",\n                "issuer": "ukpa",\n                "issuerplace": "gb",\n                "issuercountry": "gb",\n                "otheriddescription": "test"\n            }\n        ],\n        "postaladdress": {\n            "country": "gb",\n            "addressline1": "111 abc street",\n            "city": "new york",\n            "stateprovince": "new york",\n            "postalcode": "abcd"\n        },\n        "subjectname": {\n            "title": "mr",\n            "firstname": "luke",\n            "middlename": "r",\n            "lastname": "skywalker",\n            "fullname": "luke r skywalker",\n            "nativename": "abc"\n        }        \n    },    \n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],    \n  "sendingserviceprovidercountry": "ad",\n  "origincountry": "ad",\n  "receivingcountry": "ad"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/inttransfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "100.00",\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "gbp",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationaltransferinformation": {\n        "origincountry": "gb",\n        "quotationreference": "{{quotationreference}}",\n        "quoteid": "{{quoteid}}",\n        "receivingcountry": "rw",\n        "remittancepurpose": "personal",\n        "relationshipsender": "none",\n        "deliverymethod": "agent",\n        "sendingserviceprovidercountry": "ad"           \n   },    \n    "senderkyc": {\n        "nationality": "gb",\n        "dateofbirth": "2000-11-20",\n        "occupation": "manager",\n        "employername": "mfx",\n        "contactphone": "+447125588999",\n        "gender": "m",\n        "emailaddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthcountry": "gb",\n        "iddocument": [\n            {\n                "idtype": "nationalidcard",\n                "idnumber": "1234567",\n                "issuedate": "2018-11-20",\n                "expirydate": "2018-11-20",\n                "issuer": "ukpa",\n                "issuerplace": "gb",\n                "issuercountry": "gb",\n                "otheriddescription": "test"\n            }\n        ],\n        "postaladdress": {\n            "country": "gb",\n            "addressline1": "111 abc street",\n            "city": "new york",\n            "stateprovince": "new york",\n            "postalcode": "abcd"\n        },\n        "subjectname": {\n            "title": "mr",\n            "firstname": "luke",\n            "middlename": "r",\n            "lastname": "skywalker",\n            "fullname": "luke r skywalker",\n            "nativename": "abc"\n        }        \n     },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "testorganisation"\n  }\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant international transfer hub participant receiving fsp sending fsp->>international transfer hub: post /quotations activate sending fsp activate international transfer hub activate receiving fsp note right of international transfer hub: (1) the sending fsp submits a quotation request to\nthe international remittance hub. the hub will return the\nrequest state object to indicate that the request\nis \'pending\'. international transfer hub--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp international transfer hub->>sending fsp: put {callback url} (quotations object) activate sending fsp note right of international transfer hub: (2) the hub returns the quotation to the sending fsp. sending fsp--\x3e>international transfer hub: http 204 deactivate international transfer hub deactivate sending fsp sending fsp->>international transfer hub: post /transactions/type/inttransfer activate international transfer hub activate sending fsp activate receiving fsp note right of international transfer hub: (3) subject to sender confirmation, the sending fsp submits a transaction\nrequest to the international remittance hub. the hub will return the\nrequest state object to indicate that the request is \'pending\'. international transfer hub->>receiving fsp: post /transactions/type/inttransfer note right of receiving fsp: (4) the hub in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the\nrequest state object to indicate that the request is\n\'pending\'. receiving fsp--\x3e>international transfer hub: http 202 (request state object) international transfer hub--\x3e>sending fsp: http 202 (request state object) deactivate international transfer hub deactivate sending fsp receiving fsp->>international transfer hub: put {callback url} (transactions object) activate international transfer hub activate sending fsp note right of receiving fsp: (5) the fsp informs the hub that the transaction\nhas been successfully completed by returning\nthe final representation of the transaction. international transfer hub--\x3e>receiving fsp: http 204 deactivate receiving fsp international transfer hub->>sending fsp: put {callback url} (transactions object) note right of international transfer hub: (6) the hub in turn informs the sending fsp that the\ntransaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>international transfer hub: http 204 deactivate international transfer hub deactivate sending fsp\nopen postman collection open postman collection with authentication\n\n\n# bilateral international transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to obtain a quotation and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../quotations\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestamount": "75.30",\n    "requestcurrency": "rwf",\n  "requestdate": "2017-07-21t17:32:28z",\n    "type": "inttransfer",\n    "subtype": "abc",\n    "chosendeliverymethod": "agent",\n    "senderkyc": {\n        "nationality": "gb",\n        "dateofbirth": "2000-11-20",\n        "occupation": "manager",\n        "employername": "mfx",\n        "contactphone": "+447125588999",\n        "gender": "m",\n        "emailaddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthcountry": "gb",\n        "iddocument": [\n            {\n                "idtype": "nationalidcard",\n                "idnumber": "1234567",\n                "issuedate": "2018-11-20",\n                "expirydate": "2018-11-20",\n                "issuer": "ukpa",\n                "issuerplace": "gb",\n                "issuercountry": "gb",\n                "otheriddescription": "test"\n            }\n        ],\n        "postaladdress": {\n            "country": "gb",\n            "addressline1": "111 abc street",\n            "city": "new york",\n            "stateprovince": "new york",\n            "postalcode": "abcd"\n        },\n        "subjectname": {\n            "title": "mr",\n            "firstname": "luke",\n            "middlename": "r",\n            "lastname": "skywalker",\n            "fullname": "luke r skywalker",\n            "nativename": "abc"\n        }        \n    },    \n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ],    \n  "sendingserviceprovidercountry": "ad",\n  "origincountry": "ad",\n  "receivingcountry": "ad"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/inttransfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "100.00",\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "gbp",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationaltransferinformation": {\n        "origincountry": "gb",\n        "quotationreference": "{{quotationreference}}",\n        "quoteid": "{{quoteid}}",\n        "receivingcountry": "rw",\n        "remittancepurpose": "personal",\n        "relationshipsender": "none",\n        "deliverymethod": "agent",\n        "sendingserviceprovidercountry": "ad"           \n   },    \n    "senderkyc": {\n        "nationality": "gb",\n        "dateofbirth": "2000-11-20",\n        "occupation": "manager",\n        "employername": "mfx",\n        "contactphone": "+447125588999",\n        "gender": "m",\n        "emailaddress": "luke.skywalkeraaabbb@gmail.com",\n        "birthcountry": "gb",\n        "iddocument": [\n            {\n                "idtype": "nationalidcard",\n                "idnumber": "1234567",\n                "issuedate": "2018-11-20",\n                "expirydate": "2018-11-20",\n                "issuer": "ukpa",\n                "issuerplace": "gb",\n                "issuercountry": "gb",\n                "otheriddescription": "test"\n            }\n        ],\n        "postaladdress": {\n            "country": "gb",\n            "addressline1": "111 abc street",\n            "city": "new york",\n            "stateprovince": "new york",\n            "postalcode": "abcd"\n        },\n        "subjectname": {\n            "title": "mr",\n            "firstname": "luke",\n            "middlename": "r",\n            "lastname": "skywalker",\n            "fullname": "luke r skywalker",\n            "nativename": "abc"\n        }        \n     },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "testorganisation"\n  }\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: post /quotations activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp submits a quotation request to the\nreceiving fsp. the receiving fsp will return the request\nstate object to indicate that the request is \'pending\'. receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp receiving fsp->>sending fsp: put {callback url} (quotations object) activate sending fsp note right of receiving fsp: (2) the receiving fsp returns the quotation to the sending\nfsp. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/inttransfer activate sending fsp activate receiving fsp note right of receiving fsp: (3) subject to sender confirmation, the sending fsp submits a transaction\nrequest to the receiving fsp. the receiving fsp will return the request\nstate object to indicate that the request is \'pending\'. receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transactions object) activate sending fsp activate receiving fsp note right of receiving fsp: (4) the fsp in turn informs the sending fsp that the\ntransation has been successfully completed by\nreturning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# international transfer failure\n\nthe failure of a transfer is reflected by the return of an error object in the callback from the receiving fsp. the same pattern would also apply to a quotation failure.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: post /quotations activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp submits a quotation request to the\nreceiving fsp. the receiving fsp will return the request\nstate object to indicate that the request is \'pending\'. receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp receiving fsp->>sending fsp: put {callback url} (quotations object) activate sending fsp note right of receiving fsp: (2) the receiving fsp returns the quotation to the sending\nfsp. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/inttransfer activate sending fsp activate receiving fsp note right of receiving fsp: (3) subject to sender confirmation, the sending fsp submits a transaction\nrequest to the receiving fsp. the receiving fsp will return the request\nstate object to indicate that the request is \'pending\'. receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (error object) activate sending fsp activate receiving fsp note right of receiving fsp: (4) the fsp in turn informs the sending fsp that the\ntransation has been failed by returning an error\nobject containing the reason for failure. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp\n\n\n# international transfer reversal\n\nin some failure scenarios, a transfer may need to be reversed. this diagram illustrates an reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: post /transactions/{original transaction reference}/reversals activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp submits the reversal request for\nprocessing to the receiving fsp - passing the reference of\nthe transaction that is to be reversed. the receiving fsp\nwill return the request state object to indicate the the\nrequest is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) receiving fsp->>sending fsp: put {callback url} (reversal object) note right of receiving fsp: (2) the receiving fsp informs the sending fsp\nthat the reversal has been successully\ncompleted by returning the final representation\nof the reversal transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# obtain an fsp balance\n\n \n\n\nget .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/balance activate sending fsp activate receiving fsp note right of receiving fsp: (1) obtain the balance of the\nreceiving fsp\'s account with\nthe sending fsp. receiving fsp--\x3e>sending fsp: http 200 (balance object) deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# retrieve transactions for an fsp\n\nthis diagram illustrates use of a cursor mechanism to retrieve all transactions for a sending fsp via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp requests up to 20\ntransactions for their account from\nthe receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (transactions array) (x-records-available-count=40) note right of receiving fsp: (2) the receiving fsp returns an array\nof 20 transactions and indicates via a\nresponse header that there are 40\nrecords available in total. sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of receiving fsp: (3) the sending fsp requests the\nremaining transactions from the\naccount from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (transactions array) (x-records-available-count=40) deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the fsp is in a state that enables a client to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /heartbeat activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp requests the\navailability of the service from the\nreceiving fsp. receiving fsp--\x3e>sending fsp: http 200 (heartbeat object) note right of receiving fsp: (2) the receiving fsp returns the\navailability of the service - available,\nunavailable or degraded. deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the sending fsp to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the receiving fsp.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /responses{clientcorrelationid} activate sending fsp activate receiving fsp note right of receiving fsp: (1) using the sending fsp\'s\nclientcorrelationid, a request for the\nmissing api response is sent. receiving fsp--\x3e>sending fsp: http 200 (responses object) note right of receiving fsp: (2) a responses object is returned\ncontaining a link to the missing\nresource. sending fsp->>receiving fsp: get /{link} note right of receiving fsp: (3) the sending fsp uses the link to\nobtain a representation of the missing\nresource. receiving fsp--\x3e>sending fsp: http 200 (requested object) deactivate receiving fsp deactivate sending fsp\nopen postman collection open postman collection with authentication',charsets:{}},{title:"Merchant Payments - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"Merchant Payments - API Service Definition"},regularPath:"/use-cases/merchant-payments/api-service-definition.html",relativePath:"use-cases/merchant-payments/api-service-definition.md",key:"v-55b734ac",path:"/use-cases/merchant-payments/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2122},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2379},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:11568},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:12421},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:12648},{level:3,title:"Merchant Accounts APIs",slug:"merchant-accounts-apis",normalizedTitle:"merchant accounts apis",charIndex:21131},{level:4,title:"Identifying a Merchant Account",slug:"identifying-a-merchant-account",normalizedTitle:"identifying a merchant account",charIndex:21270},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:21433},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:21619},{level:3,title:"Account Transactions API",slug:"account-transactions-api",normalizedTitle:"account transactions api",charIndex:22123},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:24244},{level:3,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:24557},{level:4,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:24910},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:25043},{level:3,title:"Authorisation Codes API",slug:"authorisation-codes-api",normalizedTitle:"authorisation codes api",charIndex:27593},{level:4,title:"Authorisation Code UML Class Diagram",slug:"authorisation-code-uml-class-diagram",normalizedTitle:"authorisation code uml class diagram",charIndex:30487},{level:4,title:"Authorisation Code Object Definition",slug:"authorisation-code-object-definition",normalizedTitle:"authorisation code object definition",charIndex:30858},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:36693},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:36716},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:37635},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:38739},{level:3,title:"Transaction Type Object",slug:"transaction-type-object",normalizedTitle:"transaction type object",charIndex:39566},{level:3,title:"Channel Type Object",slug:"channel-type-object",normalizedTitle:"channel type object",charIndex:40481},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:41060},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:41980},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:42872},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:42889},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:43266},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:36716}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Merchant Accounts APIs Identifying a Merchant Account Single Identifier Method Multiple Identifiers Method Account Transactions API Account Transaction UML Class Diagram Account Balances API Account Balance UML Class Diagram Account Balance Object Definition Authorisation Codes API Authorisation Code UML Class Diagram Authorisation Code Object Definition Supporting Objects Account Identifiers Object Metadata Object Custom Data Object Transaction Type Object Channel Type Object Fees Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types Account Identifiers",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nMerchant payments can be created and viewed using Transactions APIs.\n\nThe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* Transaction\n\nFigure 2-1 Transaction UML Class Diagram\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                              \nName                                         Type        Description                                                           Reference                        Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                     \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers              creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                     debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers              debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                     If creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                     Enumeration = Transaction Types\n                                                         the URL)                                                       ← M\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                     \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                     Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                     Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                     \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                     \n                                                         was initiated.                                                 ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                     \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                         Provider                                                       ← O\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                                     \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                         populate additional transaction fields.                        ← O\n\n\n# Reversals API\n\nThe Reversals API is used to reverse a P2P transfer. The originating transaction reference must be provided in the path to identify the payment to be reversed. For a partial reversal, the amount needs to be supplied.\n\nFor viewing reversals, the Transactions API should be used. For performing a reversal without the original transaction reference, use the Transactions API.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Credit Party Identifier "0..10" --* "" Reversal Debit Party Identifier "0..10" --* "" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                          TYPE        DESCRIPTION                                                           REFERENCE                        VALIDATION\ntransactionReference                          string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                          the response by API provider.                                  ← M\nrequesting OrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                          to be associated with the transaction.                         ← O\noriginalTransactionReference                  string      For reversals and refunds, this field indicates the            → NA                                    \n                                                          transaction which is the subject of the reversal.              ← M\ncreditParty                                   array       A series of key/value pairs that enable the credit party to    → O    Account Identifiers              \n                                                          be identified. Keys include MSISDN and Wallet Identifier.      ← O\ndebitParty                                    array       A collection of key/value pairs that enable the debit party    →  O   Account Identifiers              \n                                                          to be identified. Keys include MSISDN and Wallet Identifier.   ← O\ntype                                          string      The harmonised Transaction Type                                → M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                         ← M                                     Refunds (adjustments) are supported.\nsubType                                       string      A non-harmonised sub-classification of the type of             → O                                     \n                                                          transaction. Values are not fixed, and usage will vary         ← O\n                                                          according to Provider.\ntransactionStatus                             string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                          provider.                                                      ← M\namount                                        string      The transaction Amount.                                        → O                                     Please refer to API Fundamentals document for amount\n                                                                                                                         ← O                                     validation rules.\ncurrency                                      string      Currency of the transaction amount.                            → O                                     Enumeration = ISO Currency Codes\n                                                                                                                         ← O\ndescriptionText                               string      Free format text description of the transaction provided by    → O                                     \n                                                          the client. This can be provided as a reference for the        ← O\n                                                          receiver on a notification SMS and on an account statement.\nfees                                          array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                          to the transaction.                                            ← O\ngeoCode                                       string      Indicates the geographic location from where the transaction   → O                                     \n                                                          was initiated.                                                 ← O\nrequestingOrganisation                        object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                         ← O\nservicingIdentity                             string      The field is used to identify the servicing identity for       → O                                     \n                                                          transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                            string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                          may differ from the Transaction Reference.                     ← O\ncreationDate                                  date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                          Provider.                                                      ← O\nmodificationDate                              date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                          Provider.                                                      ← O\nrequestDate                                   date-time   The date and time of the transaction request as supplied by    → O                                     \n                                                          the client.                                                    ← O\ncustomData                                    string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                          provider specific fields.                                      ← O\nmetadata                                      array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                          populate additional properties that describe administrative    ← O\n                                                          information regarding the transaction.\n\n\n# Merchant Accounts APIs\n\nUsing the mobile money APIs, merchants can:\n\n * View payments for their account.\n * View their account balance.\n\n# Identifying a Merchant Account\n\nTwo methods are provided for identifying a merchant account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifierType}/{identifier} .\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3} .\n\nThe path uses a ‘$’ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by ‘@’.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Account Transactions API\n\nA merchant should use this API to return a list of payments against their account. One of the following paths can be used:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Metadata "0..20" --* "1" Transaction Transaction "0..*" --* "2" Account\n\nFigure 2‑3 Account Transaction UML Class Diagram\n\n\n# Account Balances API\n\nUsing the Account Balances API, an FSP can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the FSP account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram Account Balance "1" --* "1" Account\n\nFigure 2‑4 Account Balance UML Class Diagram\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                           REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    → NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    ← O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                → NA               Please refer to API Fundamentals document for amount\n                                                                                           ← O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        → NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    ← O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    → NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       ← O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       → NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← O                validation rules.\ncurrency           string   Currency for all returned balances.                            → NA               Enumeration = ISO Currency Codes\n                                                                                           ← O\n\n\n# Authorisation Codes API\n\nThe Authorisation Codes APIs allow a payer to generate a payment code which when presented to the payee, can be redeemed for an amount associated with the code.\n\nAuthorisation codes can be set to expire. Note that expiry time can be specified via the API, however the mobile money provider may mandate a common expiry period for all codes.\n\nThe following paths are permitted:\n\n * Generate an Authorisation Code. POST /accounts/{identifierType}/{identifier}/authorisationcodes or POST /accounts/{Account Identifiers}/authorisationcodes\n\n * Cancel an Authorisation Code (codeState = ‘cancelled’). PATCH /accounts/{identifierType}/{identifier}/authorisationcodes/{authorisationCode} or PATCH /accounts/{Account Identifiers}/authorisationcodes/{authorisationCode}.\n\n * View An Authorisation Code for a given account. GET /accounts/{identifierType}/{identifier}/authorisationcodes/{authorisationCode} or GET /accounts/{Requestor Account Identifiers}/authorisationcodes/{authorisationCode}.\n\n * View all Authorisation Codes for a given account. GET /accounts/{identifierType}/{identifier}/authorisationcodes or GET /accounts/{Requestor Account Identifiers}/authorisationcodes.\n\nWhen retrieving authorisation codes, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "codeState": "active"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER      TYPE      FORMAT      DESCRIPTION\nlimit          integer   N/A         Supports pagination. If this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   N/A         Supports pagination. This value will indicate the cursor\n                                     position from where to retrieve the set of records. For\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromDateTime   string    date-time   Indicates the minimum creationDate for which records should\n                                     be returned.\ntoDateTime     string    date-time   Indicates the maximum creationDate for which records should\n                                     be returned.\ncodeState      string    string      Allows filtering on the state of the authorisation code.\n\nTIP\n\nNote 1: For a harmonised behavior, API Providers should make sure that the authorisation codes are returned in descending date created order.\n\nNote 2: HTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Authorisation Code UML Class Diagram\n\nclassDiagram Redemption Account Identifier "0..10" --* "1" Authorisation Code Metadata "0..20" --* "1" Authorisation Code Redemption Channel "0..50" --* "1" Authorisation Code Redemption Transaction Type "0..50" --* "1" Authorisation Code Authorisation Code "0..*" --* "1" Account\n\nFigure 2‑5 Authorisation Code UML Class Diagram\n\n# Authorisation Code Object Definition\n\n{\n  "authorisationCode": "12345",\n  "codeState": "expired",\n  "amount": "123.45",\n  "currency": "GBP",\n  "amountType": "exact",\n  "codeLifetime": 30000,\n  "holdFundsIndicator": true,\n  "redemptionAccountIdentifiers": [\n    {\n      "key":"MSISDN",\n      "value":"+1234567890"\n    }\n  ],\n  "redemptionChannels": "ATM",\n  "redemptionTransactionTypes": {\n    "transactionStatus": "completed",\n    "transactionType": "merchantpay"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nAUTHORISATION CODES OBJECT                                                                                                                  \nName                           Type        Description                                                           Reference                  Validation\nauthorisationCode              string      The code that will be presented to the other party for         → NA                              \n                                           redemption.                                                    ← M\ncodeState                      string      Indicates the state of the Authorisation Code                  → NA                              Enumeration = ‘active’, ‘expired’, ‘cancelled’\n                                                                                                          ← M\namount                         string      Indicates the amount associated with the authorisation code.   → O                               Please refer to API Fundamentals document for amount\n                                           Typically, this is set by the client.                          ← O                               validation rules.\ncurrency                       string      Indicates the amount currency. Must be supplied when an        → O                               Enumeration = ISO Currency Codes\n                                           amount is supplied.                                            ← O\namountType                     string      The amount for the authorisation can be an exact amount or     → O                               Enumeration = ‘exact’, ‘maximum’\n                                           can be a maximum amount, i.e. redemption up to but not         ← O\n                                           higher than the amount specified.\ncodeLifetime                   integer     Indicates the expiry time in seconds of the code. Depending    → O                               If supplied, then must be 1 second or greater.\n                                           upon the use case, this can be set by the client or server.    ← O\nholdFundsIndicator             boolean     Indicates whether funds should be reserved against the         → O                               \n                                           payer’s account where the payer is the requestor.              ← O\nredemptionAccountIdentifiers   array       A series of key/value pairs that identify the account where    → O    Account Identifiers        \n                                           the code must be redeemed. Only needed if the redemption       ← O\n                                           account needs to be explicitly stated.\nredemptionChannels             string      Indicates the channel(s) that the code can be redeemed         → O    Channel Types Object       \n                                           against, e.g. ATM, Merchant, etc..                             ← O\nredemptionTransactionTypes     string      Indicates the Transaction Types(s) that the code can be        → O    Transaction Types Object   \n                                           redeemed against.                                              ← O\nrequestingOrganisation         object      The originating organisation of the request.                   → O    Requesting Organisation    \n                                                                                                          ← O\ncreationDate                   date-time   Indicates when the link was created as recorded by the API     → NA                              \n                                           provider.                                                      ← O\nmodificationDate               date-time   Indicates when the link was modified as recorded by the API    → NA                              \n                                           provider.                                                      ← O\nrequestDate                    date-time   The date and time of the request as provided by the client.    → O                               \n                                                                                                          ← O\ncustomData                     string      A collection of key/value pairs that can be used for           → O    Custom Data Object         \n                                           provider specific fields.                                      ← O\nmetadata                       array       A collection of key/value pairs. These can be used to          → O    Metadata                   \n                                           populate additional properties that describe administrative    ← O\n                                           information regarding the authorisation code\n\n\n# Supporting Objects\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         → M               Enumeration = Account Identifiers\n                                                               ← M\nvalue   string   Provides the account identifier type value.   → M               \n                                                               ← M\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20The metadata object allows additional fields to be specified for the parent object in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Transaction Type Object\n\nThis object enables multiple transaction types to be specified along with paired sub-types. This object is used where multiple transaction types need to be passed in an API.\n\n{\n  "transactionType": "merchantpay",\n  "transactionSubType": "local",\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION TYPE OBJECT                                                                     \nName                      Type     Description                                  Reference   Validation\ntransactionType           string   Identifies the Transaction Type.       → M               Enumeration = Transaction Types\n                                                                          ← M\ntransactionSubType        string   Identifies the Transaction Sub-Type.   → O               \n                                                                          ← O\n\n\n# Channel Type Object\n\nThis object enables multiple channel types to be specified. This object is used where multiple channel types need to be passed in an API.\n\n{\n  "channelType": "ATM"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCHANNEL TYPE OBJECT                                                             \nName                  Type     Description                          Reference   Validation\nchannelType           string   Identifies the Channel Type.   → M               \n                                                              ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                     REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  → M               \n                                                                 ← M\nfeeAmount     string   Defines the amount of the fee.            → M               Please refer to API Fundamentals document for amount\n                                                                 ← M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   → M               Enumeration = ISO Currency Codes\n                                                                 ← M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE          DESCRIPTION\nmerchantpay   Purchases of goods and/or services from shops (payer\n              present) or online (payer not present).\nadjustment    General adjustments to an account via an adjustment\n              transaction (e.g. refunds).\nreversal      Reversal of a prior transaction to return funds to the\n              payer.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\nmerchant payments can be created and viewed using transactions apis.\n\nthe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* transaction\n\nfigure 2-1 transaction uml class diagram\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                              \nname                                         type        description                                                           reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                    \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                     \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers              creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                     debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers              debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                     if creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                     enumeration = transaction types\n                                                         the url)                                                       ← m\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                     \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                    \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                     please refer to api fundamentals document for amount\n                                                                                                                        ← m                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                     enumeration = iso currency codes\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                     \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                     \n                                                         was initiated.                                                 ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                     \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                    \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                    \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                    \n                                                         provider                                                       ← o\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                                     \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                         populate additional transaction fields.                        ← o\n\n\n# reversals api\n\nthe reversals api is used to reverse a p2p transfer. the originating transaction reference must be provided in the path to identify the payment to be reversed. for a partial reversal, the amount needs to be supplied.\n\nfor viewing reversals, the transactions api should be used. for performing a reversal without the original transaction reference, use the transactions api.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram credit party identifier "0..10" --* "" reversal debit party identifier "0..10" --* "" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                          type        description                                                           reference                        validation\ntransactionreference                          string      unique reference for the transaction. this is returned in      → na                                    \n                                                          the response by api provider.                                  ← m\nrequesting organisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                          to be associated with the transaction.                         ← o\noriginaltransactionreference                  string      for reversals and refunds, this field indicates the            → na                                    \n                                                          transaction which is the subject of the reversal.              ← m\ncreditparty                                   array       a series of key/value pairs that enable the credit party to    → o    account identifiers              \n                                                          be identified. keys include msisdn and wallet identifier.      ← o\ndebitparty                                    array       a collection of key/value pairs that enable the debit party    →  o   account identifiers              \n                                                          to be identified. keys include msisdn and wallet identifier.   ← o\ntype                                          string      the harmonised transaction type                                → m                                     enumeration = transaction types note that only reversals and\n                                                                                                                         ← m                                     refunds (adjustments) are supported.\nsubtype                                       string      a non-harmonised sub-classification of the type of             → o                                     \n                                                          transaction. values are not fixed, and usage will vary         ← o\n                                                          according to provider.\ntransactionstatus                             string      indicates the status of the transaction as stored by the api   → na                                    \n                                                          provider.                                                      ← m\namount                                        string      the transaction amount.                                        → o                                     please refer to api fundamentals document for amount\n                                                                                                                         ← o                                     validation rules.\ncurrency                                      string      currency of the transaction amount.                            → o                                     enumeration = iso currency codes\n                                                                                                                         ← o\ndescriptiontext                               string      free format text description of the transaction provided by    → o                                     \n                                                          the client. this can be provided as a reference for the        ← o\n                                                          receiver on a notification sms and on an account statement.\nfees                                          array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                          to the transaction.                                            ← o\ngeocode                                       string      indicates the geographic location from where the transaction   → o                                     \n                                                          was initiated.                                                 ← o\nrequestingorganisation                        object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                         ← o\nservicingidentity                             string      the field is used to identify the servicing identity for       → o                                     \n                                                          transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                            string      transaction receipt number as notified to the parties. this    → na                                    \n                                                          may differ from the transaction reference.                     ← o\ncreationdate                                  date-time   date and time when the transaction was created by the api      → na                                    \n                                                          provider.                                                      ← o\nmodificationdate                              date-time   date and time when the transaction was modified by the api     → na                                    \n                                                          provider.                                                      ← o\nrequestdate                                   date-time   the date and time of the transaction request as supplied by    → o                                     \n                                                          the client.                                                    ← o\ncustomdata                                    string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                          provider specific fields.                                      ← o\nmetadata                                      array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                          populate additional properties that describe administrative    ← o\n                                                          information regarding the transaction.\n\n\n# merchant accounts apis\n\nusing the mobile money apis, merchants can:\n\n * view payments for their account.\n * view their account balance.\n\n# identifying a merchant account\n\ntwo methods are provided for identifying a merchant account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifiertype}/{identifier} .\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3} .\n\nthe path uses a ‘$’ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by ‘@’.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# account transactions api\n\na merchant should use this api to return a list of payments against their account. one of the following paths can be used:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction metadata "0..20" --* "1" transaction transaction "0..*" --* "2" account\n\nfigure 2‑3 account transaction uml class diagram\n\n\n# account balances api\n\nusing the account balances api, an fsp can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the fsp account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram account balance "1" --* "1" account\n\nfigure 2‑4 account balance uml class diagram\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                           reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    → na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    ← o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                → na               please refer to api fundamentals document for amount\n                                                                                           ← o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        → na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    ← o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    → na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       ← o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       → na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← o                validation rules.\ncurrency           string   currency for all returned balances.                            → na               enumeration = iso currency codes\n                                                                                           ← o\n\n\n# authorisation codes api\n\nthe authorisation codes apis allow a payer to generate a payment code which when presented to the payee, can be redeemed for an amount associated with the code.\n\nauthorisation codes can be set to expire. note that expiry time can be specified via the api, however the mobile money provider may mandate a common expiry period for all codes.\n\nthe following paths are permitted:\n\n * generate an authorisation code. post /accounts/{identifiertype}/{identifier}/authorisationcodes or post /accounts/{account identifiers}/authorisationcodes\n\n * cancel an authorisation code (codestate = ‘cancelled’). patch /accounts/{identifiertype}/{identifier}/authorisationcodes/{authorisationcode} or patch /accounts/{account identifiers}/authorisationcodes/{authorisationcode}.\n\n * view an authorisation code for a given account. get /accounts/{identifiertype}/{identifier}/authorisationcodes/{authorisationcode} or get /accounts/{requestor account identifiers}/authorisationcodes/{authorisationcode}.\n\n * view all authorisation codes for a given account. get /accounts/{identifiertype}/{identifier}/authorisationcodes or get /accounts/{requestor account identifiers}/authorisationcodes.\n\nwhen retrieving authorisation codes, the following query string parameters can be used to filter the number of records returned:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "codestate": "active"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter      type      format      description\nlimit          integer   n/a         supports pagination. if this is not supplied, then the\n                                     server will apply a limit of 50 records returned for each\n                                     request.\noffset         integer   n/a         supports pagination. this value will indicate the cursor\n                                     position from where to retrieve the set of records. for\n                                     example, a limit of 50 and offset of 10 will return records\n                                     11 to 60.\nfromdatetime   string    date-time   indicates the minimum creationdate for which records should\n                                     be returned.\ntodatetime     string    date-time   indicates the maximum creationdate for which records should\n                                     be returned.\ncodestate      string    string      allows filtering on the state of the authorisation code.\n\ntip\n\nnote 1: for a harmonised behavior, api providers should make sure that the authorisation codes are returned in descending date created order.\n\nnote 2: http response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# authorisation code uml class diagram\n\nclassdiagram redemption account identifier "0..10" --* "1" authorisation code metadata "0..20" --* "1" authorisation code redemption channel "0..50" --* "1" authorisation code redemption transaction type "0..50" --* "1" authorisation code authorisation code "0..*" --* "1" account\n\nfigure 2‑5 authorisation code uml class diagram\n\n# authorisation code object definition\n\n{\n  "authorisationcode": "12345",\n  "codestate": "expired",\n  "amount": "123.45",\n  "currency": "gbp",\n  "amounttype": "exact",\n  "codelifetime": 30000,\n  "holdfundsindicator": true,\n  "redemptionaccountidentifiers": [\n    {\n      "key":"msisdn",\n      "value":"+1234567890"\n    }\n  ],\n  "redemptionchannels": "atm",\n  "redemptiontransactiontypes": {\n    "transactionstatus": "completed",\n    "transactiontype": "merchantpay"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nauthorisation codes object                                                                                                                  \nname                           type        description                                                           reference                  validation\nauthorisationcode              string      the code that will be presented to the other party for         → na                              \n                                           redemption.                                                    ← m\ncodestate                      string      indicates the state of the authorisation code                  → na                              enumeration = ‘active’, ‘expired’, ‘cancelled’\n                                                                                                          ← m\namount                         string      indicates the amount associated with the authorisation code.   → o                               please refer to api fundamentals document for amount\n                                           typically, this is set by the client.                          ← o                               validation rules.\ncurrency                       string      indicates the amount currency. must be supplied when an        → o                               enumeration = iso currency codes\n                                           amount is supplied.                                            ← o\namounttype                     string      the amount for the authorisation can be an exact amount or     → o                               enumeration = ‘exact’, ‘maximum’\n                                           can be a maximum amount, i.e. redemption up to but not         ← o\n                                           higher than the amount specified.\ncodelifetime                   integer     indicates the expiry time in seconds of the code. depending    → o                               if supplied, then must be 1 second or greater.\n                                           upon the use case, this can be set by the client or server.    ← o\nholdfundsindicator             boolean     indicates whether funds should be reserved against the         → o                               \n                                           payer’s account where the payer is the requestor.              ← o\nredemptionaccountidentifiers   array       a series of key/value pairs that identify the account where    → o    account identifiers        \n                                           the code must be redeemed. only needed if the redemption       ← o\n                                           account needs to be explicitly stated.\nredemptionchannels             string      indicates the channel(s) that the code can be redeemed         → o    channel types object       \n                                           against, e.g. atm, merchant, etc..                             ← o\nredemptiontransactiontypes     string      indicates the transaction types(s) that the code can be        → o    transaction types object   \n                                           redeemed against.                                              ← o\nrequestingorganisation         object      the originating organisation of the request.                   → o    requesting organisation    \n                                                                                                          ← o\ncreationdate                   date-time   indicates when the link was created as recorded by the api     → na                              \n                                           provider.                                                      ← o\nmodificationdate               date-time   indicates when the link was modified as recorded by the api    → na                              \n                                           provider.                                                      ← o\nrequestdate                    date-time   the date and time of the request as provided by the client.    → o                               \n                                                                                                          ← o\ncustomdata                     string      a collection of key/value pairs that can be used for           → o    custom data object         \n                                           provider specific fields.                                      ← o\nmetadata                       array       a collection of key/value pairs. these can be used to          → o    metadata                   \n                                           populate additional properties that describe administrative    ← o\n                                           information regarding the authorisation code\n\n\n# supporting objects\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   provides the account identifier type.         → m               enumeration = account identifiers\n                                                               ← m\nvalue   string   provides the account identifier type value.   → m               \n                                                               ← m\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20the metadata object allows additional fields to be specified for the parent object in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# transaction type object\n\nthis object enables multiple transaction types to be specified along with paired sub-types. this object is used where multiple transaction types need to be passed in an api.\n\n{\n  "transactiontype": "merchantpay",\n  "transactionsubtype": "local",\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction type object                                                                     \nname                      type     description                                  reference   validation\ntransactiontype           string   identifies the transaction type.       → m               enumeration = transaction types\n                                                                          ← m\ntransactionsubtype        string   identifies the transaction sub-type.   → o               \n                                                                          ← o\n\n\n# channel type object\n\nthis object enables multiple channel types to be specified. this object is used where multiple channel types need to be passed in an api.\n\n{\n  "channeltype": "atm"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nchannel type object                                                             \nname                  type     description                          reference   validation\nchanneltype           string   identifies the channel type.   → m               \n                                                              ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                     reference   validation\nfeetype       string   defines the type of fee.                  → m               \n                                                                 ← m\nfeeamount     string   defines the amount of the fee.            → m               please refer to api fundamentals document for amount\n                                                                 ← m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   → m               enumeration = iso currency codes\n                                                                 ← m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode          description\nmerchantpay   purchases of goods and/or services from shops (payer\n              present) or online (payer not present).\nadjustment    general adjustments to an account via an adjustment\n              transaction (e.g. refunds).\nreversal      reversal of a prior transaction to return funds to the\n              payer.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.',charsets:{}},{title:"Merchant Payments - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"Merchant Payments - Use Case Scenarios"},regularPath:"/use-cases/merchant-payments/scenarios/scenarios.html",relativePath:"use-cases/merchant-payments/scenarios/scenarios.md",key:"v-15ed1ed0",path:"/use-cases/merchant-payments/scenarios/scenarios.html",headers:[{level:2,title:"Payee-Initiated Merchant Payment",slug:"payee-initiated-merchant-payment",normalizedTitle:"payee-initiated merchant payment",charIndex:599},{level:2,title:"Payee-Initiated Merchant Payment Failure",slug:"payee-initiated-merchant-payment-failure",normalizedTitle:"payee-initiated merchant payment failure",charIndex:2694},{level:2,title:"Payee-Initiated Merchant Payment using the Polling Method",slug:"payee-initiated-merchant-payment-using-the-polling-method",normalizedTitle:"payee-initiated merchant payment using the polling method",charIndex:4673},{level:2,title:"Payer-Initiated Merchant Payment",slug:"payer-initiated-merchant-payment",normalizedTitle:"payer-initiated merchant payment",charIndex:7465},{level:2,title:"Payer-Initiated Merchant Payment Failure",slug:"payer-initiated-merchant-payment-failure",normalizedTitle:"payer-initiated merchant payment failure",charIndex:9396},{level:2,title:"Payee-Initiated Merchant Payment using a Pre-authorised Payment Code",slug:"payee-initiated-merchant-payment-using-a-pre-authorised-payment-code",normalizedTitle:"payee-initiated merchant payment using a pre-authorised payment code",charIndex:11174},{level:2,title:"Merchant Payment Refund",slug:"merchant-payment-refund",normalizedTitle:"merchant payment refund",charIndex:14668},{level:2,title:"Merchant Payment Reversal",slug:"merchant-payment-reversal",normalizedTitle:"merchant payment reversal",charIndex:16425},{level:2,title:"Obtain a Merchant Balance",slug:"obtain-a-merchant-balance",normalizedTitle:"obtain a merchant balance",charIndex:17970},{level:2,title:"Retrieve Payments for a Merchant",slug:"retrieve-payments-for-a-merchant",normalizedTitle:"retrieve payments for a merchant",charIndex:18587},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:19985},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:20873}],headersStr:"Payee-Initiated Merchant Payment Payee-Initiated Merchant Payment Failure Payee-Initiated Merchant Payment using the Polling Method Payer-Initiated Merchant Payment Payer-Initiated Merchant Payment Failure Payee-Initiated Merchant Payment using a Pre-authorised Payment Code Merchant Payment Refund Merchant Payment Reversal Obtain a Merchant Balance Retrieve Payments for a Merchant Check for Service Availability Retrieve a Missing API Response",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# Payee-Initiated Merchant Payment\n\nIn this example, an asynchronous payment flow is used with a final callback. The merchant initiates the request and will be credited when the payer approves the request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>Mobile Money Provider: POST /transactions/type/merchantpay activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Merchant: HTTP 202 (Request State Object) deactivate Merchant Mobile Money Provider->>Payer: Obtain Customer Authorisation activate Payer Note right of Payer: (2) The Payer is requested to the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer authorisation. Payer--\x3e>Mobile Money Provider: (Authorised) deactivate Payer activate Merchant Mobile Money Provider->>Merchant: PUT {Callback URL} (Transactions Object) Note right of Mobile Money Provider: (3) The MMP informs the Merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Merchant--\x3e>Mobile Money Provider: HTTP 204 deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Payee-Initiated Merchant Payment Failure\n\nIn this example, an asynchronous payment flow is used with a final callback that contains the reason for failure.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>Mobile Money Provider: POST /transactions/type/merchantpay activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Merchant: HTTP 202 (Request State Object) deactivate Merchant Mobile Money Provider->>Payer: Obtain Customer Authorisation activate Payer Note right of Payer: (2) The Payer is requested to the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer authorisation. Payer--\x3e>Mobile Money Provider: (Authorised) deactivate Payer activate Merchant Mobile Money Provider->>Merchant: PUT {Callback URL} (Transactions Object) Note right of Mobile Money Provider: (3) The MMP informs the Merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Merchant--\x3e>Mobile Money Provider: HTTP 204 deactivate Merchant deactivate Mobile Money Provider\n\n\n# Payee-Initiated Merchant Payment using the Polling Method\n\nIn this example, an asynchronous payment flow is used with the polling method. The client polls against the request state object to determine the outcome of the payment request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n \n\n\nGET .../requeststates/Place the Server Correlation Id here\n\n\n \n\n\nGET .../transactions/Place Transaction Reference here\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider participant Payer Merchant->>Mobile Money Provider: POST /transactions/type/merchantpay activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant submits the payment request for processing\nto the MMP. The MMP will return the Request State object\nto indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Merchant: HTTP 202 (Request State Object) deactivate Merchant par loop activate Merchant Merchant->>Mobile Money Provider: GET /requeststates/{serverCorrelationId} Note right of Mobile Money Provider: (2) The Merchant polls the MMP for the Request State until the\ntransaction is authorised or declined or until the polling limit\nis reached. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Request State Object) end and Mobile Money Provider->>Payer: Obtain Customer Authorisation activate Payer Note right of Payer: (3) The Payer is requested to the MMP to\nauthorise the payment. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used for Payer\nauthorisation. Payer--\x3e>Mobile Money Provider: (Authorised) end deactivate Merchant deactivate Payer deactivate Mobile Money Provider opt activate Mobile Money Provider activate Merchant Merchant->>Mobile Money Provider: GET /transactions/transactionsReference Note right of Mobile Money Provider: (4) The Merchant can use the objectReference returned in the\nRequest State to retrieve a representation of the complete\npayment transaction. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Transactions Object) end deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Payer-Initiated Merchant Payment\n\nIn this example, an asynchronous payment flow is used with a final callback. The payer initiates the request and will be debited upon successful completion of the request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Payer participant Mobile Money Provider participant Merchant Payer->>Mobile Money Provider: POST /transactions/type/merchantpay activate Payer activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Payer\'s channel (e.g. Mobile Money App) submits the\npayment request for processing to the MMP. The MMP will\nreturn the Request State object to indicate that the request\nis \'pending\'. Mobile Money Provider--\x3e>Payer: HTTP 202 (Request State Object) deactivate Payer Mobile Money Provider->>Payer: PUT {Callback URL} (transactions Object) activate Payer Note right of Mobile Money Provider: (2) The MMP informs the Payer\'s channel that the\npayment has been successfully completed\nby returning the final representation of the\ntransaction. Payer--\x3e>Mobile Money Provider: HTTP 204 deactivate Payer activate Merchant Mobile Money Provider->>Merchant: Notify Note right of Merchant: (3) The MMP notifies the merchant tha the\npayment has successfully compeleted. deactivate Mobile Money Provider deactivate Merchant\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Payer-Initiated Merchant Payment Failure\n\nIn this example, an asynchronous payment flow is used with a final callback that contains the reason for failure.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Payer participant Mobile Money Provider participant Merchant Payer->>Mobile Money Provider: POST /transactions/type/merchantpay activate Payer activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Payer\'s channel (e.g. Mobile Money App) submits the\npayment request for processing to the MMP. The MMP will\nreturn the Request State object to indicate that the request\nis \'pending\'. Mobile Money Provider--\x3e>Payer: HTTP 202 (Request State Object) deactivate Payer Mobile Money Provider->>Payer: PUT {Callback URL} (Error Object) activate Payer Note right of Mobile Money Provider: (2) The MMP informs the Payer\'s channel that the\npayment has been failed and returns the error\nobject detailing the reason for failure. Payer--\x3e>Mobile Money Provider: HTTP 204 deactivate Payer activate Merchant Mobile Money Provider->>Merchant: Notify Note right of Merchant: (3) The MMP notifies the merchant tha the\npayment has failed. deactivate Mobile Money Provider deactivate Merchant\n\n\n# Payee-Initiated Merchant Payment using a Pre-authorised Payment Code\n\nIn this example the /authorisationcodes API is used to obtain a pre-authorised payment code. This in turn is presented by the payer to the merchant who initiates the payment request. Both flows in the diagram result in a callback. This flow is primarily used for payment on delivery use cases.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/2000/authorisationcodes\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "requestDate": "2017-07-21T17:32:28Z",\n    "currency": "GBP",\n    "amount": "1000.00"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "type": "transfer",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF",\n    "oneTimeCode": "Place your Authorisation Code here"\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Payer participant Merchant participant Mobile Money Provider Payer->>Mobile Money Provider: POST /accounts/{identifierType}/{identifier}/authorisationcodes activate Payer activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Payer\'s channel (e.g. Mobile Money App) submits\nthe request to generate an authorisation code to the\nMMP. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>Payer: HTTP 202 (Request State Object) Mobile Money Provider->>Payer: PUT {Callback URL} (Authorisation Code Object) Note right of Mobile Money Provider: (2) The MMP informs the Payer\'s channel that the\nrequest has been successfully completed by\nreturing the final representation of the\nauthorisation code. Payer--\x3e>Mobile Money Provider: HTTP 204 deactivate Payer deactivate Mobile Money Provider Note right of Payer: (3) The Payer communicates the code to the merchant. This\ncan be via QR code or by verbally communicating the code. Payer->>Merchant: Communicates Code Verbally or via QR Presentment activate Payer activate Merchant activate Mobile Money Provider Merchant->>Mobile Money Provider: POST /transactions/type/merchantpay Note right of Mobile Money Provider: (4) The Merchant submits the payment request for\nprocessing to the MMP. The request will contain the\nauthorisation code. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Merchant: HTTP 202 (Request State Object) deactivate Merchant Mobile Money Provider->>Merchant: PUT {Callback URL} (Transactions Object) activate Merchant Note right of Mobile Money Provider: (5) The MMP informs the Merchant that the\ntransaction has been successfully completed by\nreturning the final representation of the\ntransaction. Merchant--\x3e>Mobile Money Provider: HTTP 204 deactivate Payer deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Merchant Payment Refund\n\nMerchants can issue a refund to payers. In this diagram, the refund is not linked to the original transaction and hence the /transactions API is used. Where a refund needs to be linked to the original transaction, the /reversals API must be used to perform the refund.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/adjustment\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider Merchant->>Mobile Money Provider: POST /transactions/type/adjustment activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant submits the refund request for processing to\nthe MMP. The MMP will return the Request State object to\nindicate that the request is \'pending\'. Mobile Money Provider--\x3e>Merchant: HTTP 202 (Request State Object) Mobile Money Provider->>Merchant: PUT {Callback URL} (Transactions Object) Note right of Mobile Money Provider: (2) The MMP informs the Merchant that the\nrefund has been successfully completed by\nreturning the final representation of the refund. Merchant--\x3e>Mobile Money Provider: HTTP 204 deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Merchant Payment Reversal\n\nIn some failure scenarios, a merchant may need to reverse a transaction. This diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody Parameters:\n{\n    "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider Merchant->>Mobile Money Provider: POST /transactions/{original transaction reference}/reversals activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant submits the reversal request for processing\nto the MMP - passing the reference of the transaction that\nis to be reversed. The MMP will return the Request State\nobject to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Merchant: HTTP 202 (Request State Object) Mobile Money Provider->>Merchant: PUT {Callback URL} (Reversal Object) Note right of Mobile Money Provider: (2) The MMP informs the Merchant that the\nreversal has been successfully completed by\nreturning the final representation of the\nreversal transaction. Merchant--\x3e>Mobile Money Provider: HTTP 204 deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain a Merchant Balance\n\n \n\n\nGET .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider Merchant->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/balance activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) Obtain the balance of the\nrequested account. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Balance Object) deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Payments for a Merchant\n\nThis diagram illustrates use of a cursor mechanism to retrieve all payments for a merchant via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams: \n{\n    "offset": 0,\n    "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider Merchant->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant requests up to\n20 transactions for the\naccount from the MMP. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of Mobile Money Provider: (2) The MMP returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. Merchant->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of Mobile Money Provider: (3) The Merchant requests the\nremaining transactions for\nthe account from the MMP. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the mobile money provider is in a state that enables a client to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider Merchant->>Mobile Money Provider: GET /heartbeat activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) The Merchant requests the availability\nof the service from the MMP. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Heartbeat Object) Note right of Mobile Money Provider: (2) The MMP returns the availability of\nthe service - available, unavailable\nor degraded. deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the merchant to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the mobile money provider.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Merchant participant Mobile Money Provider Merchant->>Mobile Money Provider: GET /responses{clientCorrelationId} activate Merchant activate Mobile Money Provider Note right of Mobile Money Provider: (1) Using the Merchant\'s\nclientCorrelationId, a request for the\nmissing API response is sent. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Responses Object) Note right of Mobile Money Provider: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Merchant->>Mobile Money Provider: GET /{link} Note right of Mobile Money Provider: (3) The Merchant uses the link to obtain\na representation of the missing\nresource. Mobile Money Provider--\x3e>Merchant: HTTP 200 (Requested Object) deactivate Merchant deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# payee-initiated merchant payment\n\nin this example, an asynchronous payment flow is used with a final callback. the merchant initiates the request and will be credited when the payer approves the request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>mobile money provider: post /transactions/type/merchantpay activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is \'pending\'. mobile money provider--\x3e>merchant: http 202 (request state object) deactivate merchant mobile money provider->>payer: obtain customer authorisation activate payer note right of payer: (2) the payer is requested to the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer authorisation. payer--\x3e>mobile money provider: (authorised) deactivate payer activate merchant mobile money provider->>merchant: put {callback url} (transactions object) note right of mobile money provider: (3) the mmp informs the merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. merchant--\x3e>mobile money provider: http 204 deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# payee-initiated merchant payment failure\n\nin this example, an asynchronous payment flow is used with a final callback that contains the reason for failure.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>mobile money provider: post /transactions/type/merchantpay activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is \'pending\'. mobile money provider--\x3e>merchant: http 202 (request state object) deactivate merchant mobile money provider->>payer: obtain customer authorisation activate payer note right of payer: (2) the payer is requested to the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer authorisation. payer--\x3e>mobile money provider: (authorised) deactivate payer activate merchant mobile money provider->>merchant: put {callback url} (transactions object) note right of mobile money provider: (3) the mmp informs the merchant that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. merchant--\x3e>mobile money provider: http 204 deactivate merchant deactivate mobile money provider\n\n\n# payee-initiated merchant payment using the polling method\n\nin this example, an asynchronous payment flow is used with the polling method. the client polls against the request state object to determine the outcome of the payment request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n \n\n\nget .../requeststates/place the server correlation id here\n\n\n \n\n\nget .../transactions/place transaction reference here\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider participant payer merchant->>mobile money provider: post /transactions/type/merchantpay activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant submits the payment request for processing\nto the mmp. the mmp will return the request state object\nto indicate that the request is \'pending\'. mobile money provider--\x3e>merchant: http 202 (request state object) deactivate merchant par loop activate merchant merchant->>mobile money provider: get /requeststates/{servercorrelationid} note right of mobile money provider: (2) the merchant polls the mmp for the request state until the\ntransaction is authorised or declined or until the polling limit\nis reached. mobile money provider--\x3e>merchant: http 200 (request state object) end and mobile money provider->>payer: obtain customer authorisation activate payer note right of payer: (3) the payer is requested to the mmp to\nauthorise the payment. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used for payer\nauthorisation. payer--\x3e>mobile money provider: (authorised) end deactivate merchant deactivate payer deactivate mobile money provider opt activate mobile money provider activate merchant merchant->>mobile money provider: get /transactions/transactionsreference note right of mobile money provider: (4) the merchant can use the objectreference returned in the\nrequest state to retrieve a representation of the complete\npayment transaction. mobile money provider--\x3e>merchant: http 200 (transactions object) end deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# payer-initiated merchant payment\n\nin this example, an asynchronous payment flow is used with a final callback. the payer initiates the request and will be debited upon successful completion of the request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant payer participant mobile money provider participant merchant payer->>mobile money provider: post /transactions/type/merchantpay activate payer activate mobile money provider note right of mobile money provider: (1) the payer\'s channel (e.g. mobile money app) submits the\npayment request for processing to the mmp. the mmp will\nreturn the request state object to indicate that the request\nis \'pending\'. mobile money provider--\x3e>payer: http 202 (request state object) deactivate payer mobile money provider->>payer: put {callback url} (transactions object) activate payer note right of mobile money provider: (2) the mmp informs the payer\'s channel that the\npayment has been successfully completed\nby returning the final representation of the\ntransaction. payer--\x3e>mobile money provider: http 204 deactivate payer activate merchant mobile money provider->>merchant: notify note right of merchant: (3) the mmp notifies the merchant tha the\npayment has successfully compeleted. deactivate mobile money provider deactivate merchant\nopen postman collection open postman collection with authentication\n\n\n# payer-initiated merchant payment failure\n\nin this example, an asynchronous payment flow is used with a final callback that contains the reason for failure.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant payer participant mobile money provider participant merchant payer->>mobile money provider: post /transactions/type/merchantpay activate payer activate mobile money provider note right of mobile money provider: (1) the payer\'s channel (e.g. mobile money app) submits the\npayment request for processing to the mmp. the mmp will\nreturn the request state object to indicate that the request\nis \'pending\'. mobile money provider--\x3e>payer: http 202 (request state object) deactivate payer mobile money provider->>payer: put {callback url} (error object) activate payer note right of mobile money provider: (2) the mmp informs the payer\'s channel that the\npayment has been failed and returns the error\nobject detailing the reason for failure. payer--\x3e>mobile money provider: http 204 deactivate payer activate merchant mobile money provider->>merchant: notify note right of merchant: (3) the mmp notifies the merchant tha the\npayment has failed. deactivate mobile money provider deactivate merchant\n\n\n# payee-initiated merchant payment using a pre-authorised payment code\n\nin this example the /authorisationcodes api is used to obtain a pre-authorised payment code. this in turn is presented by the payer to the merchant who initiates the payment request. both flows in the diagram result in a callback. this flow is primarily used for payment on delivery use cases.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/2000/authorisationcodes\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "requestdate": "2017-07-21t17:32:28z",\n    "currency": "gbp",\n    "amount": "1000.00"\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "type": "transfer",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf",\n    "onetimecode": "place your authorisation code here"\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant payer participant merchant participant mobile money provider payer->>mobile money provider: post /accounts/{identifiertype}/{identifier}/authorisationcodes activate payer activate mobile money provider note right of mobile money provider: (1) the payer\'s channel (e.g. mobile money app) submits\nthe request to generate an authorisation code to the\nmmp. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>payer: http 202 (request state object) mobile money provider->>payer: put {callback url} (authorisation code object) note right of mobile money provider: (2) the mmp informs the payer\'s channel that the\nrequest has been successfully completed by\nreturing the final representation of the\nauthorisation code. payer--\x3e>mobile money provider: http 204 deactivate payer deactivate mobile money provider note right of payer: (3) the payer communicates the code to the merchant. this\ncan be via qr code or by verbally communicating the code. payer->>merchant: communicates code verbally or via qr presentment activate payer activate merchant activate mobile money provider merchant->>mobile money provider: post /transactions/type/merchantpay note right of mobile money provider: (4) the merchant submits the payment request for\nprocessing to the mmp. the request will contain the\nauthorisation code. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>merchant: http 202 (request state object) deactivate merchant mobile money provider->>merchant: put {callback url} (transactions object) activate merchant note right of mobile money provider: (5) the mmp informs the merchant that the\ntransaction has been successfully completed by\nreturning the final representation of the\ntransaction. merchant--\x3e>mobile money provider: http 204 deactivate payer deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# merchant payment refund\n\nmerchants can issue a refund to payers. in this diagram, the refund is not linked to the original transaction and hence the /transactions api is used. where a refund needs to be linked to the original transaction, the /reversals api must be used to perform the refund.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/adjustment\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider merchant->>mobile money provider: post /transactions/type/adjustment activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant submits the refund request for processing to\nthe mmp. the mmp will return the request state object to\nindicate that the request is \'pending\'. mobile money provider--\x3e>merchant: http 202 (request state object) mobile money provider->>merchant: put {callback url} (transactions object) note right of mobile money provider: (2) the mmp informs the merchant that the\nrefund has been successfully completed by\nreturning the final representation of the refund. merchant--\x3e>mobile money provider: http 204 deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# merchant payment reversal\n\nin some failure scenarios, a merchant may need to reverse a transaction. this diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n    "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider merchant->>mobile money provider: post /transactions/{original transaction reference}/reversals activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant submits the reversal request for processing\nto the mmp - passing the reference of the transaction that\nis to be reversed. the mmp will return the request state\nobject to indicate that the request is \'pending\'. mobile money provider--\x3e>merchant: http 202 (request state object) mobile money provider->>merchant: put {callback url} (reversal object) note right of mobile money provider: (2) the mmp informs the merchant that the\nreversal has been successfully completed by\nreturning the final representation of the\nreversal transaction. merchant--\x3e>mobile money provider: http 204 deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# obtain a merchant balance\n\n \n\n\nget .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider merchant->>mobile money provider: get /accounts/{identifiertype}/{identifier}/balance activate merchant activate mobile money provider note right of mobile money provider: (1) obtain the balance of the\nrequested account. mobile money provider--\x3e>merchant: http 200 (balance object) deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve payments for a merchant\n\nthis diagram illustrates use of a cursor mechanism to retrieve all payments for a merchant via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams: \n{\n    "offset": 0,\n    "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider merchant->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant requests up to\n20 transactions for the\naccount from the mmp. mobile money provider--\x3e>merchant: http 200 (transactions array) (x-records-available-count=40) note right of mobile money provider: (2) the mmp returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. merchant->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of mobile money provider: (3) the merchant requests the\nremaining transactions for\nthe account from the mmp. mobile money provider--\x3e>merchant: http 200 (transactions array) (x-records-available-count=40) deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the mobile money provider is in a state that enables a client to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider merchant->>mobile money provider: get /heartbeat activate merchant activate mobile money provider note right of mobile money provider: (1) the merchant requests the availability\nof the service from the mmp. mobile money provider--\x3e>merchant: http 200 (heartbeat object) note right of mobile money provider: (2) the mmp returns the availability of\nthe service - available, unavailable\nor degraded. deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the merchant to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the mobile money provider.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant merchant participant mobile money provider merchant->>mobile money provider: get /responses{clientcorrelationid} activate merchant activate mobile money provider note right of mobile money provider: (1) using the merchant\'s\nclientcorrelationid, a request for the\nmissing api response is sent. mobile money provider--\x3e>merchant: http 200 (responses object) note right of mobile money provider: (2) a responses object is returned\ncontaining a link to the missing\nresource. merchant->>mobile money provider: get /{link} note right of mobile money provider: (3) the merchant uses the link to obtain\na representation of the missing\nresource. mobile money provider--\x3e>merchant: http 200 (requested object) deactivate merchant deactivate mobile money provider\nopen postman collection open postman collection with authentication',charsets:{}},{title:"Merchant Payments",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Merchant Payments"},regularPath:"/use-cases/merchant-payments/",relativePath:"use-cases/merchant-payments/index.md",key:"v-b6e1629e",path:"/use-cases/merchant-payments/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:1329}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nThe Merchant Payment Mobile Money APIs allow merchants to accept payments from mobile money customers. Supported payment mechanisms include:\n\n * Payee-initiated merchant payment. The merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * Payer-initiated merchant payment. The payer initiates the payment by specifying the merchant that is to be paid.\n * Merchant payment via pre-authorised payment code. The payer generates a payment authorisation code up to a maximum payment amount. The merchant then enters or scans (if rendered as a QR code) the payer’s code to perform the payment.\n\nClosed loop and open-loop merchant payments are supported by the Mobile Money API. Closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. Open loop payments occur where the payer and payee accounts reside with different mobile money providers. For further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                    ROLE\nMobile Money Providers   To understand how to implement the Mobile Money API to   API Provider\n                         receive payments from merchants.\nMerchants                To understand how to implement the Mobile Money API to   API Consumer\n                         accept mobile money payments.",normalizedContent:"# introduction\n\nthe merchant payment mobile money apis allow merchants to accept payments from mobile money customers. supported payment mechanisms include:\n\n * payee-initiated merchant payment. the merchant initiates the payment and the payer is requested to authenticate to confirm acceptance by the mobile money provider.\n * payer-initiated merchant payment. the payer initiates the payment by specifying the merchant that is to be paid.\n * merchant payment via pre-authorised payment code. the payer generates a payment authorisation code up to a maximum payment amount. the merchant then enters or scans (if rendered as a qr code) the payer’s code to perform the payment.\n\nclosed loop and open-loop merchant payments are supported by the mobile money api. closed loop merchant payments occur where the payer and payee accounts reside with the same mobile money provider. open loop payments occur where the payer and payee accounts reside with different mobile money providers. for further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                    role\nmobile money providers   to understand how to implement the mobile money api to   api provider\n                         receive payments from merchants.\nmerchants                to understand how to implement the mobile money api to   api consumer\n                         accept mobile money payments.",charsets:{}},{title:"Merchant Payments - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Merchant Payments - Open OAS UI"},regularPath:"/use-cases/merchant-payments/merchant-payments-open-oas-ui.html",relativePath:"use-cases/merchant-payments/merchant-payments-open-oas-ui.md",key:"v-4a5993f8",path:"/use-cases/merchant-payments/merchant-payments-open-oas-ui.html",headers:[{level:2,title:"Merchant Payments - Open OAS UI",slug:"merchant-payments-open-oas-ui",normalizedTitle:"merchant payments - open oas ui",charIndex:0}],headersStr:"Merchant Payments - Open OAS UI",content:"# Merchant Payments - Open OAS UI",normalizedContent:"# merchant payments - open oas ui",charsets:{}},{title:"P2P Transfers - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"P2P Transfers - API Service Definition"},regularPath:"/use-cases/p-2-p-transfers/api-service-definition.html",relativePath:"use-cases/p-2-p-transfers/api-service-definition.md",key:"v-1f032eec",path:"/use-cases/p-2-p-transfers/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2294},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:2737},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:11623},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:12668},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:12895},{level:3,title:"Accounts APIs",slug:"accounts-apis",normalizedTitle:"accounts apis",charIndex:21246},{level:4,title:"Identifying an FSP Account",slug:"identifying-an-fsp-account",normalizedTitle:"identifying an fsp account",charIndex:21459},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:21614},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:21800},{level:3,title:"Account Transactions API",slug:"account-transactions-api",normalizedTitle:"account transactions api",charIndex:22304},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:24431},{level:3,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:24917},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:25270},{level:3,title:"Account Holder Name API",slug:"account-holder-name-api",normalizedTitle:"account holder name api",charIndex:27794},{level:4,title:"Account Holder Name UML Class Diagram",slug:"account-holder-name-uml-class-diagram",normalizedTitle:"account holder name uml class diagram",charIndex:28197},{level:4,title:"Account Holder Name Object Definition",slug:"account-holder-name-object-definition",normalizedTitle:"account holder name object definition",charIndex:28292},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:28861},{level:3,title:"KYC Information Object",slug:"kyc-information-object",normalizedTitle:"kyc information object",charIndex:28884},{level:3,title:"Name Object",slug:"name-object",normalizedTitle:"name object",charIndex:32177},{level:3,title:"Id Document Object",slug:"id-document-object",normalizedTitle:"id document object",charIndex:33727},{level:3,title:"Address Object",slug:"address-object",normalizedTitle:"address object",charIndex:36049},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:37524},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:38433},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:39275},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:40102},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:41008},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:41900},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:41917},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:42294},{level:3,title:"ID Types",slug:"id-types",normalizedTitle:"id types",charIndex:42561},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:37524},{level:3,title:"ISO Country Codes",slug:"iso-country-codes",normalizedTitle:"iso country codes",charIndex:49458}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Accounts APIs Identifying an FSP Account Single Identifier Method Multiple Identifiers Method Account Transactions API Account Transaction UML Class Diagram Account Balances API Account Balance Object Definition Account Holder Name API Account Holder Name UML Class Diagram Account Holder Name Object Definition Supporting Objects KYC Information Object Name Object Id Document Object Address Object Account Identifiers Object Metadata Object Custom Data Object Fees Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types ID Types Account Identifiers ISO Country Codes",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nP2P Transfers can be created, and viewed and updated using transactions APIs. The following paths are permitted:\n\nPOST /transactions/type/transfer. To create a P2P transfer.\n\nGET /transactions/{transactionReference}. To view a P2P transfer.\n\nThe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Transaction "1" *-- "0..20" Metadata Transaction "1" *-- "0..2" KYC Information Transaction "1" *-- "0..1" International Transfer Information KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                   \nName                                         Type        Description                                                           Reference             Validation\namount                                       string      The transaction amount.                                        M                            Please refer to API Fundamentals document for amount\n                                                                                                                        M                            validation rules.\ncurrency                                     string      Currency of the transaction amount.                            M                            Enumeration = ISO Currency Codes\n                                                                                                                        M\ntype                                         string      The harmonised Transaction Type (not required if passed in     M                            Enumeration = Transaction Types\n                                                         the URL)                                                       M\nsubType                                      string      A non-harmonised sub-classification of the type of             O                            \n                                                         transaction. Values are not fixed, and usage will vary         O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   NA                           \n                                                         provider.                                                      ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                          \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                          \n                                                         the client.                                                    ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                         \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                         \n                                                         Provider                                                       ← O\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                         \n                                                         the response by API provider.                                  ← M\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                         \n                                                         may differ from the Transaction Reference.                     ← O\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                          \n                                                         to be associated with the transaction.                         ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                          \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                          \n                                                         was initiated.                                                 ← O\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers   debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                          If creditParty is supplied, then debitParty is optional.\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers   creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                          debitParty is supplied, then creditParty is optional.\nsenderKyc                                    object      A collection of fields detailing the KYC of the transaction    → O    KYC                   \n                                                         Sender.                                                        ← O\nrecipientKyc                                 object      A collection of fields detailed the KYC of the transaction     → O    KYC                   \n                                                         Recipient.                                                     ← O\noriginalTransactionReference                 string      This field indicates the transaction which is the subject of   → O                          \n                                                         the reversal.                                                  ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                          \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object           \n                                                         to the transaction.                                            ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata              \n                                                         populate additional transaction fields.                        ← O\n\n\n# Reversals API\n\nThe Reversals API is used to reverse a P2P transfer. The originating transaction reference must be provided in the path to identify the payment to be reversed. For a partial reversal, the amount needs to be supplied.\n\nFor viewing reversals, the Transactions API should be used. For performing a reversal without the original transaction reference, use the Transactions API.\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\nTIP\n\nNote that for performing a reversal without the original transaction reference, please use the Transactions API.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nFor viewing or updating reversals, the Transactions API should be used.\n\n# Reversal UML Class Diagram\n\nclassDiagram Credit Party Identifier "0..10" --* "" Reversal Debit Party Identifier "0..10" --* "" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                         TYPE        DESCRIPTION                                                         REFERENCE                        VALIDATION\ntransactionReference                         string      Unique reference for the transaction. This is returned in      NA                                    \n                                                         the response by API provider.                                  M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    O                                     \n                                                         to be associated with the transaction.                         O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            NA                                    \n                                                         transaction which is the subject of the reversal.              M\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    O    Account Identifiers              \n                                                         be identified. Keys include MSISDN and Wallet Identifier.      O\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    O    Account Identifiers              \n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   O\ntype                                         string      The harmonised Transaction Type                                M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                        M                                     Refunds (adjustments) are supported.\nsubType                                      string      A non-harmonised sub-classification of the type of             O                                     \n                                                         transaction. Values are not fixed, and usage will vary         O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   NA                                    \n                                                         provider.                                                      M\namount                                       string      The transaction Amount.                                        O                                     Please refer to API Fundamentals document for amount\n                                                                                                                        O                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            O                                     Enumeration = ISO Currency Codes\n                                                                                                                        O\ndescriptionText                              string      Free format text description of the transaction provided by    O                                     \n                                                         the client. This can be provided as a reference for the        O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     O    Fees Object                      \n                                                         to the transaction.                                            O\ngeoCode                                      string      Indicates the geographic location from where the transaction   O                                     \n                                                         was initiated.                                                 O\nrequestingOrganisation                       object      The originating organisation of the request.                   O    Requesting Organisation Object   \n                                                                                                                        O\nservicingIdentity                            string      The field is used to identify the servicing identity for       O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    NA                                    \n                                                         may differ from the Transaction Reference.                     O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      NA                                    \n                                                         Provider.                                                      O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     NA                                    \n                                                         Provider.                                                      O\nrequestDate                                  date-time   The date and time of the transaction request as supplied by    O                                     \n                                                         the client.                                                    O\ncustomData                                   string      A collection of key/value pairs that can be used for           O    Custom Data Object               \n                                                         provider specific fields.                                      O\nmetadata                                     array       A collection of key/value pairs. These can be used to          O    Metadata                         \n                                                         populate additional properties that describe administrative    O\n                                                         information regarding the transaction.\n\n\n# Accounts APIs\n\nUsing account APIs, an FSP can:\n\n * View transfers for their account with another FSP.\n * View their account balance with another FSP.\n * Return the name of the intended recipient of a transfer.\n\n# Identifying an FSP Account\n\nTwo methods are provided for identifying an FSP account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifierType}/{identifier} .\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3} .\n\nThe path uses a ‘$’ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by ‘@’.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Account Transactions API\n\nAn FSP should use this API to return a list of payments transfers against their account. One of the following paths can be used:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlLimit              integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noOffset             integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram ID Document "0..10" --* "1" KYC Information Address "0..1" --* "1" KYC Information Name "0..1" --* "1" KYC Information Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction KYC Information "0..2" --* "1" Transaction Metadata "0..20" --* "1" Transaction International TransferInformation "0..1" --* "1" Transaction Transaction "0..*" --* "2" Account\n\n\n# Account Balances API\n\nUsing the Account Balances API, an FSP can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the FSP account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                         REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                NA               Please refer to API Fundamentals document for amount\n                                                                                           O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 O                validation rules.\ncurrency           string   Currency for all returned balances.                            NA               Enumeration = ISO Currency Codes\n                                                                                           O\n\n\n# Account Holder Name API\n\nUsing the Account Holder Name API, a sending FSP can retrieve the name of the intended recipient of a transfer. This can then be provided to the sending account holder to confirm the recipient name is correct prior to authorising the transfer.\n\nPermitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/accountname\n\nor GET /accounts/{Account Identifiers}/accountname\n\n# Account Holder Name UML Class Diagram\n\nclassDiagram Account Holder Name "1" --* "1" Account\n\n# Account Holder Name Object Definition\n\n{\n  "name": {\n    "title": "Mr",\n    "firstName": "John",\n    "middleName": "Alan",\n    "lastName": "Doe",\n    "fullName": "John Alan Doe",\n    "nativeName": "John Doe"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME   TYPE        DESCRIPTION                                                     REFERENCE   VALIDATION\nname   Reference   A collection of fields detailing the name of the primary   NA   Name        \n                   account holder.                                            O\n\n\n# Supporting Objects\n\n\n# KYC Information Object\n\nKYC refers to ‘Know your Customer’. The KYC object contains a number of fields that enable the identity of subject to be verified. KYC can be provided with transfers for the sending identity and the receiving identity. There are no mandatory KYC object fields.\n\n{\n  "birthCountry": "GB",\n  "dateOfBirth": "2000-11-20",\n  "contactPhone": "+1234567890",\n  "emailAddress": "example@mail.com",\n  "employerName": "Employer LLC",\n  "gender": "m",\n  "idDocument": [\n    {\n      "idType": "passport",\n      "idNumber": "TEST123456"\n    }\n  ],\n  "nationality": "GB",\n  "postalAddress": {\n    "addressLine1": "33 Brow Rd",\n    "addressLine2": "Unit 200",\n    "addressLine3": "Paddock",\n    "city": "Huddersfield",\n    "stateProvince": "West Yorkshire",\n    "postalCode": "HD1 4TP",\n    "country": "GB"\n  },\n  "occupation": "Manager"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME            TYPE     DESCRIPTION                                                     REFERENCE     VALIDATION\nbirthCountry    string   The country of birth of the KYC subject.                    O                 Enumeration = ISO Country Codes\n                                                                                     O\ndateOfBirth     date     Birth date of the KYC subject.                              O                 \n                                                                                     O\ncontactPhone    string   Contact phone number (mobile or landline) of the KYC        O                 Must contain between 6 and 15 consecutive digits\n                         subject.                                                    O                 First character can contain a ‘+’ or digit\n                                                                                                       Can contain spaces.\nemailAddress    string   Email address of the KYC subject.                           O                 \n                                                                                     O\nemployerName    string   Employer name of the KYC subject.                           O                 \n                                                                                     O\ngender          string   Gender of the KYC Object.                                   O                 Length=1, Enumeration = (m)ale, (f)emale, (u)nspecified\n                                                                                     O\nidDocument      array    An array of fields containing the forms of identification   O   Id Document   \n                         that are associated with the subject.                       O\nnationality     string   Nationality of the KYC subject.                             O                 Enumeration = ISO Country Codes\n                                                                                     O\npostalAddress   object   A collection of fields that details the postal address of   O   Address       \n                         the KYC subject.                                            O\noccupation      string   Occupation of the KYC subject.                              O                 \n                                                                                     O\n\n\n# Name Object\n\nThe name object identifies the name details for the subject identity.\n\n{\n  "title": "Mr",\n  "firstName": "John",\n  "middleName": "Alan",\n  "lastName": "Doe",\n  "fullName": "John Alan Doe",\n  "nativeName": "John Doe"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME         TYPE     DESCRIPTION                                                        REFERENCE   VALIDATION\ntitle        string   The given title of the KYC subject, e.g. Mr, Mrs, Dr.          O               \n                                                                                     O\nfirstName    string   First name (also referred to as given name) of the KYC         O               \n                      subject.                                                       O\nmiddleName   string   Middle Name of the KYC subject.                                O               \n                                                                                     O\nlastName     string   Surname (also referred to as last or family name) of the KYC   O               \n                      subject.                                                       O\nfullName     string   The full name of the KYC subject.                              O               \n                                                                                     O\nnativeName   string   The full name expressed as in the native language.             O               \n                                                                                     O\n\n\n# Id Document Object\n\nAs part of KYC information, identification documentation is normally required. The Id Document Object enables documents pertaining to a subject’s identity to be described.\n\n{\n  "idType": "passport",\n  "idNumber": "TEST123456",\n  "issueDate": "2018-11-20",\n  "expiryDate ": "2018-11-20",\n  "issuer": "123456789",\n  "issuerPlace": "London",\n  "issuerCountry": "GB",\n  "otherIdDescription": "Other ID description..."\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                 TYPE     DESCRIPTION                                                        REFERENCE   VALIDATION\nidType               string   Indicates the type of identification for the KYC subject,      M               Enumeration = ID Types\n                              e.g. passport, driving licence etc.                            M\nidNumber             string   Reference pertaining to the type of identification for the     O               \n                              KYC subject.                                                   O\nissueDate            date     Date of issue for the identification document.                 O               \n                                                                                             O\nexpiryDate           date     Date of expiry for the identification document.                O               \n                                                                                             O\nissuer               string   Indicates the organisation/government entity that issued the   O               \n                              ID document.                                                   O\nissuerPlace          string   Place of issue for the identification type.                    O               \n                                                                                             O\nissuerCountry        string   Country where the identification type was issued.              O               Enumeration = ISO Country Codes\n                                                                                             O\notherIdDescription   string   Where an ID Type of ‘otherid’ is specified, a description of   O               \n                              the type of identification can be provided in this field.      O\n\n\n# Address Object\n\nThe address object holds the postal address of the subject. Due to variability of address information in a number of mobile money markets, only country is mandatory.\n\n{\n  "addressLine1": "33 Brow Rd",\n  "addressLine2": "Unit 200",\n  "addressLine3": "Paddock",\n  "city": "Huddersfield",\n  "stateProvince": "West Yorkshire",\n  "postalCode": "HD1 4TP",\n  "country": "GB"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME            TYPE     DESCRIPTION                       REFERENCE   VALIDATION\naddressLine1    string   First line of the address.    O               \n                                                       O\naddressLine2    string   Second line of the address.   O               \n                                                       O\naddressLine3    string   Third line of the address.    O               \n                                                       O\ncity            string   City/Town.                    O               \n                                                       O\nstateProvince   string   State or Province.            O               \n                                                       O\npostalCode      string   Postal Code.                  O               \n                                                       O\ncountry         string   Country                       M               Enumeration = ISO Country Codes\n                                                       M\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                       REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         M               Enumeration = Account Identifiers\n                                                               M\nvalue   string   Provides the account identifier type value.   M               \n                                                               M\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                   REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  M               \n                                                                 M\nfeeAmount     string   Defines the amount of the fee.            M               Please refer to API Fundamentals document for amount\n                                                                 M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   M               Enumeration = ISO Currency Codes\n                                                                 M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nCODE       DESCRIPTION\ntransfer   Transfer of funds between mobile money provider and another\n           provider or financial institution in the same country.\nreversal   Reversal of a prior transaction to return funds to the\n           payer.\n\n\n# ID Types\n\nThe ID Types enumeration contains accepted identification types. Due to the wide international variation in accepted types of identification, a catch-all type of ‘otherid’ is included.\n\nID TYPE                DESCRIPTION\npassport               Payment of bill from a business for goods and/or services.\nnationalregistration   National Registration Number.\nothered                Catch-all for IDs not on the list.\ndrivinglicence         Driving Licence Number.\nsocialsecurity         Social Security Number.\nalienregistration      Alien Registration ID.\nnationalidcard         National Identity Card.\nemployer               Employers Identification.\ntaxid                  Tax Identification Number.\nseniorcitizenscard     Senior Citizens ID Card.\nmarriagecertificate    Marriage Certificate.\nbirthcertificate       Birth Certificate.\nhealthcard             Health Card.\nvotersid               Voters Identification.\nvillageelderletter     Letter of confirmation from village elder.\npancard                Credit/debit card number (Primary Account Number).\nofficialletter         Official letter confirming identity.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.\n\n\n# ISO Country Codes\n\nThe two-character alphabetic code for country as defined by ISO 3166 is to be used for all fields specifying a country or nationality. The full list of codes is maintained by the International Organisation for Standardisation. The list can be obtained via the following website - http://www.iso.org/iso/country_codes.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\np2p transfers can be created, and viewed and updated using transactions apis. the following paths are permitted:\n\npost /transactions/type/transfer. to create a p2p transfer.\n\nget /transactions/{transactionreference}. to view a p2p transfer.\n\nthe following paths are permitted:\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction transaction "1" *-- "0..20" metadata transaction "1" *-- "0..2" kyc information transaction "1" *-- "0..1" international transfer information kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                   \nname                                         type        description                                                           reference             validation\namount                                       string      the transaction amount.                                        m                            please refer to api fundamentals document for amount\n                                                                                                                        m                            validation rules.\ncurrency                                     string      currency of the transaction amount.                            m                            enumeration = iso currency codes\n                                                                                                                        m\ntype                                         string      the harmonised transaction type (not required if passed in     m                            enumeration = transaction types\n                                                         the url)                                                       m\nsubtype                                      string      a non-harmonised sub-classification of the type of             o                            \n                                                         transaction. values are not fixed, and usage will vary         o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   na                           \n                                                         provider.                                                      ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                          \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                          \n                                                         the client.                                                    ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                         \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                         \n                                                         provider                                                       ← o\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                         \n                                                         the response by api provider.                                  ← m\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                         \n                                                         may differ from the transaction reference.                     ← o\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                          \n                                                         to be associated with the transaction.                         ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                          \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\ngeocode                                      string      indicates the geographic location from where the transaction   → o                          \n                                                         was initiated.                                                 ← o\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers   debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                          if creditparty is supplied, then debitparty is optional.\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers   creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                          debitparty is supplied, then creditparty is optional.\nsenderkyc                                    object      a collection of fields detailing the kyc of the transaction    → o    kyc                   \n                                                         sender.                                                        ← o\nrecipientkyc                                 object      a collection of fields detailed the kyc of the transaction     → o    kyc                   \n                                                         recipient.                                                     ← o\noriginaltransactionreference                 string      this field indicates the transaction which is the subject of   → o                          \n                                                         the reversal.                                                  ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                          \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object           \n                                                         to the transaction.                                            ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata              \n                                                         populate additional transaction fields.                        ← o\n\n\n# reversals api\n\nthe reversals api is used to reverse a p2p transfer. the originating transaction reference must be provided in the path to identify the payment to be reversed. for a partial reversal, the amount needs to be supplied.\n\nfor viewing reversals, the transactions api should be used. for performing a reversal without the original transaction reference, use the transactions api.\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\ntip\n\nnote that for performing a reversal without the original transaction reference, please use the transactions api.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nfor viewing or updating reversals, the transactions api should be used.\n\n# reversal uml class diagram\n\nclassdiagram credit party identifier "0..10" --* "" reversal debit party identifier "0..10" --* "" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                         type        description                                                         reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      na                                    \n                                                         the response by api provider.                                  m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    o                                     \n                                                         to be associated with the transaction.                         o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            na                                    \n                                                         transaction which is the subject of the reversal.              m\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    o    account identifiers              \n                                                         be identified. keys include msisdn and wallet identifier.      o\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    o    account identifiers              \n                                                         to be identified. keys include msisdn and wallet identifier.   o\ntype                                         string      the harmonised transaction type                                m                                     enumeration = transaction types note that only reversals and\n                                                                                                                        m                                     refunds (adjustments) are supported.\nsubtype                                      string      a non-harmonised sub-classification of the type of             o                                     \n                                                         transaction. values are not fixed, and usage will vary         o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   na                                    \n                                                         provider.                                                      m\namount                                       string      the transaction amount.                                        o                                     please refer to api fundamentals document for amount\n                                                                                                                        o                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            o                                     enumeration = iso currency codes\n                                                                                                                        o\ndescriptiontext                              string      free format text description of the transaction provided by    o                                     \n                                                         the client. this can be provided as a reference for the        o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     o    fees object                      \n                                                         to the transaction.                                            o\ngeocode                                      string      indicates the geographic location from where the transaction   o                                     \n                                                         was initiated.                                                 o\nrequestingorganisation                       object      the originating organisation of the request.                   o    requesting organisation object   \n                                                                                                                        o\nservicingidentity                            string      the field is used to identify the servicing identity for       o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    na                                    \n                                                         may differ from the transaction reference.                     o\ncreationdate                                 date-time   date and time when the transaction was created by the api      na                                    \n                                                         provider.                                                      o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     na                                    \n                                                         provider.                                                      o\nrequestdate                                  date-time   the date and time of the transaction request as supplied by    o                                     \n                                                         the client.                                                    o\ncustomdata                                   string      a collection of key/value pairs that can be used for           o    custom data object               \n                                                         provider specific fields.                                      o\nmetadata                                     array       a collection of key/value pairs. these can be used to          o    metadata                         \n                                                         populate additional properties that describe administrative    o\n                                                         information regarding the transaction.\n\n\n# accounts apis\n\nusing account apis, an fsp can:\n\n * view transfers for their account with another fsp.\n * view their account balance with another fsp.\n * return the name of the intended recipient of a transfer.\n\n# identifying an fsp account\n\ntwo methods are provided for identifying an fsp account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifiertype}/{identifier} .\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3} .\n\nthe path uses a ‘$’ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by ‘@’.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# account transactions api\n\nan fsp should use this api to return a list of payments transfers against their account. one of the following paths can be used:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nllimit              integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\nooffset             integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram id document "0..10" --* "1" kyc information address "0..1" --* "1" kyc information name "0..1" --* "1" kyc information credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction kyc information "0..2" --* "1" transaction metadata "0..20" --* "1" transaction international transferinformation "0..1" --* "1" transaction transaction "0..*" --* "2" account\n\n\n# account balances api\n\nusing the account balances api, an fsp can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the fsp account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                         reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                na               please refer to api fundamentals document for amount\n                                                                                           o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 o                validation rules.\ncurrency           string   currency for all returned balances.                            na               enumeration = iso currency codes\n                                                                                           o\n\n\n# account holder name api\n\nusing the account holder name api, a sending fsp can retrieve the name of the intended recipient of a transfer. this can then be provided to the sending account holder to confirm the recipient name is correct prior to authorising the transfer.\n\npermitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/accountname\n\nor get /accounts/{account identifiers}/accountname\n\n# account holder name uml class diagram\n\nclassdiagram account holder name "1" --* "1" account\n\n# account holder name object definition\n\n{\n  "name": {\n    "title": "mr",\n    "firstname": "john",\n    "middlename": "alan",\n    "lastname": "doe",\n    "fullname": "john alan doe",\n    "nativename": "john doe"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname   type        description                                                     reference   validation\nname   reference   a collection of fields detailing the name of the primary   na   name        \n                   account holder.                                            o\n\n\n# supporting objects\n\n\n# kyc information object\n\nkyc refers to ‘know your customer’. the kyc object contains a number of fields that enable the identity of subject to be verified. kyc can be provided with transfers for the sending identity and the receiving identity. there are no mandatory kyc object fields.\n\n{\n  "birthcountry": "gb",\n  "dateofbirth": "2000-11-20",\n  "contactphone": "+1234567890",\n  "emailaddress": "example@mail.com",\n  "employername": "employer llc",\n  "gender": "m",\n  "iddocument": [\n    {\n      "idtype": "passport",\n      "idnumber": "test123456"\n    }\n  ],\n  "nationality": "gb",\n  "postaladdress": {\n    "addressline1": "33 brow rd",\n    "addressline2": "unit 200",\n    "addressline3": "paddock",\n    "city": "huddersfield",\n    "stateprovince": "west yorkshire",\n    "postalcode": "hd1 4tp",\n    "country": "gb"\n  },\n  "occupation": "manager"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname            type     description                                                     reference     validation\nbirthcountry    string   the country of birth of the kyc subject.                    o                 enumeration = iso country codes\n                                                                                     o\ndateofbirth     date     birth date of the kyc subject.                              o                 \n                                                                                     o\ncontactphone    string   contact phone number (mobile or landline) of the kyc        o                 must contain between 6 and 15 consecutive digits\n                         subject.                                                    o                 first character can contain a ‘+’ or digit\n                                                                                                       can contain spaces.\nemailaddress    string   email address of the kyc subject.                           o                 \n                                                                                     o\nemployername    string   employer name of the kyc subject.                           o                 \n                                                                                     o\ngender          string   gender of the kyc object.                                   o                 length=1, enumeration = (m)ale, (f)emale, (u)nspecified\n                                                                                     o\niddocument      array    an array of fields containing the forms of identification   o   id document   \n                         that are associated with the subject.                       o\nnationality     string   nationality of the kyc subject.                             o                 enumeration = iso country codes\n                                                                                     o\npostaladdress   object   a collection of fields that details the postal address of   o   address       \n                         the kyc subject.                                            o\noccupation      string   occupation of the kyc subject.                              o                 \n                                                                                     o\n\n\n# name object\n\nthe name object identifies the name details for the subject identity.\n\n{\n  "title": "mr",\n  "firstname": "john",\n  "middlename": "alan",\n  "lastname": "doe",\n  "fullname": "john alan doe",\n  "nativename": "john doe"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname         type     description                                                        reference   validation\ntitle        string   the given title of the kyc subject, e.g. mr, mrs, dr.          o               \n                                                                                     o\nfirstname    string   first name (also referred to as given name) of the kyc         o               \n                      subject.                                                       o\nmiddlename   string   middle name of the kyc subject.                                o               \n                                                                                     o\nlastname     string   surname (also referred to as last or family name) of the kyc   o               \n                      subject.                                                       o\nfullname     string   the full name of the kyc subject.                              o               \n                                                                                     o\nnativename   string   the full name expressed as in the native language.             o               \n                                                                                     o\n\n\n# id document object\n\nas part of kyc information, identification documentation is normally required. the id document object enables documents pertaining to a subject’s identity to be described.\n\n{\n  "idtype": "passport",\n  "idnumber": "test123456",\n  "issuedate": "2018-11-20",\n  "expirydate ": "2018-11-20",\n  "issuer": "123456789",\n  "issuerplace": "london",\n  "issuercountry": "gb",\n  "otheriddescription": "other id description..."\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                 type     description                                                        reference   validation\nidtype               string   indicates the type of identification for the kyc subject,      m               enumeration = id types\n                              e.g. passport, driving licence etc.                            m\nidnumber             string   reference pertaining to the type of identification for the     o               \n                              kyc subject.                                                   o\nissuedate            date     date of issue for the identification document.                 o               \n                                                                                             o\nexpirydate           date     date of expiry for the identification document.                o               \n                                                                                             o\nissuer               string   indicates the organisation/government entity that issued the   o               \n                              id document.                                                   o\nissuerplace          string   place of issue for the identification type.                    o               \n                                                                                             o\nissuercountry        string   country where the identification type was issued.              o               enumeration = iso country codes\n                                                                                             o\notheriddescription   string   where an id type of ‘otherid’ is specified, a description of   o               \n                              the type of identification can be provided in this field.      o\n\n\n# address object\n\nthe address object holds the postal address of the subject. due to variability of address information in a number of mobile money markets, only country is mandatory.\n\n{\n  "addressline1": "33 brow rd",\n  "addressline2": "unit 200",\n  "addressline3": "paddock",\n  "city": "huddersfield",\n  "stateprovince": "west yorkshire",\n  "postalcode": "hd1 4tp",\n  "country": "gb"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname            type     description                       reference   validation\naddressline1    string   first line of the address.    o               \n                                                       o\naddressline2    string   second line of the address.   o               \n                                                       o\naddressline3    string   third line of the address.    o               \n                                                       o\ncity            string   city/town.                    o               \n                                                       o\nstateprovince   string   state or province.            o               \n                                                       o\npostalcode      string   postal code.                  o               \n                                                       o\ncountry         string   country                       m               enumeration = iso country codes\n                                                       m\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                       reference   validation\nkey     string   provides the account identifier type.         m               enumeration = account identifiers\n                                                               m\nvalue   string   provides the account identifier type value.   m               \n                                                               m\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                   reference   validation\nfeetype       string   defines the type of fee.                  m               \n                                                                 m\nfeeamount     string   defines the amount of the fee.            m               please refer to api fundamentals document for amount\n                                                                 m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   m               enumeration = iso currency codes\n                                                                 m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\ncode       description\ntransfer   transfer of funds between mobile money provider and another\n           provider or financial institution in the same country.\nreversal   reversal of a prior transaction to return funds to the\n           payer.\n\n\n# id types\n\nthe id types enumeration contains accepted identification types. due to the wide international variation in accepted types of identification, a catch-all type of ‘otherid’ is included.\n\nid type                description\npassport               payment of bill from a business for goods and/or services.\nnationalregistration   national registration number.\nothered                catch-all for ids not on the list.\ndrivinglicence         driving licence number.\nsocialsecurity         social security number.\nalienregistration      alien registration id.\nnationalidcard         national identity card.\nemployer               employers identification.\ntaxid                  tax identification number.\nseniorcitizenscard     senior citizens id card.\nmarriagecertificate    marriage certificate.\nbirthcertificate       birth certificate.\nhealthcard             health card.\nvotersid               voters identification.\nvillageelderletter     letter of confirmation from village elder.\npancard                credit/debit card number (primary account number).\nofficialletter         official letter confirming identity.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.\n\n\n# iso country codes\n\nthe two-character alphabetic code for country as defined by iso 3166 is to be used for all fields specifying a country or nationality. the full list of codes is maintained by the international organisation for standardisation. the list can be obtained via the following website - http://www.iso.org/iso/country_codes.',charsets:{}},{title:"P2P Transfers",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"P2P Transfers"},regularPath:"/use-cases/p-2-p-transfers/",relativePath:"use-cases/p-2-p-transfers/index.md",key:"v-a1d2b7de",path:"/use-cases/p-2-p-transfers/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0}],headersStr:"Introduction",content:'# Introduction\n\nThe P2P Transfer Mobile Money APIs allow financial service providers (FSPs) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). The API supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. The API supports ‘on-us’ P2P transfers (both accounts held within one FSP) and ‘off-us’ P2P transfers (accounts held in different FSPs). Bilateral and Switch-based transfers can be supported.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\nUse case scenarios\n\nP2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP submits a quotation\nrequest to the Switch. The Switch will return the Request State object to indicate that the request\nis \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the Receiving FSP.\nThe Receiving FSP will return the Request State object to indicate\nthat the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 200 (Request State Object) Switch--\x3e>Sending FSP: HTTP 200 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the transaction has succesfully complteted\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer request to the Swith. The Switch\nwill return the Request State object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the Request State object\nto indicate that the request is \'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the transaction has been successfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the intended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP submits a transfer request.\nThe Receiving FSP will return the Request State object to indicate that the request is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the transation has been succesfully completed\nby returning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP \'On-us\' P2P Transfer Initiated by a Third Party Provider\n\n"\'On-us\' P2P Transfer Initiated by a Third Party Provider" item content will be here\n\nP2P Transfer Failure\n\n"P2P Transfer Failure" item content will be here\n\nP2P Transfer Reversal\n\n"P2P Transfer Reversal" item content will be here\n\nObtain an FSP Balance\n\n"Obtain an FSP Balance" item content will be here\n\nRetrieve Transactions for an FSP\n\n"Retrieve Transactions for an FSP" item content will be here\n\nP2P Transfer via Switch\n\n"Check for Service Availability" item content will be here\n\nRetrieve a Missing API Response\n\n"Retrieve a Missing API Response" item content will be here',normalizedContent:'# introduction\n\nthe p2p transfer mobile money apis allow financial service providers (fsps) to transfer funds from an account holding individual to another account holding individual or to a non-account holding individual (known as an unregistered customer). the api supports a wide number of financial service providers including mobile money providers, banks, and micro-finance institutions. the api supports ‘on-us’ p2p transfers (both accounts held within one fsp) and ‘off-us’ p2p transfers (accounts held in different fsps). bilateral and switch-based transfers can be supported.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\nuse case scenarios\n\np2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to (3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp submits a quotation\nrequest to the switch. the switch will return the request state object to indicate that the request\nis \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the receiving fsp.\nthe receiving fsp will return the request state object to indicate\nthat the request is \'pending\'. receiving fsp--\x3e>switch: http 200 (request state object) switch--\x3e>sending fsp: http 200 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation has been successfully\ncreated by returning the final representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the transaction has succesfully complteted\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer request to the swith. the switch\nwill return the request state object to indicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the request state object\nto indicate that the request is \'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the transaction has been\nsuccessfully completed by returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the transaction has been successfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the intended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp submits a transfer request.\nthe receiving fsp will return the request state object to indicate that the request is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the transation has been succesfully completed\nby returning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp \'on-us\' p2p transfer initiated by a third party provider\n\n"\'on-us\' p2p transfer initiated by a third party provider" item content will be here\n\np2p transfer failure\n\n"p2p transfer failure" item content will be here\n\np2p transfer reversal\n\n"p2p transfer reversal" item content will be here\n\nobtain an fsp balance\n\n"obtain an fsp balance" item content will be here\n\nretrieve transactions for an fsp\n\n"retrieve transactions for an fsp" item content will be here\n\np2p transfer via switch\n\n"check for service availability" item content will be here\n\nretrieve a missing api response\n\n"retrieve a missing api response" item content will be here',charsets:{}},{title:"P2P Transfers - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"P2P Transfers - Open OAS UI"},regularPath:"/use-cases/p-2-p-transfers/p2p-transfers-open-oas-ui.html",relativePath:"use-cases/p-2-p-transfers/p2p-transfers-open-oas-ui.md",key:"v-dd0cae90",path:"/use-cases/p-2-p-transfers/p2p-transfers-open-oas-ui.html",headers:[{level:2,title:"P2P Transfers - Open OAS UI",slug:"p2p-transfers-open-oas-ui",normalizedTitle:"p2p transfers - open oas ui",charIndex:0}],headersStr:"P2P Transfers - Open OAS UI",content:"# P2P Transfers - Open OAS UI",normalizedContent:"# p2p transfers - open oas ui",charsets:{}},{title:"P2P Transfers - Use Сase Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"P2P Transfers - Use Сase Scenarios"},regularPath:"/use-cases/p-2-p-transfers/scenarios/scenarios.html",relativePath:"use-cases/p-2-p-transfers/scenarios/scenarios.md",key:"v-2f26d510",path:"/use-cases/p-2-p-transfers/scenarios/scenarios.html",headers:[{level:2,title:"P2P Transfer via Switch",slug:"p2p-transfer-via-switch",normalizedTitle:"p2p transfer via switch",charIndex:599},{level:2,title:"Bilateral P2P Transfer",slug:"bilateral-p2p-transfer",normalizedTitle:"bilateral p2p transfer",charIndex:6273},{level:2,title:"‘On-us’ P2P Transfer Initiated by a Third Party Provider",slug:"on-us-p2p-transfer-initiated-by-a-third-party-provider",normalizedTitle:"‘on-us’ p2p transfer initiated by a third party provider",charIndex:8694},{level:2,title:"P2P Transfer Failure",slug:"p2p-transfer-failure",normalizedTitle:"p2p transfer failure",charIndex:13062},{level:2,title:"P2P Transfer Reversal",slug:"p2p-transfer-reversal",normalizedTitle:"p2p transfer reversal",charIndex:14417},{level:2,title:"Obtain an FSP Balance",slug:"obtain-an-fsp-balance",normalizedTitle:"obtain an fsp balance",charIndex:15929},{level:2,title:"Retrieve Transactions for an FSP",slug:"retrieve-transactions-for-an-fsp",normalizedTitle:"retrieve transactions for an fsp",charIndex:16471},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:17769},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:18549}],headersStr:"P2P Transfer via Switch Bilateral P2P Transfer ‘On-us’ P2P Transfer Initiated by a Third Party Provider P2P Transfer Failure P2P Transfer Reversal Obtain an FSP Balance Retrieve Transactions for an FSP Check for Service Availability Retrieve a Missing API Response",content:'# About Use Сase Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# P2P Transfer via Switch\n\nIn this diagram, a switch is used by the sending FSP to (1) confirm the recipient name, (2) request a quotation and and to(3) perform the transfer with the receiving FSP. A callback is provided by the receiving FSP to return confirmation of the transfer.\n\n \n\n\nGET .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../quotations\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestAmount": "75.30",\n    "requestCurrency": "RWF",\n  "requestDate": "2017-07-21T17:32:28Z",\n    "type": "transfer",\n    "subType": "abc",\n    "chosenDeliveryMethod": "directtoaccount",\n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/transfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "100.00",\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "GBP",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationalTransferInformation": {\n        "originCountry": "AD",\n        "quotationReference": "{{quotationReference}}",\n        "quoteId": "{{quoteId}}",\n        "remittancePurpose": "personal",\n        "deliveryMethod": "agent"\n   },    \n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "testorganisation"\n  }\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Switch participant Receiving FSP Sending FSP->>Switch: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (1) The Sending FSP retrieves the name of the intended\nrecipient from the Receiving FSP via the Switch. Switch->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname Receiving FSP--\x3e>Switch: HTTP 200 (Account Holder Name Object) Switch--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Sending FSP deactivate Switch deactivate Receiving FSP Sending FSP->>Switch: POST /quotations activate Sending FSP activate Switch activate Receiving FSP Note right of Switch: (2) Subject to sender confirmation of the name returned in step 1, the Sending FSP\nsubmits a quotation request to the Switch. The Switch will return the Request\nState object to indicate that the request is \'pending\'. Switch->>Receiving FSP: POST /quotations Note right of Receiving FSP: (3) The Swith in turn submits the quotation request to the\nReceiving FSP. The Receiving FSP will return the\nRequest State object to indicate that the request is\n\'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Switch Receiving FSP->>Switch: PUT {Callback URL} (Quotations Object) activate Switch activate Sending FSP Note right of Receiving FSP: (4) The FSP informs the Switch that the quotation\nhas been successfully created by returning the\nfinal representation of the quotation. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Quotations Object) Note right of Switch: (5) The Swith in turn informs the Sending FSP that the quotation\nhas successfully created by returning the final representation\nof the quotation. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP Sending FSP->>Switch: POST /transactions/type/transfer activate Switch activate Sending FSP activate Receiving FSP Note right of Switch: (6) Subject to sender confirmation, the Sending FSP submits a transfer\nrequest to the Swith. The Switch will return the Request State object to\nindicate that the request is \'pending\'. Switch->>Receiving FSP: POST /transactions/type/transfer Note right of Receiving FSP: (7) The Switch in turn submits the transaction request to the\nReceiving FSP. The Receiving FSP will return the\nRequest State object to indicate that the request is\n\'pending\'. Receiving FSP--\x3e>Switch: HTTP 202 (Request State Object) Switch--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Switch deactivate Sending FSP Receiving FSP->>Switch: PUT {Callback URL} (Transactions Object) activate Switch activate Sending FSP Note right of Receiving FSP: (8) The FSP informs the Switch that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Switch--\x3e>Receiving FSP: HTTP 204 deactivate Receiving FSP Switch->>Sending FSP: PUT {Callback URL} (Transactions Object) Note right of Switch: (9) The Swith in turn informs the Sending FSP that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Sending FSP--\x3e>Switch: HTTP 204 deactivate Switch deactivate Sending FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Bilateral P2P Transfer\n\nIn this diagram, the sending FSP connects directly with the receiving FSP to confirm the recipient name and to perform the transfer. A callback is provided by the receiving FSP to return confirmation of the transfer. In this example, a quotation is not requested.\n\n \n\n\nGET .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/transfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "100.00",\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "GBP",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "testorganisation"\n  }\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the\nintended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP\nsubmits a transfer request. The Receiving FSP will\nreturn the Request State object to indicate that the\nrequest is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Transaction Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the\ntransation has been succesfully completed by\nreturning the final representation of the transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# ‘On-us’ P2P Transfer Initiated by a Third Party Provider\n\nIn this diagram, A third party provider enables a sender to transfer money to a recipient in the same FSP. The third party provider (1) confirms the recipient name, (2) requests a quotation and (3) performs the transfer with the FSP. A callback is provided by the FSP to return confirmation of the transfer.\n\n \n\n\nGET .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../quotations\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestAmount": "75.30",\n    "requestCurrency": "RWF",\n  "requestDate": "2017-07-21T17:32:28Z",\n    "type": "transfer",\n    "subType": "abc",\n    "chosenDeliveryMethod": "directtoaccount",\n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/transfer\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "100.00",\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "GBP",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationalTransferInformation": {\n        "originCountry": "AD",\n        "quotationReference": "{{quotationReference}}",\n        "quoteId": "{{quoteId}}",\n        "remittancePurpose": "personal",\n        "deliveryMethod": "agent"\n   },    \n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "testorganisation"\n  }\n}\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Third Party Provider participant FSP Third Party Provider->>FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Third Party Provider activate FSP Note right of FSP: (1) The Third Party Provider retrieves the name of the\nintended recipient from the FSP. FSP--\x3e>Third Party Provider: HTTP 200 (Account Holder Name Object) deactivate Third Party Provider deactivate FSP Third Party Provider->>FSP: POST /quotations activate Third Party Provider activate FSP Note right of FSP: (2) Subject to sender confirmation, the Third Party Provider\nsubmits a quotation request. The FSP will return the\nRequest State object to indicate that the request is\n\'pending\'. Third Party Provider--\x3e>FSP: HTTP 202 (Request State Object) deactivate Third Party Provider deactivate FSP FSP->>Third Party Provider: PUT {Callback URL} (Quotations Object) activate Third Party Provider activate FSP Note right of FSP: (3) The FSP in turn informs the Third Party Provider that\nthe quotation has been successfully completed by\nreturning the final representation of the quotation. Third Party Provider--\x3e>FSP: HTTP 204 deactivate Third Party Provider deactivate FSP Third Party Provider->>FSP: POST /transactions/type/transfer activate Third Party Provider activate FSP Note right of FSP: (4) Subject to sender confirmation, the Third Party Provider\nsubmits a transfer request. The FSP will return the\nRequest State object to indicate that the request is\n\'pending\'. Third Party Provider--\x3e>FSP: HTTP 202 (Request State Object) deactivate Third Party Provider deactivate FSP FSP->>Third Party Provider: PUT {Callback URL} (Transactions Object) activate Third Party Provider activate FSP Note right of FSP: (5) The FSP in turn informs the Third Party Provider that\nthe transaction has been successfully completed by\nreturning the final representation of the transaction. Third Party Provider--\x3e>FSP: HTTP 204 deactivate Third Party Provider deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# P2P Transfer Failure\n\nIn some failure scenarios, a transfer may need to be reversed. This diagram illustrates an reversal with the final result communicated via the callback.\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /accounts/{identifierType}/{identifier}/accountname activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP retrieves the name of the\nintended recipient from the Receiving FSP. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Account Holder Name Object) deactivate Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/type/transfer activate Receiving FSP Note right of Receiving FSP: (2) Subject to sender confirmation, the Sending FSP\nsubmits a transfer request. The Receiving FSP will\nreturn the Request State object to indicate that the\nrequest is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) deactivate Sending FSP deactivate Receiving FSP Receiving FSP->>Sending FSP: PUT {Callback URL} (Error Object) activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (3) The FSP in turn informs the Sending FSP that the\ntransation has been failed by returning an Error\nobject containing the reason for failure. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP\n\n\n# P2P Transfer Reversal\n\nIn some failure scenarios, a transfer may need to be reversed. This diagram illustrates an reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: POST /transactions/{original transaction reference}/reversals activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) The Sending FSP submits the reversal request for\nprocessing to the Receiving FSP - passing the reference of\nthe transaction that is to bve reversed. The Receiving FSP\nwill return the Request State object to indicate the the\nrequest is "pending". Receiving FSP--\x3e>Sending FSP: HTTP 202 (Request State Object) Receiving FSP->>Sending FSP: PUT {Callback URL} (Reversal Object) Note right of Receiving FSP: (2) The Receiving FSP informs the Sending FSP\nthat the reversal has been successully\ncompleted by returning the final representation\nof the reversal transaction. Sending FSP--\x3e>Receiving FSP: HTTP 204 deactivate Sending FSP deactivate Receiving FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain an FSP Balance\n\n \n\n\nGET .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /accounts/{identifierType}/{identifier}/balance activate Requesting FSP activate FSP Note right of FSP: (1) Obtain the balance of the\nRequesting FSP\'s account. FSP--\x3e>Requesting FSP: HTTP 200 (Balance Object) deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Transactions for an FSP\n\nThis diagram illustrates use of a cursor mechanism to retrieve all transactions for a sending requesting FSP via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Requesting FSP activate FSP Note right of FSP: (1) The Requesting FSP requests up to\n20 transactions for their account\nfrom the FSP. FSP--\x3e>Requesting FSP: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of FSP: (2) The FSP returns an array of 20\ntransactions and indicates via a\nresponse header that there are 40\nrecords available in total. Requesting FSP->>FSP: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of FSP: (3) The Requesting FSP requests the\nremaining transactions from the\naccount from the Receiving FSP. FSP--\x3e>Requesting FSP: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the FSP is in a state that enables a client to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Requesting FSP participant FSP Requesting FSP->>FSP: GET /heartbeat activate Requesting FSP activate FSP Note right of FSP: (1) The Requesting FSP requests the\navailability of the service from the FSP. FSP--\x3e>Requesting FSP: HTTP 200 (Heartbeat Object) Note right of FSP: (2) The FSP returns the availability of\nthe service - available, unavailable\nor degraded. deactivate Requesting FSP deactivate FSP\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the sending FSP to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the receiving FSP.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nsequenceDiagram participant Sending FSP participant Receiving FSP Sending FSP->>Receiving FSP: GET /responses{clientCorrelationId} activate Sending FSP activate Receiving FSP Note right of Receiving FSP: (1) Using the Sending FSP\'s\nclientCorrelationId, a request for the\nmissing API response is sent. Sending FSP--\x3e>Receiving FSP: HTTP 200 (Responses Object) Note right of Receiving FSP: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Sending FSP->>Receiving FSP: GET /{link} Note right of Receiving FSP: (3) The Sending FSP uses the link to\nobtain a representation of the missing\nresource. Receiving FSP--\x3e>Sending FSP: HTTP 200 (Requested Object) deactivate Receiving FSP deactivate Sending FSP\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use сase scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# p2p transfer via switch\n\nin this diagram, a switch is used by the sending fsp to (1) confirm the recipient name, (2) request a quotation and and to(3) perform the transfer with the receiving fsp. a callback is provided by the receiving fsp to return confirmation of the transfer.\n\n \n\n\nget .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../quotations\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestamount": "75.30",\n    "requestcurrency": "rwf",\n  "requestdate": "2017-07-21t17:32:28z",\n    "type": "transfer",\n    "subtype": "abc",\n    "chosendeliverymethod": "directtoaccount",\n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/transfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "100.00",\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "gbp",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationaltransferinformation": {\n        "origincountry": "ad",\n        "quotationreference": "{{quotationreference}}",\n        "quoteid": "{{quoteid}}",\n        "remittancepurpose": "personal",\n        "deliverymethod": "agent"\n   },    \n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "testorganisation"\n  }\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant switch participant receiving fsp sending fsp->>switch: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate switch activate receiving fsp note right of switch: (1) the sending fsp retrieves the name of the intended\nrecipient from the receiving fsp via the switch. switch->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname receiving fsp--\x3e>switch: http 200 (account holder name object) switch--\x3e>sending fsp: http 200 (account holder name object) deactivate sending fsp deactivate switch deactivate receiving fsp sending fsp->>switch: post /quotations activate sending fsp activate switch activate receiving fsp note right of switch: (2) subject to sender confirmation of the name returned in step 1, the sending fsp\nsubmits a quotation request to the switch. the switch will return the request\nstate object to indicate that the request is \'pending\'. switch->>receiving fsp: post /quotations note right of receiving fsp: (3) the swith in turn submits the quotation request to the\nreceiving fsp. the receiving fsp will return the\nrequest state object to indicate that the request is\n\'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate switch receiving fsp->>switch: put {callback url} (quotations object) activate switch activate sending fsp note right of receiving fsp: (4) the fsp informs the switch that the quotation\nhas been successfully created by returning the\nfinal representation of the quotation. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (quotations object) note right of switch: (5) the swith in turn informs the sending fsp that the quotation\nhas successfully created by returning the final representation\nof the quotation. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp sending fsp->>switch: post /transactions/type/transfer activate switch activate sending fsp activate receiving fsp note right of switch: (6) subject to sender confirmation, the sending fsp submits a transfer\nrequest to the swith. the switch will return the request state object to\nindicate that the request is \'pending\'. switch->>receiving fsp: post /transactions/type/transfer note right of receiving fsp: (7) the switch in turn submits the transaction request to the\nreceiving fsp. the receiving fsp will return the\nrequest state object to indicate that the request is\n\'pending\'. receiving fsp--\x3e>switch: http 202 (request state object) switch--\x3e>sending fsp: http 202 (request state object) deactivate switch deactivate sending fsp receiving fsp->>switch: put {callback url} (transactions object) activate switch activate sending fsp note right of receiving fsp: (8) the fsp informs the switch that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. switch--\x3e>receiving fsp: http 204 deactivate receiving fsp switch->>sending fsp: put {callback url} (transactions object) note right of switch: (9) the swith in turn informs the sending fsp that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. sending fsp--\x3e>switch: http 204 deactivate switch deactivate sending fsp\nopen postman collection open postman collection with authentication\n\n\n# bilateral p2p transfer\n\nin this diagram, the sending fsp connects directly with the receiving fsp to confirm the recipient name and to perform the transfer. a callback is provided by the receiving fsp to return confirmation of the transfer. in this example, a quotation is not requested.\n\n \n\n\nget .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/transfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "100.00",\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "gbp",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "testorganisation"\n  }\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the\nintended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp\nsubmits a transfer request. the receiving fsp will\nreturn the request state object to indicate that the\nrequest is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (transaction object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the\ntransation has been succesfully completed by\nreturning the final representation of the transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# ‘on-us’ p2p transfer initiated by a third party provider\n\nin this diagram, a third party provider enables a sender to transfer money to a recipient in the same fsp. the third party provider (1) confirms the recipient name, (2) requests a quotation and (3) performs the transfer with the fsp. a callback is provided by the fsp to return confirmation of the transfer.\n\n \n\n\nget .../accounts/accountid/2000/accountname\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../quotations\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "requestamount": "75.30",\n    "requestcurrency": "rwf",\n  "requestdate": "2017-07-21t17:32:28z",\n    "type": "transfer",\n    "subtype": "abc",\n    "chosendeliverymethod": "directtoaccount",\n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]\n}\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/transfer\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "100.00",\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2000"\n        }\n    ],\n    "currency": "gbp",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "internationaltransferinformation": {\n        "origincountry": "ad",\n        "quotationreference": "{{quotationreference}}",\n        "quoteid": "{{quoteid}}",\n        "remittancepurpose": "personal",\n        "deliverymethod": "agent"\n   },    \n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "testorganisation"\n  }\n}\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant third party provider participant fsp third party provider->>fsp: get /accounts/{identifiertype}/{identifier}/accountname activate third party provider activate fsp note right of fsp: (1) the third party provider retrieves the name of the\nintended recipient from the fsp. fsp--\x3e>third party provider: http 200 (account holder name object) deactivate third party provider deactivate fsp third party provider->>fsp: post /quotations activate third party provider activate fsp note right of fsp: (2) subject to sender confirmation, the third party provider\nsubmits a quotation request. the fsp will return the\nrequest state object to indicate that the request is\n\'pending\'. third party provider--\x3e>fsp: http 202 (request state object) deactivate third party provider deactivate fsp fsp->>third party provider: put {callback url} (quotations object) activate third party provider activate fsp note right of fsp: (3) the fsp in turn informs the third party provider that\nthe quotation has been successfully completed by\nreturning the final representation of the quotation. third party provider--\x3e>fsp: http 204 deactivate third party provider deactivate fsp third party provider->>fsp: post /transactions/type/transfer activate third party provider activate fsp note right of fsp: (4) subject to sender confirmation, the third party provider\nsubmits a transfer request. the fsp will return the\nrequest state object to indicate that the request is\n\'pending\'. third party provider--\x3e>fsp: http 202 (request state object) deactivate third party provider deactivate fsp fsp->>third party provider: put {callback url} (transactions object) activate third party provider activate fsp note right of fsp: (5) the fsp in turn informs the third party provider that\nthe transaction has been successfully completed by\nreturning the final representation of the transaction. third party provider--\x3e>fsp: http 204 deactivate third party provider deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# p2p transfer failure\n\nin some failure scenarios, a transfer may need to be reversed. this diagram illustrates an reversal with the final result communicated via the callback.\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /accounts/{identifiertype}/{identifier}/accountname activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp retrieves the name of the\nintended recipient from the receiving fsp. receiving fsp--\x3e>sending fsp: http 200 (account holder name object) deactivate receiving fsp sending fsp->>receiving fsp: post /transactions/type/transfer activate receiving fsp note right of receiving fsp: (2) subject to sender confirmation, the sending fsp\nsubmits a transfer request. the receiving fsp will\nreturn the request state object to indicate that the\nrequest is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) deactivate sending fsp deactivate receiving fsp receiving fsp->>sending fsp: put {callback url} (error object) activate sending fsp activate receiving fsp note right of receiving fsp: (3) the fsp in turn informs the sending fsp that the\ntransation has been failed by returning an error\nobject containing the reason for failure. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp\n\n\n# p2p transfer reversal\n\nin some failure scenarios, a transfer may need to be reversed. this diagram illustrates an reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: post /transactions/{original transaction reference}/reversals activate sending fsp activate receiving fsp note right of receiving fsp: (1) the sending fsp submits the reversal request for\nprocessing to the receiving fsp - passing the reference of\nthe transaction that is to bve reversed. the receiving fsp\nwill return the request state object to indicate the the\nrequest is "pending". receiving fsp--\x3e>sending fsp: http 202 (request state object) receiving fsp->>sending fsp: put {callback url} (reversal object) note right of receiving fsp: (2) the receiving fsp informs the sending fsp\nthat the reversal has been successully\ncompleted by returning the final representation\nof the reversal transaction. sending fsp--\x3e>receiving fsp: http 204 deactivate sending fsp deactivate receiving fsp\nopen postman collection open postman collection with authentication\n\n\n# obtain an fsp balance\n\n \n\n\nget .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /accounts/{identifiertype}/{identifier}/balance activate requesting fsp activate fsp note right of fsp: (1) obtain the balance of the\nrequesting fsp\'s account. fsp--\x3e>requesting fsp: http 200 (balance object) deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# retrieve transactions for an fsp\n\nthis diagram illustrates use of a cursor mechanism to retrieve all transactions for a sending requesting fsp via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp requests up to\n20 transactions for their account\nfrom the fsp. fsp--\x3e>requesting fsp: http 200 (transactions array) (x-records-available-count=40) note right of fsp: (2) the fsp returns an array of 20\ntransactions and indicates via a\nresponse header that there are 40\nrecords available in total. requesting fsp->>fsp: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of fsp: (3) the requesting fsp requests the\nremaining transactions from the\naccount from the receiving fsp. fsp--\x3e>requesting fsp: http 200 (transactions array) (x-records-available-count=40) deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the fsp is in a state that enables a client to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant requesting fsp participant fsp requesting fsp->>fsp: get /heartbeat activate requesting fsp activate fsp note right of fsp: (1) the requesting fsp requests the\navailability of the service from the fsp. fsp--\x3e>requesting fsp: http 200 (heartbeat object) note right of fsp: (2) the fsp returns the availability of\nthe service - available, unavailable\nor degraded. deactivate requesting fsp deactivate fsp\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the sending fsp to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the receiving fsp.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nsequencediagram participant sending fsp participant receiving fsp sending fsp->>receiving fsp: get /responses{clientcorrelationid} activate sending fsp activate receiving fsp note right of receiving fsp: (1) using the sending fsp\'s\nclientcorrelationid, a request for the\nmissing api response is sent. sending fsp--\x3e>receiving fsp: http 200 (responses object) note right of receiving fsp: (2) a responses object is returned\ncontaining a link to the missing\nresource. sending fsp->>receiving fsp: get /{link} note right of receiving fsp: (3) the sending fsp uses the link to\nobtain a representation of the missing\nresource. receiving fsp--\x3e>sending fsp: http 200 (requested object) deactivate receiving fsp deactivate sending fsp\nopen postman collection open postman collection with authentication',charsets:{cyrillic:!0}},{title:"Recurring Payments - API Service Definition",frontmatter:{pageClass:"api-page has-code-panel",title:"Recurring Payments - API Service Definition"},regularPath:"/use-cases/recurring-payments/api-service-definition.html",relativePath:"use-cases/recurring-payments/api-service-definition.md",key:"v-7d05d150",path:"/use-cases/recurring-payments/api-service-definition.html",headers:[{level:2,title:"API Endpoints",slug:"api-endpoints",normalizedTitle:"api endpoints",charIndex:27},{level:3,title:"Transactions API",slug:"transactions-api",normalizedTitle:"transactions api",charIndex:817},{level:4,title:"Transaction UML Class Diagram",slug:"transaction-uml-class-diagram",normalizedTitle:"transaction uml class diagram",charIndex:2570},{level:4,title:"Transaction Object Definition",slug:"transaction-object-definition",normalizedTitle:"transaction object definition",charIndex:3013},{level:3,title:"Reversals API",slug:"reversals-api",normalizedTitle:"reversals api",charIndex:12303},{level:4,title:"Reversal UML Class Diagram",slug:"reversal-uml-class-diagram",normalizedTitle:"reversal uml class diagram",charIndex:13189},{level:4,title:"Reversal Object Definition",slug:"reversal-object-definition",normalizedTitle:"reversal object definition",charIndex:13416},{level:3,title:"Accounts APIs",slug:"accounts-apis",normalizedTitle:"accounts apis",charIndex:21813},{level:4,title:"Identifying a Service Provider Account",slug:"identifying-a-service-provider-account",normalizedTitle:"identifying a service provider account",charIndex:21951},{level:5,title:"Single Identifier Method",slug:"single-identifier-method",normalizedTitle:"single identifier method",charIndex:22130},{level:5,title:"Multiple Identifiers Method",slug:"multiple-identifiers-method",normalizedTitle:"multiple identifiers method",charIndex:22315},{level:3,title:"Account Transactions API",slug:"account-transactions-api",normalizedTitle:"account transactions api",charIndex:22814},{level:4,title:"Account Transaction UML Class Diagram",slug:"account-transaction-uml-class-diagram",normalizedTitle:"account transaction uml class diagram",charIndex:24943},{level:3,title:"Account Balances API",slug:"account-balances-api",normalizedTitle:"account balances api",charIndex:25429},{level:4,title:"Account Balance UML Class Diagram",slug:"account-balance-uml-class-diagram",normalizedTitle:"account balance uml class diagram",charIndex:25782},{level:4,title:"Account Balance Object Definition",slug:"account-balance-object-definition",normalizedTitle:"account balance object definition",charIndex:25869},{level:3,title:"Debit Mandates API",slug:"debit-mandates-api",normalizedTitle:"debit mandates api",charIndex:28419},{level:4,title:"Debit Mandate UML Class Diagram",slug:"debit-mandate-uml-class-diagram",normalizedTitle:"debit mandate uml class diagram",charIndex:29974},{level:4,title:"Debit Mandate Object Definition",slug:"debit-mandate-object-definition",normalizedTitle:"debit mandate object definition",charIndex:30156},{level:2,title:"Supporting Objects",slug:"supporting-objects",normalizedTitle:"supporting objects",charIndex:34816},{level:3,title:"Account Identifiers Object",slug:"account-identifiers-object",normalizedTitle:"account identifiers object",charIndex:34839},{level:3,title:"Metadata Object",slug:"metadata-object",normalizedTitle:"metadata object",charIndex:35748},{level:3,title:"Custom Data Object",slug:"custom-data-object",normalizedTitle:"custom data object",charIndex:36591},{level:3,title:"Fees Object",slug:"fees-object",normalizedTitle:"fees object",charIndex:37418},{level:3,title:"Requesting Organisation Object",slug:"requesting-organisation-object",normalizedTitle:"requesting organisation object",charIndex:38324},{level:2,title:"Enumerations",slug:"enumerations",normalizedTitle:"enumerations",charIndex:39216},{level:3,title:"ISO Currency Codes",slug:"iso-currency-codes",normalizedTitle:"iso currency codes",charIndex:39233},{level:3,title:"Transaction Types",slug:"transaction-types",normalizedTitle:"transaction types",charIndex:39610},{level:3,title:"Account Identifiers",slug:"account-identifiers",normalizedTitle:"account identifiers",charIndex:34839},{level:3,title:"Frequency Type",slug:"frequency-type",normalizedTitle:"frequency type",charIndex:45813}],headersStr:"API Endpoints Transactions API Transaction UML Class Diagram Transaction Object Definition Reversals API Reversal UML Class Diagram Reversal Object Definition Accounts APIs Identifying a Service Provider Account Single Identifier Method Multiple Identifiers Method Account Transactions API Account Transaction UML Class Diagram Account Balances API Account Balance UML Class Diagram Account Balance Object Definition Debit Mandates API Debit Mandate UML Class Diagram Debit Mandate Object Definition Supporting Objects Account Identifiers Object Metadata Object Custom Data Object Fees Object Requesting Organisation Object Enumerations ISO Currency Codes Transaction Types Account Identifiers Frequency Type",content:'# API Service Definition\n\n\n# API Endpoints\n\nAPI endpoint fields are described in this specification as follows:\n\n * The field name.\n * The field type.\n * Description of the field.\n * Optionality of the field, i.e. whether the field must be supplied. Optionality is identified as per follows:\n\n→  Request optionality\n\n←  Response optionality\n\nO  Field is optional\n\nM  Field is mandatory\n\nC  Field is conditional\n\nNA  Field does not need to be supplied. If supplied, it will be ignored.\n\n\n * Reference where the fields is a acollection/n array and/or is defined by another object.\n * Validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\nTIP\n\nPlease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# Transactions API\n\nThe transaction APIs can be used by the service provider to take a payment from a payer’s account. The payer will have previously provided authorisation for payments to be taken as per an agreed payment mandate.\n\nThe following paths are permitted:\n\n * POST /transactions/type/merchantpay. To take a payment from a payer’s account.\n * POST /transactions/type/adjustment. To issue a refund to the payer.\n * GET /transactions/{transactionReference}. To view a payment.\n\nTransactions fields that are not applicable for recurring payments have been omitted.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nBody Parameters:\n{\n  "amount":"5.00",\n  "currency":"GBP",\n  "debitParty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditParty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nGET .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\nPATCH .../transactions/36125b528237\n---\nBody Parameters:\n{\n  "transactionStatus":"completed"\n}\n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nOPERATION   PATH                                         DESCRIPTION\nCreate      POST /transactions/type/{transactiontype}    To be used for transaction creation when the provider’s API\n                                                         Gateway requires that the transaction type be identified in\n                                                         the URL.\nView        GET /transactions/{transactionReference}     To view a transaction.\nUpdate      PATCH /transactions/{transactionReference}   To update the transactionStatus of a transaction.\n\n# Transaction UML Class Diagram\n\nclassDiagram Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction Transaction "1" *-- "0..20" Metadata Transaction "1" *-- "0..2" KYC Information Transaction "1" *-- "0..1" International Transfer Information KYC Information "1" *-- "0..10" ID Document KYC Information "1" *-- "0..1" Address KYC Information "1" *-- "0..1" Name\n\n# Transaction Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nTRANSACTION OBJECT                                                                                                                                              \nName                                         Type        Description                                                           Reference                        Validation\ntransactionReference                         string      Unique reference for the transaction. This is returned in      → NA                                    \n                                                         the response by API provider.                                  ← M\nrequestingOrganisationTransactionReference   string      A reference provided by the requesting organisation that is    → O                                     \n                                                         to be associated with the transaction.                         ← O\noriginalTransactionReference                 string      For reversals and refunds, this field indicates the            → O                                     \n                                                         transaction which is the subject of the reversal.              ← O\ncreditParty                                  array       A series of key/value pairs that enable the credit party to    → C    Account Identifiers              creditParty must be supplied if debitParty is omitted. If\n                                                         be identified. Keys include MSISDN and Wallet Identifier.      ← C                                     debitParty is supplied, then creditParty is optional.\ndebitParty                                   array       A collection of key/value pairs that enable the debit party    → C    Account Identifiers              debitParty must be supplied if creditParty is omitted.\n                                                         to be identified. Keys include MSISDN and Wallet Identifier.   ← C                                     If creditParty is supplied, then debitParty is optional.\ntype                                         string      The harmonised Transaction Type (not required if passed in     → M                                     Enumeration = Transaction Types\n                                                         the URL)                                                       ← M\nsubType                                      string      A non-harmonised sub-classification of the type of             → O                                     \n                                                         transaction. Values are not fixed, and usage will vary         ← O\n                                                         according to Provider.\ntransactionStatus                            string      Indicates the status of the transaction as stored by the API   → NA                                    \n                                                         provider.                                                      ← M\namount                                       string      The transaction amount.                                        → M                                     Please refer to API Fundamentals document for amount\n                                                                                                                        ← M                                     validation rules.\ncurrency                                     string      Currency of the transaction amount.                            → M                                     Enumeration = ISO Currency Codes\n                                                                                                                        ← M\ndescriptionText                              string      Free format text description of the transaction provided by    → O                                     \n                                                         the client. This can be provided as a reference for the        ← O\n                                                         receiver on a notification SMS and on an account statement.\nfees                                         array       Allows the passing and/or returning of all fees pertaining     → O    Fees Object                      \n                                                         to the transaction.                                            ← O\ngeoCode                                      string      Indicates the geographic location from where the transaction   → O                                     \n                                                         was initiated.                                                 ← O\noneTimeCode                                  string      A one-time code that can be supplied in the request or can     → O                                     \n                                                         be generated in the response depending upon the use case. An   ← O\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingOrganisation                       object      The originating organisation of the request.                   → O    Requesting Organisation Object   \n                                                                                                                        ← O\nservicingIdentity                            string      The field is used to identify the servicing identity for       → O                                     \n                                                         transactions, e.g. till, POS ID, assistant ID.                 ← O\ntransactionReceipt                           string      Transaction receipt number as notified to the parties. This    → NA                                    \n                                                         may differ from the Transaction Reference.                     ← O\ncreationDate                                 date-time   Date and time when the transaction was created by the API      → NA                                    \n                                                         Provider                                                       ← O\nmodificationDate                             date-time   Date and time when the transaction was modified by the API     → NA                                    \n                                                         Provider                                                       ← O\nrequestDate                                  date-time   The creation date and time of the transaction as supplied by   → O                                     \n                                                         the client.                                                    ← O\ncustomData                                   string      A collection of key/value pairs that can be used for           → O    Custom Data Object               \n                                                         provider specific fields.                                      ← O\nmetadata                                     array       A collection of key/value pairs. These can be used to          → O    Metadata                         \n                                                         populate additional transaction fields.                        ← O\n\nTIP\n\nTo take a payment against a debit mandate, use mandatereference as the account identifier key.\n\n\n# Reversals API\n\nThe Reversals API is used to reverse, adjust, or refund a recurring payment. The originating transaction reference must be provided in the path in order to identify the payment to be reversed. For a partial reversal, the amount needs to be supplied.\n\nFor viewing reversals, the Transactions API should be used. For performing a reversal without the original transaction reference, use the Transactions API.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php\n  //some PHP code here\n?>\n\n\nThe supported path is POST /transactions/{originalTransactionReference}/reversals.\n\n# Reversal UML Class Diagram\n\nclassDiagram Credit Party Identifier "0..10" --* "" Reversal Debit Party Identifier "0..10" --* "" Reversal Fee "0..20" --* "1" Reversal Metadata "0..20" --* "1" Reversal Reversal --\x3e Transaction\n\n# Reversal Object Definition\n\n{\n  "transactionReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingOrganisationTransactionReference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originalTransactionReference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditParty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitParty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subType": "my custom sub type",\n  "transactionStatus": "completed",\n  "amount": "123.45",\n  "currency": "GBP",\n  "descriptionText": "Client\'s transaction description",\n  "fees": [\n    {\n      "feeType": "addition",\n      "feeAmount": "2",\n      "feeCurrency": "GBP"\n    }\n  ],\n  "geoCode": "GB",\n  "internationalTransferInformation": {\n    "originCountry": "GBP"\n  },\n  "oneTimeCode": "12345",\n  "recipientKyc": {\n    "nationality": "GBP",\n    "emailAddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderKyc": {\n    "nationality": "GBP",\n    "emailAddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "servicingIdentity": "0123-456-789",\n  "transactionReceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  },\n  "metadata": [\n    {\n      "customKey01": "customValue01",\n      "customKey02": "customValue02"\n    },\n  ]\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                          TYPE        DESCRIPTION                                                         REFERENCE                        VALIDATION\ntransactionReference                          string      Unique reference for the transaction. This is returned in      NA                                    \n                                                          the response by API provider.                                  M\nrequesting OrganisationTransactionReference   string      A reference provided by the requesting organisation that is    O                                     \n                                                          to be associated with the transaction.                         O\noriginalTransactionReference                  string      For reversals and refunds, this field indicates the            NA                                    \n                                                          transaction which is the subject of the reversal.              M\ncreditParty                                   array       A series of key/value pairs that enable the credit party to    O    Account Identifiers              \n                                                          be identified. Keys include MSISDN and Wallet Identifier.      O\ndebitParty                                    array       A collection of key/value pairs that enable the debit party    O    Account Identifiers              \n                                                          to be identified. Keys include MSISDN and Wallet Identifier.   O\ntype                                          string      The harmonised Transaction Type                                M                                     Enumeration = Transaction Types Note that only Reversals and\n                                                                                                                         M                                     Refunds (adjustments) are supported.\nsubType                                       string      A non-harmonised sub-classification of the type of             O                                     \n                                                          transaction. Values are not fixed, and usage will vary         O\n                                                          according to Provider.\ntransactionStatus                             string      Indicates the status of the transaction as stored by the API   NA                                    \n                                                          provider.                                                      M\namount                                        string      The transaction Amount.                                        O                                     Please refer to API Fundamentals document for amount\n                                                                                                                         O                                     validation rules.\ncurrency                                      string      Currency of the transaction amount.                            O                                     Enumeration = ISO Currency Codes\n                                                                                                                         O\ndescriptionText                               string      Free format text description of the transaction provided by    O                                     \n                                                          the client. This can be provided as a reference for the        O\n                                                          receiver on a notification SMS and on an account statement.\nfees                                          array       Allows the passing and/or returning of all fees pertaining     O    Fees Object                      \n                                                          to the transaction.                                            O\ngeoCode                                       string      Indicates the geographic location from where the transaction   O                                     \n                                                          was initiated.                                                 O\nrequestingOrganisation                        object      The originating organisation of the request.                   O    Requesting Organisation Object   \n                                                                                                                         O\nservicingIdentity                             string      The field is used to identify the servicing identity for       O                                     \n                                                          transactions, e.g. till, POS ID, assistant ID.                 O\ntransactionReceipt                            string      Transaction receipt number as notified to the parties. This    NA                                    \n                                                          may differ from the Transaction Reference.                     O\ncreationDate                                  date-time   Date and time when the transaction was created by the API      NA                                    \n                                                          Provider.                                                      O\nmodificationDate                              date-time   Date and time when the transaction was modified by the API     NA                                    \n                                                          Provider.                                                      O\nrequestDate                                   date-time   The date and time of the transaction request as supplied by    O                                     \n                                                          the client.                                                    O\ncustomData                                    string      A collection of key/value pairs that can be used for           O    Custom Data Object               \n                                                          provider specific fields.                                      O\nmetadata                                      array       A collection of key/value pairs. These can be used to          O    Metadata                         \n                                                          populate additional properties that describe administrative    O\n                                                          information regarding the transaction.\n\n\n# Accounts APIs\n\nUsing the mobile money APIs, service providers can:\n\n * View payments for their account.\n * View their account balance.\n\n# Identifying a Service Provider Account\n\nTwo methods are provided for identifying a service provider account, the single identifier method, and the multiple identifiers method.\n\n# Single Identifier Method\n\nIn the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifierType}/{identifier}.\n\n# Multiple Identifiers Method\n\nWhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountIdentifier1}@{value1}${accountIdentifier2}@{value2}${accountIdentifier3}@{value3}.\n\nThe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. Each key/value is delimited by @.\n\nThe list of permitted account identifiers supported by the Mobile Money API can be found in the Account Identifiers section.\n\n\n# Account Transactions API\n\nA service provider should use this API to return a list of payments against their account. One of the following paths can be used:\n\nGET /accounts/{identifierType}/{identifier}/transactions\n\nor GET /accounts/{Account Identifiers}/transactions\n\nTo filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromDateTime": "2017-07-21T17:32:28Z",\n  "toDateTime": "2017-07-21T17:32:28Z",\n  "transactionStatus": "completed",\n  "transactionType": "merchantpay"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nPARAMETER           TYPE      FORMAT      DESCRIPTION\nlimit               integer   N/A         Supports pagination. If this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   N/A         Supports pagination. This value will indicate the cursor\n                                          position from where to retrieve the set of records. For\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromDateTime        string    date-time   Indicates the minimum date creationDate for which records\n                                          should be returned.\ntoDateTime          string    date-time   Indicates the maximum date creationDate for which records\n                                          should be returned.\ntransactionStatus   string    N/A         Indicates the status of the transactions to be returned.\ntransactionType     string    N/A         Indicates the type of the transactions to be returned.\n\nNote 1:\n\nFor a harmonised behavior, API Providers should make sure that the transactions are returned in descending date created order.\n\nNote 2:\n\nHTTP response headers are returned with each response indicating the total number of records available (X-Records-Available-Count) and total number of records returned (X-Records-Returned-Count).\n\n# Account Transaction UML Class Diagram\n\nclassDiagram ID Document "0..10" --* "1" KYC Information Address "0..1" --* "1" KYC Information Name "0..1" --* "1" KYC Information Credit Party Identifier "1..10" --* "1" Transaction Debit Party Identifier "1..10" --* "1" Transaction Fee "0..20" --* "1" Transaction KYC Information "0..2" --* "1" Transaction Metadata "0..20" --* "1" Transaction International TransferInformation "0..1" --* "1" Transaction Transaction "0..*" --* "2" Account\n\n\n# Account Balances API\n\nUsing the Account Balances API, an FSP can check their balance. Permitted paths are:\n\nGET /accounts/{identifierType}/{identifier}/balance\n\nor GET /accounts/{Account Identifiers}/balance\n\nA ‘self’ version is also available where the calling API client is the FSP account holder. Path for the ‘self’ version is /accounts/balance.\n\n# Account Balance UML Class Diagram\n\nclassDiagram Account Balance "1" --* "1" Account\n\n# Account Balance Object Definition\n\n{\n  "accountStatus": "available",\n  "currentBalance": "123.45",\n  "availableBalance": "100.00",\n  "reservedBalance": "20.45",\n  "unClearedBalance": "3.00",\n  "currency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME               TYPE     DESCRIPTION                                                           REFERENCE   VALIDATION\naccountStatus      string   Indicates a harmonised representation of the account state.    → NA               Enumeration = available, unavailable, unregistered\n                            This will be shown as ‘available’ or ‘unavailable’. A state    ← O\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. Unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentBalance     string   The current outstanding balance on the account.                → NA               Please refer to API Fundamentals document for amount\n                                                                                           ← O                validation rules.\navailableBalance   string   Indicates the balance that is able to be debited for an        → NA               Please refer to API Fundamentals document for amount\n                            account. This balance is only provided on some API provider    ← O                validation rules.\n                            systems.\nreservedBalance    string   Indicates the portion of the balance that is reserved, i.e.    → NA               Please refer to API Fundamentals document for amount\n                            intended to be debited. This balance is only provided on       ← O                validation rules.\n                            some API provider systems.\nunClearedBalance   string   Indicates the sum of uncleared funds in an account, i.e.       → NA               Please refer to API Fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← O                validation rules.\ncurrency           string   Currency for all returned balances.                            → NA               Enumeration = ISO Currency Codes\n                                                                                           ← O\n\n\n# Debit Mandates API\n\nThe Debit Mandates APIs allows a mobile money customer to provide prior approval for payments to be taken from their account by a requesting service providerpayee. If the amount limit field is not supplied, the mandate is considered open, i.e. the payee would will be able to take any amount. Mandates can be open-ended or can be constrained by a quantified number of payments for a given frequency.\n\nMandates can be created, changed, and inactivatedviewed and modified. The request to create a debit mandate will be typically initiated by the service provider (payee) but can also be requested by the customer (payer).\n\nThe permitted paths are as follows. Note that the payer account is identified in the path whereas the payee account is identified in the request body.\n\n * Creation: POST /accounts/{identifierType}/{identifier}/debitmandates or POST /accounts/{Account Identifiers}/debitmandates.\n * Update: To update a debit mandate, a HTTP PATCH is used. Format is: PATCH /accounts/{identifierType}/{identifier}/debitmandates/{mandateReference} or PATCH /accounts/{Account Identifiers}/debitmandates/{mandateReference}\n * Read. GET /accounts/{identifierType}/{identifier}/debitmandates/{mandateReference}or GET /accounts/{Account Identifiers}/debitmandates/{mandateReference}.\n\nSynchronous and asynchronous modes are supported for the POST and PATCH methods whereas only synchronous mode is supported for the GET method.\n\nThe following fields are modifiable: mandateStatus, startDate, endDate, frequencyType, numberOfPayments.\n\n# Debit Mandate UML Class Diagram\n\nclassDiagram Payee Identifiers "0..10" --* "1" Debit Mandate Payer Identifiers "0..10" --* "1" Debit Mandate Debit Mandate "0..*" --* "1" Account\n\n# Debit Mandate Object Definition\n\n{\n  "mandateReference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "payee": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "mandateStatus": "active",\n  "startDate": "2018-11-20",\n  "amountLimit": "123.45",\n  "currency": "GBP",\n  "endDate": "2018-11-20",\n  "frequencyType": "weekly",\n  "numberOfPayments": 50,\n  "requestingOrganisation": {\n    "requestingOrganisationIdentifierType": "organisationid",\n    "requestingOrganisationIdentifier": "987654321"\n  },\n  "creationDate": "2017-07-21T17:32:28Z",\n  "modificationDate": "2017-07-21T17:32:28Z",\n  "requestDate": "2017-07-21T17:32:28Z",\n  "customData": {\n    "customKey01": "customValue01",\n    "customKey02": "customValue02"\n  }\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nDEBIT MANDATE OBJECT                                                                                                                 \nName                     Type        Description                                                           Reference                 Validation\nmandateReference         string      Unique reference provided by the API Provider for the Debit    → NA                             \n                                     Mandate.                                                       ← M\npayee                    array       A series of key/value pairs that enable the payee to be        → O    Account Identifiers       \n                                     identified. Keys include MSISDN and Wallet Identifier.         ← O\nmandateStatus            string      Indicates the status of the Debit Mandate as held in the API   → O                              Enumeration = active, inactive\n                                     Provider system.                                               ← O\nstartDate                date        Date on which the mandate starts. If a frequencyType is        → M                              \n                                     specified, this will also be the date on which the first       ← M\n                                     payment is to be taken.\namountLimit              string      The maximum amount that can be taken by the Payee on a         → O                              Please refer to API Fundamentals document for amount\n                                     payment request.                                               ← O                              validation rules.\ncurrency                 string      Currency of the amount limit.                                  → O                              Enumeration = ISO Currency Codes\n                                                                                                    ← O\nendDate                  date        Date on which the Debit Mandate ends.                          → O                              \n                                                                                                    ← O\nfrequencyType            string      Indicates the frequency for which payments will be taken       → O                              Enumeration = Frequency\n                                     from the payers account.                                       ← O\nnumberOfPayments         number      Indicates the number of consecutive payments that are to be    → O                              \n                                     taken.                                                         ← O\nrequestingOrganisation   object      The originating organisation of the request.                   → O    Requesting Organisation   \n                                                                                                    ← O\ncreationDate             date-time   Date and time when the Debit Mandate was created by the API    → NA                             \n                                     Provider.                                                      ← O\nmodificationDate         date-time   Date and time when the Debit Mandate was modified by the API   → NA                             \n                                     Provider.                                                      ← O\nrequestDate              date-time   The date and time of the debit mandate request as supplied     → O                              \n                                     by the client.                                                 ← O\ncustomData               string      A collection of key/value pairs that can be used for           → O    Custom Data Object        \n                                     provider specific fields.                                      ← O\n\n\n# Supporting Objects\n\n\n# Account Identifiers Object\n\nThe Account Identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                       REFERENCE   VALIDATION\nkey     string   Provides the account identifier type.         M               Enumeration = Account Identifiers\n                                                               M\nvalue   string   Provides the account identifier type value.   M               \n                                                               M\n\n\n# Metadata Object\n\nThe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                         REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       M               \n                                                                 M\nvalue   string   Identifies the value of the additional field.   M               \n                                                                 M\n\n\n# Custom Data Object\n\nThe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. Additional fields should only be used where no suitable defined field match can be found. The number of key/value pairs is limited to 20.\n\n{\n  "customKey01": "customValue01",\n  "customKey02": "customValue02"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME    TYPE     DESCRIPTION                                           REFERENCE   VALIDATION\nkey     string   Identifies the type of additional fields.       → M               \n                                                                 ← M\nvalue   string   Identifies the value of the additional field.   → M               \n                                                                 ← M\n\n\n# Fees Object\n\nAn object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feeType": "addition",\n  "feeAmount": "2",\n  "feeCurrency": "GBP"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME          TYPE     DESCRIPTION                                   REFERENCE   VALIDATION\nfeeType       string   Defines the type of fee.                  M               \n                                                                 M\nfeeAmount     string   Defines the amount of the fee.            M               Please refer to API Fundamentals document for amount\n                                                                 M               validation rules.\nfeeCurrency   string   Defines the currency for the given fee.   M               Enumeration = ISO Currency Codes\n                                                                 M\n\n\n# Requesting Organisation Object\n\nAn object that details the originating organisation of the request.\n\n{\n  "requestingOrganisationIdentifierType": "organisationid",\n  "requestingOrganisationIdentifier": "987654321"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nNAME                                   TYPE     DESCRIPTION                                              REFERENCE   VALIDATION\nrequestingOrganisationIdentifierType   string   Identifies the identifier type of the requesting   → M               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← M\nrequestingOrganisationIdentifier       string   Contains the requesting organisation identifier.   → M               \n                                                                                                   ← M\n\n\n# Enumerations\n\n\n# ISO Currency Codes\n\nThe three-character alphabetic code for currency as defined by ISO 4217 is to be used for all currency fields. The full list of codes is maintained by Swiss Interbank Clearing on behalf of the International Organisation for Standardisation. This list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# Transaction Types\n\nA transaction type is used to classify the nature of a transaction.\n\nCODE          DESCRIPTION\nmerchantpay   Purchases of goods and/or services from shops (payer\n              present) or online (payer not present).\nadjustment    General adjustments to an account via an adjustment\n              transaction (e.g. refunds).\nreversal      Reversal of a prior transaction to return funds to the\n              payer.\n\n\n# Account Identifiers\n\nThe Account Identifier enumeration lists all possible means to identify a target account. Identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"GB24BKEN10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"BARCGB22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceProvider",\n  "storeid":"9999999999",\n  "bankname":"Barclays",\n  "bankaccounttitle":"Debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some JavaScript code here \n\n\n<?php \n  //some PHP code here \n?>\n\n\nCODE               SHORT DESCRIPTION                 TYPE     DESCRIPTION\naccountcategory    Account Category                  string   Can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      Bank Account Number               string   Financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        Account Rank                      string   Is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      Identity Alias                    string   An alias for the identity, e.g. short code for an agent\n                                                              till.\niban               IBAN                              string   Internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. Can contain up to\n                                                              34 alphanumeric characters.\naccountid          Account Holder Identity           string   Identifier for the account holder.\nmsisdn             MSISDN                            string   Must contain between 6 and 15 consecutive digits\n                                                              First character can contain a ‘+’ or digit\n                                                              Can contain spaces.\nswiftbic           SWIFTBIC                          string   A bank identifier code (BIC) is a unique identifier for a\n                                                              specific financial institution. A BIC is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. BICs are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. Please refer to ISO 9362\n                                                              for further information.\nsortcode           Bank Sort Code                    string   Sort code to identify the financial institution holding the\n                                                              account.\norganisationid     Organisation Account Identifier   string   Used to identify the organisation for which a payment is to\n                                                              be made.\nusername           Username                          string   Used to identify target account via an associated username.\nwalletid           Wallet Identifier                 string   A means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an MSISDN.\n                                                              typically used in conjunction with MSISDN or identity alias\n                                                              to identify a particular wallet.\nlinkref            Link Reference                    string   A means to uniquely identify an account via an account to\n                                                              account link. E.g. wallet account link to bank account.\nconsumerno         Consumer Number                   String   Identifies the consumer associated with the account.\nserviceprovider    Service Provider                  String   Provides a reference for a Service Provider.\nstoreid            Store ID                          String   Identifies the transacting store / retail outlet.\nbankname           Bank Name                         String   Name of the bank.\nbankaccounttitle   Bank Account Title                String   The title of the bank account.\nemailaddress       Email Address                     String   emailaddress of the party.\nmandatereference   Debit Mandate Reference           String   A means to identify an account via a debit mandate\n                                                              reference.\n\n\n# Frequency Type\n\nWhen requesting a debit mandate, the API client is able to specify the frequency of which the payment should be taken. Valid values are defined in the table below.\n\nFREQUENCY TYPE        DESCRIPTION\nweekly                Payment will be taken weekly.\nfortnight             Payment will be taken every two weeks.\nmonthspecificdate     Payment to be taken on a specific date every month.\ntwomonths             Payment to be taken every two months.\nthreemonths           Payment to be taken every three months.\nfourmonths            Payment to be taken every four months.\nsixmonths             Payment to be taken every six months.\nyearly                Payment to be taken yearly.\nlastdaymonth          Payment to be taken on the last calendar day of the month.\nlastdaymonthworking   Payment to be taken on the last working day of the month\n                      according to working days as per the resident country of the\n                      account.\nlastmonday            Payment to be taken on the last Monday of the month.\nlasttuesday           Payment to be taken on the last Tuesday of the month.\nlastwednesday         Payment to be taken on the last Wednesday of the month.\nlastthursday          Payment to be taken on the last Thursday of the month.\nlastfriday            Payment to be taken on the last Friday of the month.\nlastsaturday          Payment to be taken on the last Saturday of the month.\nlastsunday            Payment to be taken on the last Sunday of the month.\nspecificdaymonthly    Payment to be taken on a specific day of the month.',normalizedContent:'# api service definition\n\n\n# api endpoints\n\napi endpoint fields are described in this specification as follows:\n\n * the field name.\n * the field type.\n * description of the field.\n * optionality of the field, i.e. whether the field must be supplied. optionality is identified as per follows:\n\n→  request optionality\n\n←  response optionality\n\no  field is optional\n\nm  field is mandatory\n\nc  field is conditional\n\nna  field does not need to be supplied. if supplied, it will be ignored.\n\n\n * reference where the fields is a acollection/n array and/or is defined by another object.\n * validation applied to the field, including enumeration, field length and use of regular expressions to validate format.\n\ntip\n\nplease note that string fields have a default maximum length of 256 characters unless specified otherwise.\n\n\n# transactions api\n\nthe transaction apis can be used by the service provider to take a payment from a payer’s account. the payer will have previously provided authorisation for payments to be taken as per an agreed payment mandate.\n\nthe following paths are permitted:\n\n * post /transactions/type/merchantpay. to take a payment from a payer’s account.\n * post /transactions/type/adjustment. to issue a refund to the payer.\n * get /transactions/{transactionreference}. to view a payment.\n\ntransactions fields that are not applicable for recurring payments have been omitted.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nbody parameters:\n{\n  "amount":"5.00",\n  "currency":"gbp",\n  "debitparty":[\n  {\n    "key":"msisdn",\n    "value":"+447911123456"\n  }\n  ],\n  "creditparty":[\n  {\n    "key":"accountid",\n    "value":"12"\n  }\n  ]\n}\n\n\n \n\n\nget .../transactions/36125b528237\n\n\n \n\n\n\n\n\n\n\npatch .../transactions/36125b528237\n---\nbody parameters:\n{\n  "transactionstatus":"completed"\n}\n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\noperation   path                                         description\ncreate      post /transactions/type/{transactiontype}    to be used for transaction creation when the provider’s api\n                                                         gateway requires that the transaction type be identified in\n                                                         the url.\nview        get /transactions/{transactionreference}     to view a transaction.\nupdate      patch /transactions/{transactionreference}   to update the transactionstatus of a transaction.\n\n# transaction uml class diagram\n\nclassdiagram credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction transaction "1" *-- "0..20" metadata transaction "1" *-- "0..2" kyc information transaction "1" *-- "0..1" international transfer information kyc information "1" *-- "0..10" id document kyc information "1" *-- "0..1" address kyc information "1" *-- "0..1" name\n\n# transaction object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ntransaction object                                                                                                                                              \nname                                         type        description                                                           reference                        validation\ntransactionreference                         string      unique reference for the transaction. this is returned in      → na                                    \n                                                         the response by api provider.                                  ← m\nrequestingorganisationtransactionreference   string      a reference provided by the requesting organisation that is    → o                                     \n                                                         to be associated with the transaction.                         ← o\noriginaltransactionreference                 string      for reversals and refunds, this field indicates the            → o                                     \n                                                         transaction which is the subject of the reversal.              ← o\ncreditparty                                  array       a series of key/value pairs that enable the credit party to    → c    account identifiers              creditparty must be supplied if debitparty is omitted. if\n                                                         be identified. keys include msisdn and wallet identifier.      ← c                                     debitparty is supplied, then creditparty is optional.\ndebitparty                                   array       a collection of key/value pairs that enable the debit party    → c    account identifiers              debitparty must be supplied if creditparty is omitted.\n                                                         to be identified. keys include msisdn and wallet identifier.   ← c                                     if creditparty is supplied, then debitparty is optional.\ntype                                         string      the harmonised transaction type (not required if passed in     → m                                     enumeration = transaction types\n                                                         the url)                                                       ← m\nsubtype                                      string      a non-harmonised sub-classification of the type of             → o                                     \n                                                         transaction. values are not fixed, and usage will vary         ← o\n                                                         according to provider.\ntransactionstatus                            string      indicates the status of the transaction as stored by the api   → na                                    \n                                                         provider.                                                      ← m\namount                                       string      the transaction amount.                                        → m                                     please refer to api fundamentals document for amount\n                                                                                                                        ← m                                     validation rules.\ncurrency                                     string      currency of the transaction amount.                            → m                                     enumeration = iso currency codes\n                                                                                                                        ← m\ndescriptiontext                              string      free format text description of the transaction provided by    → o                                     \n                                                         the client. this can be provided as a reference for the        ← o\n                                                         receiver on a notification sms and on an account statement.\nfees                                         array       allows the passing and/or returning of all fees pertaining     → o    fees object                      \n                                                         to the transaction.                                            ← o\ngeocode                                      string      indicates the geographic location from where the transaction   → o                                     \n                                                         was initiated.                                                 ← o\nonetimecode                                  string      a one-time code that can be supplied in the request or can     → o                                     \n                                                         be generated in the response depending upon the use case. an   ← o\n                                                         authorisation code can be supplied in this field for\n                                                         requests that have been pre-authorised.\nrequestingorganisation                       object      the originating organisation of the request.                   → o    requesting organisation object   \n                                                                                                                        ← o\nservicingidentity                            string      the field is used to identify the servicing identity for       → o                                     \n                                                         transactions, e.g. till, pos id, assistant id.                 ← o\ntransactionreceipt                           string      transaction receipt number as notified to the parties. this    → na                                    \n                                                         may differ from the transaction reference.                     ← o\ncreationdate                                 date-time   date and time when the transaction was created by the api      → na                                    \n                                                         provider                                                       ← o\nmodificationdate                             date-time   date and time when the transaction was modified by the api     → na                                    \n                                                         provider                                                       ← o\nrequestdate                                  date-time   the creation date and time of the transaction as supplied by   → o                                     \n                                                         the client.                                                    ← o\ncustomdata                                   string      a collection of key/value pairs that can be used for           → o    custom data object               \n                                                         provider specific fields.                                      ← o\nmetadata                                     array       a collection of key/value pairs. these can be used to          → o    metadata                         \n                                                         populate additional transaction fields.                        ← o\n\ntip\n\nto take a payment against a debit mandate, use mandatereference as the account identifier key.\n\n\n# reversals api\n\nthe reversals api is used to reverse, adjust, or refund a recurring payment. the originating transaction reference must be provided in the path in order to identify the payment to be reversed. for a partial reversal, the amount needs to be supplied.\n\nfor viewing reversals, the transactions api should be used. for performing a reversal without the original transaction reference, use the transactions api.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters:\n{\n  "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php\n  //some php code here\n?>\n\n\nthe supported path is post /transactions/{originaltransactionreference}/reversals.\n\n# reversal uml class diagram\n\nclassdiagram credit party identifier "0..10" --* "" reversal debit party identifier "0..10" --* "" reversal fee "0..20" --* "1" reversal metadata "0..20" --* "1" reversal reversal --\x3e transaction\n\n# reversal object definition\n\n{\n  "transactionreference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "requestingorganisationtransactionreference": "c66e56ed-a5c2-4080-b34d-ad84d04065d4",\n  "originaltransactionreference": "a7d9e363-46ed-48be-a0e0-1d2d2971b86c",\n  "creditparty": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "debitparty": [\n    {\n      "key":"msisdn",\n      "value":"+447911123456"\n    }\n  ],\n  "type": "merchantpay",\n  "subtype": "my custom sub type",\n  "transactionstatus": "completed",\n  "amount": "123.45",\n  "currency": "gbp",\n  "descriptiontext": "client\'s transaction description",\n  "fees": [\n    {\n      "feetype": "addition",\n      "feeamount": "2",\n      "feecurrency": "gbp"\n    }\n  ],\n  "geocode": "gb",\n  "internationaltransferinformation": {\n    "origincountry": "gbp"\n  },\n  "onetimecode": "12345",\n  "recipientkyc": {\n    "nationality": "gbp",\n    "emailaddress": "example@mail.com",\n    "gender": "m"\n  },\n  "senderkyc": {\n    "nationality": "gbp",\n    "emailaddress": "email@dot.com",\n    "gender": "f"\n  },\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "servicingidentity": "0123-456-789",\n  "transactionreceipt": "f2d184b3-ae08-4d99-9e67-8d7490e0103e",\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  },\n  "metadata": [\n    {\n      "customkey01": "customvalue01",\n      "customkey02": "customvalue02"\n    },\n  ]\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                          type        description                                                         reference                        validation\ntransactionreference                          string      unique reference for the transaction. this is returned in      na                                    \n                                                          the response by api provider.                                  m\nrequesting organisationtransactionreference   string      a reference provided by the requesting organisation that is    o                                     \n                                                          to be associated with the transaction.                         o\noriginaltransactionreference                  string      for reversals and refunds, this field indicates the            na                                    \n                                                          transaction which is the subject of the reversal.              m\ncreditparty                                   array       a series of key/value pairs that enable the credit party to    o    account identifiers              \n                                                          be identified. keys include msisdn and wallet identifier.      o\ndebitparty                                    array       a collection of key/value pairs that enable the debit party    o    account identifiers              \n                                                          to be identified. keys include msisdn and wallet identifier.   o\ntype                                          string      the harmonised transaction type                                m                                     enumeration = transaction types note that only reversals and\n                                                                                                                         m                                     refunds (adjustments) are supported.\nsubtype                                       string      a non-harmonised sub-classification of the type of             o                                     \n                                                          transaction. values are not fixed, and usage will vary         o\n                                                          according to provider.\ntransactionstatus                             string      indicates the status of the transaction as stored by the api   na                                    \n                                                          provider.                                                      m\namount                                        string      the transaction amount.                                        o                                     please refer to api fundamentals document for amount\n                                                                                                                         o                                     validation rules.\ncurrency                                      string      currency of the transaction amount.                            o                                     enumeration = iso currency codes\n                                                                                                                         o\ndescriptiontext                               string      free format text description of the transaction provided by    o                                     \n                                                          the client. this can be provided as a reference for the        o\n                                                          receiver on a notification sms and on an account statement.\nfees                                          array       allows the passing and/or returning of all fees pertaining     o    fees object                      \n                                                          to the transaction.                                            o\ngeocode                                       string      indicates the geographic location from where the transaction   o                                     \n                                                          was initiated.                                                 o\nrequestingorganisation                        object      the originating organisation of the request.                   o    requesting organisation object   \n                                                                                                                         o\nservicingidentity                             string      the field is used to identify the servicing identity for       o                                     \n                                                          transactions, e.g. till, pos id, assistant id.                 o\ntransactionreceipt                            string      transaction receipt number as notified to the parties. this    na                                    \n                                                          may differ from the transaction reference.                     o\ncreationdate                                  date-time   date and time when the transaction was created by the api      na                                    \n                                                          provider.                                                      o\nmodificationdate                              date-time   date and time when the transaction was modified by the api     na                                    \n                                                          provider.                                                      o\nrequestdate                                   date-time   the date and time of the transaction request as supplied by    o                                     \n                                                          the client.                                                    o\ncustomdata                                    string      a collection of key/value pairs that can be used for           o    custom data object               \n                                                          provider specific fields.                                      o\nmetadata                                      array       a collection of key/value pairs. these can be used to          o    metadata                         \n                                                          populate additional properties that describe administrative    o\n                                                          information regarding the transaction.\n\n\n# accounts apis\n\nusing the mobile money apis, service providers can:\n\n * view payments for their account.\n * view their account balance.\n\n# identifying a service provider account\n\ntwo methods are provided for identifying a service provider account, the single identifier method, and the multiple identifiers method.\n\n# single identifier method\n\nin the scenario where one identifier suffices to uniquely identify an account, the following path is to be used:\n\n\n/accounts/{identifiertype}/{identifier}.\n\n# multiple identifiers method\n\nwhere a single identifier is not sufficient to identify an account, the following path is to be used:\n\n/accounts/{accountidentifier1}@{value1}${accountidentifier2}@{value2}${accountidentifier3}@{value3}.\n\nthe path uses a $ delimiter to separate each identifier, up to a limit of three account identifiers. each key/value is delimited by @.\n\nthe list of permitted account identifiers supported by the mobile money api can be found in the account identifiers section.\n\n\n# account transactions api\n\na service provider should use this api to return a list of payments against their account. one of the following paths can be used:\n\nget /accounts/{identifiertype}/{identifier}/transactions\n\nor get /accounts/{account identifiers}/transactions\n\nto filter the number of records returned, the following query strings can be used:\n\n{\n  "limit": 50,\n  "offset": 10,\n  "fromdatetime": "2017-07-21t17:32:28z",\n  "todatetime": "2017-07-21t17:32:28z",\n  "transactionstatus": "completed",\n  "transactiontype": "merchantpay"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nparameter           type      format      description\nlimit               integer   n/a         supports pagination. if this is not supplied, then the\n                                          server will apply a limit of 50 records returned for each\n                                          request.\noffset              integer   n/a         supports pagination. this value will indicate the cursor\n                                          position from where to retrieve the set of records. for\n                                          example, a limit of 50 and offset of 10 will return records\n                                          11 to 60.\nfromdatetime        string    date-time   indicates the minimum date creationdate for which records\n                                          should be returned.\ntodatetime          string    date-time   indicates the maximum date creationdate for which records\n                                          should be returned.\ntransactionstatus   string    n/a         indicates the status of the transactions to be returned.\ntransactiontype     string    n/a         indicates the type of the transactions to be returned.\n\nnote 1:\n\nfor a harmonised behavior, api providers should make sure that the transactions are returned in descending date created order.\n\nnote 2:\n\nhttp response headers are returned with each response indicating the total number of records available (x-records-available-count) and total number of records returned (x-records-returned-count).\n\n# account transaction uml class diagram\n\nclassdiagram id document "0..10" --* "1" kyc information address "0..1" --* "1" kyc information name "0..1" --* "1" kyc information credit party identifier "1..10" --* "1" transaction debit party identifier "1..10" --* "1" transaction fee "0..20" --* "1" transaction kyc information "0..2" --* "1" transaction metadata "0..20" --* "1" transaction international transferinformation "0..1" --* "1" transaction transaction "0..*" --* "2" account\n\n\n# account balances api\n\nusing the account balances api, an fsp can check their balance. permitted paths are:\n\nget /accounts/{identifiertype}/{identifier}/balance\n\nor get /accounts/{account identifiers}/balance\n\na ‘self’ version is also available where the calling api client is the fsp account holder. path for the ‘self’ version is /accounts/balance.\n\n# account balance uml class diagram\n\nclassdiagram account balance "1" --* "1" account\n\n# account balance object definition\n\n{\n  "accountstatus": "available",\n  "currentbalance": "123.45",\n  "availablebalance": "100.00",\n  "reservedbalance": "20.45",\n  "unclearedbalance": "3.00",\n  "currency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname               type     description                                                           reference   validation\naccountstatus      string   indicates a harmonised representation of the account state.    → na               enumeration = available, unavailable, unregistered\n                            this will be shown as ‘available’ or ‘unavailable’. a state    ← o\n                            of ‘unavailable’ means that the account is in a state that\n                            does not allow posting of transactions. unregistered\n                            indicates that although not available, a transaction created\n                            with the account identifier(s) will result in an\n                            unregistered voucher creation.\ncurrentbalance     string   the current outstanding balance on the account.                → na               please refer to api fundamentals document for amount\n                                                                                           ← o                validation rules.\navailablebalance   string   indicates the balance that is able to be debited for an        → na               please refer to api fundamentals document for amount\n                            account. this balance is only provided on some api provider    ← o                validation rules.\n                            systems.\nreservedbalance    string   indicates the portion of the balance that is reserved, i.e.    → na               please refer to api fundamentals document for amount\n                            intended to be debited. this balance is only provided on       ← o                validation rules.\n                            some api provider systems.\nunclearedbalance   string   indicates the sum of uncleared funds in an account, i.e.       → na               please refer to api fundamentals document for amount\n                            those that are awaiting a credit confirmation.                 ← o                validation rules.\ncurrency           string   currency for all returned balances.                            → na               enumeration = iso currency codes\n                                                                                           ← o\n\n\n# debit mandates api\n\nthe debit mandates apis allows a mobile money customer to provide prior approval for payments to be taken from their account by a requesting service providerpayee. if the amount limit field is not supplied, the mandate is considered open, i.e. the payee would will be able to take any amount. mandates can be open-ended or can be constrained by a quantified number of payments for a given frequency.\n\nmandates can be created, changed, and inactivatedviewed and modified. the request to create a debit mandate will be typically initiated by the service provider (payee) but can also be requested by the customer (payer).\n\nthe permitted paths are as follows. note that the payer account is identified in the path whereas the payee account is identified in the request body.\n\n * creation: post /accounts/{identifiertype}/{identifier}/debitmandates or post /accounts/{account identifiers}/debitmandates.\n * update: to update a debit mandate, a http patch is used. format is: patch /accounts/{identifiertype}/{identifier}/debitmandates/{mandatereference} or patch /accounts/{account identifiers}/debitmandates/{mandatereference}\n * read. get /accounts/{identifiertype}/{identifier}/debitmandates/{mandatereference}or get /accounts/{account identifiers}/debitmandates/{mandatereference}.\n\nsynchronous and asynchronous modes are supported for the post and patch methods whereas only synchronous mode is supported for the get method.\n\nthe following fields are modifiable: mandatestatus, startdate, enddate, frequencytype, numberofpayments.\n\n# debit mandate uml class diagram\n\nclassdiagram payee identifiers "0..10" --* "1" debit mandate payer identifiers "0..10" --* "1" debit mandate debit mandate "0..*" --* "1" account\n\n# debit mandate object definition\n\n{\n  "mandatereference": "dd82cc6a-159a-4ddf-bea7-23bae38e72c5",\n  "payee": [\n    {\n      "key":"accountid",\n      "value":"12"\n    }\n  ],\n  "mandatestatus": "active",\n  "startdate": "2018-11-20",\n  "amountlimit": "123.45",\n  "currency": "gbp",\n  "enddate": "2018-11-20",\n  "frequencytype": "weekly",\n  "numberofpayments": 50,\n  "requestingorganisation": {\n    "requestingorganisationidentifiertype": "organisationid",\n    "requestingorganisationidentifier": "987654321"\n  },\n  "creationdate": "2017-07-21t17:32:28z",\n  "modificationdate": "2017-07-21t17:32:28z",\n  "requestdate": "2017-07-21t17:32:28z",\n  "customdata": {\n    "customkey01": "customvalue01",\n    "customkey02": "customvalue02"\n  }\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ndebit mandate object                                                                                                                 \nname                     type        description                                                           reference                 validation\nmandatereference         string      unique reference provided by the api provider for the debit    → na                             \n                                     mandate.                                                       ← m\npayee                    array       a series of key/value pairs that enable the payee to be        → o    account identifiers       \n                                     identified. keys include msisdn and wallet identifier.         ← o\nmandatestatus            string      indicates the status of the debit mandate as held in the api   → o                              enumeration = active, inactive\n                                     provider system.                                               ← o\nstartdate                date        date on which the mandate starts. if a frequencytype is        → m                              \n                                     specified, this will also be the date on which the first       ← m\n                                     payment is to be taken.\namountlimit              string      the maximum amount that can be taken by the payee on a         → o                              please refer to api fundamentals document for amount\n                                     payment request.                                               ← o                              validation rules.\ncurrency                 string      currency of the amount limit.                                  → o                              enumeration = iso currency codes\n                                                                                                    ← o\nenddate                  date        date on which the debit mandate ends.                          → o                              \n                                                                                                    ← o\nfrequencytype            string      indicates the frequency for which payments will be taken       → o                              enumeration = frequency\n                                     from the payers account.                                       ← o\nnumberofpayments         number      indicates the number of consecutive payments that are to be    → o                              \n                                     taken.                                                         ← o\nrequestingorganisation   object      the originating organisation of the request.                   → o    requesting organisation   \n                                                                                                    ← o\ncreationdate             date-time   date and time when the debit mandate was created by the api    → na                             \n                                     provider.                                                      ← o\nmodificationdate         date-time   date and time when the debit mandate was modified by the api   → na                             \n                                     provider.                                                      ← o\nrequestdate              date-time   the date and time of the debit mandate request as supplied     → o                              \n                                     by the client.                                                 ← o\ncustomdata               string      a collection of key/value pairs that can be used for           → o    custom data object        \n                                     provider specific fields.                                      ← o\n\n\n# supporting objects\n\n\n# account identifiers object\n\nthe account identifier object enables one or multiple identifiers to be provided to enable the recipient system to resolve the account/party.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                       reference   validation\nkey     string   provides the account identifier type.         m               enumeration = account identifiers\n                                                               m\nvalue   string   provides the account identifier type value.   m               \n                                                               m\n\n\n# metadata object\n\nthe metadata object allows fields to be specified to convey administrative information regarding the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                         reference   validation\nkey     string   identifies the type of additional fields.       m               \n                                                                 m\nvalue   string   identifies the value of the additional field.   m               \n                                                                 m\n\n\n# custom data object\n\nthe custom data object allows additional fields to be specified for the associated resource in the form of key/value pairs. additional fields should only be used where no suitable defined field match can be found. the number of key/value pairs is limited to 20.\n\n{\n  "customkey01": "customvalue01",\n  "customkey02": "customvalue02"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname    type     description                                           reference   validation\nkey     string   identifies the type of additional fields.       → m               \n                                                                 ← m\nvalue   string   identifies the value of the additional field.   → m               \n                                                                 ← m\n\n\n# fees object\n\nan object that enables fees that are differentiated by type to be provided and/or returned.\n\n{\n  "feetype": "addition",\n  "feeamount": "2",\n  "feecurrency": "gbp"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname          type     description                                   reference   validation\nfeetype       string   defines the type of fee.                  m               \n                                                                 m\nfeeamount     string   defines the amount of the fee.            m               please refer to api fundamentals document for amount\n                                                                 m               validation rules.\nfeecurrency   string   defines the currency for the given fee.   m               enumeration = iso currency codes\n                                                                 m\n\n\n# requesting organisation object\n\nan object that details the originating organisation of the request.\n\n{\n  "requestingorganisationidentifiertype": "organisationid",\n  "requestingorganisationidentifier": "987654321"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\nname                                   type     description                                              reference   validation\nrequestingorganisationidentifiertype   string   identifies the identifier type of the requesting   → m               ‘swiftbic’, ‘lei’, ‘organisationid\n                                                organisation.                                      ← m\nrequestingorganisationidentifier       string   contains the requesting organisation identifier.   → m               \n                                                                                                   ← m\n\n\n# enumerations\n\n\n# iso currency codes\n\nthe three-character alphabetic code for currency as defined by iso 4217 is to be used for all currency fields. the full list of codes is maintained by swiss interbank clearing on behalf of the international organisation for standardisation. this list can be obtained via the following website - http://www.currency-iso.org/en/home/tables/table-a1.html.\n\n\n# transaction types\n\na transaction type is used to classify the nature of a transaction.\n\ncode          description\nmerchantpay   purchases of goods and/or services from shops (payer\n              present) or online (payer not present).\nadjustment    general adjustments to an account via an adjustment\n              transaction (e.g. refunds).\nreversal      reversal of a prior transaction to return funds to the\n              payer.\n\n\n# account identifiers\n\nthe account identifier enumeration lists all possible means to identify a target account. identifiers can be combined if necessary, to provide a unique identifier for the target account.\n\n{\n  "accountcategory":"default",\n  "bankaccountno":"1234567890",\n  "accountrank":"high",\n  "identityalias":"12345",\n  "iban":"gb24bken10000031510604",\n  "accountid":"31510604",\n  "msisdn":"+1234567890",\n  "swiftbic":"barcgb22",\n  "sortcode":"100000",\n  "organisationid":"987654321",\n  "username":"johndoe",\n  "walletid":"11111111111",\n  "linkref":"899fa8a7-7ea7-4880-87c2-e873fc22baf7",\n  "consumerno":"1122334455",\n  "serviceprovider":"serviceprovider",\n  "storeid":"9999999999",\n  "bankname":"barclays",\n  "bankaccounttitle":"debit",\n  "emailaddress":"example@email.com",\n  "mandatereference":"85f6196e-0557-42bd-b3c5-c4a7d5433815"\n}\n\n\n//some javascript code here \n\n\n<?php \n  //some php code here \n?>\n\n\ncode               short description                 type     description\naccountcategory    account category                  string   can be used to identify the sources of funds category where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nbankaccountno      bank account number               string   financial institution account number that is typically known\n                                                              by the account holder.\naccountrank        account rank                      string   is used to identify the rank of the source of funds where\n                                                              there are multiple accounts (wallets) held against an\n                                                              account holder.\nidentityalias      identity alias                    string   an alias for the identity, e.g. short code for an agent\n                                                              till.\niban               iban                              string   internationally agreed system of identifying bank accounts\n                                                              across national borders to facilitate the communication and\n                                                              processing of cross border transactions. can contain up to\n                                                              34 alphanumeric characters.\naccountid          account holder identity           string   identifier for the account holder.\nmsisdn             msisdn                            string   must contain between 6 and 15 consecutive digits\n                                                              first character can contain a ‘+’ or digit\n                                                              can contain spaces.\nswiftbic           swiftbic                          string   a bank identifier code (bic) is a unique identifier for a\n                                                              specific financial institution. a bic is composed of a\n                                                              4-character bank code, a 2-character country code, a\n                                                              2-character location code and an optional 3-character branch\n                                                              code. bics are used by financial institutions for letters of\n                                                              credit, payments and securities transactions and other\n                                                              business messages between banks. please refer to iso 9362\n                                                              for further information.\nsortcode           bank sort code                    string   sort code to identify the financial institution holding the\n                                                              account.\norganisationid     organisation account identifier   string   used to identify the organisation for which a payment is to\n                                                              be made.\nusername           username                          string   used to identify target account via an associated username.\nwalletid           wallet identifier                 string   a means to identify a mobile money wallet, particularly\n                                                              where multiple wallets can be held against an msisdn.\n                                                              typically used in conjunction with msisdn or identity alias\n                                                              to identify a particular wallet.\nlinkref            link reference                    string   a means to uniquely identify an account via an account to\n                                                              account link. e.g. wallet account link to bank account.\nconsumerno         consumer number                   string   identifies the consumer associated with the account.\nserviceprovider    service provider                  string   provides a reference for a service provider.\nstoreid            store id                          string   identifies the transacting store / retail outlet.\nbankname           bank name                         string   name of the bank.\nbankaccounttitle   bank account title                string   the title of the bank account.\nemailaddress       email address                     string   emailaddress of the party.\nmandatereference   debit mandate reference           string   a means to identify an account via a debit mandate\n                                                              reference.\n\n\n# frequency type\n\nwhen requesting a debit mandate, the api client is able to specify the frequency of which the payment should be taken. valid values are defined in the table below.\n\nfrequency type        description\nweekly                payment will be taken weekly.\nfortnight             payment will be taken every two weeks.\nmonthspecificdate     payment to be taken on a specific date every month.\ntwomonths             payment to be taken every two months.\nthreemonths           payment to be taken every three months.\nfourmonths            payment to be taken every four months.\nsixmonths             payment to be taken every six months.\nyearly                payment to be taken yearly.\nlastdaymonth          payment to be taken on the last calendar day of the month.\nlastdaymonthworking   payment to be taken on the last working day of the month\n                      according to working days as per the resident country of the\n                      account.\nlastmonday            payment to be taken on the last monday of the month.\nlasttuesday           payment to be taken on the last tuesday of the month.\nlastwednesday         payment to be taken on the last wednesday of the month.\nlastthursday          payment to be taken on the last thursday of the month.\nlastfriday            payment to be taken on the last friday of the month.\nlastsaturday          payment to be taken on the last saturday of the month.\nlastsunday            payment to be taken on the last sunday of the month.\nspecificdaymonthly    payment to be taken on a specific day of the month.',charsets:{}},{title:"Recurring Payments",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Recurring Payments"},regularPath:"/use-cases/recurring-payments/",relativePath:"use-cases/recurring-payments/index.md",key:"v-c8b409ce",path:"/use-cases/recurring-payments/",headers:[{level:2,title:"Introduction",slug:"introduction",normalizedTitle:"introduction",charIndex:0},{level:2,title:"Intended Audience",slug:"intended-audience",normalizedTitle:"intended audience",charIndex:541}],headersStr:"Introduction Intended Audience",content:"# Introduction\n\nThe Recurring Payments Mobile Money APIs allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nFor further reading, please refer to the following:\n\n * Getting Started. Specifies the design principles, behaviours, and error handling of the Mobile Money API.\n * API Service Definition. Documents all Mobile Money API endpoints, fields, objects, and enumerations.\n\nAll documentation can be found on the GSMA Mobile Money API Developer Portal.\n\n\n# Intended Audience\n\nAUDIENCE                 USAGE                                                        ROLE\nMobile Money Providers   - To understand how to implement the Mobile Money API to     API Provider\n                         receive recurring payment requests from service providers.\n                         - To understand how to implement the Mobile Money API to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nService Providers        To understand how to implement the Mobile Money API to       API Consumer\n                         request recurring payment mandates against mobile money\n                         accounts.",normalizedContent:"# introduction\n\nthe recurring payments mobile money apis allow service providers to setup electronic payment mandates for mobile money customers and initiate payments against payment mandates.\n\nfor further reading, please refer to the following:\n\n * getting started. specifies the design principles, behaviours, and error handling of the mobile money api.\n * api service definition. documents all mobile money api endpoints, fields, objects, and enumerations.\n\nall documentation can be found on the gsma mobile money api developer portal.\n\n\n# intended audience\n\naudience                 usage                                                        role\nmobile money providers   - to understand how to implement the mobile money api to     api provider\n                         receive recurring payment requests from service providers.\n                         - to understand how to implement the mobile money api to\n                         create recurring payment requests initiated by customers\n                         using a channel (e.g. app) provided by the mobile money\n                         provider.\nservice providers        to understand how to implement the mobile money api to       api consumer\n                         request recurring payment mandates against mobile money\n                         accounts.",charsets:{}},{title:"Recurring Payments - Open OAS UI",frontmatter:{sidebarDepth:0,pageClass:"api-page",title:"Recurring Payments - Open OAS UI"},regularPath:"/use-cases/recurring-payments/recurring-payments-open-oas-ui.html",relativePath:"use-cases/recurring-payments/recurring-payments-open-oas-ui.md",key:"v-55c31810",path:"/use-cases/recurring-payments/recurring-payments-open-oas-ui.html",headers:[{level:2,title:"Recurring Payments - Open OAS UI",slug:"recurring-payments-open-oas-ui",normalizedTitle:"recurring payments - open oas ui",charIndex:0}],headersStr:"Recurring Payments - Open OAS UI",content:"# Recurring Payments - Open OAS UI",normalizedContent:"# recurring payments - open oas ui",charsets:{}},{title:"Recurring Payments - Use Case Scenarios",frontmatter:{sidebarDepth:1,pageClass:"api-page has-code-panel",title:"Recurring Payments - Use Case Scenarios"},regularPath:"/use-cases/recurring-payments/scenarios/scenarios.html",relativePath:"use-cases/recurring-payments/scenarios/scenarios.md",key:"v-54383596",path:"/use-cases/recurring-payments/scenarios/scenarios.html",headers:[{level:2,title:"Setup a Recurring Payment",slug:"setup-a-recurring-payment",normalizedTitle:"setup a recurring payment",charIndex:599},{level:2,title:"Setup a Recurring Payment Failure",slug:"setup-a-recurring-payment-failure",normalizedTitle:"setup a recurring payment failure",charIndex:3057},{level:2,title:"Take a Recurring Payment",slug:"take-a-recurring-payment",normalizedTitle:"take a recurring payment",charIndex:4463},{level:2,title:"Take a Recurring Payment Failure",slug:"take-a-recurring-payment-failure",normalizedTitle:"take a recurring payment failure",charIndex:6331},{level:2,title:"Take a Recurring Payment using the Polling Method",slug:"take-a-recurring-payment-using-the-polling-method",normalizedTitle:"take a recurring payment using the polling method",charIndex:7572},{level:2,title:"Recurring Payment Refund",slug:"recurring-payment-refund",normalizedTitle:"recurring payment refund",charIndex:10126},{level:2,title:"Recurring Payment Reversal",slug:"recurring-payment-reversal",normalizedTitle:"recurring payment reversal",charIndex:12001},{level:2,title:"Payer sets up a Recurring Payment using MMP Channel",slug:"payer-sets-up-a-recurring-payment-using-mmp-channel",normalizedTitle:"payer sets up a recurring payment using mmp channel",charIndex:13628},{level:2,title:"Obtain a Service Provider Balance",slug:"obtain-a-service-provider-balance",normalizedTitle:"obtain a service provider balance",charIndex:15702},{level:2,title:"Retrieve Payments for a Service Provider",slug:"retrieve-payments-for-a-service-provider",normalizedTitle:"retrieve payments for a service provider",charIndex:16367},{level:2,title:"Check for Service Availability",slug:"check-for-service-availability",normalizedTitle:"check for service availability",charIndex:17848},{level:2,title:"Retrieve a Missing API Response",slug:"retrieve-a-missing-api-response",normalizedTitle:"retrieve a missing api response",charIndex:18766}],headersStr:"Setup a Recurring Payment Setup a Recurring Payment Failure Take a Recurring Payment Take a Recurring Payment Failure Take a Recurring Payment using the Polling Method Recurring Payment Refund Recurring Payment Reversal Payer sets up a Recurring Payment using MMP Channel Obtain a Service Provider Balance Retrieve Payments for a Service Provider Check for Service Availability Retrieve a Missing API Response",content:'# About Use Case Scenarios\n\nThe GSMA Simulator for the Mobile Money API is a simulated API implementation developed by the GSMA to facilitate API adoption and testing, thereby decreasing implementation effort and time to market for Mobile Money Providers and ecosystem Service Providers. Developers can navigate through Use Case Scenarios providing access to a set of pre-defined Postman Collections for the Simulator to try out some of the most common mobile money API use cases, or directly access the OAS interface for the API Specification and use the API Try It Out functionality from there.\n\n\n# Setup a Recurring Payment\n\nThis diagram illustrates the setting-up of a recurring payment via a debit mandate. The service provider initiates the request which is authorised by the account holding customer. In this diagram, an asynchronous flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/2000/debitmandates\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n   "payee": [\n    {\n      "key": "accountid",\n      "value": "2999"\n    }\n  ],\n    "requestDate": "2017-07-21T17:32:28Z",\n    "startDate": "2018-11-20",\n    "currency": "GBP",\n    "amountLimit": "1000.00",\n    "endDate": "2018-11-20",\n    "numberOfPayments": "2",\n    "frequencyType": "sixmonths",\n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]        \n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider participant Account Holder Service Provider->>Mobile Money Provider: POST /accounts/{identifierType}/{identifier}/debitmandates activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the debit mandate request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) Mobile Money Provider->>Account Holder: Obtain Customer Authorisation activate Account Holder Note right of Account Holder: (2) The customer is requested to the MMP to\nauthorise the mandate. This can be\nachieved through a number of means\nincluding USSD Push and One Time Code.\nOpenId can also be used to secure\ncustomer authorisation. Account Holder--\x3e>Mobile Money Provider: (Authorised) deactivate Account Holder Mobile Money Provider->>Service Provider: PUT {Callback URL} (Debit Mandates Object) Note right of Mobile Money Provider: (3) The MMP informs the service provider that the\ndebit mandate has been successfully created\nby returning the final representation of the\ndebit mandate. Service Provider--\x3e>Mobile Money Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Setup a Recurring Payment Failure\n\nIn this diagram, the account holder declines to provide authorisation to setup the recurring payment. The service provider receives a callback containing an error object detailing the reason for failure.\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider participant Account Holder Service Provider->>Mobile Money Provider: POST /accounts/{identifierType}/{identifier}/debitmandates activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the payment request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) Mobile Money Provider->>Account Holder: Obtain Customer Authorisation activate Account Holder Note right of Account Holder: (2) The customer declines the request by the\nMMP to accept the debit mandate. Account Holder--\x3e>Mobile Money Provider: (Declined) deactivate Account Holder Mobile Money Provider->>Service Provider: PUT {Callback URL} (Error Object) Note right of Mobile Money Provider: (3) The MMP informs the service provider that the\ndebit mandate has been declined by returning\nan error object. Service Provider--\x3e>Mobile Money Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\n\n\n# Take a Recurring Payment\n\nIn this diagram, the service provider initiates a payment request to the FSP to debit the account-holders account as per the debit mandate.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "mandatereference",\n            "value": "Place your Mandate Reference here"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: POST /transactions/type/merchantpay activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the payment request for\nprocessing to the MMP, ensuring that a mandate reference\nis provided for the payment. The MMP will return the\nRequest State object to indicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) deactivate Service Provider Mobile Money Provider->>Service Provider: PUT {Callback URL} (Transactions Object) activate Service Provider Note right of Mobile Money Provider: (2) The MMP informs the service provider that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. Service Provider--\x3e>Mobile Money Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Take a Recurring Payment Failure\n\nIn this diagram, the service provider initiates a payment request to the FSP to debit the account-holders account as per the debit mandate. The FSP is unable to process the payment and returns a callback containing the error object.\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: POST /transactions/type/merchantpay activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the payment request for\nprocessing to the MMP, ensuring that a mandate reference\nis provided for the payment. The MMP will return the\nRequest State object to indicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) deactivate Service Provider Mobile Money Provider->>Service Provider: PUT {Callback URL} (Error Object) activate Service Provider Note right of Mobile Money Provider: (2) The MMP informs the service provider that the\npayment has failed and returns the error\nobject detailing the reason for failure. Service Provider--\x3e>Mobile Money Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\n\n\n# Take a Recurring Payment using the Polling Method\n\nIn this example, an asynchronous payment flow is used with the polling method. The client polls against the request state object to determine the outcome of the payment request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/merchantpay\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "mandatereference",\n            "value": "Place your Mandate Reference here"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n \n\n\nGET .../requeststates/Place the Server Correlation Id here\n\n\n \n\n\nGET .../transactions/Place Transaction Reference here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: POST /transactions/type/merchantpay activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the payment request for\nprocessing to the MMP, ensuring that a mandate reference\nis provided for the payment. The MMP will return the\nRequest State object to indicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) deactivate Service Provider loop activate Service Provider Service Provider->>Mobile Money Provider: GET /requeststates/{serverCorrelationId} Note right of Mobile Money Provider: (2) The service provider polls the MMP for the Request State\nuntil the transaction is authorised or declied or until the\npolling limit is reached. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Request State Object) end deactivate Mobile Money Provider opt activate Mobile Money Provider Service Provider->>Mobile Money Provider: GET /transactions/transactionReference Note right of Mobile Money Provider: (3) The service provider can use the objectReference returned in\nthe Request State to retrieve a representation of the\ncompleted payment. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Transactions Object) end deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Recurring Payment Refund\n\nService Providers can issue a refund to payers. In this diagram, the refund is not linked to the original transaction and hence the /transactions API is used. Where a refund needs to be linked to the original transaction, the /reversals API must be used to perform the refund.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/type/adjustment\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "amount": "200.00",\n    "debitParty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditParty": [\n        {\n            "key": "mandateReference",\n            "value": "Place your Mandate Reference here"\n        }\n    ],\n    "currency": "RWF"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: POST /transactions/type/adjustment activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the refund request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) Mobile Money Provider->>Service Provider: PUT {Callback URL} (Transactions Object) Note right of Mobile Money Provider: (2) The MMP informs the service provider that the\nrefund has been successfully completed by\nreturning the final representation of the refund. Service Provider--\x3e>Mobile Money Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Recurring Payment Reversal\n\nIn some failure scenarios, a service provider may need to reverse a transaction. This diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../transactions/Place Reference of Txn to be Reversed here/reversals\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n    "type": "reversal"\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: POST /transactions/{original transaction reference}/reversals activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider submits the reversal request for\nprocessing to the MMP - passing the reference of the\ntransaction that is to be reversed. The MMP will return the\nRequest State object to indicate that the request is\n\'pending\'. Mobile Money Provider--\x3e>Service Provider: HTTP 202 (Request State Object) Mobile Money Provider->>Service Provider: PUT {Callback URL} (Reversal Object) Note right of Mobile Money Provider: (2) The MMP informs the service provider that the\nreversal has been successfully completed by\nreturning the final representation of the\nreversal transaction. Service Provider--\x3e>Mobile Money Provider: HTTP 204 deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Payer sets up a Recurring Payment using MMP Channel\n\nThis diagram illustrates how the MM API can be used by a mobile money provider to allow a payer to setup a recurring payment using a channel provided by the provider, for example, a mobile money app.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOST .../accounts/accountid/2000/debitmandates\n---\nHeaders:\n{\n   "X-CorrelationID": ["Please enter your UUID here"],\n   "X-Callback-URL": ["Please enter your callback URL here"],\n   "Content-Type": ["application/json"]\n}\n---\nBody parameters: \n{\n   "payee": [\n    {\n      "key": "accountid",\n      "value": "2999"\n    }\n  ],\n    "requestDate": "2017-07-21T17:32:28Z",\n    "startDate": "2018-11-20",\n    "currency": "GBP",\n    "amountLimit": "1000.00",\n    "endDate": "2018-11-20",\n    "numberOfPayments": "2",\n    "frequencyType": "sixmonths",\n    "customData": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]        \n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Mobile Money Provider Channel participant Mobile Money Provider Mobile Money Provider Channel->>Mobile Money Provider: POST /accounts/{identifierType}/{identifier}/debitmandates activate Mobile Money Provider Channel activate Mobile Money Provider Note right of Mobile Money Provider: (1) The MMP Channel submits the debit mandate request for\nprocessing to the MMP. The MMP will return the Request\nState object to indicate that the request is \'pending\'. Mobile Money Provider--\x3e>Mobile Money Provider Channel: HTTP 202 (Request State Object) Mobile Money Provider->>Mobile Money Provider Channel: PUT {Callback URL} (Debit Mandates Object) Note right of Mobile Money Provider: (2) The MMP informs the MMP Channel that the\ndebit mandate has been successfully created\nby returning the final representation of the\ndebit mandate. Mobile Money Provider Channel--\x3e>Mobile Money Provider: HTTP 204 deactivate Mobile Money Provider Channel deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Obtain a Service Provider Balance\n\n \n\n\nGET .../accounts/accountid/2000/balance\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/balance activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) Obtain the balance of the\nrequested account. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Balance Object) deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve Payments for a Service Provider\n\nThis diagram illustrates use of a cursor mechanism to retrieve all payments for a service provider via multiple requests.\n\n \n\n\n\n\n\n\n\n\nGET .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nParams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=0&limit=20 activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider requests\nup to 20 transactions for the\naccount from the MMP. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) Note right of Mobile Money Provider: (2) The MMP returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. Service Provider->>Mobile Money Provider: GET /accounts/{identifierType}/{identifier}/transactions?offset=20&limit=20 Note right of Mobile Money Provider: (3) The service provider requests\nthe remaining transactions for\nthe account from the MMP. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Transactions Array) (X-Records-Available-Count=40) deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Check for Service Availability\n\nThe Heartbeat API is used for monitoring purposes and establishes whether the FSP is in a state that enables a client to submit a request for processing.\n\n \n\n\nGET .../heartbeat\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: GET /heartbeat activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) The service provider requests the\navailability of the service from the MMP. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Heartbeat Object) Note right of Mobile Money Provider: (2) The MMP returns the availability of\nthe service - available, unavailable\nor degraded. deactivate Service Provider deactivate Mobile Money Provider\nOpen Postman Collection Open Postman Collection with Authentication\n\n\n# Retrieve a Missing API Response\n\nThis API can be used by the service provider to retrieve a link to the final representation of the resource for which it attempted to create. Use this API when a callback is not received from the FSP.\n\n \n\n\nGET .../responses/Please enter your UUID here\n\n\n//some JavaScript code here\n\n\n<?php \n  //some PHP code here \n?>\n\n\nsequenceDiagram participant Service Provider participant Mobile Money Provider Service Provider->>Mobile Money Provider: GET /responses{clientCorrelationId} activate Service Provider activate Mobile Money Provider Note right of Mobile Money Provider: (1) Using the service provider\'s\nclientCorrelationId, a request for the\nmissing API response is sent. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Responses Object) Note right of Mobile Money Provider: (2) A Responses object is returned\ncontaining a link to the missing\nresource. Service Provider->>Mobile Money Provider: GET /{link} Note right of Mobile Money Provider: (3) The service provider uses the link to\nobtain a representation of the missing\nresource. Mobile Money Provider--\x3e>Service Provider: HTTP 200 (Requested Object) deactivate Mobile Money Provider deactivate Service Provider\nOpen Postman Collection Open Postman Collection with Authentication',normalizedContent:'# about use case scenarios\n\nthe gsma simulator for the mobile money api is a simulated api implementation developed by the gsma to facilitate api adoption and testing, thereby decreasing implementation effort and time to market for mobile money providers and ecosystem service providers. developers can navigate through use case scenarios providing access to a set of pre-defined postman collections for the simulator to try out some of the most common mobile money api use cases, or directly access the oas interface for the api specification and use the api try it out functionality from there.\n\n\n# setup a recurring payment\n\nthis diagram illustrates the setting-up of a recurring payment via a debit mandate. the service provider initiates the request which is authorised by the account holding customer. in this diagram, an asynchronous flow is used with a final callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/2000/debitmandates\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n   "payee": [\n    {\n      "key": "accountid",\n      "value": "2999"\n    }\n  ],\n    "requestdate": "2017-07-21t17:32:28z",\n    "startdate": "2018-11-20",\n    "currency": "gbp",\n    "amountlimit": "1000.00",\n    "enddate": "2018-11-20",\n    "numberofpayments": "2",\n    "frequencytype": "sixmonths",\n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]        \n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider participant account holder service provider->>mobile money provider: post /accounts/{identifiertype}/{identifier}/debitmandates activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the debit mandate request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) mobile money provider->>account holder: obtain customer authorisation activate account holder note right of account holder: (2) the customer is requested to the mmp to\nauthorise the mandate. this can be\nachieved through a number of means\nincluding ussd push and one time code.\nopenid can also be used to secure\ncustomer authorisation. account holder--\x3e>mobile money provider: (authorised) deactivate account holder mobile money provider->>service provider: put {callback url} (debit mandates object) note right of mobile money provider: (3) the mmp informs the service provider that the\ndebit mandate has been successfully created\nby returning the final representation of the\ndebit mandate. service provider--\x3e>mobile money provider: http 204 deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# setup a recurring payment failure\n\nin this diagram, the account holder declines to provide authorisation to setup the recurring payment. the service provider receives a callback containing an error object detailing the reason for failure.\n\nsequencediagram participant service provider participant mobile money provider participant account holder service provider->>mobile money provider: post /accounts/{identifiertype}/{identifier}/debitmandates activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the payment request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) mobile money provider->>account holder: obtain customer authorisation activate account holder note right of account holder: (2) the customer declines the request by the\nmmp to accept the debit mandate. account holder--\x3e>mobile money provider: (declined) deactivate account holder mobile money provider->>service provider: put {callback url} (error object) note right of mobile money provider: (3) the mmp informs the service provider that the\ndebit mandate has been declined by returning\nan error object. service provider--\x3e>mobile money provider: http 204 deactivate service provider deactivate mobile money provider\n\n\n# take a recurring payment\n\nin this diagram, the service provider initiates a payment request to the fsp to debit the account-holders account as per the debit mandate.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "mandatereference",\n            "value": "place your mandate reference here"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: post /transactions/type/merchantpay activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the payment request for\nprocessing to the mmp, ensuring that a mandate reference\nis provided for the payment. the mmp will return the\nrequest state object to indicate that the request is\n\'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) deactivate service provider mobile money provider->>service provider: put {callback url} (transactions object) activate service provider note right of mobile money provider: (2) the mmp informs the service provider that the\ntransaction has been successfully completed\nby returning the final representation of the\ntransaction. service provider--\x3e>mobile money provider: http 204 deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# take a recurring payment failure\n\nin this diagram, the service provider initiates a payment request to the fsp to debit the account-holders account as per the debit mandate. the fsp is unable to process the payment and returns a callback containing the error object.\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: post /transactions/type/merchantpay activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the payment request for\nprocessing to the mmp, ensuring that a mandate reference\nis provided for the payment. the mmp will return the\nrequest state object to indicate that the request is\n\'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) deactivate service provider mobile money provider->>service provider: put {callback url} (error object) activate service provider note right of mobile money provider: (2) the mmp informs the service provider that the\npayment has failed and returns the error\nobject detailing the reason for failure. service provider--\x3e>mobile money provider: http 204 deactivate service provider deactivate mobile money provider\n\n\n# take a recurring payment using the polling method\n\nin this example, an asynchronous payment flow is used with the polling method. the client polls against the request state object to determine the outcome of the payment request.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/merchantpay\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "mandatereference",\n            "value": "place your mandate reference here"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n \n\n\nget .../requeststates/place the server correlation id here\n\n\n \n\n\nget .../transactions/place transaction reference here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: post /transactions/type/merchantpay activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the payment request for\nprocessing to the mmp, ensuring that a mandate reference\nis provided for the payment. the mmp will return the\nrequest state object to indicate that the request is\n\'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) deactivate service provider loop activate service provider service provider->>mobile money provider: get /requeststates/{servercorrelationid} note right of mobile money provider: (2) the service provider polls the mmp for the request state\nuntil the transaction is authorised or declied or until the\npolling limit is reached. mobile money provider--\x3e>service provider: http 200 (request state object) end deactivate mobile money provider opt activate mobile money provider service provider->>mobile money provider: get /transactions/transactionreference note right of mobile money provider: (3) the service provider can use the objectreference returned in\nthe request state to retrieve a representation of the\ncompleted payment. mobile money provider--\x3e>service provider: http 200 (transactions object) end deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# recurring payment refund\n\nservice providers can issue a refund to payers. in this diagram, the refund is not linked to the original transaction and hence the /transactions api is used. where a refund needs to be linked to the original transaction, the /reversals api must be used to perform the refund.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/type/adjustment\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "amount": "200.00",\n    "debitparty": [\n        {\n            "key": "accountid",\n            "value": "2999"\n        }\n    ],\n    "creditparty": [\n        {\n            "key": "mandatereference",\n            "value": "place your mandate reference here"\n        }\n    ],\n    "currency": "rwf"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: post /transactions/type/adjustment activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the refund request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) mobile money provider->>service provider: put {callback url} (transactions object) note right of mobile money provider: (2) the mmp informs the service provider that the\nrefund has been successfully completed by\nreturning the final representation of the refund. service provider--\x3e>mobile money provider: http 204 deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# recurring payment reversal\n\nin some failure scenarios, a service provider may need to reverse a transaction. this diagram illustrates a reversal with the final result communicated via the callback.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../transactions/place reference of txn to be reversed here/reversals\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n    "type": "reversal"\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: post /transactions/{original transaction reference}/reversals activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider submits the reversal request for\nprocessing to the mmp - passing the reference of the\ntransaction that is to be reversed. the mmp will return the\nrequest state object to indicate that the request is\n\'pending\'. mobile money provider--\x3e>service provider: http 202 (request state object) mobile money provider->>service provider: put {callback url} (reversal object) note right of mobile money provider: (2) the mmp informs the service provider that the\nreversal has been successfully completed by\nreturning the final representation of the\nreversal transaction. service provider--\x3e>mobile money provider: http 204 deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# payer sets up a recurring payment using mmp channel\n\nthis diagram illustrates how the mm api can be used by a mobile money provider to allow a payer to setup a recurring payment using a channel provided by the provider, for example, a mobile money app.\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npost .../accounts/accountid/2000/debitmandates\n---\nheaders:\n{\n   "x-correlationid": ["please enter your uuid here"],\n   "x-callback-url": ["please enter your callback url here"],\n   "content-type": ["application/json"]\n}\n---\nbody parameters: \n{\n   "payee": [\n    {\n      "key": "accountid",\n      "value": "2999"\n    }\n  ],\n    "requestdate": "2017-07-21t17:32:28z",\n    "startdate": "2018-11-20",\n    "currency": "gbp",\n    "amountlimit": "1000.00",\n    "enddate": "2018-11-20",\n    "numberofpayments": "2",\n    "frequencytype": "sixmonths",\n    "customdata": [\n        {\n        "key": "keytest",\n        "value": "keyvalue"\n        }\n    ]        \n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant mobile money provider channel participant mobile money provider mobile money provider channel->>mobile money provider: post /accounts/{identifiertype}/{identifier}/debitmandates activate mobile money provider channel activate mobile money provider note right of mobile money provider: (1) the mmp channel submits the debit mandate request for\nprocessing to the mmp. the mmp will return the request\nstate object to indicate that the request is \'pending\'. mobile money provider--\x3e>mobile money provider channel: http 202 (request state object) mobile money provider->>mobile money provider channel: put {callback url} (debit mandates object) note right of mobile money provider: (2) the mmp informs the mmp channel that the\ndebit mandate has been successfully created\nby returning the final representation of the\ndebit mandate. mobile money provider channel--\x3e>mobile money provider: http 204 deactivate mobile money provider channel deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# obtain a service provider balance\n\n \n\n\nget .../accounts/accountid/2000/balance\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: get /accounts/{identifiertype}/{identifier}/balance activate service provider activate mobile money provider note right of mobile money provider: (1) obtain the balance of the\nrequested account. mobile money provider--\x3e>service provider: http 200 (balance object) deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve payments for a service provider\n\nthis diagram illustrates use of a cursor mechanism to retrieve all payments for a service provider via multiple requests.\n\n \n\n\n\n\n\n\n\n\nget .../accounts/accountid/2000/transactions?offset=0&limit=20\n---\nparams:\n{\n  "offset": 0,\n  "limit": 20\n}\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=0&limit=20 activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider requests\nup to 20 transactions for the\naccount from the mmp. mobile money provider--\x3e>service provider: http 200 (transactions array) (x-records-available-count=40) note right of mobile money provider: (2) the mmp returns an array of\n20 transactions and indicates\nvia a response header that\nthere are 40 records\navailable in total. service provider->>mobile money provider: get /accounts/{identifiertype}/{identifier}/transactions?offset=20&limit=20 note right of mobile money provider: (3) the service provider requests\nthe remaining transactions for\nthe account from the mmp. mobile money provider--\x3e>service provider: http 200 (transactions array) (x-records-available-count=40) deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# check for service availability\n\nthe heartbeat api is used for monitoring purposes and establishes whether the fsp is in a state that enables a client to submit a request for processing.\n\n \n\n\nget .../heartbeat\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: get /heartbeat activate service provider activate mobile money provider note right of mobile money provider: (1) the service provider requests the\navailability of the service from the mmp. mobile money provider--\x3e>service provider: http 200 (heartbeat object) note right of mobile money provider: (2) the mmp returns the availability of\nthe service - available, unavailable\nor degraded. deactivate service provider deactivate mobile money provider\nopen postman collection open postman collection with authentication\n\n\n# retrieve a missing api response\n\nthis api can be used by the service provider to retrieve a link to the final representation of the resource for which it attempted to create. use this api when a callback is not received from the fsp.\n\n \n\n\nget .../responses/please enter your uuid here\n\n\n//some javascript code here\n\n\n<?php \n  //some php code here \n?>\n\n\nsequencediagram participant service provider participant mobile money provider service provider->>mobile money provider: get /responses{clientcorrelationid} activate service provider activate mobile money provider note right of mobile money provider: (1) using the service provider\'s\nclientcorrelationid, a request for the\nmissing api response is sent. mobile money provider--\x3e>service provider: http 200 (responses object) note right of mobile money provider: (2) a responses object is returned\ncontaining a link to the missing\nresource. service provider->>mobile money provider: get /{link} note right of mobile money provider: (3) the service provider uses the link to\nobtain a representation of the missing\nresource. mobile money provider--\x3e>service provider: http 200 (requested object) deactivate mobile money provider deactivate service provider\nopen postman collection open postman collection with authentication',charsets:{}}],themeConfig:{repo:"",editLinks:!1,docsDir:"",editLinkText:"",lastUpdated:!1,logo:"/images/logo-small.svg",nav:[{text:"About",items:[{text:"About GSMA",link:"https://www.gsma.com/aboutus/",target:"_blank"},{text:"Mobile for Development",link:"https://www.gsma.com/mobilefordevelopment/mobile-money/",target:"_blank"},{text:"Inclusive Tech Lab",link:"https://www.gsma.com/mobilefordevelopment/mobile-money/gsma-inclusive-tech-lab/",target:"_blank"}]},{text:"Business",items:[{text:"Mobile Money Providers",link:"/mobile-money-providers/"},{text:"Merchants & Service Providers",link:"/merchants-and-service-providers/"},{text:"Governments",link:"/governments/"},{text:"Humanitarian Agencies",link:"/humanitarian-agencies/"},{text:"International Transfer Organisations",link:"/international-transfer-organisations/"},{text:"Payment Service Providers & Payment Aggregators",link:"/payment-service-providers-and-payment-aggregators/"},{text:"Banks & Microfinance Institutions",link:"/banks-microfinance-institutions/"},{text:"FinTech Providers (Insurance Savings Loans)",link:"/fintech-providers/"},{text:"Employers",link:"/employers/"},{text:"Energy & Utilities & AgriTech",link:"/energy-utilities-agritech/"},{text:"Education & Health",link:"/education-and-health/"},{text:"Mobile Money Agents",link:"/mobile-money-agents/"}]},{text:"API version",items:[{text:"Version 1.2",items:[{text:"Home",link:"/api-versions-1.2/"},{text:"Highlights",link:"/api-versions-1.2/resources/highlights"},{text:"Change list",link:"/api-versions-1.2/resources/change-list"}]},{text:"Version 1.1",link:"/api-versions-1.1/"},{text:"Version 1.0",link:"/api-versions-1.0/"}]},{text:"SDKs",items:[{text:"Getting Started",link:"/sdks/getting-started/introduction"},{text:"Authentication",link:"/sdks/auth/client-authentication"},{text:"Android",link:"/sdks/android/introduction"},{text:"NodeJs",link:"/sdks/nodejs/introduction"},{text:"PHP",link:"/sdks/php/introduction"},{text:"JavaScript",link:"/sdks/javascript/introduction"},{text:"Java",link:"/sdks/java/introduction"}]},{text:"Resources",items:[{text:"Security",link:"/security/"},{text:"Glossary",link:"/glossary/"},{text:"FAQ",link:"/faq/"}]},{text:"Support",link:"/support/"}],footer:[{text:"Contact GSMA",link:"https://www.gsma.com/aboutus/worldwide-offices",target:"_blank"},{text:"Legal",link:"https://www.gsma.com/aboutus/legal",target:"_blank"},{text:"Email Preference Centre",link:"https://www.gsma.com/aboutus/legal/email-preference-centre",target:"_blank"}],sidebar:{"/examples/":[{title:"Examples",collapsable:!1,children:["#introduction","swagger-page"]}],"/api-versions-1.2/":[{title:"API version 1.2",collapsable:!1,sidebarDepth:2,backLink:{title:"API version  1.2",path:"/api-versions-1.2/"},children:[{title:"Get started",sidebarDepth:2,children:[{title:"Getting started",path:"/api-versions-1.2/get-started",sidebarDepth:2}]},{title:"Resources",sidebarDepth:2,children:[{title:"API Service Definition",path:"/api-versions-1.2/resources/api-service-definition",collapsable:!0,sidebarDepth:2},{title:"Open OAS3 UI",path:"/api-versions-1.2/resources/open-oas3-ui",collapsable:!0,sidebarDepth:2},{title:"Change list",path:"/api-versions-1.2/resources/change-list",collapsable:!0,sidebarDepth:2},{title:"Highlights",path:"/api-versions-1.2/resources/highlights",collapsable:!0,sidebarDepth:2}]},{title:"Use cases",sidebarDepth:2,children:[{title:"About",path:"/api-versions-1.2/use-cases-about.md",sidebarDepth:2,collapsable:!0},{title:"Merchant payments",path:"/use-cases/merchant-payments/",sidebarDepth:2,collapsable:!0},{title:"Disbursements",path:"/use-cases/disbursements/",sidebarDepth:2,collapsable:!0},{title:"International transfers",path:"/use-cases/international-transfers/",sidebarDepth:2,collapsable:!0},{title:"P2P transfers",path:"/use-cases/p-2-p-transfers/",sidebarDepth:2,collapsable:!0},{title:"Recurring payments",path:"/use-cases/recurring-payments/",sidebarDepth:2,collapsable:!0},{title:"Account linking",path:"/use-cases/account-linking/",sidebarDepth:2,collapsable:!0},{title:"Bill payments",path:"/use-cases/bill-payments/",sidebarDepth:2,collapsable:!0},{title:"Agent Services",path:"/use-cases/agent-services/",sidebarDepth:2,collapsable:!0}]}]}],"/sdks/":[{title:"SDKs",collapsable:!1,sidebarDepth:2,children:[{title:"Getting Started",sidebarDepth:2,children:[{title:"Introduction",path:"/sdks/getting-started/introduction",sidebarDepth:2},{title:"SDKs",path:"/sdks/getting-started/sdks",sidebarDepth:2},{title:"GitHub",path:"https://github.com/gsmainclusivetechlab/mmapi-sdk-docs",sidebarDepth:2,collapsable:!0}]},{title:"Authentication",sidebarDepth:2,children:[{title:"Client Authentication",path:"/sdks/auth/client-authentication",sidebarDepth:2},{title:"API Authorisation",path:"/sdks/auth/api-authorization",collapsable:!0,sidebarDepth:2}]},{title:"Android",sidebarDepth:2,children:[{title:"Introduction",path:"/sdks/android/introduction",sidebarDepth:2,collapsable:!0},{title:"System Requirements",path:"/sdks/android/system-requirements",sidebarDepth:2,collapsable:!0},{title:"SDK Initialisation",path:"/sdks/android/sdk-initialization",sidebarDepth:2,collapsable:!0},{title:"Downloads",path:"/sdks/android/downloads",sidebarDepth:2,collapsable:!0},{title:"GitHub",path:"https://github.com/gsmainclusivetechlab/mmapi-android-sdk/tree/develop#readme",sidebarDepth:2,collapsable:!0}]},{title:"NodeJs",sidebarDepth:2,children:[{title:"Introduction",path:"/sdks/nodejs/introduction",sidebarDepth:2,collapsable:!0},{title:"System Requirements",path:"/sdks/nodejs/system-requirements",sidebarDepth:2,collapsable:!0},{title:"SDK Initialisation",path:"/sdks/nodejs/sdk-initialization",sidebarDepth:2,collapsable:!0},{title:"Downloads",path:"/sdks/nodejs/downloads",sidebarDepth:2,collapsable:!0},{title:"GitHub",path:"https://github.com/gsmainclusivetechlab/mmapi-nodejs-sdk/tree/develop#readme",sidebarDepth:2,collapsable:!0}]},{title:"PHP",sidebarDepth:2,children:[{title:"Introduction",path:"/sdks/php/introduction",sidebarDepth:2,collapsable:!0},{title:"System Requirements",path:"/sdks/php/system-requirements",sidebarDepth:2,collapsable:!0},{title:"SDK Initialisation",path:"/sdks/php/sdk-initialization",sidebarDepth:2,collapsable:!0},{title:"Downloads",path:"/sdks/php/downloads",sidebarDepth:2,collapsable:!0},{title:"GitHub",path:"https://github.com/gsmainclusivetechlab/mmapi-php-sdk/tree/develop#readme",sidebarDepth:2,collapsable:!0}]},{title:"JavaScript",sidebarDepth:2,children:[{title:"Introduction",path:"/sdks/javascript/introduction",sidebarDepth:2,collapsable:!0},{title:"System Requirements",path:"/sdks/javascript/system-requirements",sidebarDepth:2,collapsable:!0},{title:"SDK Initialisation",path:"/sdks/javascript/sdk-initialization",sidebarDepth:2,collapsable:!0},{title:"Downloads",path:"/sdks/javascript/downloads",sidebarDepth:2,collapsable:!0},{title:"GitHub",path:"https://github.com/gsmainclusivetechlab/mmapi-javascript-sdk/tree/development#readme",sidebarDepth:2,collapsable:!0}]},{title:"Java",sidebarDepth:2,children:[{title:"Introduction",path:"/sdks/java/introduction",sidebarDepth:2,collapsable:!0},{title:"System Requirements",path:"/sdks/java/system-requirements",sidebarDepth:2,collapsable:!0},{title:"SDK Initialisation",path:"/sdks/java/sdk-initialization",sidebarDepth:2,collapsable:!0},{title:"Downloads",path:"/sdks/java/downloads",sidebarDepth:2,collapsable:!0},{title:"GitHub",path:"https://github.com/gsmainclusivetechlab/mmapi-java-sdk/tree/develop#readme",sidebarDepth:2,collapsable:!0}]}]}],"/use-cases/merchant-payments/":[{title:"Merchant Payments",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"Merchant Payments",path:"/use-cases/merchant-payments/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About Merchant Payments Scenarios",path:"/use-cases/merchant-payments/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/merchant-payments/api-service-definition"}]},{title:"Merchant Payments Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"Merchant Payments Open OAS UI",path:"/use-cases/merchant-payments/merchant-payments-open-oas-ui"}]}]}],"/use-cases/disbursements/":[{title:"Disbursements",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"Disbursements",path:"/use-cases/disbursements/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About Disbursements Scenarios",path:"/use-cases/disbursements/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/disbursements/api-service-definition"}]},{title:"Disbursements Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"Disbursements Open OAS UI",path:"/use-cases/disbursements/disbursements-open-oas-ui"}]}]}],"/use-cases/international-transfers/":[{title:"International transfers",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"International Transfers",path:"/use-cases/international-transfers/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About International Transfers Scenarios",path:"/use-cases/international-transfers/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/international-transfers/api-service-definition"}]},{title:"International Transfers Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"International Transfers Open OAS UI",path:"/use-cases/international-transfers/international-transfers-open-oas-ui"}]}]}],"/use-cases/p-2-p-transfers/":[{title:"P2P Transfers",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"P2P Transfers",path:"/use-cases/p-2-p-transfers/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About P2P Transfers Scenarios",path:"/use-cases/p-2-p-transfers/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/p-2-p-transfers/api-service-definition"}]},{title:"P2P Transfers Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"P2P Transfers Open OAS UI",path:"/use-cases/p-2-p-transfers/p2p-transfers-open-oas-ui"}]}]}],"/use-cases/recurring-payments/":[{title:"Recurring Payments",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"Recurring Payments",path:"/use-cases/recurring-payments/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About Recurring Payments Scenarios",path:"/use-cases/recurring-payments/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/recurring-payments/api-service-definition"}]},{title:"Recurring Payments Open OAS UI",Recurring:!0,sidebarDepth:2,children:[{title:"Recurring Payments Open OAS UI",path:"/use-cases/recurring-payments/recurring-payments-open-oas-ui"}]}]}],"/use-cases/account-linking/":[{title:"Account linking",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"Account Linking",path:"/use-cases/account-linking/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About Account Linking Scenarios",path:"/use-cases/account-linking/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/account-linking/api-service-definition"}]},{title:"Account Linking Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"Account Linking Open OAS UI",path:"/use-cases/account-linking/account-linking-open-oas-ui"}]}]}],"/use-cases/bill-payments/":[{title:"Bill payments",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"Bill Payments",path:"/use-cases/bill-payments/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About Bill Payments Scenarios",path:"/use-cases/bill-payments/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/bill-payments/api-service-definition"}]},{title:"Bill Payments Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"Bill Payments Open OAS UI",path:"/use-cases/bill-payments/bill-payments-open-oas-ui"}]}]}],"/use-cases/agent-services/":[{title:"Agent Services",collapsable:!1,sidebarDepth:2,backLink:{title:"API version 1.2",path:"/api-versions-1.2/"},children:[{title:"Overview",collapsable:!0,sidebarDepth:2,children:[{title:"Agent Services",path:"/use-cases/agent-services/"}]},{title:"Use case scenarios",collapsable:!0,sidebarDepth:2,children:[{title:"About Agent Services Scenarios",path:"/use-cases/agent-services/scenarios/scenarios"}]},{title:"API Service Definition",collapsable:!0,sidebarDepth:2,children:[{title:"API Service Definition",path:"/use-cases/agent-services/api-service-definition"}]},{title:"Agent Services Open OAS UI",collapsable:!0,sidebarDepth:2,children:[{title:"Agent Services Open OAS UI",path:"/use-cases/agent-services/agent-services-open-oas-ui"}]}]}]},smoothScroll:!0,searchMaxSuggestions:10}},Bn=(t(349),t(351),t(206)),Un=t.n(Bn),Ln=(t(352),t(230),t(214),t(125),function(){return(Ln=Object.assign||function(e){for(var n,t=1,i=arguments.length;t<i;t++)for(var a in n=arguments[t])Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);return e}).apply(this,arguments)});function zn(e,n,t,i){return new(t||(t=Promise))((function(a,o){function r(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(r,s)}c((i=i.apply(e,n||[])).next())}))}function Hn(e,n){var t,i,a,o,r={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;r;)try{if(t=1,i&&(a=2&o[0]?i.return:o[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,o[1])).done)return a;switch(i=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return r.label++,{value:o[1],done:!1};case 5:r.label++,i=o[1],o=[0];continue;case 7:o=r.ops.pop(),r.trys.pop();continue;default:if(!(a=r.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){r=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){r.label=o[1];break}if(6===o[0]&&r.label<a[1]){r.label=a[1],a=o;break}if(a&&r.label<a[2]){r.label=a[2],r.ops.push(o);break}a[2]&&r.ops.pop(),r.trys.pop();continue}o=n.call(e,r)}catch(e){o=[6,e],i=0}finally{t=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function _n(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;var i=Array(e),a=0;for(n=0;n<t;n++)for(var o=arguments[n],r=0,s=o.length;r<s;r++,a++)i[a]=o[r];return i}function Gn(e){return e!=e}function Vn(e){return null==e}var $n=function(e){return null!==e&&e&&"object"==typeof e&&!Array.isArray(e)};function Kn(e){return""!==e&&!Vn(e)}function Xn(e){return"function"==typeof e}function Jn(e){return Xn(e)&&!!e.__locatorRef}function Yn(e,n){var t=Array.isArray(e)?e:Wn(e);if(Xn(t.findIndex))return t.findIndex(n);for(var i=0;i<t.length;i++)if(n(t[i],i))return i;return-1}function Qn(e,n){return-1!==e.indexOf(n)}function Wn(e){return Xn(Array.from)?Array.from(e):function(e){for(var n=[],t=e.length,i=0;i<t;i++)n.push(e[i]);return n}(e)}function Zn(e){return Xn(Object.values)?Object.values(e):Object.keys(e).map((function(n){return e[n]}))}function et(e,n){return Object.keys(n).forEach((function(t){if($n(n[t]))return e[t]||(e[t]={}),void et(e[t],n[t]);e[t]=n[t]})),e}function nt(e,n,t){return void 0===n&&(n=0),void 0===t&&(t={cancelled:!1}),0===n?e:function(){for(var a=[],o=0;o<arguments.length;o++)a[o]=arguments[o];var r=function(){i=void 0,t.cancelled||e.apply(void 0,a)};clearTimeout(i),i=setTimeout(r,n)};var i}function tt(e,n){return e.replace(/{([^}]+)}/g,(function(e,t){return t in n?n[t]:"{"+t+"}"}))}var it={};var at=function(){function e(){}return e.extend=function(e,n){var t=function(e){var n;return(null===(n=e.params)||void 0===n?void 0:n.length)&&(e.params=e.params.map((function(e){return"string"==typeof e?{name:e}:e}))),e}(n);it[e]?it[e]=et(it[e],n):it[e]=Ln({lazy:!1,computesRequired:!1},t)},e.isLazy=function(e){var n;return!!(null===(n=it[e])||void 0===n?void 0:n.lazy)},e.isRequireRule=function(e){var n;return!!(null===(n=it[e])||void 0===n?void 0:n.computesRequired)},e.getRuleDefinition=function(e){return it[e]},e}();function ot(e,n){!function(e,n){if(Xn(n))return;if(Xn(n.validate))return;if(at.getRuleDefinition(e))return;throw new Error("Extension Error: The validator '"+e+"' must be a function or have a 'validate' method.")}(e,n),"object"!=typeof n?at.extend(e,{validate:n}):at.extend(e,n)}var rt=Ln({},{defaultMessage:"{_field_} is not valid.",skipOptional:!0,classes:{touched:"touched",untouched:"untouched",valid:"valid",invalid:"invalid",pristine:"pristine",dirty:"dirty"},bails:!0,mode:"aggressive",useConstraintAttrs:!0}),st=function(){return rt};function ct(e){var n,t={};return Object.defineProperty(t,"_$$isNormalized",{value:!0,writable:!1,enumerable:!1,configurable:!1}),e?$n(e)&&e._$$isNormalized?e:$n(e)?Object.keys(e).reduce((function(n,t){var i=[];return i=!0===e[t]?[]:Array.isArray(e[t])||$n(e[t])?e[t]:[e[t]],!1!==e[t]&&(n[t]=dt(t,i)),n}),t):"string"!=typeof e?(n="rules must be either a string or an object.",console.warn("[vee-validate] "+n),t):e.split("|").reduce((function(e,n){var t=lt(n);return t.name?(e[t.name]=dt(t.name,t.params),e):e}),t):t}function dt(e,n){var t=at.getRuleDefinition(e);if(!t)return n;var i,a,o={};if(!t.params&&!Array.isArray(n))throw new Error("You provided an object params to a rule that has no defined schema.");if(Array.isArray(n)&&!t.params)return n;!t.params||t.params.length<n.length&&Array.isArray(n)?i=n.map((function(e,n){var i,o=null===(i=t.params)||void 0===i?void 0:i[n];return a=o||a,o||(o=a),o})):i=t.params;for(var r=0;r<i.length;r++){var s=i[r],c=s.default;Array.isArray(n)?r in n&&(c=n[r]):s.name in n?c=n[s.name]:1===i.length&&(c=n),s.isTarget&&(c=ut(c,s.cast)),"string"==typeof c&&"@"===c[0]&&(c=ut(c.slice(1),s.cast)),!Jn(c)&&s.cast&&(c=s.cast(c)),o[s.name]?(o[s.name]=Array.isArray(o[s.name])?o[s.name]:[o[s.name]],o[s.name].push(c)):o[s.name]=c}return o}var lt=function(e){var n=[],t=e.split(":")[0];return Qn(e,":")&&(n=e.split(":").slice(1).join(":").split(",")),{name:t,params:n}};function ut(e,n){var t=function(t){var i=t[e];return n?n(i):i};return t.__locatorRef=e,t}function ht(e,n,t){return void 0===t&&(t={}),zn(this,void 0,void 0,(function(){var i,a,o,r,s,c;return Hn(this,(function(d){switch(d.label){case 0:return i=null==t?void 0:t.bails,a=null==t?void 0:t.skipIfEmpty,[4,pt({name:(null==t?void 0:t.name)||"{field}",rules:ct(n),bails:null==i||i,skipIfEmpty:null==a||a,forceRequired:!1,crossTable:(null==t?void 0:t.values)||{},names:(null==t?void 0:t.names)||{},customMessages:(null==t?void 0:t.customMessages)||{}},e,t)];case 1:return o=d.sent(),r=[],s={},c={},o.errors.forEach((function(e){var n=e.msg();r.push(n),s[e.rule]=n,c[e.rule]=e.msg})),[2,{valid:o.valid,required:o.required,errors:r,failedRules:s,regenerateMap:c}]}}))}))}function pt(e,n,t){var i=(void 0===t?{}:t).isInitial,a=void 0!==i&&i;return zn(this,void 0,void 0,(function(){var t,i,o,r,s,c,d,l,u;return Hn(this,(function(h){switch(h.label){case 0:return[4,ft(e,n)];case 1:if(t=h.sent(),i=t.shouldSkip,o=t.required,r=t.errors,i)return[2,{valid:!r.length,required:o,errors:r}];s=Object.keys(e.rules).filter((function(e){return!at.isRequireRule(e)})),c=s.length,d=0,h.label=2;case 2:return d<c?a&&at.isLazy(s[d])?[3,4]:(l=s[d],[4,mt(e,n,{name:l,params:e.rules[l]})]):[3,5];case 3:if(!(u=h.sent()).valid&&u.error&&(r.push(u.error),e.bails))return[2,{valid:!1,required:o,errors:r}];h.label=4;case 4:return d++,[3,2];case 5:return[2,{valid:!r.length,required:o,errors:r}]}}))}))}function ft(e,n){return zn(this,void 0,void 0,(function(){var t,i,a,o,r,s,c,d,l;return Hn(this,(function(u){switch(u.label){case 0:t=Object.keys(e.rules).filter(at.isRequireRule),i=t.length,a=[],o=Vn(n)||""===n||(h=n,Array.isArray(h)&&0===h.length),r=o&&e.skipIfEmpty,c=0,u.label=1;case 1:return c<i?(d=t[c],[4,mt(e,n,{name:d,params:e.rules[d]})]):[3,4];case 2:if(l=u.sent(),!$n(l))throw new Error("Require rules has to return an object (see docs)");if(void 0!==l.required&&(s=l.required),!l.valid&&l.error&&(a.push(l.error),e.bails))return[2,{shouldSkip:!0,required:l.required,errors:a}];u.label=3;case 3:return c++,[3,1];case 4:return(!o||s||e.skipIfEmpty)&&(e.bails||r)?[2,{shouldSkip:!s&&o,required:s,errors:a}]:[2,{shouldSkip:!1,required:s,errors:a}]}var h}))}))}function mt(e,n,t){return zn(this,void 0,void 0,(function(){var i,a,o,r,s;return Hn(this,(function(c){switch(c.label){case 0:if(!(i=at.getRuleDefinition(t.name))||!i.validate)throw new Error("No such validator '"+t.name+"' exists.");return a=i.castValue?i.castValue(n):n,o=function(e,n){if(Array.isArray(e))return e.map((function(e){var t="string"==typeof e&&"@"===e[0]?e.slice(1):e;return t in n?n[t]:e}));var t={};return Object.keys(e).forEach((function(i){t[i]=function(e){if(Jn(e))return e(n);return e}(e[i])})),t}(t.params,e.crossTable),[4,i.validate(a,o)];case 1:return"string"==typeof(r=c.sent())?(s=Ln(Ln({},o||{}),{_field_:e.name,_value_:n,_rule_:t.name}),[2,{valid:!1,error:{rule:t.name,msg:function(){return tt(r,s)}}}]):($n(r)||(r={valid:r}),[2,{valid:r.valid,required:r.required,error:r.valid?void 0:bt(e,n,i,t.name,o)}])}}))}))}function bt(e,n,t,i,a){var o,r=null!==(o=e.customMessages[i])&&void 0!==o?o:t.message,s=function(e,n,t){var i=n.params;if(!i)return{};if(i.filter((function(e){return e.isTarget})).length<=0)return{};var a={},o=e.rules[t];!Array.isArray(o)&&$n(o)&&(o=i.map((function(e){return o[e.name]})));for(var r=0;r<i.length;r++){var s=i[r],c=o[r];if(Jn(c)){c=c.__locatorRef;var d=e.names[c]||c;a[s.name]=d,a["_"+s.name+"_"]=e.crossTable[c]}}return a}(e,t,i),c=function(e,n,t,i){var a={},o=e.rules[t],r=n.params||[];if(!o)return{};return Object.keys(o).forEach((function(n,t){var i=o[n];if(!Jn(i))return{};var s=r[t];if(!s)return{};var c=i.__locatorRef;a[s.name]=e.names[c]||c,a["_"+s.name+"_"]=e.crossTable[c]})),{userTargets:a,userMessage:i}}(e,t,i,r),d=c.userTargets,l=c.userMessage,u=Ln(Ln(Ln(Ln({},a||{}),{_field_:e.name,_value_:n,_rule_:i}),s),d);return{msg:function(){return function(e,n,t){if("function"==typeof e)return e(n,t);return tt(e,Ln(Ln({},t),{_field_:n}))}(l||st().defaultMessage,e.name,u)},rule:i}}var yt={aggressive:function(){return{on:["input","blur"]}},eager:function(e){return e.errors.length?{on:["input","change"]}:{on:["change","blur"]}},passive:function(){return{on:[]}},lazy:function(){return{on:["change","blur"]}}},gt=new a.default;!function(){function e(e,n){this.container={},this.locale=e,this.merge(n)}e.prototype.resolve=function(e,n,t){return this.format(this.locale,e,n,t)},e.prototype.format=function(e,n,t,i){var a,o,r,s,c,d,l,u,h,p=null===(r=null===(o=null===(a=this.container[e])||void 0===a?void 0:a.fields)||void 0===o?void 0:o[n])||void 0===r?void 0:r[t],f=null===(c=null===(s=this.container[e])||void 0===s?void 0:s.messages)||void 0===c?void 0:c[t];return(h=p||f||"")||(h="{_field_} is not valid"),n=null!==(u=null===(l=null===(d=this.container[e])||void 0===d?void 0:d.names)||void 0===l?void 0:l[n])&&void 0!==u?u:n,Xn(h)?h(n,i):tt(h,Ln(Ln({},i),{_field_:n}))},e.prototype.merge=function(e){et(this.container,e)},e.prototype.hasRule=function(e){var n,t;return!!(null===(t=null===(n=this.container[this.locale])||void 0===n?void 0:n.messages)||void 0===t?void 0:t[e])}}();var vt=function e(n,t){if(n===t)return!0;if(n&&t&&"object"==typeof n&&"object"==typeof t){if(n.constructor!==t.constructor)return!1;var i,a,o;if(Array.isArray(n)){if((i=n.length)!=t.length)return!1;for(a=i;0!=a--;)if(!e(n[a],t[a]))return!1;return!0}if(n.constructor===RegExp)return n.source===t.source&&n.flags===t.flags;if(n.valueOf!==Object.prototype.valueOf)return n.valueOf()===t.valueOf();if(n.toString!==Object.prototype.toString)return n.toString()===t.toString();if((i=(o=Object.keys(n)).length)!==Object.keys(t).length)return!1;for(a=i;0!=a--;)if(!Object.prototype.hasOwnProperty.call(t,o[a]))return!1;for(a=i;0!=a--;){var r=o[a];if(!e(n[r],t[r]))return!1}return!0}return n!=n&&t!=t};function wt(e){var n,t,i;if(!(i=e)||!("undefined"!=typeof Event&&Xn(Event)&&i instanceof Event||i&&i.srcElement))return e;var a=e.target;if("file"===a.type&&a.files)return Wn(a.files);if(null===(n=a._vModifiers)||void 0===n?void 0:n.number){var o=parseFloat(a.value);return Gn(o)?a.value:o}return(null===(t=a._vModifiers)||void 0===t?void 0:t.trim)&&"string"==typeof a.value?a.value.trim():a.value}var Pt=function(e){var n,t=(null===(n=e.data)||void 0===n?void 0:n.attrs)||e.elm;return!("input"!==e.tag||t&&t.type)||("textarea"===e.tag||Qn(["text","password","search","email","tel","url","number"],null==t?void 0:t.type))};function Tt(e){if(e.data){var n,t,i,a,o=e.data;if("model"in o)return o.model;if(e.data.directives)return n=e.data.directives,t=function(e){return"model"===e.name},i=Array.isArray(n)?n:Wn(n),-1===(a=Yn(i,t))?void 0:i[a]}}function At(e){var n,t,i=Tt(e);if(i)return{value:i.value};var a=qt(e),o=(null==a?void 0:a.prop)||"value";return(null===(n=e.componentOptions)||void 0===n?void 0:n.propsData)&&o in e.componentOptions.propsData?{value:e.componentOptions.propsData[o]}:(null===(t=e.data)||void 0===t?void 0:t.domProps)&&"value"in e.data.domProps?{value:e.data.domProps.value}:void 0}function It(e){return Array.isArray(e)||void 0===At(e)?function(e){return Array.isArray(e)?e:Array.isArray(e.children)?e.children:e.componentOptions&&Array.isArray(e.componentOptions.children)?e.componentOptions.children:[]}(e).reduce((function(e,n){var t=It(n);return t.length&&e.push.apply(e,t),e}),[]):[e]}function qt(e){return e.componentOptions?e.componentOptions.Ctor.options.model:null}function St(e,n,t){if(Vn(e[n]))e[n]=[t];else{if(Xn(e[n])&&e[n].fns){var i=e[n];return i.fns=Array.isArray(i.fns)?i.fns:[i.fns],void(Qn(i.fns,t)||i.fns.push(t))}if(Xn(e[n])){var a=e[n];e[n]=[a]}Array.isArray(e[n])&&!Qn(e[n],t)&&e[n].push(t)}}function kt(e,n,t){e.componentOptions?function(e,n,t){e.componentOptions&&(e.componentOptions.listeners||(e.componentOptions.listeners={}),St(e.componentOptions.listeners,n,t))}(e,n,t):function(e,n,t){e.data||(e.data={}),Vn(e.data.on)&&(e.data.on={}),St(e.data.on,n,t)}(e,n,t)}function Mt(e,n){var t;return e.componentOptions?(qt(e)||{event:"input"}).event:(null===(t=null==n?void 0:n.modifiers)||void 0===t?void 0:t.lazy)?"change":Pt(e)?"input":"change"}function Ct(e){var n,t=null===(n=e.data)||void 0===n?void 0:n.attrs;if(!Qn(["input","select","textarea"],e.tag)||!t)return{};var i={};return"required"in t&&!1!==t.required&&at.getRuleDefinition("required")&&(i.required="checkbox"!==t.type||[!0]),Pt(e)?ct(Ln(Ln({},i),function(e){var n,t=null===(n=e.data)||void 0===n?void 0:n.attrs,i={};return t?("email"===t.type&&at.getRuleDefinition("email")&&(i.email=["multiple"in t]),t.pattern&&at.getRuleDefinition("regex")&&(i.regex=t.pattern),t.maxlength>=0&&at.getRuleDefinition("max")&&(i.max=t.maxlength),t.minlength>=0&&at.getRuleDefinition("min")&&(i.min=t.minlength),"number"===t.type&&(Kn(t.min)&&at.getRuleDefinition("min_value")&&(i.min_value=Number(t.min)),Kn(t.max)&&at.getRuleDefinition("max_value")&&(i.max_value=Number(t.max))),i):i}(e))):ct(i)}function Ot(e,n){return e.$scopedSlots.default?e.$scopedSlots.default(n)||[]:e.$slots.default||[]}function jt(e,n){return!(e._ignoreImmediate||!e.immediate)||(t=e.value,i=n,!(Gn(t)&&Gn(i)||t===i||!e.normalizedEvents.length)||(!!e._needsValidation||!e.initialized&&void 0===n));var t,i}function xt(e){return Ln(Ln({},e.flags),{errors:e.errors,classes:e.classes,failedRules:e.failedRules,reset:function(){return e.reset()},validate:function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return e.validate.apply(e,n)},ariaInput:{"aria-invalid":e.flags.invalid?"true":"false","aria-required":e.isRequired?"true":"false","aria-errormessage":"vee_"+e.id},ariaMsg:{id:"vee_"+e.id,"aria-live":e.errors.length?"assertive":"off"}})}function Rt(e,n){e.initialized||(e.initialValue=n);var t=jt(e,n);if(e._needsValidation=!1,e.value=n,e._ignoreImmediate=!0,t){var i=function(){if(e.immediate||e.flags.validated)return Et(e);e.validateSilent()};e.initialized?i():e.$once("hook:mounted",(function(){return i()}))}}function Dt(e){return(Xn(e.mode)?e.mode:yt[e.mode])(e)}function Et(e){var n=e.validateSilent();return e._pendingValidation=n,n.then((function(t){return n===e._pendingValidation&&(e.applyResult(t),e._pendingValidation=void 0),t}))}function Ft(e){e.$veeOnInput||(e.$veeOnInput=function(n){e.syncValue(n),e.setFlags({dirty:!0,pristine:!1})});var n=e.$veeOnInput;e.$veeOnBlur||(e.$veeOnBlur=function(){e.setFlags({touched:!0,untouched:!1})});var t=e.$veeOnBlur,i=e.$veeHandler,a=Dt(e);return i&&e.$veeDebounce===e.debounce||(i=nt((function(){e.$nextTick((function(){e._pendingReset||Et(e),e._pendingReset=!1}))}),a.debounce||e.debounce),e.$veeHandler=i,e.$veeDebounce=e.debounce),{onInput:n,onBlur:t,onValidate:i}}var Nt=0;var Bt=a.default.extend({name:"ValidationProvider",inject:{$_veeObserver:{from:"$_veeObserver",default:function(){return this.$vnode.context.$_veeObserver||(this.$vnode.context.$_veeObserver={refs:{},observe:function(e){this.refs[e.id]=e},unobserve:function(e){delete this.refs[e]}}),this.$vnode.context.$_veeObserver}}},props:{vid:{type:String,default:""},name:{type:String,default:null},mode:{type:[String,Function],default:function(){return st().mode}},rules:{type:[Object,String],default:null},immediate:{type:Boolean,default:!1},bails:{type:Boolean,default:function(){return st().bails}},skipIfEmpty:{type:Boolean,default:function(){return st().skipOptional}},debounce:{type:Number,default:0},tag:{type:String,default:"span"},slim:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},customMessages:{type:Object,default:function(){return{}}},detectInput:{type:Boolean,default:!0}},watch:{rules:{deep:!0,handler:function(e,n){this._needsValidation=!vt(e,n)}}},data:function(){return{errors:[],value:void 0,initialized:!1,initialValue:void 0,flags:{untouched:!0,touched:!1,dirty:!1,pristine:!0,valid:!1,invalid:!1,validated:!1,pending:!1,required:!1,changed:!1,passed:!1,failed:!1},failedRules:{},isActive:!0,fieldName:"",id:""}},computed:{fieldDeps:function(){var e=this;return Object.keys(this.normalizedRules).reduce((function(n,t){var i=function(e){return Array.isArray(e)?e.filter((function(e){return Jn(e)||"string"==typeof e&&"@"===e[0]})):Object.keys(e).filter((function(n){return Jn(e[n])})).map((function(n){return e[n]}))}(e.normalizedRules[t]).map((function(e){return Jn(e)?e.__locatorRef:e.slice(1)}));return n.push.apply(n,i),i.forEach((function(n){!function e(n,t,i){void 0===i&&(i=!0);var a=n.$_veeObserver.refs;n._veeWatchers||(n._veeWatchers={});if(!a[t]&&i)return n.$once("hook:mounted",(function(){e(n,t,!1)}));!Xn(n._veeWatchers[t])&&a[t]&&(n._veeWatchers[t]=a[t].$watch("value",(function(){var e=n.checkComputesRequiredState();n.flags.validated&&(n._needsValidation=!0,n.validate()),e&&!n.flags.validated&&n.validateSilent()})))}(e,n)})),n}),[])},normalizedEvents:function(){var e=this;return(Dt(this).on||[]).map((function(n){return"input"===n?e._inputEventName:n}))},isRequired:function(){var e=Ln(Ln({},this._resolvedRules),this.normalizedRules),n=Object.keys(e).some(at.isRequireRule);return this.flags.required=!!n,n},classes:function(){return function(e,n){for(var t={},i=Object.keys(n),a=i.length,o=function(a){var o=i[a],r=e&&e[o]||o,s=n[o];return Vn(s)?"continue":"valid"!==o&&"invalid"!==o||n.validated?void("string"==typeof r?t[r]=s:Array.isArray(r)&&r.forEach((function(e){t[e]=s}))):"continue"},r=0;r<a;r++)o(r);return t}(st().classes,this.flags)},normalizedRules:function(){return ct(this.rules)}},mounted:function(){var e=this,n=function(){if(e.flags.validated){var n=e._regenerateMap;if(n){var t=[],i={};return Object.keys(n).forEach((function(e){var a=n[e]();t.push(a),i[e]=a})),void e.applyResult({errors:t,failedRules:i,regenerateMap:n})}e.validate()}};gt.$on("change:locale",n),this.$on("hook:beforeDestroy",(function(){gt.$off("change:locale",n)}))},render:function(e){var n=this;this.registerField();var t=Ot(this,xt(this));if(this.detectInput){var i=It(t);i.length&&i.forEach((function(e,t){var i,a,o,r,s,c;if(Qn(["checkbox","radio"],null===(a=null===(i=e.data)||void 0===i?void 0:i.attrs)||void 0===a?void 0:a.type)||!(t>0)){var d=st().useConstraintAttrs?Ct(e):{};vt(n._resolvedRules,d)||(n._needsValidation=!0),Qn(["input","select","textarea"],e.tag)&&(n.fieldName=(null===(r=null===(o=e.data)||void 0===o?void 0:o.attrs)||void 0===r?void 0:r.name)||(null===(c=null===(s=e.data)||void 0===s?void 0:s.attrs)||void 0===c?void 0:c.id)),n._resolvedRules=d,function(e,n){var t=At(n);e._inputEventName=e._inputEventName||Mt(n,Tt(n)),Rt(e,null==t?void 0:t.value);var i=Ft(e),a=i.onInput,o=i.onBlur,r=i.onValidate;kt(n,e._inputEventName,a),kt(n,"blur",o),e.normalizedEvents.forEach((function(e){kt(n,e,r)})),e.initialized=!0}(n,e)}}))}return this.slim&&t.length<=1?t[0]:e(this.tag,t)},beforeDestroy:function(){this.$_veeObserver.unobserve(this.id)},activated:function(){this.isActive=!0},deactivated:function(){this.isActive=!1},methods:{setFlags:function(e){var n=this;Object.keys(e).forEach((function(t){n.flags[t]=e[t]}))},syncValue:function(e){var n=wt(e);this.value=n,this.flags.changed=!vt(this.initialValue,n)},reset:function(){var e=this;this.errors=[],this.initialValue=this.value;var n={untouched:!0,touched:!1,dirty:!1,pristine:!0,valid:!1,invalid:!1,validated:!1,pending:!1,required:!1,changed:!1,passed:!1,failed:!1};n.required=this.isRequired,this.setFlags(n),this.failedRules={},this.validateSilent(),this._pendingValidation=void 0,this._pendingReset=!0,setTimeout((function(){e._pendingReset=!1}),this.debounce)},validate:function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return zn(this,void 0,void 0,(function(){return Hn(this,(function(n){return e.length>0&&this.syncValue(e[0]),[2,Et(this)]}))}))},validateSilent:function(){return zn(this,void 0,void 0,(function(){var e,n;return Hn(this,(function(t){switch(t.label){case 0:return this.setFlags({pending:!0}),e=Ln(Ln({},this._resolvedRules),this.normalizedRules),Object.defineProperty(e,"_$$isNormalized",{value:!0,writable:!1,enumerable:!1,configurable:!1}),[4,ht(this.value,e,Ln(Ln({name:this.name||this.fieldName},(i=this,a=i.$_veeObserver.refs,{names:{},values:{}},i.fieldDeps.reduce((function(e,n){return a[n]?(e.values[n]=a[n].value,e.names[n]=a[n].name,e):e}),{names:{},values:{}}))),{bails:this.bails,skipIfEmpty:this.skipIfEmpty,isInitial:!this.initialized,customMessages:this.customMessages}))];case 1:return n=t.sent(),this.setFlags({pending:!1,valid:n.valid,invalid:!n.valid}),void 0!==n.required&&this.setFlags({required:n.required}),[2,n]}var i,a}))}))},setErrors:function(e){this.applyResult({errors:e,failedRules:{}})},applyResult:function(e){var n=e.errors,t=e.failedRules,i=e.regenerateMap;this.errors=n,this._regenerateMap=i,this.failedRules=Ln({},t||{}),this.setFlags({valid:!n.length,passed:!n.length,invalid:!!n.length,failed:!!n.length,validated:!0,changed:!vt(this.value,this.initialValue)})},registerField:function(){!function(e){var n=function(e){if(e.vid)return e.vid;if(e.name)return e.name;if(e.id)return e.id;if(e.fieldName)return e.fieldName;return"_vee_"+ ++Nt}(e),t=e.id;if(!e.isActive||t===n&&e.$_veeObserver.refs[t])return;t!==n&&e.$_veeObserver.refs[t]===e&&e.$_veeObserver.unobserve(t);e.id=n,e.$_veeObserver.observe(e)}(this)},checkComputesRequiredState:function(){var e=Ln(Ln({},this._resolvedRules),this.normalizedRules);return Object.keys(e).some(at.isRequireRule)}}});var Ut=[["pristine","every"],["dirty","some"],["touched","some"],["untouched","every"],["valid","every"],["invalid","some"],["pending","some"],["validated","every"],["changed","some"],["passed","every"],["failed","some"]],Lt=0;var zt=a.default.extend({name:"ValidationObserver",provide:function(){return{$_veeObserver:this}},inject:{$_veeObserver:{from:"$_veeObserver",default:function(){return this.$vnode.context.$_veeObserver?this.$vnode.context.$_veeObserver:null}}},props:{tag:{type:String,default:"span"},vid:{type:String,default:function(){return"obs_"+Lt++}},slim:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1}},data:function(){return{id:"",refs:{},observers:[],errors:{},flags:Gt(),fields:{}}},created:function(){var e=this;this.id=this.vid,_t(this);var n=nt((function(n){var t=n.errors,i=n.flags,a=n.fields;e.errors=t,e.flags=i,e.fields=a}),16);this.$watch(Vt,n)},activated:function(){_t(this)},deactivated:function(){Ht(this)},beforeDestroy:function(){Ht(this)},render:function(e){var n,t=Ot(this,Ln(Ln({},(n=this).flags),{errors:n.errors,fields:n.fields,validate:n.validate,validateWithInfo:n.validateWithInfo,passes:n.handleSubmit,handleSubmit:n.handleSubmit,reset:n.reset}));return this.slim&&t.length<=1?t[0]:e(this.tag,{on:this.$listeners},t)},methods:{observe:function(e,n){var t;void 0===n&&(n="provider"),"observer"!==n?this.refs=Ln(Ln({},this.refs),((t={})[e.id]=e,t)):this.observers.push(e)},unobserve:function(e,n){if(void 0===n&&(n="provider"),"provider"!==n){var t=Yn(this.observers,(function(n){return n.id===e}));-1!==t&&this.observers.splice(t,1)}else{if(!this.refs[e])return;this.$delete(this.refs,e)}},validateWithInfo:function(e){var n=(void 0===e?{}:e).silent,t=void 0!==n&&n;return zn(this,void 0,void 0,(function(){var e,n,i,a,o,r;return Hn(this,(function(s){switch(s.label){case 0:return[4,Promise.all(_n(Zn(this.refs).filter((function(e){return!e.disabled})).map((function(e){return e[t?"validateSilent":"validate"]().then((function(e){return e.valid}))})),this.observers.filter((function(e){return!e.disabled})).map((function(e){return e.validate({silent:t})}))))];case 1:return e=s.sent(),n=e.every((function(e){return e})),i=Vt.call(this),a=i.errors,o=i.flags,r=i.fields,this.errors=a,this.flags=o,this.fields=r,[2,{errors:a,flags:o,fields:r,isValid:n}]}}))}))},validate:function(e){var n=(void 0===e?{}:e).silent,t=void 0!==n&&n;return zn(this,void 0,void 0,(function(){return Hn(this,(function(e){switch(e.label){case 0:return[4,this.validateWithInfo({silent:t})];case 1:return[2,e.sent().isValid]}}))}))},handleSubmit:function(e){return zn(this,void 0,void 0,(function(){return Hn(this,(function(n){switch(n.label){case 0:return[4,this.validate()];case 1:return n.sent()&&e?[2,e()]:[2]}}))}))},reset:function(){return _n(Zn(this.refs),this.observers).forEach((function(e){return e.reset()}))},setErrors:function(e){var n=this;Object.keys(e).forEach((function(t){var i=n.refs[t];if(i){var a=e[t]||[];a="string"==typeof a?[a]:a,i.setErrors(a)}})),this.observers.forEach((function(n){n.setErrors(e)}))}}});function Ht(e){e.$_veeObserver&&e.$_veeObserver.unobserve(e.id,"observer")}function _t(e){e.$_veeObserver&&e.$_veeObserver.observe(e,"observer")}function Gt(){return Ln(Ln({},{untouched:!0,touched:!1,dirty:!1,pristine:!0,valid:!1,invalid:!1,validated:!1,pending:!1,required:!1,changed:!1,passed:!1,failed:!1}),{valid:!0,invalid:!1})}function Vt(){for(var e=_n(Zn(this.refs),this.observers.filter((function(e){return!e.disabled}))),n={},t=Gt(),i={},a=e.length,o=0;o<a;o++){var r=e[o];Array.isArray(r.errors)?(n[r.id]=r.errors,i[r.id]=Ln({id:r.id,name:r.name,failedRules:r.failedRules},r.flags)):(n=Ln(Ln({},n),r.errors),i=Ln(Ln({},i),r.fields))}return Ut.forEach((function(n){var i=n[0],a=n[1];t[i]=e[a]((function(e){return e.flags[i]}))})),{errors:n,flags:t,fields:i}}var $t={en:/^[A-Z]*$/i,cs:/^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,da:/^[A-ZÆØÅ]*$/i,de:/^[A-ZÄÖÜß]*$/i,es:/^[A-ZÁÉÍÑÓÚÜ]*$/i,fa:/^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,fr:/^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,it:/^[A-Z\xC0-\xFF]*$/i,lt:/^[A-ZĄČĘĖĮŠŲŪŽ]*$/i,nl:/^[A-ZÉËÏÓÖÜ]*$/i,hu:/^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,pl:/^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,pt:/^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,ro:/^[A-ZĂÂÎŞŢ]*$/i,ru:/^[А-ЯЁ]*$/i,sk:/^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,sr:/^[A-ZČĆŽŠĐ]*$/i,sv:/^[A-ZÅÄÖ]*$/i,tr:/^[A-ZÇĞİıÖŞÜ]*$/i,uk:/^[А-ЩЬЮЯЄІЇҐ]*$/i,ar:/^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,az:/^[A-ZÇƏĞİıÖŞÜ]*$/i,el:/^[Α-ώ]*$/i,ja:/^[A-Z\u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF00-\uFFEF\u4E00-\u9FAF]*$/i,he:/^[A-Z\u05D0-\u05EA']*$/i},Kt=function(e,n){var t=(void 0===n?{}:n).locale,i=void 0===t?"":t;return Array.isArray(e)?e.every((function(e){return Kt(e,{locale:i})})):i?($t[i]||$t.en).test(e):Object.keys($t).some((function(n){return $t[n].test(e)}))},Xt={validate:Kt,params:[{name:"locale"}]},Jt={validate:function(e,n){var t=n.target;return String(e)===String(t)},params:[{name:"target",isTarget:!0}]},Yt={validate:function(e,n){var t=(void 0===n?{}:n).multiple,i=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t&&!Array.isArray(e)&&(e=String(e).split(",").map((function(e){return e.trim()}))),Array.isArray(e)?e.every((function(e){return i.test(String(e))})):i.test(String(e))},params:[{name:"multiple",default:!1}]};
/**
  * vee-validate v3.4.11
  * (c) 2021 Abdelrahman Awad
  * @license MIT
  */function Qt(e){return null==e}function Wt(e){return Array.isArray(e)&&0===e.length}var Zt=function(e,n){var t=n.length;return!Qt(e)&&(Array.isArray(e)?e.every((function(e){return Zt(e,{length:t})})):String(e).length>=t)},ei={validate:Zt,params:[{name:"length",cast:function(e){return Number(e)}}]},ni={validate:function(e,n){var t=(void 0===n?{allowFalse:!0}:n).allowFalse,i={valid:!1,required:!0};return Qt(e)||Wt(e)?i:!1!==e||t?(i.valid=!!String(e).trim().length,i):i},params:[{name:"allowFalse",default:!0}],computesRequired:!0};ot("email",Object(kn.a)(Object(kn.a)({},Yt),{},{message:"Email is not valid"})),ot("confirmed",Object(kn.a)(Object(kn.a)({},Jt),{},{message:"The password confirmation does not match"})),ot("required",Object(kn.a)(Object(kn.a)({},ni),{},{message:"This field is required"})),ot("alpha",Object(kn.a)(Object(kn.a)({},Xt),{},{message:"This field may only contain alphabetic characters"})),ot("min",Object(kn.a)(Object(kn.a)({},ei),{},{message:function(e,n){return"This field must be at least ".concat(n.length," characters")},params:["length"]})),ot("verify_password",{message:"The password must contain at least: 1 uppercase letter, 1 lowercase letter, 1 number, and one special character",validate:function(e){return new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])").test(e)}}),ot("without_space",{validate:function(e){return new RegExp("^[^\\s]+$").test(e)},message:"The field cannot contain spaces"}),ot("check_same_name",{validate:function(e,n){return!n.some((function(n){return n.appName===e}))},message:"The application with the same name already exists."});
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var ti="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,ii=function(){for(var e=["Edge","Trident","Firefox"],n=0;n<e.length;n+=1)if(ti&&navigator.userAgent.indexOf(e[n])>=0)return 1;return 0}();var ai=ti&&window.Promise?function(e){var n=!1;return function(){n||(n=!0,window.Promise.resolve().then((function(){n=!1,e()})))}}:function(e){var n=!1;return function(){n||(n=!0,setTimeout((function(){n=!1,e()}),ii))}};function oi(e){return e&&"[object Function]"==={}.toString.call(e)}function ri(e,n){if(1!==e.nodeType)return[];var t=e.ownerDocument.defaultView.getComputedStyle(e,null);return n?t[n]:t}function si(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function ci(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var n=ri(e),t=n.overflow,i=n.overflowX,a=n.overflowY;return/(auto|scroll|overlay)/.test(t+a+i)?e:ci(si(e))}function di(e){return e&&e.referenceNode?e.referenceNode:e}var li=ti&&!(!window.MSInputMethodContext||!document.documentMode),ui=ti&&/MSIE 10/.test(navigator.userAgent);function hi(e){return 11===e?li:10===e?ui:li||ui}function pi(e){if(!e)return document.documentElement;for(var n=hi(10)?document.body:null,t=e.offsetParent||null;t===n&&e.nextElementSibling;)t=(e=e.nextElementSibling).offsetParent;var i=t&&t.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(t.nodeName)&&"static"===ri(t,"position")?pi(t):t:e?e.ownerDocument.documentElement:document.documentElement}function fi(e){return null!==e.parentNode?fi(e.parentNode):e}function mi(e,n){if(!(e&&e.nodeType&&n&&n.nodeType))return document.documentElement;var t=e.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_FOLLOWING,i=t?e:n,a=t?n:e,o=document.createRange();o.setStart(i,0),o.setEnd(a,0);var r,s,c=o.commonAncestorContainer;if(e!==c&&n!==c||i.contains(a))return"BODY"===(s=(r=c).nodeName)||"HTML"!==s&&pi(r.firstElementChild)!==r?pi(c):c;var d=fi(e);return d.host?mi(d.host,n):mi(e,fi(n).host)}function bi(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",t="top"===n?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var a=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||a;return o[t]}return e[t]}function yi(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=bi(n,"top"),a=bi(n,"left"),o=t?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=a*o,e.right+=a*o,e}function gi(e,n){var t="x"===n?"Left":"Top",i="Left"===t?"Right":"Bottom";return parseFloat(e["border"+t+"Width"])+parseFloat(e["border"+i+"Width"])}function vi(e,n,t,i){return Math.max(n["offset"+e],n["scroll"+e],t["client"+e],t["offset"+e],t["scroll"+e],hi(10)?parseInt(t["offset"+e])+parseInt(i["margin"+("Height"===e?"Top":"Left")])+parseInt(i["margin"+("Height"===e?"Bottom":"Right")]):0)}function wi(e){var n=e.body,t=e.documentElement,i=hi(10)&&getComputedStyle(t);return{height:vi("Height",n,t,i),width:vi("Width",n,t,i)}}var Pi=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")},Ti=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),Ai=function(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e},Ii=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e};function qi(e){return Ii({},e,{right:e.left+e.width,bottom:e.top+e.height})}function Si(e){var n={};try{if(hi(10)){n=e.getBoundingClientRect();var t=bi(e,"top"),i=bi(e,"left");n.top+=t,n.left+=i,n.bottom+=t,n.right+=i}else n=e.getBoundingClientRect()}catch(e){}var a={left:n.left,top:n.top,width:n.right-n.left,height:n.bottom-n.top},o="HTML"===e.nodeName?wi(e.ownerDocument):{},r=o.width||e.clientWidth||a.width,s=o.height||e.clientHeight||a.height,c=e.offsetWidth-r,d=e.offsetHeight-s;if(c||d){var l=ri(e);c-=gi(l,"x"),d-=gi(l,"y"),a.width-=c,a.height-=d}return qi(a)}function ki(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=hi(10),a="HTML"===n.nodeName,o=Si(e),r=Si(n),s=ci(e),c=ri(n),d=parseFloat(c.borderTopWidth),l=parseFloat(c.borderLeftWidth);t&&a&&(r.top=Math.max(r.top,0),r.left=Math.max(r.left,0));var u=qi({top:o.top-r.top-d,left:o.left-r.left-l,width:o.width,height:o.height});if(u.marginTop=0,u.marginLeft=0,!i&&a){var h=parseFloat(c.marginTop),p=parseFloat(c.marginLeft);u.top-=d-h,u.bottom-=d-h,u.left-=l-p,u.right-=l-p,u.marginTop=h,u.marginLeft=p}return(i&&!t?n.contains(s):n===s&&"BODY"!==s.nodeName)&&(u=yi(u,n)),u}function Mi(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=e.ownerDocument.documentElement,i=ki(e,t),a=Math.max(t.clientWidth,window.innerWidth||0),o=Math.max(t.clientHeight,window.innerHeight||0),r=n?0:bi(t),s=n?0:bi(t,"left"),c={top:r-i.top+i.marginTop,left:s-i.left+i.marginLeft,width:a,height:o};return qi(c)}function Ci(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===ri(e,"position"))return!0;var t=si(e);return!!t&&Ci(t)}function Oi(e){if(!e||!e.parentElement||hi())return document.documentElement;for(var n=e.parentElement;n&&"none"===ri(n,"transform");)n=n.parentElement;return n||document.documentElement}function ji(e,n,t,i){var a=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},r=a?Oi(e):mi(e,di(n));if("viewport"===i)o=Mi(r,a);else{var s=void 0;"scrollParent"===i?"BODY"===(s=ci(si(n))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===i?e.ownerDocument.documentElement:i;var c=ki(s,r,a);if("HTML"!==s.nodeName||Ci(r))o=c;else{var d=wi(e.ownerDocument),l=d.height,u=d.width;o.top+=c.top-c.marginTop,o.bottom=l+c.top,o.left+=c.left-c.marginLeft,o.right=u+c.left}}var h="number"==typeof(t=t||0);return o.left+=h?t:t.left||0,o.top+=h?t:t.top||0,o.right-=h?t:t.right||0,o.bottom-=h?t:t.bottom||0,o}function xi(e){return e.width*e.height}function Ri(e,n,t,i,a){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var r=ji(t,i,o,a),s={top:{width:r.width,height:n.top-r.top},right:{width:r.right-n.right,height:r.height},bottom:{width:r.width,height:r.bottom-n.bottom},left:{width:n.left-r.left,height:r.height}},c=Object.keys(s).map((function(e){return Ii({key:e},s[e],{area:xi(s[e])})})).sort((function(e,n){return n.area-e.area})),d=c.filter((function(e){var n=e.width,i=e.height;return n>=t.clientWidth&&i>=t.clientHeight})),l=d.length>0?d[0].key:c[0].key,u=e.split("-")[1];return l+(u?"-"+u:"")}function Di(e,n,t){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=i?Oi(n):mi(n,di(t));return ki(t,a,i)}function Ei(e){var n=e.ownerDocument.defaultView.getComputedStyle(e),t=parseFloat(n.marginTop||0)+parseFloat(n.marginBottom||0),i=parseFloat(n.marginLeft||0)+parseFloat(n.marginRight||0);return{width:e.offsetWidth+i,height:e.offsetHeight+t}}function Fi(e){var n={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return n[e]}))}function Ni(e,n,t){t=t.split("-")[0];var i=Ei(e),a={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(t),r=o?"top":"left",s=o?"left":"top",c=o?"height":"width",d=o?"width":"height";return a[r]=n[r]+n[c]/2-i[c]/2,a[s]=t===s?n[s]-i[d]:n[Fi(s)],a}function Bi(e,n){return Array.prototype.find?e.find(n):e.filter(n)[0]}function Ui(e,n,t){return(void 0===t?e:e.slice(0,function(e,n,t){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[n]===t}));var i=Bi(e,(function(e){return e[n]===t}));return e.indexOf(i)}(e,"name",t))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&oi(t)&&(n.offsets.popper=qi(n.offsets.popper),n.offsets.reference=qi(n.offsets.reference),n=t(n,e))})),n}function Li(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=Di(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=Ri(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=Ni(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=Ui(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function zi(e,n){return e.some((function(e){var t=e.name;return e.enabled&&t===n}))}function Hi(e){for(var n=[!1,"ms","Webkit","Moz","O"],t=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<n.length;i++){var a=n[i],o=a?""+a+t:e;if(void 0!==document.body.style[o])return o}return null}function _i(){return this.state.isDestroyed=!0,zi(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Hi("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function Gi(e){var n=e.ownerDocument;return n?n.defaultView:window}function Vi(e,n,t,i){t.updateBound=i,Gi(e).addEventListener("resize",t.updateBound,{passive:!0});var a=ci(e);return function e(n,t,i,a){var o="BODY"===n.nodeName,r=o?n.ownerDocument.defaultView:n;r.addEventListener(t,i,{passive:!0}),o||e(ci(r.parentNode),t,i,a),a.push(r)}(a,"scroll",t.updateBound,t.scrollParents),t.scrollElement=a,t.eventsEnabled=!0,t}function $i(){this.state.eventsEnabled||(this.state=Vi(this.reference,this.options,this.state,this.scheduleUpdate))}function Ki(){var e,n;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,n=this.state,Gi(e).removeEventListener("resize",n.updateBound),n.scrollParents.forEach((function(e){e.removeEventListener("scroll",n.updateBound)})),n.updateBound=null,n.scrollParents=[],n.scrollElement=null,n.eventsEnabled=!1,n))}function Xi(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function Ji(e,n){Object.keys(n).forEach((function(t){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(t)&&Xi(n[t])&&(i="px"),e.style[t]=n[t]+i}))}var Yi=ti&&/Firefox/i.test(navigator.userAgent);function Qi(e,n,t){var i=Bi(e,(function(e){return e.name===n})),a=!!i&&e.some((function(e){return e.name===t&&e.enabled&&e.order<i.order}));if(!a){var o="`"+n+"`",r="`"+t+"`";console.warn(r+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return a}var Wi=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Zi=Wi.slice(3);function ea(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=Zi.indexOf(e),i=Zi.slice(t+1).concat(Zi.slice(0,t));return n?i.reverse():i}var na="flip",ta="clockwise",ia="counterclockwise";function aa(e,n,t,i){var a=[0,0],o=-1!==["right","left"].indexOf(i),r=e.split(/(\+|\-)/).map((function(e){return e.trim()})),s=r.indexOf(Bi(r,(function(e){return-1!==e.search(/,|\s/)})));r[s]&&-1===r[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var c=/\s*,\s*|\s+/,d=-1!==s?[r.slice(0,s).concat([r[s].split(c)[0]]),[r[s].split(c)[1]].concat(r.slice(s+1))]:[r];return(d=d.map((function(e,i){var a=(1===i?!o:o)?"height":"width",r=!1;return e.reduce((function(e,n){return""===e[e.length-1]&&-1!==["+","-"].indexOf(n)?(e[e.length-1]=n,r=!0,e):r?(e[e.length-1]+=n,r=!1,e):e.concat(n)}),[]).map((function(e){return function(e,n,t,i){var a=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+a[1],r=a[2];if(!o)return e;if(0===r.indexOf("%")){var s=void 0;switch(r){case"%p":s=t;break;case"%":case"%r":default:s=i}return qi(s)[n]/100*o}if("vh"===r||"vw"===r){return("vh"===r?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(e,a,n,t)}))}))).forEach((function(e,n){e.forEach((function(t,i){Xi(t)&&(a[n]+=t*("-"===e[i-1]?-1:1))}))})),a}var oa={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var n=e.placement,t=n.split("-")[0],i=n.split("-")[1];if(i){var a=e.offsets,o=a.reference,r=a.popper,s=-1!==["bottom","top"].indexOf(t),c=s?"left":"top",d=s?"width":"height",l={start:Ai({},c,o[c]),end:Ai({},c,o[c]+o[d]-r[d])};e.offsets.popper=Ii({},r,l[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,n){var t=n.offset,i=e.placement,a=e.offsets,o=a.popper,r=a.reference,s=i.split("-")[0],c=void 0;return c=Xi(+t)?[+t,0]:aa(t,o,r,s),"left"===s?(o.top+=c[0],o.left-=c[1]):"right"===s?(o.top+=c[0],o.left+=c[1]):"top"===s?(o.left+=c[0],o.top-=c[1]):"bottom"===s&&(o.left+=c[0],o.top+=c[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,n){var t=n.boundariesElement||pi(e.instance.popper);e.instance.reference===t&&(t=pi(t));var i=Hi("transform"),a=e.instance.popper.style,o=a.top,r=a.left,s=a[i];a.top="",a.left="",a[i]="";var c=ji(e.instance.popper,e.instance.reference,n.padding,t,e.positionFixed);a.top=o,a.left=r,a[i]=s,n.boundaries=c;var d=n.priority,l=e.offsets.popper,u={primary:function(e){var t=l[e];return l[e]<c[e]&&!n.escapeWithReference&&(t=Math.max(l[e],c[e])),Ai({},e,t)},secondary:function(e){var t="right"===e?"left":"top",i=l[t];return l[e]>c[e]&&!n.escapeWithReference&&(i=Math.min(l[t],c[e]-("right"===e?l.width:l.height))),Ai({},t,i)}};return d.forEach((function(e){var n=-1!==["left","top"].indexOf(e)?"primary":"secondary";l=Ii({},l,u[n](e))})),e.offsets.popper=l,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var n=e.offsets,t=n.popper,i=n.reference,a=e.placement.split("-")[0],o=Math.floor,r=-1!==["top","bottom"].indexOf(a),s=r?"right":"bottom",c=r?"left":"top",d=r?"width":"height";return t[s]<o(i[c])&&(e.offsets.popper[c]=o(i[c])-t[d]),t[c]>o(i[s])&&(e.offsets.popper[c]=o(i[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,n){var t;if(!Qi(e.instance.modifiers,"arrow","keepTogether"))return e;var i=n.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var a=e.placement.split("-")[0],o=e.offsets,r=o.popper,s=o.reference,c=-1!==["left","right"].indexOf(a),d=c?"height":"width",l=c?"Top":"Left",u=l.toLowerCase(),h=c?"left":"top",p=c?"bottom":"right",f=Ei(i)[d];s[p]-f<r[u]&&(e.offsets.popper[u]-=r[u]-(s[p]-f)),s[u]+f>r[p]&&(e.offsets.popper[u]+=s[u]+f-r[p]),e.offsets.popper=qi(e.offsets.popper);var m=s[u]+s[d]/2-f/2,b=ri(e.instance.popper),y=parseFloat(b["margin"+l]),g=parseFloat(b["border"+l+"Width"]),v=m-e.offsets.popper[u]-y-g;return v=Math.max(Math.min(r[d]-f,v),0),e.arrowElement=i,e.offsets.arrow=(Ai(t={},u,Math.round(v)),Ai(t,h,""),t),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,n){if(zi(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var t=ji(e.instance.popper,e.instance.reference,n.padding,n.boundariesElement,e.positionFixed),i=e.placement.split("-")[0],a=Fi(i),o=e.placement.split("-")[1]||"",r=[];switch(n.behavior){case na:r=[i,a];break;case ta:r=ea(i);break;case ia:r=ea(i,!0);break;default:r=n.behavior}return r.forEach((function(s,c){if(i!==s||r.length===c+1)return e;i=e.placement.split("-")[0],a=Fi(i);var d=e.offsets.popper,l=e.offsets.reference,u=Math.floor,h="left"===i&&u(d.right)>u(l.left)||"right"===i&&u(d.left)<u(l.right)||"top"===i&&u(d.bottom)>u(l.top)||"bottom"===i&&u(d.top)<u(l.bottom),p=u(d.left)<u(t.left),f=u(d.right)>u(t.right),m=u(d.top)<u(t.top),b=u(d.bottom)>u(t.bottom),y="left"===i&&p||"right"===i&&f||"top"===i&&m||"bottom"===i&&b,g=-1!==["top","bottom"].indexOf(i),v=!!n.flipVariations&&(g&&"start"===o&&p||g&&"end"===o&&f||!g&&"start"===o&&m||!g&&"end"===o&&b),w=!!n.flipVariationsByContent&&(g&&"start"===o&&f||g&&"end"===o&&p||!g&&"start"===o&&b||!g&&"end"===o&&m),P=v||w;(h||y||P)&&(e.flipped=!0,(h||y)&&(i=r[c+1]),P&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=i+(o?"-"+o:""),e.offsets.popper=Ii({},e.offsets.popper,Ni(e.instance.popper,e.offsets.reference,e.placement)),e=Ui(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var n=e.placement,t=n.split("-")[0],i=e.offsets,a=i.popper,o=i.reference,r=-1!==["left","right"].indexOf(t),s=-1===["top","left"].indexOf(t);return a[r?"left":"top"]=o[t]-(s?a[r?"width":"height"]:0),e.placement=Fi(n),e.offsets.popper=qi(a),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Qi(e.instance.modifiers,"hide","preventOverflow"))return e;var n=e.offsets.reference,t=Bi(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(n.bottom<t.top||n.left>t.right||n.top>t.bottom||n.right<t.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,n){var t=n.x,i=n.y,a=e.offsets.popper,o=Bi(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var r=void 0!==o?o:n.gpuAcceleration,s=pi(e.instance.popper),c=Si(s),d={position:a.position},l=function(e,n){var t=e.offsets,i=t.popper,a=t.reference,o=Math.round,r=Math.floor,s=function(e){return e},c=o(a.width),d=o(i.width),l=-1!==["left","right"].indexOf(e.placement),u=-1!==e.placement.indexOf("-"),h=n?l||u||c%2==d%2?o:r:s,p=n?o:s;return{left:h(c%2==1&&d%2==1&&!u&&n?i.left-1:i.left),top:p(i.top),bottom:p(i.bottom),right:h(i.right)}}(e,window.devicePixelRatio<2||!Yi),u="bottom"===t?"top":"bottom",h="right"===i?"left":"right",p=Hi("transform"),f=void 0,m=void 0;if(m="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-c.height+l.bottom:l.top,f="right"===h?"HTML"===s.nodeName?-s.clientWidth+l.right:-c.width+l.right:l.left,r&&p)d[p]="translate3d("+f+"px, "+m+"px, 0)",d[u]=0,d[h]=0,d.willChange="transform";else{var b="bottom"===u?-1:1,y="right"===h?-1:1;d[u]=m*b,d[h]=f*y,d.willChange=u+", "+h}var g={"x-placement":e.placement};return e.attributes=Ii({},g,e.attributes),e.styles=Ii({},d,e.styles),e.arrowStyles=Ii({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var n,t;return Ji(e.instance.popper,e.styles),n=e.instance.popper,t=e.attributes,Object.keys(t).forEach((function(e){!1!==t[e]?n.setAttribute(e,t[e]):n.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&Ji(e.arrowElement,e.arrowStyles),e},onLoad:function(e,n,t,i,a){var o=Di(a,n,e,t.positionFixed),r=Ri(t.placement,o,n,e,t.modifiers.flip.boundariesElement,t.modifiers.flip.padding);return n.setAttribute("x-placement",r),Ji(n,{position:t.positionFixed?"fixed":"absolute"}),t},gpuAcceleration:void 0}}},ra=function(){function e(n,t){var i=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Pi(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=ai(this.update.bind(this)),this.options=Ii({},e.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=n&&n.jquery?n[0]:n,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(Ii({},e.Defaults.modifiers,a.modifiers)).forEach((function(n){i.options.modifiers[n]=Ii({},e.Defaults.modifiers[n]||{},a.modifiers?a.modifiers[n]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return Ii({name:e},i.options.modifiers[e])})).sort((function(e,n){return e.order-n.order})),this.modifiers.forEach((function(e){e.enabled&&oi(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)})),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return Ti(e,[{key:"update",value:function(){return Li.call(this)}},{key:"destroy",value:function(){return _i.call(this)}},{key:"enableEventListeners",value:function(){return $i.call(this)}},{key:"disableEventListeners",value:function(){return Ki.call(this)}}]),e}();ra.Utils=("undefined"!=typeof window?window:global).PopperUtils,ra.placements=Wi,ra.Defaults=oa;function sa(){return(sa=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}var ca="undefined"!=typeof window&&"undefined"!=typeof document,da=ca?navigator.userAgent:"",la=/MSIE |Trident\//.test(da),ua=/UCBrowser\//.test(da),ha=ca&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,pa={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",triggerTarget:null,updateDuration:0,wait:null,zIndex:9999},fa=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],ma=ca?Element.prototype:{},ba=ma.matches||ma.matchesSelector||ma.webkitMatchesSelector||ma.mozMatchesSelector||ma.msMatchesSelector;function ya(e){return[].slice.call(e)}function ga(e,n){return va(e,(function(e){return ba.call(e,n)}))}function va(e,n){for(;e;){if(n(e))return e;e=e.parentElement}return null}var wa={passive:!0},Pa=".".concat("tippy-popper"),Ta=".".concat("tippy-tooltip"),Aa=".".concat("tippy-content"),Ia=".".concat("tippy-backdrop"),qa=".".concat("tippy-arrow"),Sa=".".concat("tippy-roundarrow"),ka=!1;function Ma(){ka||(ka=!0,ha&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",Oa))}var Ca=0;function Oa(){var e=performance.now();e-Ca<20&&(ka=!1,document.removeEventListener("mousemove",Oa),ha||document.body.classList.remove("tippy-iOS")),Ca=e}function ja(){var e=document.activeElement;e&&e.blur&&e._tippy&&e.blur()}var xa=Object.keys(pa);function Ra(e){return!!e._tippy&&!ba.call(e,Pa)}function Da(e,n){return{}.hasOwnProperty.call(e,n)}function Ea(e,n,t){if(Array.isArray(e)){var i=e[n];return null==i?t:i}return e}function Fa(e,n){return 0===n?e:function(i){clearTimeout(t),t=setTimeout((function(){e(i)}),n)};var t}function Na(e,n){return e&&e.modifiers&&e.modifiers[n]}function Ba(e,n){return e.indexOf(n)>-1}function Ua(e){return e instanceof Element}function La(e){return!(!e||!Da(e,"isVirtual"))||Ua(e)}function za(e,n){return"function"==typeof e?e.apply(null,n):e}function Ha(e,n){e.filter((function(e){return"flip"===e.name}))[0].enabled=n}function _a(){return document.createElement("div")}function Ga(e,n){e.forEach((function(e){e&&(e.style.transitionDuration="".concat(n,"ms"))}))}function Va(e,n){e.forEach((function(e){e&&e.setAttribute("data-state",n)}))}function $a(e,n){var t=sa({},n,{content:za(n.content,[e])},n.ignoreAttributes?{}:function(e){return xa.reduce((function(n,t){var i=(e.getAttribute("data-tippy-".concat(t))||"").trim();if(!i)return n;if("content"===t)n[t]=i;else try{n[t]=JSON.parse(i)}catch(e){n[t]=i}return n}),{})}(e));return(t.arrow||ua)&&(t.animateFill=!1),t}function Ka(e,n){Object.keys(e).forEach((function(e){if(!Da(n,e))throw new Error("[tippy]: `".concat(e,"` is not a valid option"))}))}function Xa(e,n){e.innerHTML=Ua(n)?n.innerHTML:n}function Ja(e,n){if(Ua(n.content))Xa(e,""),e.appendChild(n.content);else if("function"!=typeof n.content){e[n.allowHTML?"innerHTML":"textContent"]=n.content}}function Ya(e){return{tooltip:e.querySelector(Ta),backdrop:e.querySelector(Ia),content:e.querySelector(Aa),arrow:e.querySelector(qa)||e.querySelector(Sa)}}function Qa(e){e.setAttribute("data-inertia","")}function Wa(e){var n=_a();return"round"===e?(n.className="tippy-roundarrow",Xa(n,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):n.className="tippy-arrow",n}function Za(){var e=_a();return e.className="tippy-backdrop",e.setAttribute("data-state","hidden"),e}function eo(e,n){e.setAttribute("tabindex","-1"),n.setAttribute("data-interactive","")}function no(e,n,t){var i=ua&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";e[n+"EventListener"](i,t)}function to(e){var n=e.getAttribute("x-placement");return n?n.split("-")[0]:""}function io(e,n,t){t.split(" ").forEach((function(t){e.classList[n](t+"-theme")}))}function ao(e,n){var t=_a();t.className="tippy-popper",t.id="tippy-".concat(e),t.style.zIndex=""+n.zIndex,t.style.position="absolute",t.style.top="0",t.style.left="0",n.role&&t.setAttribute("role",n.role);var i=_a();i.className="tippy-tooltip",i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.setAttribute("data-state","hidden"),io(i,"add",n.theme);var a=_a();return a.className="tippy-content",a.setAttribute("data-state","hidden"),n.interactive&&eo(t,i),n.arrow&&i.appendChild(Wa(n.arrowType)),n.animateFill&&(i.appendChild(Za()),i.setAttribute("data-animatefill","")),n.inertia&&Qa(i),Ja(a,n),i.appendChild(a),t.appendChild(i),t}function oo(e,n,t){var i=Ya(e),a=i.tooltip,o=i.content,r=i.backdrop,s=i.arrow;e.style.zIndex=""+t.zIndex,a.setAttribute("data-size",t.size),a.setAttribute("data-animation",t.animation),a.style.maxWidth=t.maxWidth+("number"==typeof t.maxWidth?"px":""),t.role?e.setAttribute("role",t.role):e.removeAttribute("role"),n.content!==t.content&&Ja(o,t),!n.animateFill&&t.animateFill?(a.appendChild(Za()),a.setAttribute("data-animatefill","")):n.animateFill&&!t.animateFill&&(a.removeChild(r),a.removeAttribute("data-animatefill")),!n.arrow&&t.arrow?a.appendChild(Wa(t.arrowType)):n.arrow&&!t.arrow&&a.removeChild(s),n.arrow&&t.arrow&&n.arrowType!==t.arrowType&&a.replaceChild(Wa(t.arrowType),s),!n.interactive&&t.interactive?eo(e,a):n.interactive&&!t.interactive&&function(e,n){e.removeAttribute("tabindex"),n.removeAttribute("data-interactive")}(e,a),!n.inertia&&t.inertia?Qa(a):n.inertia&&!t.inertia&&function(e){e.removeAttribute("data-inertia")}(a),n.theme!==t.theme&&(io(a,"remove",n.theme),io(a,"add",t.theme))}var ro=1,so=[];function co(e,n){var t,i,a,o,r,s=$a(e,n);if(!s.multiple&&e._tippy)return null;var c,d,l,u,h,p=!1,f=!1,m=!1,b=!1,y=[],g=Fa(U,s.interactiveDebounce),v=ro++,w=ao(v,s),P=Ya(w),T={id:v,reference:e,popper:w,popperChildren:P,popperInstance:null,props:s,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:Q,set:W,setContent:function(e){W({content:e})},show:Z,hide:ee,enable:function(){T.state.isEnabled=!0},disable:function(){T.state.isEnabled=!1},destroy:function(n){if(T.state.isDestroyed)return;f=!0,T.state.isMounted&&ee(0);F(),delete e._tippy;var t=T.props.target;t&&n&&Ua(e)&&ya(e.querySelectorAll(t)).forEach((function(e){e._tippy&&e._tippy.destroy()}));T.popperInstance&&T.popperInstance.destroy();f=!1,T.state.isDestroyed=!0}};return e._tippy=T,w._tippy=T,E(),s.lazy||$(),s.showOnInit&&X(),!s.a11y||s.target||(!Ua(h=q())||ba.call(h,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")&&!h.hasAttribute("disabled"))||q().setAttribute("tabindex","0"),w.addEventListener("mouseenter",(function(e){T.props.interactive&&T.state.isVisible&&"mouseenter"===t&&X(e,!0)})),w.addEventListener("mouseleave",(function(){T.props.interactive&&"mouseenter"===t&&document.addEventListener("mousemove",g)})),T;function A(){document.removeEventListener("mousemove",N)}function I(){document.body.removeEventListener("mouseleave",J),document.removeEventListener("mousemove",g),so=so.filter((function(e){return e!==g}))}function q(){return T.props.triggerTarget||e}function S(){document.addEventListener("click",Y,!0)}function k(){document.removeEventListener("click",Y,!0)}function M(){return[T.popperChildren.tooltip,T.popperChildren.backdrop,T.popperChildren.content]}function C(){var e=T.props.followCursor;return e&&"focus"!==t||ka&&"initial"===e}function O(){Ga([w],la?0:T.props.updateDuration);var n=e.getBoundingClientRect();!function t(){var i=e.getBoundingClientRect();n.top===i.top&&n.right===i.right&&n.bottom===i.bottom&&n.left===i.left||T.popperInstance.scheduleUpdate(),n=i,T.state.isMounted&&requestAnimationFrame(t)}()}function j(e,n){R(e,(function(){!T.state.isVisible&&w.parentNode&&w.parentNode.contains(w)&&n()}))}function x(e,n){R(e,n)}function R(e,n){var t=T.popperChildren.tooltip;function i(e){e.target===t&&(no(t,"remove",i),n())}if(0===e)return n();no(t,"remove",l),no(t,"add",i),l=i}function D(e,n){var t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];q().addEventListener(e,n,t),y.push({eventType:e,handler:n,options:t})}function E(){T.props.touchHold&&!T.props.target&&(D("touchstart",B,wa),D("touchend",L,wa)),T.props.trigger.trim().split(" ").forEach((function(e){if("manual"!==e)if(T.props.target)switch(e){case"mouseenter":D("mouseover",H),D("mouseout",_);break;case"focus":D("focusin",H),D("focusout",_);break;case"click":D(e,H)}else switch(D(e,B),e){case"mouseenter":D("mouseleave",L);break;case"focus":D(la?"focusout":"blur",z)}}))}function F(){y.forEach((function(e){var n=e.eventType,t=e.handler,i=e.options;q().removeEventListener(n,t,i)})),y=[]}function N(n){var t=i=n,a=t.clientX,o=t.clientY;if(u){var r=va(n.target,(function(n){return n===e})),s=e.getBoundingClientRect(),c=T.props.followCursor,d="horizontal"===c,l="vertical"===c,h=Ba(["top","bottom"],to(w)),p=w.getAttribute("x-placement"),f=!!p&&!!p.split("-")[1],m=h?w.offsetWidth:w.offsetHeight,b=m/2,y=h?0:f?m:b,g=h?f?m:b:0;!r&&T.props.interactive||(T.popperInstance.reference=sa({},T.popperInstance.reference,{referenceNode:e,clientWidth:0,clientHeight:0,getBoundingClientRect:function(){return{width:h?m:0,height:h?0:m,top:(d?s.top:o)-y,bottom:(d?s.bottom:o)+y,left:(l?s.left:a)-g,right:(l?s.right:a)+g}}}),T.popperInstance.update()),"initial"===c&&T.state.isVisible&&A()}}function B(e){T.state.isEnabled&&!G(e)&&(T.state.isVisible||(t=e.type,e instanceof MouseEvent&&(i=e,so.forEach((function(n){return n(e)})))),"click"===e.type&&!1!==T.props.hideOnClick&&T.state.isVisible?J():X(e))}function U(n){var t=ga(n.target,Pa)===w,i=va(n.target,(function(n){return n===e}));t||i||function(e,n,t,i){if(!e)return!0;var a=t.clientX,o=t.clientY,r=i.interactiveBorder,s=i.distance,c=n.top-o>("top"===e?r+s:r),d=o-n.bottom>("bottom"===e?r+s:r),l=n.left-a>("left"===e?r+s:r),u=a-n.right>("right"===e?r+s:r);return c||d||l||u}(to(w),w.getBoundingClientRect(),n,T.props)&&(I(),J())}function L(e){if(!G(e))return T.props.interactive?(document.body.addEventListener("mouseleave",J),document.addEventListener("mousemove",g),void so.push(g)):void J()}function z(e){e.target===q()&&(T.props.interactive&&e.relatedTarget&&w.contains(e.relatedTarget)||J())}function H(e){ga(e.target,T.props.target)&&X(e)}function _(e){ga(e.target,T.props.target)&&J()}function G(e){var n="ontouchstart"in window,t=Ba(e.type,"touch"),i=T.props.touchHold;return n&&ka&&i&&!t||ka&&!i&&t}function V(){!b&&d&&(b=!0,function(e){e.offsetHeight}(w),d())}function $(){var n=T.props.popperOptions,t=T.popperChildren,i=t.tooltip,a=t.arrow,o=Na(n,"preventOverflow");function r(e){T.props.flip&&!T.props.flipOnUpdate&&(e.flipped&&(T.popperInstance.options.placement=e.placement),Ha(T.popperInstance.modifiers,!1)),i.setAttribute("x-placement",e.placement),!1!==e.attributes["x-out-of-boundaries"]?i.setAttribute("x-out-of-boundaries",""):i.removeAttribute("x-out-of-boundaries"),c&&c!==e.placement&&m&&(i.style.transition="none",requestAnimationFrame((function(){i.style.transition=""}))),c=e.placement,m=T.state.isVisible;var n=to(w),t=i.style;t.top=t.bottom=t.left=t.right="",t[n]=-(T.props.distance-10)+"px";var a=o&&void 0!==o.padding?o.padding:4,r="number"==typeof a,s=sa({top:r?a:a.top,bottom:r?a:a.bottom,left:r?a:a.left,right:r?a:a.right},!r&&a);s[n]=r?a+T.props.distance:(a[n]||0)+T.props.distance,T.popperInstance.modifiers.filter((function(e){return"preventOverflow"===e.name}))[0].padding=s,u=s}var s=sa({eventsEnabled:!1,placement:T.props.placement},n,{modifiers:sa({},n?n.modifiers:{},{preventOverflow:sa({boundariesElement:T.props.boundary,padding:4},o),arrow:sa({element:a,enabled:!!a},Na(n,"arrow")),flip:sa({enabled:T.props.flip,padding:T.props.distance+4,behavior:T.props.flipBehavior},Na(n,"flip")),offset:sa({offset:T.props.offset},Na(n,"offset"))}),onCreate:function(e){r(e),V(),n&&n.onCreate&&n.onCreate(e)},onUpdate:function(e){r(e),V(),n&&n.onUpdate&&n.onUpdate(e)}});T.popperInstance=new ra(e,w,s)}function K(){b=!1;var n=C();T.popperInstance?(Ha(T.popperInstance.modifiers,T.props.flip),n||(T.popperInstance.reference=e,T.popperInstance.enableEventListeners()),T.popperInstance.scheduleUpdate()):($(),n||T.popperInstance.enableEventListeners());var t=T.props.appendTo,i="parent"===t?e.parentNode:za(t,[e]);i.contains(w)||(i.appendChild(w),T.props.onMount(T),T.state.isMounted=!0)}function X(e,t){if(Q(),!T.state.isVisible){if(T.props.target)return function(e){if(e){var t=ga(e.target,T.props.target);t&&!t._tippy&&co(t,sa({},T.props,{content:za(n.content,[t]),appendTo:n.appendTo,target:"",showOnInit:!0}))}}(e);if(p=!0,e&&!t&&T.props.onTrigger(T,e),T.props.wait)return T.props.wait(T,e);C()&&!T.state.isMounted&&(T.popperInstance||$(),document.addEventListener("mousemove",N)),S();var i=Ea(T.props.delay,0,pa.delay);i?a=setTimeout((function(){Z()}),i):Z()}}function J(){if(Q(),!T.state.isVisible)return A(),void k();p=!1;var e=Ea(T.props.delay,1,pa.delay);e?o=setTimeout((function(){T.state.isVisible&&ee()}),e):r=requestAnimationFrame((function(){ee()}))}function Y(e){if(!T.props.interactive||!w.contains(e.target)){if(q().contains(e.target)){if(ka)return;if(T.state.isVisible&&Ba(T.props.trigger,"click"))return}!0===T.props.hideOnClick&&(Q(),ee())}}function Q(){clearTimeout(a),clearTimeout(o),cancelAnimationFrame(r)}function W(n){Ka(n=n||{},pa),F();var t=T.props,a=$a(e,sa({},T.props,{},n,{ignoreAttributes:!0}));a.ignoreAttributes=Da(n,"ignoreAttributes")?n.ignoreAttributes||!1:t.ignoreAttributes,T.props=a,E(),I(),g=Fa(U,a.interactiveDebounce),oo(w,t,a),T.popperChildren=Ya(w),T.popperInstance&&(fa.some((function(e){return Da(n,e)&&n[e]!==t[e]}))?(T.popperInstance.destroy(),$(),T.state.isVisible&&T.popperInstance.enableEventListeners(),T.props.followCursor&&i&&N(i)):T.popperInstance.update())}function Z(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ea(T.props.duration,0,pa.duration[1]);if(!T.state.isDestroyed&&T.state.isEnabled&&(!ka||T.props.touch)&&!q().hasAttribute("disabled")&&!1!==T.props.onShow(T)){S(),w.style.visibility="visible",T.state.isVisible=!0,T.props.interactive&&q().classList.add("tippy-active");var n=M();Ga(n.concat(w),0),d=function(){if(T.state.isVisible){var t=C();t&&i?N(i):t||T.popperInstance.update(),T.popperChildren.backdrop&&(T.popperChildren.content.style.transitionDelay=Math.round(e/12)+"ms"),T.props.sticky&&O(),Ga([w],T.props.updateDuration),Ga(n,e),Va(n,"visible"),x(e,(function(){T.props.aria&&q().setAttribute("aria-".concat(T.props.aria),w.id),T.props.onShown(T),T.state.isShown=!0}))}},K()}}function ee(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ea(T.props.duration,1,pa.duration[1]);if(!T.state.isDestroyed&&(T.state.isEnabled||f)&&(!1!==T.props.onHide(T)||f)){k(),w.style.visibility="hidden",T.state.isVisible=!1,T.state.isShown=!1,m=!1,T.props.interactive&&q().classList.remove("tippy-active");var n=M();Ga(n,e),Va(n,"hidden"),j(e,(function(){p||A(),T.props.aria&&q().removeAttribute("aria-".concat(T.props.aria)),T.popperInstance.disableEventListeners(),T.popperInstance.options.placement=T.props.placement,w.parentNode.removeChild(w),T.props.onHidden(T),T.state.isMounted=!1}))}}}var lo=!1;function uo(e,n){Ka(n||{},pa),lo||(document.addEventListener("touchstart",Ma,wa),window.addEventListener("blur",ja),lo=!0);var t,i=sa({},pa,{},n);t=e,"[object Object]"!=={}.toString.call(t)||t.addEventListener||function(e){var n={isVirtual:!0,attributes:e.attributes||{},contains:function(){},setAttribute:function(n,t){e.attributes[n]=t},getAttribute:function(n){return e.attributes[n]},removeAttribute:function(n){delete e.attributes[n]},hasAttribute:function(n){return n in e.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(n){e.classList.classNames[n]=!0},remove:function(n){delete e.classList.classNames[n]},contains:function(n){return n in e.classList.classNames}}};for(var t in n)e[t]=n[t]}(e);var a=function(e){if(La(e))return[e];if(e instanceof NodeList)return ya(e);if(Array.isArray(e))return e;try{return ya(document.querySelectorAll(e))}catch(e){return[]}}(e).reduce((function(e,n){var t=n&&co(n,i);return t&&e.push(t),e}),[]);return La(e)?a[0]:a}uo.version="4.3.5",uo.defaults=pa,uo.setDefaults=function(e){Object.keys(e).forEach((function(n){pa[n]=e[n]}))},uo.hideAll=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.exclude,t=e.duration;ya(document.querySelectorAll(Pa)).forEach((function(e){var i=e._tippy;if(i){var a=!1;n&&(a=Ra(n)?i.reference===n:e===n.popper),a||i.hide(t)}}))},uo.group=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.delay,i=void 0===t?e[0].props.delay:t,a=n.duration,o=void 0===a?0:a,r=!1;function s(e){r=e,u()}function c(n){n._originalProps.onShow(n),e.forEach((function(e){e.set({duration:o}),e.state.isVisible&&e.hide()})),s(!0)}function d(e){e._originalProps.onHide(e),s(!1)}function l(e){e._originalProps.onShown(e),e.set({duration:e._originalProps.duration})}function u(){e.forEach((function(e){e.set({onShow:c,onShown:l,onHide:d,delay:r?[0,Array.isArray(i)?i[1]:i]:i,duration:r?o:e._originalProps.duration})}))}e.forEach((function(e){e._originalProps?e.set(e._originalProps):e._originalProps=sa({},e.props)})),u()},ca&&setTimeout((function(){ya(document.querySelectorAll("[data-tippy]")).forEach((function(e){var n=e.getAttribute("data-tippy");n&&uo(e,{content:n})}))})),function(e){if(ca){var n=document.createElement("style");n.type="text/css",n.textContent=e,n.setAttribute("data-tippy-stylesheet","");var t=document.head,i=t.querySelector("style,link");i?t.insertBefore(n,i):t.appendChild(n)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}');var ho="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};var po=function(e,n){return e(n={exports:{}},n.exports),n.exports}((function(e){!function(n){var t=function(e,n,i){if(!c(n)||l(n)||u(n)||h(n)||s(n))return n;var a,o=0,r=0;if(d(n))for(a=[],r=n.length;o<r;o++)a.push(t(e,n[o],i));else for(var p in a={},n)Object.prototype.hasOwnProperty.call(n,p)&&(a[e(p,i)]=t(e,n[p],i));return a},i=function(e){return p(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,(function(e,n){return n?n.toUpperCase():""}))).substr(0,1).toLowerCase()+e.substr(1)},a=function(e){var n=i(e);return n.substr(0,1).toUpperCase()+n.substr(1)},o=function(e,n){return function(e,n){var t=(n=n||{}).separator||"_",i=n.split||/(?=[A-Z])/;return e.split(i).join(t)}(e,n).toLowerCase()},r=Object.prototype.toString,s=function(e){return"function"==typeof e},c=function(e){return e===Object(e)},d=function(e){return"[object Array]"==r.call(e)},l=function(e){return"[object Date]"==r.call(e)},u=function(e){return"[object RegExp]"==r.call(e)},h=function(e){return"[object Boolean]"==r.call(e)},p=function(e){return(e-=0)==e},f=function(e,n){var t=n&&"process"in n?n.process:n;return"function"!=typeof t?e:function(n,i){return t(n,e,i)}},m={camelize:i,decamelize:o,pascalize:a,depascalize:o,camelizeKeys:function(e,n){return t(f(i,n),e)},decamelizeKeys:function(e,n){return t(f(o,n),e,n)},pascalizeKeys:function(e,n){return t(f(a,n),e)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}};e.exports?e.exports=m:n.humps=m}(ho)}));function fo(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function mo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}var bo={a11y:!0,allowHTML:!0,animateFill:!0,arrow:!1,flip:!0,flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,lazy:!0,multiple:!1,showOnInit:!1,sticky:!1,touch:!0,touchHold:!1},yo=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?mo(Object(t),!0).forEach((function(n){fo(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):mo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flipBehavior:"flip",interactiveBorder:2,interactiveDebounce:0,maxWidth:350,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",size:"regular",target:"",theme:"dark",trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},bo);var go=function(e,n,t,i,a,o,r,s,c,d){"boolean"!=typeof r&&(c=s,s=r,r=!1);var l,u="function"==typeof t?t.options:t;if(e&&e.render&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns,u._compiled=!0,a&&(u.functional=!0)),i&&(u._scopeId=i),o?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,c(e)),e&&e._registeredComponents&&e._registeredComponents.add(o)},u._ssrRegister=l):n&&(l=r?function(){n.call(this,d(this.$root.$options.shadowRoot))}:function(e){n.call(this,s(e))}),l)if(u.functional){var h=u.render;u.render=function(e,n){return l.call(n),h(e,n)}}else{var p=u.beforeCreate;u.beforeCreate=p?[].concat(p,l):[l]}return t},vo={props:["to","toSelector","toElement","content","enabled","visible","triggerTarget"],data:function(){return{tip:null,options:{}}},mounted:function(){this.init()},watch:{content:function(){this.tip&&this.tip.set(this.getOptions())},enabled:function(e){this.tip&&(e?this.tip.enable():(this.tip.hide(),this.tip.disable()))},visible:function(e){this.tip&&(e?this.tip.show():this.tip.hide())}},updated:function(){this.tip&&!this.content&&this.tip.set(this.getOptions())},beforeDestroy:function(){this.tip&&this.tip.destroy()},computed:{isManualTrigger:function(){return"manual"===this.options.trigger}},methods:{init:function(){if(this.tip){try{this.tip.destroy()}catch(e){}this.tip=null}var e=this.toElement;if(null==e&&(e=this.to?document.querySelector("[name='".concat(this.to,"']")):this.toSelector?document.querySelector(this.toSelector):this.$refs.trigger&&this.$refs.trigger.childElementCount>0?this.$refs.trigger:this.$el.parentElement),e){var n=uo(e,this.getOptions());if(n){if(Array.isArray(n)){if(!(n.length>0))return;this.tip=n[0]}this.tip=n,this.$emit("onCreate",this.tip),this.$emit("init",this.tip),!1===this.enabled&&this.tip.disable(),this.isManualTrigger&&!0===this.visible&&this.tip.show()}}},tippy:function(){return this.tip},filterOptions:function(){for(var e=function(e,n){if(bo.hasOwnProperty(e)){if(""===n)return!0;if("false"===n)return!1;if("true"===n)return!0}return n},n=0,t=Object.keys(this.options);n<t.length;n++){var i=t[n];yo.hasOwnProperty(i)?this.options[i]=e(i,this.options[i]):delete this.options[i]}return this.options},getOptions:function(){var e=this;return this.options.content=this.content?this.content:this.$refs.content,Object.assign(this.options,po.camelizeKeys(this.$attrs)),this.filterOptions(),!this.options.onShow&&this.$listeners&&this.$listeners.show&&(this.options.onShow=function(){var n;return(n=e.$listeners.show).fns.apply(n,arguments)}),!this.options.onShow&&this.$listeners&&this.$listeners.shown&&(this.options.onShown=function(){var n;return(n=e.$listeners.shown).fns.apply(n,arguments)}),!this.options.onHidden&&this.$listeners&&this.$listeners.hidden&&(this.options.onHidden=function(){var n;return(n=e.$listeners.hidden).fns.apply(n,arguments)}),!this.options.onHide&&this.$listeners&&this.$listeners.hide&&(this.options.onHide=function(){var n;return(n=e.$listeners.hide).fns.apply(n,arguments)}),!this.options.onMount&&this.$listeners&&this.$listeners.mount&&(this.options.onMount=function(){var n;return(n=e.$listeners.mount).fns.apply(n,arguments)}),this.options.triggerTarget=this.triggerTarget,this.options}}},wo=function(){var e=this.$createElement,n=this._self._c||e;return n("div",[n("div",{ref:"trigger"},[this._t("trigger")],2),this._v(" "),n("div",{ref:"content"},[this._t("default")],2)])};wo._withStripped=!0;var Po=go({render:wo,staticRenderFns:[]},void 0,vo,void 0,!1,void 0,void 0,void 0),To="tippy",Ao={install:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};function t(t,a,o){var r=o.data&&o.data.on||o.componentOptions&&o.componentOptions.listeners,s=i(a),c=Object.keys(a.modifiers||{}),d=c.find((function(e){return"arrow"!==e})),l=-1!==c.findIndex((function(e){return"arrow"===e}));s=Object.assign({},n,s),d&&(s.placement=s.placement||d),l&&(s.arrow=void 0===s.arrow||s.arrow),r&&r.show&&(s.onShow=function(){var e;return(e=r.show).fns.apply(e,arguments)}),r&&r.shown&&(s.onShown=function(){var e;(e=r.shown).fns.apply(e,arguments)}),r&&r.hidden&&(s.onHidden=function(){var e;(e=r.hidden).fns.apply(e,arguments)}),r&&r.hide&&(s.onHide=function(){var e;return(e=r.hide).fns.apply(e,arguments)}),r&&r.mount&&(s.onMount=function(){var e;(e=r.mount).fns.apply(e,arguments)}),t.getAttribute("title")&&!s.content&&(s.content=t.getAttribute("title"),t.removeAttribute("title")),t.getAttribute("content")&&!s.content&&(s.content=t.getAttribute("content")),uo(t,s),s.showOnLoad&&t._tippy.show(),e.nextTick((function(){r&&r.init&&r.init.fns(t._tippy,t)}))}function i(e){return"string"==typeof e.value?{content:e.value}:e.value||{}}To=n.directive||"tippy",uo.setDefaults(n||{}),e.directive(To,{inserted:function(n,i,a){e.nextTick((function(){t(n,i,a)}))},unbind:function(e){e._tippy&&e._tippy.destroy()},componentUpdated:function(e,n,t){if(e._tippy){var a=i(n);e.getAttribute("title")&&!a.content&&(a.content=e.getAttribute("title"),e.removeAttribute("title")),e.getAttribute("content")&&!a.content&&(a.content=e.getAttribute("content")),e._tippy.set(a)}}})}};"undefined"!=typeof window&&window.Vue&&(window.Vue.use(Ao),window.Vue.component("tippy",Po));var Io=Ao,qo=(t(353),t(354),t(355),t(356),t(209)),So=t(208),ko=t(90),Mo=t(7),Co=t(10),Oo=t(5),jo=t(2),xo=t(6),Ro=function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"getApps",value:function(){var e=xo.a.getValue(jo.v);return Oo.a.get(jo.c.replace("{userName}",e))}},{key:"postApp",value:function(e){return Oo.a.post(jo.f,e)}},{key:"updateAppById",value:function(e,n){var t=xo.a.getValue(jo.v);return Oo.a.put(jo.d.replace("{userName}",t).replace("{appId}",e),n)}},{key:"deleteAppById",value:function(e){var n=xo.a.getValue(jo.v);return Oo.a.delete(jo.d.replace("{userName}",n).replace("{appId}",e))}}]),e}(),Do={getApps:function(e){var n=e.commit,t=e.state;Ro.getApps().then((function(e){var i=e.data;n("setApplications",i),t.selectedApplication&&n("setSelectedApplication",t.selectedApplication.appId)})).catch((function(e){"No App Data present"===e.response.data.description&&n("setApplications",[])}))},postApp:function(e,n){var t=e.dispatch,i=xo.a.getValue("userName"),a=Object(kn.a)(Object(kn.a)({},n),{},{userName:i});return new Promise((function(e){Ro.postApp(a).then((function(){return t("getApps"),e(!0)})).catch(console.log)}))},updateAppById:function(e,n){var t=e.dispatch,i=e.state.selectedApplication.appId;return new Promise((function(e){Ro.updateAppById(i,n).then((function(){t("getApps"),e(!0)})).catch(console.log)}))},deleteAppById:function(e){var n=e.dispatch,t=e.state.selectedApplication.appId;return new Promise((function(e){Ro.deleteAppById(t).then((function(){return n("getApps"),e()})).catch(console.log)}))}},Eo=(t(97),{namespaced:!0,state:{applications:[],selectedApplication:null},mutations:{setApplications:function(e,n){e.applications=n},setSelectedApplication:function(e,n){e.selectedApplication=e.applications.find((function(e){return e.appId===n}))},clearSelectedApplication:function(e){e.selectedApplication=null}},actions:Do,getters:{getApplicationsList:function(e){return e.applications.map((function(e){return{appName:e.appName,appId:e.appId}}))}}}),Fo=t(98),No={namespaced:!0,state:{isLoggedUser:!1},mutations:{setLoggedUser:function(e,n){e.isLoggedUser=n}},actions:{signIn:function(e,n){var t=e.dispatch,i=e.commit;return new Promise((function(e,a){Fo.a.signIn(n).then((function(a){var o=a.data,r=o.x_user_token,s=o.id_token,c=o.expires_in,d=o.refresh_token;return xo.a.setValueWithExpires(jo.w,r,c),xo.a.setValueWithExpires(jo.i,s,c),xo.a.setValueWithExpires(jo.v,n.userName,c),xo.a.setValueWithExpires(jo.n,d,c),Oo.a.setTokens(),i("setLoggedUser",!0),t("user/getUserData",null,{root:!0}),e(!0)})).catch((function(e){return a(e)}))}))},logOut:function(e,n){var t=e.commit;return new Promise((function(e){Fo.a.logOut(n).then((function(){return xo.a.removeValues(jo.w,jo.i,jo.v,jo.n),Oo.a.removeTokens(),t("setLoggedUser",!1),t("user/clearUserData",null,{root:!0}),e(!0)})).catch(console.log)}))}}},Bo={namespaced:!0,state:{activeCodeBlock:""},mutations:{setActiveCodeBlock:function(e,n){e.activeCodeBlock=n}},actions:{}},Uo=function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"getData",value:function(){var e=xo.a.getValue(jo.v);return Oo.a.get(jo.u.replace("{userName}",e))}},{key:"updateData",value:function(e){var n=xo.a.getValue(jo.v);return Oo.a.put(jo.u.replace("{userName}",n),e)}}]),e}(),Lo=function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"getProfile",value:function(){return Oo.a.get(jo.a)}}]),e}(),zo={namespaced:!0,state:{userData:{userName:"",timeZone:"",firstName:"",lastName:"",email:"",userId:"",companyName:"",role:""}},mutations:{setUserData:function(e,n){e.userData=Object(kn.a)(Object(kn.a)({},e.userData),n)},clearUserData:function(e){e.userData={userName:"",timeZone:"",firstName:"",lastName:"",email:"",userId:"",companyName:""}}},actions:{getUserData:function(e){var n=e.commit,t=e.dispatch;Lo.getProfile().then((function(e){var i=e.data;n("setUserData",i),n("auth/setLoggedUser",!0,{root:!0}),"admin"!==i.role&&"superadmin"!==i.role||(t("admin/getAllApplications",null,{root:!0}),t("admin/getAllUsers",null,{root:!0}),t("usagePlans/getUsagePlans",null,{root:!0}))})).catch(console.log)},updateUserData:function(e,n){var t=e.commit;return new Promise((function(e){Uo.updateData(n).then((function(n){var i=n.data;return t("setUserData",i),e(!0)})).catch(console.log)}))}},getters:{getFullName:function(e){return"".concat(e.userData.firstName," ").concat(e.userData.lastName)}}},Ho=function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"getPlans",value:function(){return Oo.a.get(jo.l)}}]),e}(),_o={namespaced:!0,state:{usagePlans:[]},mutations:{setUsagePlans:function(e,n){e.usagePlans=n}},actions:{getUsagePlans:function(e){var n=e.commit;Ho.getPlans().then((function(e){var t=e.data;n("setUsagePlans",t)})).catch(console.log)}},getters:{getPublishedUsagePlans:function(e){return e.usagePlans.filter((function(e){return e.published})).map((function(e){return{value:e.id,label:e.name}}))}}},Go=(t(126),function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"get",value:function(){return Oo.a.get(jo.f)}},{key:"deleteById",value:function(e,n){return Oo.a.delete(jo.d.replace("{userName}",e).replace("{appId}",n))}}]),e}()),Vo=function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"get",value:function(){return Oo.a.get(jo.b)}},{key:"updateRole",value:function(e,n){return Oo.a.put(jo.t.replace("{userName}",e),n)}},{key:"deleteByUsername",value:function(e){return Oo.a.delete(jo.g.replace("{userName}",e))}}]),e}(),$o=function(){function e(){Object(Mo.a)(this,e)}return Object(Co.a)(e,null,[{key:"updateStateById",value:function(e){return Oo.a.post(jo.m,e)}}]),e}(),Ko={application:Eo,auth:No,codePanel:Bo,user:zo,usagePlans:_o,admin:{namespaced:!0,state:{allApplications:[],allUsers:[]},mutations:{setAllApplications:function(e,n){e.allApplications=n},setAllUsers:function(e,n){e.allUsers=n}},actions:{getAllApplications:function(e){var n=e.commit;Go.get().then((function(e){var t=e.data;n("setAllApplications",t)})).catch(console.log)},deleteApplicationByUser:function(e,n){var t=e.dispatch,i=n.userName,a=n.appId;Go.deleteById(i,a).then((function(){t("getAllApplications")})).catch(console.log)},getAllUsers:function(e){var n=e.commit;Vo.get().then((function(e){var t=e.data;n("setAllUsers",t.users)})).catch(console.log)},updateRole:function(e,n){var t=e.dispatch,i=e.state.allUsers.find((function(e){return e.userId===n})),a=i.role,o=i.userName,r=["user","admin","superadmin"],s=r.indexOf(a)+1,c={role:r[s]?r[s]:r[0]};Vo.updateRole(o,c).then((function(){t("getAllUsers")})).catch(console.log)},deleteUserByUsername:function(e,n){var t=e.dispatch;Vo.deleteByUsername(n).then((function(){t("getAllUsers")})).catch(console.log)},changePublishedState:function(e,n){var t=e.dispatch,i=n.planId,a=n.published;$o.updateStateById({planId:i,published:!a}).then((function(){t("usagePlans/getUsagePlans",null,{root:!0})})).catch(console.log)}},getters:{getCompanyByUsername:function(e){return function(n){var t;return null===(t=e.allUsers.find((function(e){return e.userName.toLowerCase()===n.toLowerCase()})))||void 0===t?void 0:t.companyName}},getAllApplications:function(e,n,t){return e.allApplications.map((function(e){var i,a=t.usagePlans.usagePlans;return Object(kn.a)(Object(kn.a)({},e),{},{company:n.getCompanyByUsername(e.userName),usagePlan:a.length?null===(i=a.find((function(n){return n.id===e.usagePlan})))||void 0===i?void 0:i.name:""})}))},getAllUsers:function(e){return e.allUsers}}}};a.default.use(ko.a);var Xo=new ko.a.Store({modules:Ko}),Jo=function(){var e=Object(i.a)(regeneratorRuntime.mark((function e(n){var i,a,o,r,s,c,d,l;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(i=n.Vue,n.options,a=n.router,n.siteData,o=n.isServer,i.mixin({store:Xo}),i.component("ValidationProvider",Bt),i.component("ValidationObserver",zt),i.component("v-select",Un.a),i.component("CodeBlock",qo.default),i.component("CodeGroup",So.default),i.use(Io),i.component("tippy",Po),r=0,s=Object.entries(Qe);r<s.length;r++)c=Object(bn.a)(s[r],2),d=c[0],l=c[1],i.component(d,l);if(o){e.next=15;break}return e.next=13,t.e(48).then(t.t.bind(null,496,7)).then((function(e){i.use(e.default)}));case 13:a.beforeEach((function(e,n,t){"/dashboard/"!==e.path||xo.a.getValue(jo.w)?t():t({path:"/login/"})})),xo.a.getValue(jo.w)&&Xo.dispatch("user/getUserData");case 15:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}();t(376);a.default.component("Example",(function(){return t.e(49).then(t.bind(null,516))})),a.default.component("Mermaid",(function(){return t.e(51).then(t.bind(null,517))})),a.default.component("SwaggerComponent",(function(){return Promise.all([t.e(0),t.e(31),t.e(52)]).then(t.bind(null,518))})),a.default.component("TabSection",(function(){return t.e(53).then(t.bind(null,387))})),a.default.component("case-study",(function(){return t.e(54).then(t.bind(null,519))})),a.default.component("IndustryHeroSection",(function(){return Promise.all([t.e(0),t.e(4),t.e(32)]).then(t.bind(null,520))})),a.default.component("contact-us-form",(function(){return t.e(26).then(t.bind(null,521))})),a.default.component("copy-btn",(function(){return t.e(55).then(t.bind(null,522))})),a.default.component("cta-2-col",(function(){return t.e(56).then(t.bind(null,523))})),a.default.component("CodeMainGroup",(function(){return Promise.all([t.e(0),t.e(25)]).then(t.bind(null,524))})),a.default.component("dashboard-content",(function(){return Promise.all([t.e(2),t.e(3),t.e(8)]).then(t.bind(null,525))})),a.default.component("IframeComponent",(function(){return t.e(50).then(t.bind(null,526))})),a.default.component("dashboard-modal",(function(){return t.e(33).then(t.bind(null,396))})),a.default.component("demo-component",(function(){return t.e(60).then(t.bind(null,527))})),a.default.component("forgot-password-confirmation",(function(){return t.e(36).then(t.bind(null,528))})),a.default.component("forgot-password-section",(function(){return t.e(37).then(t.bind(null,529))})),a.default.component("glossary-container",(function(){return t.e(61).then(t.bind(null,437))})),a.default.component("glossary-item",(function(){return t.e(62).then(t.bind(null,436))})),a.default.component("home-hero-section",(function(){return t.e(41).then(t.bind(null,530))})),a.default.component("lightbox",(function(){return Promise.all([t.e(0),t.e(4),t.e(64)]).then(t.bind(null,439))})),a.default.component("login-section",(function(){return t.e(38).then(t.bind(null,531))})),a.default.component("modal",(function(){return t.e(65).then(t.bind(null,440))})),a.default.component("search-section",(function(){return t.e(66).then(t.bind(null,406))})),a.default.component("set-new-password",(function(){return t.e(39).then(t.bind(null,532))})),a.default.component("side-code-panel",(function(){return t.e(67).then(t.bind(null,533))})),a.default.component("signup-section",(function(){return t.e(40).then(t.bind(null,534))})),a.default.component("sort-by-block",(function(){return t.e(70).then(t.bind(null,408))})),a.default.component("testimonials-carousel",(function(){return Promise.all([t.e(0),t.e(1),t.e(71)]).then(t.bind(null,535))})),a.default.component("testimonials-slide",(function(){return t.e(72).then(t.bind(null,536))})),a.default.component("use-case-card",(function(){return t.e(73).then(t.bind(null,438))})),a.default.component("user-options-block",(function(){return t.e(43).then(t.bind(null,397))})),a.default.component("view-link",(function(){return t.e(75).then(t.bind(null,537))})),a.default.component("dashboard-all-applications-tab",(function(){return Promise.all([t.e(2),t.e(10)]).then(t.bind(null,445))})),a.default.component("dashboard-all-users-tab",(function(){return Promise.all([t.e(2),t.e(3)]).then(t.bind(null,492))})),a.default.component("dashboard-DashboardCopyButton",(function(){return t.e(58).then(t.bind(null,407))})),a.default.component("dashboard-applications-child",(function(){return t.e(27).then(t.bind(null,444))})),a.default.component("dashboard-applications-tab",(function(){return t.e(22).then(t.bind(null,442))})),a.default.component("dashboard-card-links-section",(function(){return t.e(59).then(t.bind(null,400))})),a.default.component("dashboard-dashboard-tab",(function(){return t.e(23).then(t.bind(null,441))})),a.default.component("dashboard-myAccount-tab",(function(){return t.e(35).then(t.bind(null,443))})),a.default.component("dashboard-plans-tab",(function(){return Promise.all([t.e(2),t.e(9)]).then(t.bind(null,448))})),a.default.component("dashboard-table-dashboard-cell",(function(){return t.e(57).then(t.bind(null,398))})),a.default.component("dashboard-table-dashboard-table-bottom",(function(){return t.e(34).then(t.bind(null,446))})),a.default.component("dashboard-table-dashboard-table-top",(function(){return t.e(11).then(t.bind(null,447))})),a.default.component("dashboard-table-index",(function(){return t.e(2).then(t.bind(null,405))})),a.default.component("helpers-spinner-component",(function(){return t.e(63).then(t.bind(null,383))})),a.default.component("simple-accordion-accordion-item",(function(){return t.e(68).then(t.bind(null,385))})),a.default.component("simple-accordion-accordion",(function(){return t.e(69).then(t.bind(null,384))})),a.default.component("validation-FormElement",(function(){return t.e(74).then(t.bind(null,538))})),a.default.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,208))})),a.default.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,209))})),a.default.component("Badge",(function(){return Promise.all([t.e(0),t.e(28)]).then(t.bind(null,623))})),a.default.component("CodeBlock",(function(){return Promise.all([t.e(0),t.e(29)]).then(t.bind(null,539))})),a.default.component("CodeGroup",(function(){return Promise.all([t.e(0),t.e(30)]).then(t.bind(null,540))}));t(377),t(378);var Yo=[Jo,{},function(e){e.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(e){e.Vue.component("CodeCopy",On)},function(e){var n=e.Vue;e.router.options.scrollBehavior=function(e,t,i){if(i)return window.scrollTo({top:i.y,behavior:"smooth"});if(e.hash){if(n.$vuepress.$get("disableScrollBehavior"))return!1;var a=document.querySelector(e.hash);return!!a&&window.scrollTo({top:(o=a,r=document.documentElement,s=r.getBoundingClientRect(),c=o.getBoundingClientRect(),{x:c.left-s.left,y:c.top-s.top}).y,behavior:"smooth"})}return window.scrollTo({top:0,behavior:"smooth"});var o,r,s,c}}],Qo=[];t(199);function Wo(e,n){return(Wo=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}t(200);function Zo(e){return(Zo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var er=t(207),nr=t.n(er);function tr(e,n){return!n||"object"!==nr()(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function ir(e){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,i=Zo(e);if(n){var a=Zo(this).constructor;t=Reflect.construct(i,arguments,a)}else t=i.apply(this,arguments);return tr(this,t)}}var ar=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Wo(e,n)}(t,e);var n=ir(t);function t(){return Object(Mo.a)(this,t),n.apply(this,arguments)}return t}(function(){function e(){Object(Mo.a)(this,e),this.store=new a.default({data:{state:{}}})}return Object(Co.a)(e,[{key:"$get",value:function(e){return this.store.state[e]}},{key:"$set",value:function(e,n){a.default.set(this.store.state,e,n)}},{key:"$emit",value:function(){var e;(e=this.store).$emit.apply(e,arguments)}},{key:"$on",value:function(){var e;(e=this.store).$on.apply(e,arguments)}}]),e}());Object.assign(ar.prototype,{getPageAsyncComponent:un,getLayoutAsyncComponent:hn,getAsyncComponent:pn,getVueComponent:fn});var or={install:function(e){var n=new ar;e.$vuepress=n,e.prototype.$vuepress=n}};function rr(e){e.beforeEach((function(n,t,i){if(sr(e,n.path))i();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){var a=n.path.replace(/\/$/,"")+".html";sr(e,a)?i(a):i()}else i();else{var o=n.path+"/",r=n.path+".html";sr(e,r)?i(r):sr(e,o)?i(o):i()}}))}function sr(e,n){var t=n.toLowerCase();return e.options.routes.some((function(e){return e.path.toLowerCase()===t}))}var cr={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(e){var n,t,i=this.pageKey||this.$parent.$page.key;return n="pageKey",t=i,"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=t),a.default.component(i)||a.default.component(i,un(i)),a.default.component(i)?e(i):e("")}},dr={functional:!0,props:{slotKey:String,required:!0},render:function(e,n){var t=n.props,i=n.slots;return e("div",{class:["content__".concat(t.slotKey)]},i()[t.slotKey])}},lr={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},ur=(t(380),t(381),Object(Cn.a)(lr,(function(){var e=this.$createElement,n=this._self._c||e;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function hr(){return(hr=Object(i.a)(regeneratorRuntime.mark((function e(n){var t,i,o,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Nn.routerBase||Nn.base,rr(i=new Ke({base:t,mode:"history",fallback:!1,routes:Fn,scrollBehavior:function(e,n,t){return t||(e.hash?!a.default.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})}})),o={},e.prev=4,e.next=7,Promise.all(Yo.filter((function(e){return"function"==typeof e})).map((function(e){return e({Vue:a.default,options:o,router:i,siteData:Nn,isServer:n})})));case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(4),console.error(e.t0);case 12:return r=new a.default(Object.assign(o,{router:i,render:function(e){return e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Qo.map((function(n){return e(n)})))])}})),e.abrupt("return",{app:r,router:i});case 14:case"end":return e.stop()}}),e,null,[[4,9]])})))).apply(this,arguments)}a.default.config.productionTip=!1,a.default.use(Ke),a.default.use(or),a.default.mixin(function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default;Xe(n),t.$vuepress.$set("siteData",n);var i=e(t.$vuepress.$get("siteData")),o=new i,r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),s={};return Object.keys(r).reduce((function(e,n){return n.startsWith("$")&&(e[n]=r[n].get),e}),s),{computed:s}}((function(e){return function(){function n(){Object(Mo.a)(this,n)}return Object(Co.a)(n,[{key:"setPage",value:function(e){this.__page=e}},{key:"$site",get:function(){return e}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var e,n,t=this.$site.locales,i=void 0===t?{}:t;for(var a in i)"/"===a?n=i[a]:0===this.$page.path.indexOf(a)&&(e=i[a]);return e||n||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var e=this.$page.frontmatter.canonicalUrl;return"string"==typeof e&&e}},{key:"$title",get:function(){var e=this.$page,n=this.$page.frontmatter.metaTitle;if("string"==typeof n)return n;var t=this.$siteTitle,i=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?i?i+" | "+t:t:i||"VuePress"}},{key:"$description",get:function(){var e=function(e){if(e){var n=e.filter((function(e){return"description"===e.name}))[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(e,n){for(var t=0;t<e.length;t++){var i=e[t];if(i.path.toLowerCase()===n.toLowerCase())return i}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),n}()}),Nn)),a.default.component("Content",cr),a.default.component("ContentSlotsDistributor",dr),a.default.component("OutboundLink",ur),a.default.component("ClientOnly",{functional:!0,render:function(e,n){var t=n.parent,i=n.children;if(t._isMounted)return i;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),a.default.component("Layout",hn("Layout")),a.default.component("NotFound",hn("NotFound")),a.default.prototype.$withBase=function(e){var n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.8.2",hash:"c997a0ea"},function(e){return hr.apply(this,arguments)}(!1).then((function(e){var n=e.app;e.router.onReady((function(){n.$mount("#app")}))}))}]);